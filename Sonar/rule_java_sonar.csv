key,repo,name,createdAt,htmlDesc,mdDesc,severity,status,isTemplate,tags,sysTags,lang,langName,params,defaultDebtRemFnType,debtRemFnType,type,defaultRemFnType,defaultRemFnBaseEffort,remFnType,remFnBaseEffort,remFnOverloaded,scope,isExternal,descriptionSections,educationPrinciples,deprecatedKeys.deprecatedKey,defaultRemFnGapMultiplier,remFnGapMultiplier,gapDescription,internalKey
java:S1258,java,Classes and enums with private members should have a constructor,2023-06-14T03:41:52+0000,"<p>Non-abstract classes and enums with non-<code>static</code>, <code>private</code> members should explicitly initialize those members, either in a
constructor or with a default value.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class A { // Noncompliant
  private int field;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class A {
  private int field;

  A(int field) {
    this.field = field;
  }
}
</pre>
<h2>Exceptions</h2>
<ul>
  <li> Class implementing a Builder Pattern (name ending with ""Builder""). </li>
  <li> <a href=""https://docs.oracle.com/javaee/7/tutorial/index.html"">Java EE</a> class annotated with:
    <ul>
      <li> <a href=""https://docs.oracle.com/javaee/7/api/javax/annotation/ManagedBean.html"">ManagedBean</a> </li>
      <li> <a href=""https://docs.oracle.com/javaee/7/api/javax/ejb/MessageDriven.html"">MessageDriven</a> </li>
      <li> <a href=""https://docs.oracle.com/javaee/7/api/javax/ejb/Singleton.html"">Singleton</a> </li>
      <li> <a href=""https://docs.oracle.com/javaee/7/api/javax/ejb/Stateful.html"">Stateful</a> </li>
      <li> <a href=""https://docs.oracle.com/javaee/7/api/javax/ejb/Stateless.html"">Stateless</a> </li>
      <li> <a href=""https://docs.oracle.com/javaee/7/api/javax/jws/WebService.html"">WebService</a> </li>
      <li> <a href=""https://docs.oracle.com/javaee/7/api/javax/servlet/annotation/WebFilter.html"">WebFilter</a> </li>
      <li> <a href=""https://docs.oracle.com/javaee/7/api/javax/servlet/annotation/WebServlet.html"">WebServlet</a> </li>
    </ul>  </li>
  <li> Class and field annotated with:
    <ul>
      <li> <a href=""https://codehaus-plexus.github.io/plexus-containers/plexus-component-annotations/index.html"">Plexus Component Annotations</a>
      </li>
      <li> <a href=""https://maven.apache.org/developers/mojo-api-specification.html"">Maven Mojo</a> </li>
    </ul>  </li>
  <li> Field annotated with:
    <ul>
      <li> <a href=""https://docs.oracle.com/javaee/7/api/javax/annotation/Resource.html"">Resource</a> </li>
      <li> <a href=""https://docs.oracle.com/javaee/7/api/javax/ejb/EJB.html"">EJB</a> </li>
      <li> <a href=""https://docs.oracle.com/javaee/7/api/javax/inject/Inject.html"">Inject</a> </li>
      <li> <a
      href=""https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/beans/factory/annotation/Autowired.html"">Autowired</a> </li>
    </ul>  </li>
</ul>","<p>Non-abstract classes and enums with non-<code>static</code>, <code>private</code> members should explicitly initialize those members, either in a
constructor or with a default value.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class A { // Noncompliant
  private int field;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class A {
  private int field;

  A(int field) {
    this.field = field;
  }
}
</pre>
<h2>Exceptions</h2>
<ul>
  <li> Class implementing a Builder Pattern (name ending with ""Builder""). </li>
  <li> <a href=""https://docs.oracle.com/javaee/7/tutorial/index.html"">Java EE</a> class annotated with:
    <ul>
      <li> <a href=""https://docs.oracle.com/javaee/7/api/javax/annotation/ManagedBean.html"">ManagedBean</a> </li>
      <li> <a href=""https://docs.oracle.com/javaee/7/api/javax/ejb/MessageDriven.html"">MessageDriven</a> </li>
      <li> <a href=""https://docs.oracle.com/javaee/7/api/javax/ejb/Singleton.html"">Singleton</a> </li>
      <li> <a href=""https://docs.oracle.com/javaee/7/api/javax/ejb/Stateful.html"">Stateful</a> </li>
      <li> <a href=""https://docs.oracle.com/javaee/7/api/javax/ejb/Stateless.html"">Stateless</a> </li>
      <li> <a href=""https://docs.oracle.com/javaee/7/api/javax/jws/WebService.html"">WebService</a> </li>
      <li> <a href=""https://docs.oracle.com/javaee/7/api/javax/servlet/annotation/WebFilter.html"">WebFilter</a> </li>
      <li> <a href=""https://docs.oracle.com/javaee/7/api/javax/servlet/annotation/WebServlet.html"">WebServlet</a> </li>
    </ul>  </li>
  <li> Class and field annotated with:
    <ul>
      <li> <a href=""https://codehaus-plexus.github.io/plexus-containers/plexus-component-annotations/index.html"">Plexus Component Annotations</a>
      </li>
      <li> <a href=""https://maven.apache.org/developers/mojo-api-specification.html"">Maven Mojo</a> </li>
    </ul>  </li>
  <li> Field annotated with:
    <ul>
      <li> <a href=""https://docs.oracle.com/javaee/7/api/javax/annotation/Resource.html"">Resource</a> </li>
      <li> <a href=""https://docs.oracle.com/javaee/7/api/javax/ejb/EJB.html"">EJB</a> </li>
      <li> <a href=""https://docs.oracle.com/javaee/7/api/javax/inject/Inject.html"">Inject</a> </li>
      <li> <a
      href=""https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/beans/factory/annotation/Autowired.html"">Autowired</a> </li>
    </ul>  </li>
</ul>",MAJOR,READY,False,[],['pitfall'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>Non-abstract classes and enums with non-<code>static</code>, <code>private</code> members should explicitly initialize those members, either in a\nconstructor or with a default value.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass A { // Noncompliant\n  private int field;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass A {\n  private int field;\n\n  A(int field) {\n    this.field = field;\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<ul>\n  <li> Class implementing a Builder Pattern (name ending with ""Builder""). </li>\n  <li> <a href=""https://docs.oracle.com/javaee/7/tutorial/index.html"">Java EE</a> class annotated with:\n    <ul>\n      <li> <a href=""https://docs.oracle.com/javaee/7/api/javax/annotation/ManagedBean.html"">ManagedBean</a> </li>\n      <li> <a href=""https://docs.oracle.com/javaee/7/api/javax/ejb/MessageDriven.html"">MessageDriven</a> </li>\n      <li> <a href=""https://docs.oracle.com/javaee/7/api/javax/ejb/Singleton.html"">Singleton</a> </li>\n      <li> <a href=""https://docs.oracle.com/javaee/7/api/javax/ejb/Stateful.html"">Stateful</a> </li>\n      <li> <a href=""https://docs.oracle.com/javaee/7/api/javax/ejb/Stateless.html"">Stateless</a> </li>\n      <li> <a href=""https://docs.oracle.com/javaee/7/api/javax/jws/WebService.html"">WebService</a> </li>\n      <li> <a href=""https://docs.oracle.com/javaee/7/api/javax/servlet/annotation/WebFilter.html"">WebFilter</a> </li>\n      <li> <a href=""https://docs.oracle.com/javaee/7/api/javax/servlet/annotation/WebServlet.html"">WebServlet</a> </li>\n    </ul>  </li>\n  <li> Class and field annotated with:\n    <ul>\n      <li> <a href=""https://codehaus-plexus.github.io/plexus-containers/plexus-component-annotations/index.html"">Plexus Component Annotations</a>\n      </li>\n      <li> <a href=""https://maven.apache.org/developers/mojo-api-specification.html"">Maven Mojo</a> </li>\n    </ul>  </li>\n  <li> Field annotated with:\n    <ul>\n      <li> <a href=""https://docs.oracle.com/javaee/7/api/javax/annotation/Resource.html"">Resource</a> </li>\n      <li> <a href=""https://docs.oracle.com/javaee/7/api/javax/ejb/EJB.html"">EJB</a> </li>\n      <li> <a href=""https://docs.oracle.com/javaee/7/api/javax/inject/Inject.html"">Inject</a> </li>\n      <li> <a\n      href=""https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/beans/factory/annotation/Autowired.html"">Autowired</a> </li>\n    </ul>  </li>\n</ul>'}]",[],['squid:S1258'],,,,
java:S5612,java,Lambdas should not have too many lines,2023-06-14T03:41:52+0000,"<p>Lambdas (introduced with Java 8) are a very convenient and compact way to inject a behavior without having to create a dedicated class or method.
But those lambdas should be used only if the behavior to be injected can be defined in a few lines of code, otherwise the source code can quickly
become unreadable.</p>","<p>Lambdas (introduced with Java 8) are a very convenient and compact way to inject a behavior without having to create a dedicated class or method.
But those lambdas should be used only if the behavior to be injected can be defined in a few lines of code, otherwise the source code can quickly
become unreadable.</p>",MAJOR,READY,False,[],[],java,Java,"[{'key': 'Max', 'htmlDesc': 'Maximum allowed lines in a lambda', 'defaultValue': '10', 'type': 'INTEGER'}]",CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,20min,CONSTANT_ISSUE,20min,False,MAIN,False,"[{'key': 'default', 'content': '<p>Lambdas (introduced with Java 8) are a very convenient and compact way to inject a behavior without having to create a dedicated class or method.\nBut those lambdas should be used only if the behavior to be injected can be defined in a few lines of code, otherwise the source code can quickly\nbecome unreadable.</p>'}]",[],['squid:S5612'],,,,
java:S5854,java,Regexes containing characters subject to normalization should use the CANON_EQ flag,2023-06-14T03:41:52+0000,"<p>Characters like <code>'é'</code> can be expressed either as a single code point or as a cluster of the letter <code>'e'</code> and a combining
accent mark. Without the <code>CANON_EQ</code> flag, a regex will only match a string in which the characters are expressed in the same way.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String s = ""e\u0300"";
Pattern p = Pattern.compile(""é|ë|è""); // Noncompliant
System.out.println(p.matcher(s).replaceAll(""e"")); // print 'è'
</pre>
<h2>Compliant Solution</h2>
<pre>
String s = ""e\u0300"";
Pattern p = Pattern.compile(""é|ë|è"", Pattern.CANON_EQ);
System.out.println(p.matcher(s).replaceAll(""e"")); // print 'e'
</pre>","<p>Characters like <code>'é'</code> can be expressed either as a single code point or as a cluster of the letter <code>'e'</code> and a combining
accent mark. Without the <code>CANON_EQ</code> flag, a regex will only match a string in which the characters are expressed in the same way.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String s = ""e\u0300"";
Pattern p = Pattern.compile(""é|ë|è""); // Noncompliant
System.out.println(p.matcher(s).replaceAll(""e"")); // print 'è'
</pre>
<h2>Compliant Solution</h2>
<pre>
String s = ""e\u0300"";
Pattern p = Pattern.compile(""é|ë|è"", Pattern.CANON_EQ);
System.out.println(p.matcher(s).replaceAll(""e"")); // print 'e'
</pre>",MAJOR,READY,False,[],['regex'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,3min,CONSTANT_ISSUE,3min,False,ALL,False,"[{'key': 'default', 'content': '<p>Characters like <code>\'é\'</code> can be expressed either as a single code point or as a cluster of the letter <code>\'e\'</code> and a combining\naccent mark. Without the <code>CANON_EQ</code> flag, a regex will only match a string in which the characters are expressed in the same way.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString s = ""e\\u0300"";\nPattern p = Pattern.compile(""é|ë|è""); // Noncompliant\nSystem.out.println(p.matcher(s).replaceAll(""e"")); // print \'è\'\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString s = ""e\\u0300"";\nPattern p = Pattern.compile(""é|ë|è"", Pattern.CANON_EQ);\nSystem.out.println(p.matcher(s).replaceAll(""e"")); // print \'e\'\n</pre>'}]",[],['squid:S5854'],,,,
java:S1132,java,Strings literals should be placed on the left side when checking for equality,2023-06-14T03:41:52+0000,"<p>It is preferable to place string literals on the left-hand side of an <code>equals()</code> or <code>equalsIgnoreCase()</code> method call.</p>
<p>This prevents null pointer exceptions from being raised, as a string literal can never be null by definition.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String myString = null;

System.out.println(""Equal? "" + myString.equals(""foo""));                        // Noncompliant; will raise a NPE
System.out.println(""Equal? "" + (myString != null &amp;&amp; myString.equals(""foo"")));  // Noncompliant; null check could be removed
</pre>
<h2>Compliant Solution</h2>
<pre>
System.out.println(""Equal?"" + ""foo"".equals(myString));                         // properly deals with the null case
</pre>","<p>It is preferable to place string literals on the left-hand side of an <code>equals()</code> or <code>equalsIgnoreCase()</code> method call.</p>
<p>This prevents null pointer exceptions from being raised, as a string literal can never be null by definition.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String myString = null;

System.out.println(""Equal? "" + myString.equals(""foo""));                        // Noncompliant; will raise a NPE
System.out.println(""Equal? "" + (myString != null &amp;&amp; myString.equals(""foo"")));  // Noncompliant; null check could be removed
</pre>
<h2>Compliant Solution</h2>
<pre>
System.out.println(""Equal?"" + ""foo"".equals(myString));                         // properly deals with the null case
</pre>",MINOR,READY,False,[],['bad-practice'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,10min,CONSTANT_ISSUE,10min,False,ALL,False,"[{'key': 'default', 'content': '<p>It is preferable to place string literals on the left-hand side of an <code>equals()</code> or <code>equalsIgnoreCase()</code> method call.</p>\n<p>This prevents null pointer exceptions from being raised, as a string literal can never be null by definition.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString myString = null;\n\nSystem.out.println(""Equal? "" + myString.equals(""foo""));                        // Noncompliant; will raise a NPE\nSystem.out.println(""Equal? "" + (myString != null &amp;&amp; myString.equals(""foo"")));  // Noncompliant; null check could be removed\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nSystem.out.println(""Equal?"" + ""foo"".equals(myString));                         // properly deals with the null case\n</pre>'}]",[],['squid:S1132'],,,,
java:S1133,java,Deprecated code should be removed,2023-06-14T03:41:52+0000,"<p>This rule is meant to be used as a way to track code which is marked as being deprecated. Deprecated code should eventually be removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Foo {
  /**
   * @deprecated
   */
  public void foo() {    // Noncompliant
  }

  @Deprecated            // Noncompliant
  public void bar() {
  }

  public void baz() {    // Compliant
  }
}
</pre>","<p>This rule is meant to be used as a way to track code which is marked as being deprecated. Deprecated code should eventually be removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Foo {
  /**
   * @deprecated
   */
  public void foo() {    // Noncompliant
  }

  @Deprecated            // Noncompliant
  public void bar() {
  }

  public void baz() {    // Compliant
  }
}
</pre>",INFO,READY,False,[],['obsolete'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,10min,CONSTANT_ISSUE,10min,False,ALL,False,"[{'key': 'default', 'content': '<p>This rule is meant to be used as a way to track code which is marked as being deprecated. Deprecated code should eventually be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Foo {\n  /**\n   * @deprecated\n   */\n  public void foo() {    // Noncompliant\n  }\n\n  @Deprecated            // Noncompliant\n  public void bar() {\n  }\n\n  public void baz() {    // Compliant\n  }\n}\n</pre>'}]",[],['squid:S1133'],,,,
java:S1134,java,"Track uses of ""FIXME"" tags",2023-06-14T03:41:52+0000,"<p><code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.</p>
<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>
<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int divide(int numerator, int denominator) {
  return numerator / denominator;              // FIXME denominator value might be  0
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/546"">MITRE, CWE-546</a> - Suspicious Comment </li>
</ul>","<p><code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.</p>
<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>
<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int divide(int numerator, int denominator) {
  return numerator / denominator;              // FIXME denominator value might be  0
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/546"">MITRE, CWE-546</a> - Suspicious Comment </li>
</ul>",MAJOR,READY,False,[],['cwe'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,0min,CONSTANT_ISSUE,0min,False,ALL,False,"[{'key': 'default', 'content': '<p><code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.</p>\n<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>\n<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint divide(int numerator, int denominator) {\n  return numerator / denominator;              // FIXME denominator value might be  0\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/546"">MITRE, CWE-546</a> - Suspicious Comment </li>\n</ul>'}]",[],['squid:S1134'],,,,
java:S1135,java,"Track uses of ""TODO"" tags",2023-06-14T03:41:52+0000,"<p><code>TODO</code> tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.</p>
<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>
<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void doSomething() {
  // TODO
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/546"">MITRE, CWE-546</a> - Suspicious Comment </li>
</ul>","<p><code>TODO</code> tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.</p>
<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>
<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void doSomething() {
  // TODO
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/546"">MITRE, CWE-546</a> - Suspicious Comment </li>
</ul>",INFO,READY,False,[],['cwe'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,0min,CONSTANT_ISSUE,0min,False,MAIN,False,"[{'key': 'default', 'content': '<p><code>TODO</code> tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.</p>\n<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>\n<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid doSomething() {\n  // TODO\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/546"">MITRE, CWE-546</a> - Suspicious Comment </li>\n</ul>'}]",[],['squid:S1135'],,,,
java:S2221,java,"""Exception"" should not be caught when not required by called methods",2023-06-14T03:41:52+0000,"<p>Catching <code>Exception</code> seems like an efficient way to handle multiple possible exceptions. Unfortunately, it traps all exception types,
both checked and runtime exceptions, thereby casting too broad a net. Indeed, was it really the intention of developers to also catch runtime
exceptions? To prevent any misunderstanding, if both checked and runtime exceptions are really expected to be caught, they should be explicitly listed
in the <code>catch</code> clause.</p>
<p>This rule raises an issue if <code>Exception</code> is caught when it is not explicitly thrown by a method in the <code>try</code> block.</p>
<h2>Noncompliant Code Example</h2>
<pre>
try {
  // do something that might throw an UnsupportedDataTypeException or UnsupportedEncodingException
} catch (Exception e) { // Noncompliant
  // log exception ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
try {
  // do something
} catch (UnsupportedEncodingException|UnsupportedDataTypeException|RuntimeException e) {
  // log exception ...
}
</pre>
<p>or if runtime exceptions should not be caught:</p>
<pre>
try {
  // do something
} catch (UnsupportedEncodingException|UnsupportedDataTypeException e) {
  // log exception ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/396"">MITRE, CWE-396</a> - Declaration of Catch for Generic Exception </li>
</ul>","<p>Catching <code>Exception</code> seems like an efficient way to handle multiple possible exceptions. Unfortunately, it traps all exception types,
both checked and runtime exceptions, thereby casting too broad a net. Indeed, was it really the intention of developers to also catch runtime
exceptions? To prevent any misunderstanding, if both checked and runtime exceptions are really expected to be caught, they should be explicitly listed
in the <code>catch</code> clause.</p>
<p>This rule raises an issue if <code>Exception</code> is caught when it is not explicitly thrown by a method in the <code>try</code> block.</p>
<h2>Noncompliant Code Example</h2>
<pre>
try {
  // do something that might throw an UnsupportedDataTypeException or UnsupportedEncodingException
} catch (Exception e) { // Noncompliant
  // log exception ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
try {
  // do something
} catch (UnsupportedEncodingException|UnsupportedDataTypeException|RuntimeException e) {
  // log exception ...
}
</pre>
<p>or if runtime exceptions should not be caught:</p>
<pre>
try {
  // do something
} catch (UnsupportedEncodingException|UnsupportedDataTypeException e) {
  // log exception ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/396"">MITRE, CWE-396</a> - Declaration of Catch for Generic Exception </li>
</ul>",MINOR,READY,False,[],"['cwe', 'error-handling']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,15min,CONSTANT_ISSUE,15min,False,MAIN,False,"[{'key': 'default', 'content': '<p>Catching <code>Exception</code> seems like an efficient way to handle multiple possible exceptions. Unfortunately, it traps all exception types,\nboth checked and runtime exceptions, thereby casting too broad a net. Indeed, was it really the intention of developers to also catch runtime\nexceptions? To prevent any misunderstanding, if both checked and runtime exceptions are really expected to be caught, they should be explicitly listed\nin the <code>catch</code> clause.</p>\n<p>This rule raises an issue if <code>Exception</code> is caught when it is not explicitly thrown by a method in the <code>try</code> block.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry {\n  // do something that might throw an UnsupportedDataTypeException or UnsupportedEncodingException\n} catch (Exception e) { // Noncompliant\n  // log exception ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry {\n  // do something\n} catch (UnsupportedEncodingException|UnsupportedDataTypeException|RuntimeException e) {\n  // log exception ...\n}\n</pre>\n<p>or if runtime exceptions should not be caught:</p>\n<pre>\ntry {\n  // do something\n} catch (UnsupportedEncodingException|UnsupportedDataTypeException e) {\n  // log exception ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/396"">MITRE, CWE-396</a> - Declaration of Catch for Generic Exception </li>\n</ul>'}]",[],['squid:S2221'],,,,
java:S2589,java,Boolean expressions should not be gratuitous,2023-06-14T03:41:52+0000,"<p>If a boolean expression doesn’t change the evaluation of the condition, then it is entirely unnecessary, and can be removed. If it is gratuitous
because it does not match the programmer’s intent, then it’s a bug and the expression should be fixed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
a = true;
if (a) { // Noncompliant
  doSomething();
}

if (b &amp;&amp; a) { // Noncompliant; ""a"" is always ""true""
  doSomething();
}

if (c || !a) { // Noncompliant; ""!a"" is always ""false""
  doSomething();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
a = true;
if (foo(a)) {
  doSomething();
}

if (b) {
  doSomething();
}

if (c) {
  doSomething();
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/571"">MITRE, CWE-571</a> - Expression is Always True </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/570"">MITRE, CWE-570</a> - Expression is Always False </li>
</ul>","<p>If a boolean expression doesn’t change the evaluation of the condition, then it is entirely unnecessary, and can be removed. If it is gratuitous
because it does not match the programmer’s intent, then it’s a bug and the expression should be fixed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
a = true;
if (a) { // Noncompliant
  doSomething();
}

if (b &amp;&amp; a) { // Noncompliant; ""a"" is always ""true""
  doSomething();
}

if (c || !a) { // Noncompliant; ""!a"" is always ""false""
  doSomething();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
a = true;
if (foo(a)) {
  doSomething();
}

if (b) {
  doSomething();
}

if (c) {
  doSomething();
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/571"">MITRE, CWE-571</a> - Expression is Always True </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/570"">MITRE, CWE-570</a> - Expression is Always False </li>
</ul>",MAJOR,READY,False,[],"['cert', 'cwe', 'redundant', 'suspicious']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,10min,CONSTANT_ISSUE,10min,False,ALL,False,"[{'key': 'default', 'content': '<p>If a boolean expression doesn’t change the evaluation of the condition, then it is entirely unnecessary, and can be removed. If it is gratuitous\nbecause it does not match the programmer’s intent, then it’s a bug and the expression should be fixed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\na = true;\nif (a) { // Noncompliant\n  doSomething();\n}\n\nif (b &amp;&amp; a) { // Noncompliant; ""a"" is always ""true""\n  doSomething();\n}\n\nif (c || !a) { // Noncompliant; ""!a"" is always ""false""\n  doSomething();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\na = true;\nif (foo(a)) {\n  doSomething();\n}\n\nif (b) {\n  doSomething();\n}\n\nif (c) {\n  doSomething();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/571"">MITRE, CWE-571</a> - Expression is Always True </li>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/570"">MITRE, CWE-570</a> - Expression is Always False </li>\n</ul>'}]",[],['squid:S2589'],,,,
java:S3553,java,"""Optional"" should not be used for parameters",2023-06-14T03:41:52+0000,"<p>The Java language authors have been quite frank that <code>Optional</code> was intended for use only as a return type, as a way to convey that a
method may or may not return a value.</p>
<p>And for that, it’s valuable but using <code>Optional</code> on the input side increases the work you have to do in the method without really
increasing the value. With an <code>Optional</code> parameter, you go from having 2 possible inputs: null and not-null, to three: null,
non-null-without-value, and non-null-with-value. Add to that the fact that overloading has long been available to convey that some parameters are
optional, and there’s really no reason to have <code>Optional</code> parameters.</p>
<p>The rule also checks for Guava’s <code>Optional</code>, as it was the inspiration for the JDK <code>Optional</code>. Although it is different in
some aspects (serialization, being recommended for use as collection elements), using it as a parameter type causes exactly the same problems as for
JDK <code>Optional</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public String sayHello(Optional&lt;String&gt; name) {  // Noncompliant
  if (name == null || !name.isPresent()) {
    return ""Hello World"";
  } else {
    return ""Hello "" + name;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public String sayHello(String name) {
  if (name == null) {
    return ""Hello World"";
  } else {
    return ""Hello "" + name;
  }
}
</pre>
<h2>Exceptions</h2>
<p>No issues will be raised if a method is overriding, as the developer has no control over the signature at this point.</p>
<pre>
@Override
public String sayHello(Optional&lt;String&gt; name) {
  if (name == null || !name.isPresent()) {
    return ""Hello World"";
  } else {
    return ""Hello "" + name;
  }
}
</pre>","<p>The Java language authors have been quite frank that <code>Optional</code> was intended for use only as a return type, as a way to convey that a
method may or may not return a value.</p>
<p>And for that, it’s valuable but using <code>Optional</code> on the input side increases the work you have to do in the method without really
increasing the value. With an <code>Optional</code> parameter, you go from having 2 possible inputs: null and not-null, to three: null,
non-null-without-value, and non-null-with-value. Add to that the fact that overloading has long been available to convey that some parameters are
optional, and there’s really no reason to have <code>Optional</code> parameters.</p>
<p>The rule also checks for Guava’s <code>Optional</code>, as it was the inspiration for the JDK <code>Optional</code>. Although it is different in
some aspects (serialization, being recommended for use as collection elements), using it as a parameter type causes exactly the same problems as for
JDK <code>Optional</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public String sayHello(Optional&lt;String&gt; name) {  // Noncompliant
  if (name == null || !name.isPresent()) {
    return ""Hello World"";
  } else {
    return ""Hello "" + name;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public String sayHello(String name) {
  if (name == null) {
    return ""Hello World"";
  } else {
    return ""Hello "" + name;
  }
}
</pre>
<h2>Exceptions</h2>
<p>No issues will be raised if a method is overriding, as the developer has no control over the signature at this point.</p>
<pre>
@Override
public String sayHello(Optional&lt;String&gt; name) {
  if (name == null || !name.isPresent()) {
    return ""Hello World"";
  } else {
    return ""Hello "" + name;
  }
}
</pre>",MAJOR,READY,False,[],['clumsy'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>The Java language authors have been quite frank that <code>Optional</code> was intended for use only as a return type, as a way to convey that a\nmethod may or may not return a value.</p>\n<p>And for that, it’s valuable but using <code>Optional</code> on the input side increases the work you have to do in the method without really\nincreasing the value. With an <code>Optional</code> parameter, you go from having 2 possible inputs: null and not-null, to three: null,\nnon-null-without-value, and non-null-with-value. Add to that the fact that overloading has long been available to convey that some parameters are\noptional, and there’s really no reason to have <code>Optional</code> parameters.</p>\n<p>The rule also checks for Guava’s <code>Optional</code>, as it was the inspiration for the JDK <code>Optional</code>. Although it is different in\nsome aspects (serialization, being recommended for use as collection elements), using it as a parameter type causes exactly the same problems as for\nJDK <code>Optional</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic String sayHello(Optional&lt;String&gt; name) {  // Noncompliant\n  if (name == null || !name.isPresent()) {\n    return ""Hello World"";\n  } else {\n    return ""Hello "" + name;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic String sayHello(String name) {\n  if (name == null) {\n    return ""Hello World"";\n  } else {\n    return ""Hello "" + name;\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>No issues will be raised if a method is overriding, as the developer has no control over the signature at this point.</p>\n<pre>\n@Override\npublic String sayHello(Optional&lt;String&gt; name) {\n  if (name == null || !name.isPresent()) {\n    return ""Hello World"";\n  } else {\n    return ""Hello "" + name;\n  }\n}\n</pre>'}]",[],['squid:S3553'],,,,
java:S4524,java,"""default"" clauses should be last",2023-06-14T03:41:52+0000,"<p><code>switch</code> can contain a <code>default</code> clause for various reasons: to handle unexpected values, to show that all the cases were
properly considered.</p>
<p>For readability purpose, to help a developer to quickly find the default behavior of a <code>switch</code> statement, it is recommended to put the
<code>default</code> clause at the end of the <code>switch</code> statement. This rule raises an issue if the <code>default</code> clause is not the
last one of the <code>switch</code>'s cases.</p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (param) {
  case 0:
    doSomething();
    break;
  default: // default clause should be the last one
    error();
    break;
  case 1:
    doSomethingElse();
    break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch (param) {
  case 0:
    doSomething();
    break;
  case 1:
    doSomethingElse();
    break;
  default:
    error();
    break;
}
</pre>","<p><code>switch</code> can contain a <code>default</code> clause for various reasons: to handle unexpected values, to show that all the cases were
properly considered.</p>
<p>For readability purpose, to help a developer to quickly find the default behavior of a <code>switch</code> statement, it is recommended to put the
<code>default</code> clause at the end of the <code>switch</code> statement. This rule raises an issue if the <code>default</code> clause is not the
last one of the <code>switch</code>'s cases.</p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (param) {
  case 0:
    doSomething();
    break;
  default: // default clause should be the last one
    error();
    break;
  case 1:
    doSomethingElse();
    break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch (param) {
  case 0:
    doSomething();
    break;
  case 1:
    doSomethingElse();
    break;
  default:
    error();
    break;
}
</pre>",CRITICAL,READY,False,[],[],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': ""<p><code>switch</code> can contain a <code>default</code> clause for various reasons: to handle unexpected values, to show that all the cases were\nproperly considered.</p>\n<p>For readability purpose, to help a developer to quickly find the default behavior of a <code>switch</code> statement, it is recommended to put the\n<code>default</code> clause at the end of the <code>switch</code> statement. This rule raises an issue if the <code>default</code> clause is not the\nlast one of the <code>switch</code>'s cases.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (param) {\n  case 0:\n    doSomething();\n    break;\n  default: // default clause should be the last one\n    error();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (param) {\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n  default:\n    error();\n    break;\n}\n</pre>""}]",[],['squid:S4524'],,,,
java:S5853,java,"Consecutive AssertJ ""assertThat"" statements should be chained",2023-06-14T03:41:52+0000,"<p>AssertJ assertions methods targeting the same object can be chained instead of using multiple <code>assertThat</code>. It avoids duplication and
increases the clarity of the code.</p>
<p>This rule raises an issue when multiples <code>assertThat</code> target the same tested value.</p>
<h2>Noncompliant Code Example</h2>
<pre>
assertThat(someList).hasSize(3);
assertThat(someList).contains(""something"");
</pre>
<h2>Compliant Solution</h2>
<pre>
assertThat(someList)
  .hasSize(3)
  .contains(""something"");
</pre>","<p>AssertJ assertions methods targeting the same object can be chained instead of using multiple <code>assertThat</code>. It avoids duplication and
increases the clarity of the code.</p>
<p>This rule raises an issue when multiples <code>assertThat</code> target the same tested value.</p>
<h2>Noncompliant Code Example</h2>
<pre>
assertThat(someList).hasSize(3);
assertThat(someList).contains(""something"");
</pre>
<h2>Compliant Solution</h2>
<pre>
assertThat(someList)
  .hasSize(3)
  .contains(""something"");
</pre>",MINOR,READY,False,[],"['assertj', 'tests']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,TEST,False,"[{'key': 'default', 'content': '<p>AssertJ assertions methods targeting the same object can be chained instead of using multiple <code>assertThat</code>. It avoids duplication and\nincreases the clarity of the code.</p>\n<p>This rule raises an issue when multiples <code>assertThat</code> target the same tested value.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nassertThat(someList).hasSize(3);\nassertThat(someList).contains(""something"");\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nassertThat(someList)\n  .hasSize(3)\n  .contains(""something"");\n</pre>'}]",[],['squid:S5853'],,,,
java:S5970,java,Spring's ModelAndViewAssert assertions should be used instead of other assertions,2023-06-14T03:41:52+0000,"<p>The Spring framework comes with dedicated classes to help writing better and simpler unit tests. In particular, when testing applications built on
top of Spring MVC, it is recommended to use Spring’s <code>ModelAndViewAssert</code> assertions class, instead of manually testing MVC’s
properties.</p>
<p>&nbsp;</p>
<p>This rule raises an issue when&nbsp;Spring’s <code>ModelAndViewAssert</code> assertions should be used instead of manual testing.</p>
<h2>Noncompliant Code Example</h2>
<pre>
ModelAndView mav = getMyModelAndView();

Assert.assertEquals(""register"", mav.getViewName());
Assert.assertTrue((Boolean) mav.getModelMap().get(""myAttribute""));
Assert.assertFalse((Boolean) mav.getModelMap().get(""myAttribute""));
Assert.assertEquals(myObject, mav.getModelMap().get(""myAttribute""));
</pre>
<h2>Compliant Solution</h2>
<pre>
ModelAndView mav = getMyModelAndView();

ModelAndViewAssert.assertViewName(mav, ""register"");
ModelAndViewAssert.assertModelAttributeValue(mav, ""myAttribute"", Boolean.TRUE);
ModelAndViewAssert.assertModelAttributeValue(mav, ""myAttribute"", Boolean.FALSE);
ModelAndViewAssert.assertModelAttributeValue(mav, ""myAttribute"", myObject);
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/testing.html#unit-testing-spring-mvc"">Unit Testing
  Spring MVC</a> </li>
  <li> <a
  href=""https://docs.spring.io/spring-framework/docs/5.2.8.RELEASE/javadoc-api/org/springframework/test/web/ModelAndViewAssert.html"">ModelAndViewAssert Javadoc</a> </li>
</ul>","<p>The Spring framework comes with dedicated classes to help writing better and simpler unit tests. In particular, when testing applications built on
top of Spring MVC, it is recommended to use Spring’s <code>ModelAndViewAssert</code> assertions class, instead of manually testing MVC’s
properties.</p>
<p>&nbsp;</p>
<p>This rule raises an issue when&nbsp;Spring’s <code>ModelAndViewAssert</code> assertions should be used instead of manual testing.</p>
<h2>Noncompliant Code Example</h2>
<pre>
ModelAndView mav = getMyModelAndView();

Assert.assertEquals(""register"", mav.getViewName());
Assert.assertTrue((Boolean) mav.getModelMap().get(""myAttribute""));
Assert.assertFalse((Boolean) mav.getModelMap().get(""myAttribute""));
Assert.assertEquals(myObject, mav.getModelMap().get(""myAttribute""));
</pre>
<h2>Compliant Solution</h2>
<pre>
ModelAndView mav = getMyModelAndView();

ModelAndViewAssert.assertViewName(mav, ""register"");
ModelAndViewAssert.assertModelAttributeValue(mav, ""myAttribute"", Boolean.TRUE);
ModelAndViewAssert.assertModelAttributeValue(mav, ""myAttribute"", Boolean.FALSE);
ModelAndViewAssert.assertModelAttributeValue(mav, ""myAttribute"", myObject);
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/testing.html#unit-testing-spring-mvc"">Unit Testing
  Spring MVC</a> </li>
  <li> <a
  href=""https://docs.spring.io/spring-framework/docs/5.2.8.RELEASE/javadoc-api/org/springframework/test/web/ModelAndViewAssert.html"">ModelAndViewAssert Javadoc</a> </li>
</ul>",MAJOR,READY,False,[],"['spring', 'tests']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,TEST,False,"[{'key': 'default', 'content': '<p>The Spring framework comes with dedicated classes to help writing better and simpler unit tests. In particular, when testing applications built on\ntop of Spring MVC, it is recommended to use Spring’s <code>ModelAndViewAssert</code> assertions class, instead of manually testing MVC’s\nproperties.</p>\n<p>&nbsp;</p>\n<p>This rule raises an issue when&nbsp;Spring’s <code>ModelAndViewAssert</code> assertions should be used instead of manual testing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nModelAndView mav = getMyModelAndView();\n\nAssert.assertEquals(""register"", mav.getViewName());\nAssert.assertTrue((Boolean) mav.getModelMap().get(""myAttribute""));\nAssert.assertFalse((Boolean) mav.getModelMap().get(""myAttribute""));\nAssert.assertEquals(myObject, mav.getModelMap().get(""myAttribute""));\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nModelAndView mav = getMyModelAndView();\n\nModelAndViewAssert.assertViewName(mav, ""register"");\nModelAndViewAssert.assertModelAttributeValue(mav, ""myAttribute"", Boolean.TRUE);\nModelAndViewAssert.assertModelAttributeValue(mav, ""myAttribute"", Boolean.FALSE);\nModelAndViewAssert.assertModelAttributeValue(mav, ""myAttribute"", myObject);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/testing.html#unit-testing-spring-mvc"">Unit Testing\n  Spring MVC</a> </li>\n  <li> <a\n  href=""https://docs.spring.io/spring-framework/docs/5.2.8.RELEASE/javadoc-api/org/springframework/test/web/ModelAndViewAssert.html"">ModelAndViewAssert Javadoc</a> </li>\n</ul>'}]",[],['squid:S5970'],,,,
java:S5976,java,Similar tests should be grouped in a single Parameterized test,2023-06-14T03:41:52+0000,"<p>When multiple tests differ only by a few hardcoded values they should be refactored as a single ""parameterized"" test. This reduces the chances of
adding a bug and makes them more readable. Parameterized tests exist in most test frameworks (JUnit, TestNG, etc…​).</p>
<p>The right balance needs of course to be found. There is no point in factorizing test methods when the parameterized version is a lot more complex
than initial tests.</p>
<p>This rule raises an issue when at least 3 tests could be refactored as one parameterized test with less than 4 parameters. Only test methods which
have at least one duplicated statement are considered.</p>
<h2>Noncompliant Code Example</h2>
<p>with JUnit 5</p>
<pre>
import static org.junit.jupiter.api.Assertions.assertEquals;

import org.junit.jupiter.api.Test;

public class AppTest
{
    @Test
    void test_not_null1() {  // Noncompliant. The 3 following tests differ only by one hardcoded number.
      setupTax();
      assertNotNull(getTax(1));
    }

    @Test
    void test_not_null2() {
      setupTax();
      assertNotNull(getTax(2));
    }

    @Test
    void test_not_nul3l() {
      setupTax();
      assertNotNull(getTax(3));
    }

    @Test
    void testLevel1() {  // Noncompliant. The 3 following tests differ only by a few hardcoded numbers.
        setLevel(1);
        runGame();
        assertEquals(playerHealth(), 100);
    }

    @Test
    void testLevel2() {  // Similar test
        setLevel(2);
        runGame();
        assertEquals(playerHealth(), 200);
    }

    @Test
    void testLevel3() {  // Similar test
        setLevel(3);
        runGame();
        assertEquals(playerHealth(), 300);
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
import static org.junit.jupiter.api.Assertions.assertEquals;

import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;

public class AppTest
{

   @ParameterizedTest
   @ValueSource(ints = {1, 2, 3})
   void test_not_null(int arg) {
     setupTax();
     assertNotNull(getTax(arg));
   }

    @ParameterizedTest
    @CsvSource({
        ""1, 100"",
        ""2, 200"",
        ""3, 300"",
    })
    void testLevels(int level, int health) {
        setLevel(level);
        runGame();
        assertEquals(playerHealth(), health);
    }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://phauer.com/2019/modern-best-practices-testing-java/#use-parameterized-tests"">Modern Best Practices for Testing in Java -
  Philipp Hauer</a> </li>
  <li> <a href=""https://junit.org/junit5/docs/current/user-guide/#writing-tests-parameterized-tests"">JUnit 5 documentation - Parameterized tests</a>
  </li>
  <li> <a href=""https://www.testwithspring.com/lesson/writing-parameterized-tests-with-junit-4/"">Writing Parameterized Tests With JUnit 4</a> </li>
  <li> <a href=""https://testng.org/doc/documentation-main.html#parameters"">TestNG documentation - Parameters</a> </li>
</ul>","<p>When multiple tests differ only by a few hardcoded values they should be refactored as a single ""parameterized"" test. This reduces the chances of
adding a bug and makes them more readable. Parameterized tests exist in most test frameworks (JUnit, TestNG, etc…​).</p>
<p>The right balance needs of course to be found. There is no point in factorizing test methods when the parameterized version is a lot more complex
than initial tests.</p>
<p>This rule raises an issue when at least 3 tests could be refactored as one parameterized test with less than 4 parameters. Only test methods which
have at least one duplicated statement are considered.</p>
<h2>Noncompliant Code Example</h2>
<p>with JUnit 5</p>
<pre>
import static org.junit.jupiter.api.Assertions.assertEquals;

import org.junit.jupiter.api.Test;

public class AppTest
{
    @Test
    void test_not_null1() {  // Noncompliant. The 3 following tests differ only by one hardcoded number.
      setupTax();
      assertNotNull(getTax(1));
    }

    @Test
    void test_not_null2() {
      setupTax();
      assertNotNull(getTax(2));
    }

    @Test
    void test_not_nul3l() {
      setupTax();
      assertNotNull(getTax(3));
    }

    @Test
    void testLevel1() {  // Noncompliant. The 3 following tests differ only by a few hardcoded numbers.
        setLevel(1);
        runGame();
        assertEquals(playerHealth(), 100);
    }

    @Test
    void testLevel2() {  // Similar test
        setLevel(2);
        runGame();
        assertEquals(playerHealth(), 200);
    }

    @Test
    void testLevel3() {  // Similar test
        setLevel(3);
        runGame();
        assertEquals(playerHealth(), 300);
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
import static org.junit.jupiter.api.Assertions.assertEquals;

import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;

public class AppTest
{

   @ParameterizedTest
   @ValueSource(ints = {1, 2, 3})
   void test_not_null(int arg) {
     setupTax();
     assertNotNull(getTax(arg));
   }

    @ParameterizedTest
    @CsvSource({
        ""1, 100"",
        ""2, 200"",
        ""3, 300"",
    })
    void testLevels(int level, int health) {
        setLevel(level);
        runGame();
        assertEquals(playerHealth(), health);
    }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://phauer.com/2019/modern-best-practices-testing-java/#use-parameterized-tests"">Modern Best Practices for Testing in Java -
  Philipp Hauer</a> </li>
  <li> <a href=""https://junit.org/junit5/docs/current/user-guide/#writing-tests-parameterized-tests"">JUnit 5 documentation - Parameterized tests</a>
  </li>
  <li> <a href=""https://www.testwithspring.com/lesson/writing-parameterized-tests-with-junit-4/"">Writing Parameterized Tests With JUnit 4</a> </li>
  <li> <a href=""https://testng.org/doc/documentation-main.html#parameters"">TestNG documentation - Parameters</a> </li>
</ul>",MAJOR,READY,False,[],"['bad-practice', 'clumsy', 'tests']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,10min,CONSTANT_ISSUE,10min,False,TEST,False,"[{'key': 'default', 'content': '<p>When multiple tests differ only by a few hardcoded values they should be refactored as a single ""parameterized"" test. This reduces the chances of\nadding a bug and makes them more readable. Parameterized tests exist in most test frameworks (JUnit, TestNG, etc…\u200b).</p>\n<p>The right balance needs of course to be found. There is no point in factorizing test methods when the parameterized version is a lot more complex\nthan initial tests.</p>\n<p>This rule raises an issue when at least 3 tests could be refactored as one parameterized test with less than 4 parameters. Only test methods which\nhave at least one duplicated statement are considered.</p>\n<h2>Noncompliant Code Example</h2>\n<p>with JUnit 5</p>\n<pre>\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport org.junit.jupiter.api.Test;\n\npublic class AppTest\n{\n    @Test\n    void test_not_null1() {  // Noncompliant. The 3 following tests differ only by one hardcoded number.\n      setupTax();\n      assertNotNull(getTax(1));\n    }\n\n    @Test\n    void test_not_null2() {\n      setupTax();\n      assertNotNull(getTax(2));\n    }\n\n    @Test\n    void test_not_nul3l() {\n      setupTax();\n      assertNotNull(getTax(3));\n    }\n\n    @Test\n    void testLevel1() {  // Noncompliant. The 3 following tests differ only by a few hardcoded numbers.\n        setLevel(1);\n        runGame();\n        assertEquals(playerHealth(), 100);\n    }\n\n    @Test\n    void testLevel2() {  // Similar test\n        setLevel(2);\n        runGame();\n        assertEquals(playerHealth(), 200);\n    }\n\n    @Test\n    void testLevel3() {  // Similar test\n        setLevel(3);\n        runGame();\n        assertEquals(playerHealth(), 300);\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.CsvSource;\n\npublic class AppTest\n{\n\n   @ParameterizedTest\n   @ValueSource(ints = {1, 2, 3})\n   void test_not_null(int arg) {\n     setupTax();\n     assertNotNull(getTax(arg));\n   }\n\n    @ParameterizedTest\n    @CsvSource({\n        ""1, 100"",\n        ""2, 200"",\n        ""3, 300"",\n    })\n    void testLevels(int level, int health) {\n        setLevel(level);\n        runGame();\n        assertEquals(playerHealth(), health);\n    }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://phauer.com/2019/modern-best-practices-testing-java/#use-parameterized-tests"">Modern Best Practices for Testing in Java -\n  Philipp Hauer</a> </li>\n  <li> <a href=""https://junit.org/junit5/docs/current/user-guide/#writing-tests-parameterized-tests"">JUnit 5 documentation - Parameterized tests</a>\n  </li>\n  <li> <a href=""https://www.testwithspring.com/lesson/writing-parameterized-tests-with-junit-4/"">Writing Parameterized Tests With JUnit 4</a> </li>\n  <li> <a href=""https://testng.org/doc/documentation-main.html#parameters"">TestNG documentation - Parameters</a> </li>\n</ul>'}]",[],['squid:S5976'],,,,
java:S5977,java,Tests should use fixed data instead of randomized data,2023-06-14T03:41:52+0000,"<p>Tests should always:</p>
<ul>
  <li> Make sure that production code behaves as expected, including edge cases. </li>
  <li> Be easy to debug, i.e. understandable and reproducible. </li>
</ul>
<p>Using random values in tests will not necessarily check edge cases, and it will make test logs a lot harder to read. It is better to use easily
readable hardcoded values. If this makes your code bigger you can use helper functions.</p>
<p>There is one valid use case for random data in tests: when testing every value would make tests impractically slow. In this case the best you can
do is use random to test every value on the long run. You should however make sure that random values are logged so that you can reproduce failures.
Some libraries exist to make all this easier. You can for example use property-based testing libraries such as <a
href=""https://github.com/jlink/jqwik"">jqwik</a>.</p>
<p>This rule raises an issue when <code>new Random()</code> or <code>UUID.randomUUID()</code> are called in test code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int userAge = new Random().nextInt(42);  // Noncompliant
UUID userID = UUID.randomUUID(); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
int userAge = 31;
UUID userID = UUID.fromString(""00000000-000-0000-0000-000000000001"");
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://phauer.com/2019/modern-best-practices-testing-java/#use-fixed-data-instead-of-randomized-data"">Modern Best Practices for
  Testing in Java - Philipp Hauer</a> </li>
  <li> <a href=""https://jqwik.net/"">Jqwik test engine</a> </li>
</ul>","<p>Tests should always:</p>
<ul>
  <li> Make sure that production code behaves as expected, including edge cases. </li>
  <li> Be easy to debug, i.e. understandable and reproducible. </li>
</ul>
<p>Using random values in tests will not necessarily check edge cases, and it will make test logs a lot harder to read. It is better to use easily
readable hardcoded values. If this makes your code bigger you can use helper functions.</p>
<p>There is one valid use case for random data in tests: when testing every value would make tests impractically slow. In this case the best you can
do is use random to test every value on the long run. You should however make sure that random values are logged so that you can reproduce failures.
Some libraries exist to make all this easier. You can for example use property-based testing libraries such as <a
href=""https://github.com/jlink/jqwik"">jqwik</a>.</p>
<p>This rule raises an issue when <code>new Random()</code> or <code>UUID.randomUUID()</code> are called in test code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int userAge = new Random().nextInt(42);  // Noncompliant
UUID userID = UUID.randomUUID(); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
int userAge = 31;
UUID userID = UUID.fromString(""00000000-000-0000-0000-000000000001"");
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://phauer.com/2019/modern-best-practices-testing-java/#use-fixed-data-instead-of-randomized-data"">Modern Best Practices for
  Testing in Java - Philipp Hauer</a> </li>
  <li> <a href=""https://jqwik.net/"">Jqwik test engine</a> </li>
</ul>",MAJOR,READY,False,[],"['confusing', 'design', 'tests']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,10min,CONSTANT_ISSUE,10min,False,TEST,False,"[{'key': 'default', 'content': '<p>Tests should always:</p>\n<ul>\n  <li> Make sure that production code behaves as expected, including edge cases. </li>\n  <li> Be easy to debug, i.e. understandable and reproducible. </li>\n</ul>\n<p>Using random values in tests will not necessarily check edge cases, and it will make test logs a lot harder to read. It is better to use easily\nreadable hardcoded values. If this makes your code bigger you can use helper functions.</p>\n<p>There is one valid use case for random data in tests: when testing every value would make tests impractically slow. In this case the best you can\ndo is use random to test every value on the long run. You should however make sure that random values are logged so that you can reproduce failures.\nSome libraries exist to make all this easier. You can for example use property-based testing libraries such as <a\nhref=""https://github.com/jlink/jqwik"">jqwik</a>.</p>\n<p>This rule raises an issue when <code>new Random()</code> or <code>UUID.randomUUID()</code> are called in test code.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint userAge = new Random().nextInt(42);  // Noncompliant\nUUID userID = UUID.randomUUID(); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint userAge = 31;\nUUID userID = UUID.fromString(""00000000-000-0000-0000-000000000001"");\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://phauer.com/2019/modern-best-practices-testing-java/#use-fixed-data-instead-of-randomized-data"">Modern Best Practices for\n  Testing in Java - Philipp Hauer</a> </li>\n  <li> <a href=""https://jqwik.net/"">Jqwik test engine</a> </li>\n</ul>'}]",[],['squid:S5977'],,,,
java:S1130,java,"""throws"" declarations should not be superfluous",2023-06-14T03:41:52+0000,"<p>An exception in a <code>throws</code> declaration in Java is superfluous if it is:</p>
<ul>
  <li> listed multiple times </li>
  <li> a subclass of another listed exception </li>
  <li> completely unnecessary because the declared exception type cannot actually be thrown </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
void foo() throws MyException, MyException {}  // Noncompliant; should be listed once
void bar() throws Throwable, Exception {}  // Noncompliant; Exception is a subclass of Throwable
</pre>
<h2>Compliant Solution</h2>
<pre>
void foo() throws MyException {}
void bar() throws Throwable {}
</pre>
<h2>Exceptions</h2>
<p>The rule will not raise any issue for exceptions that cannot be thrown from the method body:</p>
<ul>
  <li> in overriding and implementation methods </li>
  <li> in interface <code>default</code> methods </li>
  <li> in non-private methods that only <code>throw</code>, have empty bodies, or a single return statement. </li>
  <li> in overridable methods (non-final, or not member of a final class, non-static, non-private), if the exception is documented with a proper
  JavaDoc </li>
</ul>
<p>Also, the rule won’t raise issues on <code>RuntimeException</code>, or one of its descendants, because explicating runtime exceptions which could
be thrown can ultimately help the method’s users, and can even be considered as good practice.</p>
<pre>
class A extends B {
  @Override
  void doSomething() throws IOException {
    compute(a);
  }

  public void foo() throws IOException {}

  public void qix() throws MyRuntimeException {}

  protected void bar() throws IOException {
    throw new UnsupportedOperationException(""This method should be implemented in subclasses"");
  }

  Object foobar(String s) throws IOException {
    return null;
  }

  /**
   * @throws IOException Overriding classes may throw this exception if they print values into a file
   */
  protected void print() throws IOException { // no issue, method is overridable and the exception has proper javadoc
    System.out.println(""foo"");
  }
}
</pre>","<p>An exception in a <code>throws</code> declaration in Java is superfluous if it is:</p>
<ul>
  <li> listed multiple times </li>
  <li> a subclass of another listed exception </li>
  <li> completely unnecessary because the declared exception type cannot actually be thrown </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
void foo() throws MyException, MyException {}  // Noncompliant; should be listed once
void bar() throws Throwable, Exception {}  // Noncompliant; Exception is a subclass of Throwable
</pre>
<h2>Compliant Solution</h2>
<pre>
void foo() throws MyException {}
void bar() throws Throwable {}
</pre>
<h2>Exceptions</h2>
<p>The rule will not raise any issue for exceptions that cannot be thrown from the method body:</p>
<ul>
  <li> in overriding and implementation methods </li>
  <li> in interface <code>default</code> methods </li>
  <li> in non-private methods that only <code>throw</code>, have empty bodies, or a single return statement. </li>
  <li> in overridable methods (non-final, or not member of a final class, non-static, non-private), if the exception is documented with a proper
  JavaDoc </li>
</ul>
<p>Also, the rule won’t raise issues on <code>RuntimeException</code>, or one of its descendants, because explicating runtime exceptions which could
be thrown can ultimately help the method’s users, and can even be considered as good practice.</p>
<pre>
class A extends B {
  @Override
  void doSomething() throws IOException {
    compute(a);
  }

  public void foo() throws IOException {}

  public void qix() throws MyRuntimeException {}

  protected void bar() throws IOException {
    throw new UnsupportedOperationException(""This method should be implemented in subclasses"");
  }

  Object foobar(String s) throws IOException {
    return null;
  }

  /**
   * @throws IOException Overriding classes may throw this exception if they print values into a file
   */
  protected void print() throws IOException { // no issue, method is overridable and the exception has proper javadoc
    System.out.println(""foo"");
  }
}
</pre>",MINOR,READY,False,[],"['clumsy', 'error-handling', 'redundant', 'unused']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>An exception in a <code>throws</code> declaration in Java is superfluous if it is:</p>\n<ul>\n  <li> listed multiple times </li>\n  <li> a subclass of another listed exception </li>\n  <li> completely unnecessary because the declared exception type cannot actually be thrown </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid foo() throws MyException, MyException {}  // Noncompliant; should be listed once\nvoid bar() throws Throwable, Exception {}  // Noncompliant; Exception is a subclass of Throwable\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvoid foo() throws MyException {}\nvoid bar() throws Throwable {}\n</pre>\n<h2>Exceptions</h2>\n<p>The rule will not raise any issue for exceptions that cannot be thrown from the method body:</p>\n<ul>\n  <li> in overriding and implementation methods </li>\n  <li> in interface <code>default</code> methods </li>\n  <li> in non-private methods that only <code>throw</code>, have empty bodies, or a single return statement. </li>\n  <li> in overridable methods (non-final, or not member of a final class, non-static, non-private), if the exception is documented with a proper\n  JavaDoc </li>\n</ul>\n<p>Also, the rule won’t raise issues on <code>RuntimeException</code>, or one of its descendants, because explicating runtime exceptions which could\nbe thrown can ultimately help the method’s users, and can even be considered as good practice.</p>\n<pre>\nclass A extends B {\n  @Override\n  void doSomething() throws IOException {\n    compute(a);\n  }\n\n  public void foo() throws IOException {}\n\n  public void qix() throws MyRuntimeException {}\n\n  protected void bar() throws IOException {\n    throw new UnsupportedOperationException(""This method should be implemented in subclasses"");\n  }\n\n  Object foobar(String s) throws IOException {\n    return null;\n  }\n\n  /**\n   * @throws IOException Overriding classes may throw this exception if they print values into a file\n   */\n  protected void print() throws IOException { // no issue, method is overridable and the exception has proper javadoc\n    System.out.println(""foo"");\n  }\n}\n</pre>'}]",[],['squid:RedundantThrowsDeclarationCheck'],,,,
java:S3437,java,Value-based objects should not be serialized,2023-06-14T03:41:52+0000,"<p>According to the documentation,</p>
<blockquote>
  <p>A program may produce unpredictable results if it attempts to distinguish two references to equal values of a value-based class, whether directly
  via reference equality or indirectly via an appeal to synchronization, identity hashing, serialization…​</p>
</blockquote>
<p>For example (credit to Brian Goetz), imagine Foo is a value-based class:</p>
<pre>
Foo[] arr = new Foo[2];
arr[0] = new Foo(0);
arr[1] = new Foo(0);
</pre>
<p>Serialization promises that on deserialization of arr, elements 0 and 1 will not be aliased. Similarly, in:</p>
<pre>
Foo[] arr = new Foo[2];
arr[0] = new Foo(0);
arr[1] = arr[0];
</pre>
<p>Serialization promises that on deserialization of <code>arr</code>, elements 0 and 1 <strong>will</strong> be aliased.</p>
<p>While these promises are coincidentally fulfilled in current implementations of Java, that is not guaranteed in the future, particularly when true
value types are introduced in the language.</p>
<p>This rule raises an issue when a <code>Serializable</code> class defines a non-transient, non-static field field whose type is a known serializable
value-based class. Known serializable value-based classes are: all the classes in the <code>java.time</code> package except <code>Clock</code>; the
date classes for alternate calendars: <code>HijrahDate</code>, <code>JapaneseDate</code>, <code>MinguoDate</code>, <code>ThaiBuddhistDate</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class MyClass implements Serializable {
  private HijrahDate date;  // Noncompliant; mark this transient
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass implements Serializable {
  private transient HijrahDate date;
  // ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://docs.oracle.com/javase/8/docs/api/java/lang/doc-files/ValueBased.html"">Value-based classes</a> </li>
</ul>","<p>According to the documentation,</p>
<blockquote>
  <p>A program may produce unpredictable results if it attempts to distinguish two references to equal values of a value-based class, whether directly
  via reference equality or indirectly via an appeal to synchronization, identity hashing, serialization…​</p>
</blockquote>
<p>For example (credit to Brian Goetz), imagine Foo is a value-based class:</p>
<pre>
Foo[] arr = new Foo[2];
arr[0] = new Foo(0);
arr[1] = new Foo(0);
</pre>
<p>Serialization promises that on deserialization of arr, elements 0 and 1 will not be aliased. Similarly, in:</p>
<pre>
Foo[] arr = new Foo[2];
arr[0] = new Foo(0);
arr[1] = arr[0];
</pre>
<p>Serialization promises that on deserialization of <code>arr</code>, elements 0 and 1 <strong>will</strong> be aliased.</p>
<p>While these promises are coincidentally fulfilled in current implementations of Java, that is not guaranteed in the future, particularly when true
value types are introduced in the language.</p>
<p>This rule raises an issue when a <code>Serializable</code> class defines a non-transient, non-static field field whose type is a known serializable
value-based class. Known serializable value-based classes are: all the classes in the <code>java.time</code> package except <code>Clock</code>; the
date classes for alternate calendars: <code>HijrahDate</code>, <code>JapaneseDate</code>, <code>MinguoDate</code>, <code>ThaiBuddhistDate</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class MyClass implements Serializable {
  private HijrahDate date;  // Noncompliant; mark this transient
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass implements Serializable {
  private transient HijrahDate date;
  // ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://docs.oracle.com/javase/8/docs/api/java/lang/doc-files/ValueBased.html"">Value-based classes</a> </li>
</ul>",MINOR,READY,False,[],"['java8', 'lock-in', 'serialization']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,2min,CONSTANT_ISSUE,2min,False,MAIN,False,"[{'key': 'default', 'content': '<p>According to the documentation,</p>\n<blockquote>\n  <p>A program may produce unpredictable results if it attempts to distinguish two references to equal values of a value-based class, whether directly\n  via reference equality or indirectly via an appeal to synchronization, identity hashing, serialization…\u200b</p>\n</blockquote>\n<p>For example (credit to Brian Goetz), imagine Foo is a value-based class:</p>\n<pre>\nFoo[] arr = new Foo[2];\narr[0] = new Foo(0);\narr[1] = new Foo(0);\n</pre>\n<p>Serialization promises that on deserialization of arr, elements 0 and 1 will not be aliased. Similarly, in:</p>\n<pre>\nFoo[] arr = new Foo[2];\narr[0] = new Foo(0);\narr[1] = arr[0];\n</pre>\n<p>Serialization promises that on deserialization of <code>arr</code>, elements 0 and 1 <strong>will</strong> be aliased.</p>\n<p>While these promises are coincidentally fulfilled in current implementations of Java, that is not guaranteed in the future, particularly when true\nvalue types are introduced in the language.</p>\n<p>This rule raises an issue when a <code>Serializable</code> class defines a non-transient, non-static field field whose type is a known serializable\nvalue-based class. Known serializable value-based classes are: all the classes in the <code>java.time</code> package except <code>Clock</code>; the\ndate classes for alternate calendars: <code>HijrahDate</code>, <code>JapaneseDate</code>, <code>MinguoDate</code>, <code>ThaiBuddhistDate</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass implements Serializable {\n  private HijrahDate date;  // Noncompliant; mark this transient\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass implements Serializable {\n  private transient HijrahDate date;\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://docs.oracle.com/javase/8/docs/api/java/lang/doc-files/ValueBased.html"">Value-based classes</a> </li>\n</ul>'}]",[],['squid:S3437'],,,,
java:S3688,java,Track uses of disallowed classes,2023-06-14T03:41:52+0000,"<p>This rule allows banning certain classes.</p>
<h2>Noncompliant Code Example</h2>
<p>Given parameters:</p>
<ul>
  <li> className:java.lang.String </li>
</ul>
<pre>
String name;  // Noncompliant
</pre>","<p>This rule allows banning certain classes.</p>
<h2>Noncompliant Code Example</h2>
<p>Given parameters:</p>
<ul>
  <li> className:java.lang.String </li>
</ul>
<pre>
String name;  // Noncompliant
</pre>",INFO,READY,True,[],[],java,Java,"[{'key': 'className', 'htmlDesc': 'Fully qualified name of the forbidden class. Use a regex to forbid a package.', 'type': 'STRING'}]",CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,0min,CONSTANT_ISSUE,0min,False,ALL,False,"[{'key': 'default', 'content': '<p>This rule allows banning certain classes.</p>\n<h2>Noncompliant Code Example</h2>\n<p>Given parameters:</p>\n<ul>\n  <li> className:java.lang.String </li>\n</ul>\n<pre>\nString name;  // Noncompliant\n</pre>'}]",[],['squid:S3688'],,,,
java:S5738,java,"""@Deprecated"" code marked for removal should never be used",2023-06-14T03:41:52+0000,"<p>Java 9 introduced a flag for the <code>@Deprecated</code> annotation, which allows to explicitly say if the deprecated code is planned to be
removed at some point or not. This is done using <code>forRemoval=true</code> as annotation parameter. The javadoc of the annotation explicitly
mention the following:</p>
<blockquote>
  <p>If true, it means that this API element is earmarked for removal in a future release.</p>
  <p>If false, the API element is deprecated, but there is currently no intention to remove it in a future release.</p>
</blockquote>
<p>While usually deprecated classes, interfaces, and their deprecated members should be avoided rather than used, inherited or extended, those already
marked for removal are much more sensitive to causing trouble in your code soon. Consequently, any usage of such deprecated code should be avoided or
removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
/**
 * @deprecated As of release 1.3, replaced by {@link #Fee}. Will be dropped with release 1.4.
 */
@Deprecated(forRemoval=true)
public class Foo { ... }

public class Bar {
  /**
   * @deprecated  As of release 1.7, replaced by {@link #doTheThingBetter()}
   */
  @Deprecated(forRemoval=true)
  public void doTheThing() { ... }

  public void doTheThingBetter() { ... }

  /**
   * @deprecated As of release 1.14 due to poor performances.
   */
  @Deprecated(forRemoval=false)
  public void doTheOtherThing() { ... }
}

public class Qix extends Bar {
  @Override
  public void doTheThing() { ... } // Noncompliant; don't override a deprecated method marked for removal
}

public class Bar extends Foo {  // Noncompliant; Foo is deprecated and will be removed

  public void myMethod() {
    Bar bar = new Bar();  // okay; the class isn't deprecated
    bar.doTheThing();  // Noncompliant; doTheThing method is deprecated and will be removed

    bar.doTheOtherThing(); // Okay; deprecated, but not marked for removal
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/477"">MITRE, CWE-477</a> - Use of Obsolete Functions </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/6TdGBQ"">CERT, MET02-J.</a> - Do not use deprecated or obsolete classes or methods </li>
  <li> RSPEC-1874 for standard deprecation use </li>
</ul>","<p>Java 9 introduced a flag for the <code>@Deprecated</code> annotation, which allows to explicitly say if the deprecated code is planned to be
removed at some point or not. This is done using <code>forRemoval=true</code> as annotation parameter. The javadoc of the annotation explicitly
mention the following:</p>
<blockquote>
  <p>If true, it means that this API element is earmarked for removal in a future release.</p>
  <p>If false, the API element is deprecated, but there is currently no intention to remove it in a future release.</p>
</blockquote>
<p>While usually deprecated classes, interfaces, and their deprecated members should be avoided rather than used, inherited or extended, those already
marked for removal are much more sensitive to causing trouble in your code soon. Consequently, any usage of such deprecated code should be avoided or
removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
/**
 * @deprecated As of release 1.3, replaced by {@link #Fee}. Will be dropped with release 1.4.
 */
@Deprecated(forRemoval=true)
public class Foo { ... }

public class Bar {
  /**
   * @deprecated  As of release 1.7, replaced by {@link #doTheThingBetter()}
   */
  @Deprecated(forRemoval=true)
  public void doTheThing() { ... }

  public void doTheThingBetter() { ... }

  /**
   * @deprecated As of release 1.14 due to poor performances.
   */
  @Deprecated(forRemoval=false)
  public void doTheOtherThing() { ... }
}

public class Qix extends Bar {
  @Override
  public void doTheThing() { ... } // Noncompliant; don't override a deprecated method marked for removal
}

public class Bar extends Foo {  // Noncompliant; Foo is deprecated and will be removed

  public void myMethod() {
    Bar bar = new Bar();  // okay; the class isn't deprecated
    bar.doTheThing();  // Noncompliant; doTheThing method is deprecated and will be removed

    bar.doTheOtherThing(); // Okay; deprecated, but not marked for removal
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/477"">MITRE, CWE-477</a> - Use of Obsolete Functions </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/6TdGBQ"">CERT, MET02-J.</a> - Do not use deprecated or obsolete classes or methods </li>
  <li> RSPEC-1874 for standard deprecation use </li>
</ul>",MAJOR,READY,False,[],"['cert', 'cwe', 'obsolete']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,15min,CONSTANT_ISSUE,15min,False,ALL,False,"[{'key': 'default', 'content': '<p>Java 9 introduced a flag for the <code>@Deprecated</code> annotation, which allows to explicitly say if the deprecated code is planned to be\nremoved at some point or not. This is done using <code>forRemoval=true</code> as annotation parameter. The javadoc of the annotation explicitly\nmention the following:</p>\n<blockquote>\n  <p>If true, it means that this API element is earmarked for removal in a future release.</p>\n  <p>If false, the API element is deprecated, but there is currently no intention to remove it in a future release.</p>\n</blockquote>\n<p>While usually deprecated classes, interfaces, and their deprecated members should be avoided rather than used, inherited or extended, those already\nmarked for removal are much more sensitive to causing trouble in your code soon. Consequently, any usage of such deprecated code should be avoided or\nremoved.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n/**\n * @deprecated As of release 1.3, replaced by {@link #Fee}. Will be dropped with release 1.4.\n */\n@Deprecated(forRemoval=true)\npublic class Foo { ... }\n\npublic class Bar {\n  /**\n   * @deprecated  As of release 1.7, replaced by {@link #doTheThingBetter()}\n   */\n  @Deprecated(forRemoval=true)\n  public void doTheThing() { ... }\n\n  public void doTheThingBetter() { ... }\n\n  /**\n   * @deprecated As of release 1.14 due to poor performances.\n   */\n  @Deprecated(forRemoval=false)\n  public void doTheOtherThing() { ... }\n}\n\npublic class Qix extends Bar {\n  @Override\n  public void doTheThing() { ... } // Noncompliant; don\'t override a deprecated method marked for removal\n}\n\npublic class Bar extends Foo {  // Noncompliant; Foo is deprecated and will be removed\n\n  public void myMethod() {\n    Bar bar = new Bar();  // okay; the class isn\'t deprecated\n    bar.doTheThing();  // Noncompliant; doTheThing method is deprecated and will be removed\n\n    bar.doTheOtherThing(); // Okay; deprecated, but not marked for removal\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/477"">MITRE, CWE-477</a> - Use of Obsolete Functions </li>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/6TdGBQ"">CERT, MET02-J.</a> - Do not use deprecated or obsolete classes or methods </li>\n  <li> RSPEC-1874 for standard deprecation use </li>\n</ul>'}]",[],['squid:S5738'],,,,
java:S5857,java,Character classes should be preferred over reluctant quantifiers in regular expressions,2023-06-14T03:41:52+0000,"<p>Using reluctant quantifiers (also known as lazy or non-greedy quantifiers) in patterns can often lead to needless backtracking, making the regex
needlessly inefficient and potentially vulnerable to <a href=""https://www.regular-expressions.info/catastrophic.html"">catastrophic backtracking</a>.
Particularly when using <code>.*?</code> or <code>.+?</code> to match anything up to some terminating character, it is usually a better idea to
instead use a greedily or possessively quantified negated character class containing the terminating character. For example <code>&lt;.+?&gt;</code>
should be replaced with <code>&lt;[^&gt;]++&gt;</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;.+?&gt;
"".*?""
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;[^&gt;]++&gt;
""[^""]*+""
</pre>
<p>or</p>
<pre>
&lt;[^&gt;]+&gt;
""[^""]*""
</pre>
<h2>Exceptions</h2>
<p>This rule only applies in cases where the reluctant quantifier can easily be replaced with a negated character class. That means the repetition has
to be terminated by a single character or character class. Patterns such as the following, where the alternatives without reluctant quantifiers are
more complicated, are therefore not subject to this rule:</p>
<pre>
&lt;!--.*?--&gt;
/\*.*?\*/
</pre>","<p>Using reluctant quantifiers (also known as lazy or non-greedy quantifiers) in patterns can often lead to needless backtracking, making the regex
needlessly inefficient and potentially vulnerable to <a href=""https://www.regular-expressions.info/catastrophic.html"">catastrophic backtracking</a>.
Particularly when using <code>.*?</code> or <code>.+?</code> to match anything up to some terminating character, it is usually a better idea to
instead use a greedily or possessively quantified negated character class containing the terminating character. For example <code>&lt;.+?&gt;</code>
should be replaced with <code>&lt;[^&gt;]++&gt;</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;.+?&gt;
"".*?""
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;[^&gt;]++&gt;
""[^""]*+""
</pre>
<p>or</p>
<pre>
&lt;[^&gt;]+&gt;
""[^""]*""
</pre>
<h2>Exceptions</h2>
<p>This rule only applies in cases where the reluctant quantifier can easily be replaced with a negated character class. That means the repetition has
to be terminated by a single character or character class. Patterns such as the following, where the alternatives without reluctant quantifiers are
more complicated, are therefore not subject to this rule:</p>
<pre>
&lt;!--.*?--&gt;
/\*.*?\*/
</pre>",MINOR,READY,False,[],['regex'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,3min,CONSTANT_ISSUE,3min,False,ALL,False,"[{'key': 'default', 'content': '<p>Using reluctant quantifiers (also known as lazy or non-greedy quantifiers) in patterns can often lead to needless backtracking, making the regex\nneedlessly inefficient and potentially vulnerable to <a href=""https://www.regular-expressions.info/catastrophic.html"">catastrophic backtracking</a>.\nParticularly when using <code>.*?</code> or <code>.+?</code> to match anything up to some terminating character, it is usually a better idea to\ninstead use a greedily or possessively quantified negated character class containing the terminating character. For example <code>&lt;.+?&gt;</code>\nshould be replaced with <code>&lt;[^&gt;]++&gt;</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;.+?&gt;\n"".*?""\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n&lt;[^&gt;]++&gt;\n""[^""]*+""\n</pre>\n<p>or</p>\n<pre>\n&lt;[^&gt;]+&gt;\n""[^""]*""\n</pre>\n<h2>Exceptions</h2>\n<p>This rule only applies in cases where the reluctant quantifier can easily be replaced with a negated character class. That means the repetition has\nto be terminated by a single character or character class. Patterns such as the following, where the alternatives without reluctant quantifiers are\nmore complicated, are therefore not subject to this rule:</p>\n<pre>\n&lt;!--.*?--&gt;\n/\\*.*?\\*/\n</pre>'}]",[],['squid:S5857'],,,,
java:S5973,java,Tests should be stable,2023-06-14T03:41:52+0000,"<p>Unstable / flaky tests are tests which sometimes pass and sometimes fail, without any code change. Obviously, they slow down developments when
engineers have to rerun failed tests. However the real problem is that you can’t completely trust these tests, they might fail for many different
reasons and you don’t know if any of them will happen in production.</p>
<p>Some tools, such as TestNG, enable developers to automatically retry flaky tests. This might be ok as a temporary solution, but it should
definitely be fixed. The more flaky tests you add, the more chances there are for a bug to arrive in production.</p>
<p>This rule raises an issue when the annotation <code>org.testng.annotations.Test</code> is given a <code>successPercentage</code> argument with a
value lower than <code>100</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
import org.testng.annotations.Test;

public class PercentageTest {
    @Test(successPercentage = 80, invocationCount = 10)  // Noncompliant. The test is allowed to fail 2 times.
    public void flakyTest() {
    }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://testng.org/doc/documentation-main.html#annotations"">TestNG documentation - Annotations</a> </li>
  <li> <a href=""https://engineering.atspotify.com/2019/11/18/test-flakiness-methods-for-identifying-and-dealing-with-flaky-tests/"">Test Flakiness -
  Methods for identifying and dealing with flaky tests</a> </li>
</ul>","<p>Unstable / flaky tests are tests which sometimes pass and sometimes fail, without any code change. Obviously, they slow down developments when
engineers have to rerun failed tests. However the real problem is that you can’t completely trust these tests, they might fail for many different
reasons and you don’t know if any of them will happen in production.</p>
<p>Some tools, such as TestNG, enable developers to automatically retry flaky tests. This might be ok as a temporary solution, but it should
definitely be fixed. The more flaky tests you add, the more chances there are for a bug to arrive in production.</p>
<p>This rule raises an issue when the annotation <code>org.testng.annotations.Test</code> is given a <code>successPercentage</code> argument with a
value lower than <code>100</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
import org.testng.annotations.Test;

public class PercentageTest {
    @Test(successPercentage = 80, invocationCount = 10)  // Noncompliant. The test is allowed to fail 2 times.
    public void flakyTest() {
    }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://testng.org/doc/documentation-main.html#annotations"">TestNG documentation - Annotations</a> </li>
  <li> <a href=""https://engineering.atspotify.com/2019/11/18/test-flakiness-methods-for-identifying-and-dealing-with-flaky-tests/"">Test Flakiness -
  Methods for identifying and dealing with flaky tests</a> </li>
</ul>",MAJOR,READY,False,[],"['design', 'tests', 'unpredictable']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,20min,CONSTANT_ISSUE,20min,False,TEST,False,"[{'key': 'default', 'content': '<p>Unstable / flaky tests are tests which sometimes pass and sometimes fail, without any code change. Obviously, they slow down developments when\nengineers have to rerun failed tests. However the real problem is that you can’t completely trust these tests, they might fail for many different\nreasons and you don’t know if any of them will happen in production.</p>\n<p>Some tools, such as TestNG, enable developers to automatically retry flaky tests. This might be ok as a temporary solution, but it should\ndefinitely be fixed. The more flaky tests you add, the more chances there are for a bug to arrive in production.</p>\n<p>This rule raises an issue when the annotation <code>org.testng.annotations.Test</code> is given a <code>successPercentage</code> argument with a\nvalue lower than <code>100</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport org.testng.annotations.Test;\n\npublic class PercentageTest {\n    @Test(successPercentage = 80, invocationCount = 10)  // Noncompliant. The test is allowed to fail 2 times.\n    public void flakyTest() {\n    }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://testng.org/doc/documentation-main.html#annotations"">TestNG documentation - Annotations</a> </li>\n  <li> <a href=""https://engineering.atspotify.com/2019/11/18/test-flakiness-methods-for-identifying-and-dealing-with-flaky-tests/"">Test Flakiness -\n  Methods for identifying and dealing with flaky tests</a> </li>\n</ul>'}]",[],['squid:S5973'],,,,
java:S864,java,Limited dependence should be placed on operator precedence,2023-06-14T03:41:52+0000,"<p>The rules of operator precedence are complicated and can lead to errors. For this reason, parentheses should be used for clarification in complex
statements. However, this does not mean that parentheses should be gratuitously added around every operation.</p>
<p>This rule raises issues when <code>&amp;&amp;</code> and <code>||</code> are used in combination, when assignment and equality or relational
operators are used together in a condition, and for other operator combinations according to the following table:</p>
<table>
  <colgroup>
    <col style=""width: 16.6666%;"">
    <col style=""width: 16.6666%;"">
    <col style=""width: 16.6666%;"">
    <col style=""width: 16.6666%;"">
    <col style=""width: 16.6666%;"">
    <col style=""width: 16.667%;"">
  </colgroup>
  <thead>
    <tr>
      <th></th>
      <th><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code></th>
      <th><code>&lt;&lt;</code>, <code>&gt;&gt;</code>, <code>&gt;&gt;&gt;</code></th>
      <th><code>&amp;</code></th>
      <th><code>^</code></th>
      <th><code>|</code></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><p><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code></p></td>
      <td></td>
      <td><p>x</p></td>
      <td><p>x</p></td>
      <td><p>x</p></td>
      <td><p>x</p></td>
    </tr>
    <tr>
      <td><p><code>&lt;&lt;</code>, <code>&gt;&gt;</code>, <code>&gt;&gt;&gt;</code></p></td>
      <td><p>x</p></td>
      <td></td>
      <td><p>x</p></td>
      <td><p>x</p></td>
      <td><p>x</p></td>
    </tr>
    <tr>
      <td><p><code>&amp;</code></p></td>
      <td><p>x</p></td>
      <td><p>x</p></td>
      <td></td>
      <td><p>x</p></td>
      <td><p>x</p></td>
    </tr>
    <tr>
      <td><p><code>^</code></p></td>
      <td><p>x</p></td>
      <td><p>x</p></td>
      <td><p>x</p></td>
      <td></td>
      <td><p>x</p></td>
    </tr>
    <tr>
      <td><p><code>|</code></p></td>
      <td><p>x</p></td>
      <td><p>x</p></td>
      <td><p>x</p></td>
      <td><p>x</p></td>
      <td></td>
    </tr>
  </tbody>
</table>
<p>This rule also raises an issue when the ""true"" or ""false"" expression of a ternary operator is not trivial and not wrapped inside parentheses.</p>
<h2>Noncompliant Code Example</h2>
<pre>
x = a + b - c;
x = a + 1 &lt;&lt; b;  // Noncompliant
y = a == b ? a * 2 : a + b;  // Noncompliant

if ( a &gt; b || c &lt; d || a == d) {...}
if ( a &gt; b &amp;&amp; c &lt; d || a == b) {...}  // Noncompliant
if (a = f(b,c) == 1) { ... } // Noncompliant; == evaluated first
</pre>
<h2>Compliant Solution</h2>
<pre>
x = a + b - c;
x = (a + 1) &lt;&lt; b;
y = a == b ? (a * 2) : (a + b);

if ( a &gt; b || c &lt; d || a == d) {...}
if ( (a &gt; b &amp;&amp; c &lt; d) || a == b) {...}
if ( (a = f(b,c)) == 1) { ... }
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/YdYxBQ"">CERT, EXP00-C.</a> - Use parentheses for precedence of operation </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/ZzZGBQ"">CERT, EXP53-J.</a> - Use parentheses for precedence of operation </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/783"">MITRE, CWE-783</a> - Operator Precedence Logic Error </li>
</ul>","<p>The rules of operator precedence are complicated and can lead to errors. For this reason, parentheses should be used for clarification in complex
statements. However, this does not mean that parentheses should be gratuitously added around every operation.</p>
<p>This rule raises issues when <code>&amp;&amp;</code> and <code>||</code> are used in combination, when assignment and equality or relational
operators are used together in a condition, and for other operator combinations according to the following table:</p>
<table>
  <colgroup>
    <col style=""width: 16.6666%;"">
    <col style=""width: 16.6666%;"">
    <col style=""width: 16.6666%;"">
    <col style=""width: 16.6666%;"">
    <col style=""width: 16.6666%;"">
    <col style=""width: 16.667%;"">
  </colgroup>
  <thead>
    <tr>
      <th></th>
      <th><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code></th>
      <th><code>&lt;&lt;</code>, <code>&gt;&gt;</code>, <code>&gt;&gt;&gt;</code></th>
      <th><code>&amp;</code></th>
      <th><code>^</code></th>
      <th><code>|</code></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><p><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code></p></td>
      <td></td>
      <td><p>x</p></td>
      <td><p>x</p></td>
      <td><p>x</p></td>
      <td><p>x</p></td>
    </tr>
    <tr>
      <td><p><code>&lt;&lt;</code>, <code>&gt;&gt;</code>, <code>&gt;&gt;&gt;</code></p></td>
      <td><p>x</p></td>
      <td></td>
      <td><p>x</p></td>
      <td><p>x</p></td>
      <td><p>x</p></td>
    </tr>
    <tr>
      <td><p><code>&amp;</code></p></td>
      <td><p>x</p></td>
      <td><p>x</p></td>
      <td></td>
      <td><p>x</p></td>
      <td><p>x</p></td>
    </tr>
    <tr>
      <td><p><code>^</code></p></td>
      <td><p>x</p></td>
      <td><p>x</p></td>
      <td><p>x</p></td>
      <td></td>
      <td><p>x</p></td>
    </tr>
    <tr>
      <td><p><code>|</code></p></td>
      <td><p>x</p></td>
      <td><p>x</p></td>
      <td><p>x</p></td>
      <td><p>x</p></td>
      <td></td>
    </tr>
  </tbody>
</table>
<p>This rule also raises an issue when the ""true"" or ""false"" expression of a ternary operator is not trivial and not wrapped inside parentheses.</p>
<h2>Noncompliant Code Example</h2>
<pre>
x = a + b - c;
x = a + 1 &lt;&lt; b;  // Noncompliant
y = a == b ? a * 2 : a + b;  // Noncompliant

if ( a &gt; b || c &lt; d || a == d) {...}
if ( a &gt; b &amp;&amp; c &lt; d || a == b) {...}  // Noncompliant
if (a = f(b,c) == 1) { ... } // Noncompliant; == evaluated first
</pre>
<h2>Compliant Solution</h2>
<pre>
x = a + b - c;
x = (a + 1) &lt;&lt; b;
y = a == b ? (a * 2) : (a + b);

if ( a &gt; b || c &lt; d || a == d) {...}
if ( (a &gt; b &amp;&amp; c &lt; d) || a == b) {...}
if ( (a = f(b,c)) == 1) { ... }
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/YdYxBQ"">CERT, EXP00-C.</a> - Use parentheses for precedence of operation </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/ZzZGBQ"">CERT, EXP53-J.</a> - Use parentheses for precedence of operation </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/783"">MITRE, CWE-783</a> - Operator Precedence Logic Error </li>
</ul>",MAJOR,READY,False,[],"['cert', 'cwe']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,2min,CONSTANT_ISSUE,2min,False,ALL,False,"[{'key': 'default', 'content': '<p>The rules of operator precedence are complicated and can lead to errors. For this reason, parentheses should be used for clarification in complex\nstatements. However, this does not mean that parentheses should be gratuitously added around every operation.</p>\n<p>This rule raises issues when <code>&amp;&amp;</code> and <code>||</code> are used in combination, when assignment and equality or relational\noperators are used together in a condition, and for other operator combinations according to the following table:</p>\n<table>\n  <colgroup>\n    <col style=""width: 16.6666%;"">\n    <col style=""width: 16.6666%;"">\n    <col style=""width: 16.6666%;"">\n    <col style=""width: 16.6666%;"">\n    <col style=""width: 16.6666%;"">\n    <col style=""width: 16.667%;"">\n  </colgroup>\n  <thead>\n    <tr>\n      <th></th>\n      <th><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code></th>\n      <th><code>&lt;&lt;</code>, <code>&gt;&gt;</code>, <code>&gt;&gt;&gt;</code></th>\n      <th><code>&amp;</code></th>\n      <th><code>^</code></th>\n      <th><code>|</code></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><p><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code></p></td>\n      <td></td>\n      <td><p>x</p></td>\n      <td><p>x</p></td>\n      <td><p>x</p></td>\n      <td><p>x</p></td>\n    </tr>\n    <tr>\n      <td><p><code>&lt;&lt;</code>, <code>&gt;&gt;</code>, <code>&gt;&gt;&gt;</code></p></td>\n      <td><p>x</p></td>\n      <td></td>\n      <td><p>x</p></td>\n      <td><p>x</p></td>\n      <td><p>x</p></td>\n    </tr>\n    <tr>\n      <td><p><code>&amp;</code></p></td>\n      <td><p>x</p></td>\n      <td><p>x</p></td>\n      <td></td>\n      <td><p>x</p></td>\n      <td><p>x</p></td>\n    </tr>\n    <tr>\n      <td><p><code>^</code></p></td>\n      <td><p>x</p></td>\n      <td><p>x</p></td>\n      <td><p>x</p></td>\n      <td></td>\n      <td><p>x</p></td>\n    </tr>\n    <tr>\n      <td><p><code>|</code></p></td>\n      <td><p>x</p></td>\n      <td><p>x</p></td>\n      <td><p>x</p></td>\n      <td><p>x</p></td>\n      <td></td>\n    </tr>\n  </tbody>\n</table>\n<p>This rule also raises an issue when the ""true"" or ""false"" expression of a ternary operator is not trivial and not wrapped inside parentheses.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nx = a + b - c;\nx = a + 1 &lt;&lt; b;  // Noncompliant\ny = a == b ? a * 2 : a + b;  // Noncompliant\n\nif ( a &gt; b || c &lt; d || a == d) {...}\nif ( a &gt; b &amp;&amp; c &lt; d || a == b) {...}  // Noncompliant\nif (a = f(b,c) == 1) { ... } // Noncompliant; == evaluated first\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nx = a + b - c;\nx = (a + 1) &lt;&lt; b;\ny = a == b ? (a * 2) : (a + b);\n\nif ( a &gt; b || c &lt; d || a == d) {...}\nif ( (a &gt; b &amp;&amp; c &lt; d) || a == b) {...}\nif ( (a = f(b,c)) == 1) { ... }\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/YdYxBQ"">CERT, EXP00-C.</a> - Use parentheses for precedence of operation </li>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/ZzZGBQ"">CERT, EXP53-J.</a> - Use parentheses for precedence of operation </li>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/783"">MITRE, CWE-783</a> - Operator Precedence Logic Error </li>\n</ul>'}]",[],['squid:S864'],,,,
java:S1144,java,"Unused ""private"" methods should be removed",2023-06-14T03:41:52+0000,"<p><code>private</code> methods that are never executed are dead code: unnecessary, inoperative code that should be removed. Cleaning out dead code
decreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being introduced.</p>
<p>Note that this rule does not take reflection into account, which means that issues will be raised on <code>private</code> methods that are only
accessed using the reflection API.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo implements Serializable
{
  private Foo(){}     //Compliant, private empty constructor intentionally used to prevent any direct instantiation of a class.
  public static void doSomething(){
    Foo foo = new Foo();
    ...
  }
  private void unusedPrivateMethod(){...}
  private void writeObject(ObjectOutputStream s){...}  //Compliant, relates to the java serialization mechanism
  private void readObject(ObjectInputStream in){...}  //Compliant, relates to the java serialization mechanism
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Foo implements Serializable
{
  private Foo(){}     //Compliant, private empty constructor intentionally used to prevent any direct instantiation of a class.
  public static void doSomething(){
    Foo foo = new Foo();
    ...
  }

  private void writeObject(ObjectOutputStream s){...}  //Compliant, relates to the java serialization mechanism

  private void readObject(ObjectInputStream in){...}  //Compliant, relates to the java serialization mechanism
}
</pre>
<h2>Exceptions</h2>
<p>This rule doesn’t raise issues for:</p>
<ul>
  <li> annotated methods </li>
  <li> methods with parameters that are annotated with <code>@javax.enterprise.event.Observes</code> </li>
</ul>","<p><code>private</code> methods that are never executed are dead code: unnecessary, inoperative code that should be removed. Cleaning out dead code
decreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being introduced.</p>
<p>Note that this rule does not take reflection into account, which means that issues will be raised on <code>private</code> methods that are only
accessed using the reflection API.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo implements Serializable
{
  private Foo(){}     //Compliant, private empty constructor intentionally used to prevent any direct instantiation of a class.
  public static void doSomething(){
    Foo foo = new Foo();
    ...
  }
  private void unusedPrivateMethod(){...}
  private void writeObject(ObjectOutputStream s){...}  //Compliant, relates to the java serialization mechanism
  private void readObject(ObjectInputStream in){...}  //Compliant, relates to the java serialization mechanism
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Foo implements Serializable
{
  private Foo(){}     //Compliant, private empty constructor intentionally used to prevent any direct instantiation of a class.
  public static void doSomething(){
    Foo foo = new Foo();
    ...
  }

  private void writeObject(ObjectOutputStream s){...}  //Compliant, relates to the java serialization mechanism

  private void readObject(ObjectInputStream in){...}  //Compliant, relates to the java serialization mechanism
}
</pre>
<h2>Exceptions</h2>
<p>This rule doesn’t raise issues for:</p>
<ul>
  <li> annotated methods </li>
  <li> methods with parameters that are annotated with <code>@javax.enterprise.event.Observes</code> </li>
</ul>",MAJOR,READY,False,[],['unused'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p><code>private</code> methods that are never executed are dead code: unnecessary, inoperative code that should be removed. Cleaning out dead code\ndecreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being introduced.</p>\n<p>Note that this rule does not take reflection into account, which means that issues will be raised on <code>private</code> methods that are only\naccessed using the reflection API.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo implements Serializable\n{\n  private Foo(){}     //Compliant, private empty constructor intentionally used to prevent any direct instantiation of a class.\n  public static void doSomething(){\n    Foo foo = new Foo();\n    ...\n  }\n  private void unusedPrivateMethod(){...}\n  private void writeObject(ObjectOutputStream s){...}  //Compliant, relates to the java serialization mechanism\n  private void readObject(ObjectInputStream in){...}  //Compliant, relates to the java serialization mechanism\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo implements Serializable\n{\n  private Foo(){}     //Compliant, private empty constructor intentionally used to prevent any direct instantiation of a class.\n  public static void doSomething(){\n    Foo foo = new Foo();\n    ...\n  }\n\n  private void writeObject(ObjectOutputStream s){...}  //Compliant, relates to the java serialization mechanism\n\n  private void readObject(ObjectInputStream in){...}  //Compliant, relates to the java serialization mechanism\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule doesn’t raise issues for:</p>\n<ul>\n  <li> annotated methods </li>\n  <li> methods with parameters that are annotated with <code>@javax.enterprise.event.Observes</code> </li>\n</ul>'}]",[],['squid:UnusedPrivateMethod'],,,,
java:S1147,java,Exit methods should not be called,2023-06-14T03:41:52+0000,"<p>Calling <code>System.exit(int status)</code> or <code>Rutime.getRuntime().exit(int status)</code> calls the shutdown hooks and shuts downs the
entire Java virtual machine. Calling <code>Runtime.getRuntime().halt(int)</code> does an immediate shutdown, without calling the shutdown hooks, and
skipping finalization.</p>
<p>Each of these methods should be used with extreme care, and only when the intent is to stop the whole Java process. For instance, none of them
should be called from applications running in a J2EE container.</p>
<h2>Noncompliant Code Example</h2>
<pre>
System.exit(0);
Runtime.getRuntime().exit(0);
Runtime.getRuntime().halt(0);
</pre>
<h2>Exceptions</h2>
<p>These methods are ignored inside <code>main</code>.</p>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/382"">MITRE, CWE-382</a> - Use of System.exit() </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/7zZGBQ"">CERT, ERR09-J.</a> - Do not allow untrusted code to terminate the JVM </li>
</ul>","<p>Calling <code>System.exit(int status)</code> or <code>Rutime.getRuntime().exit(int status)</code> calls the shutdown hooks and shuts downs the
entire Java virtual machine. Calling <code>Runtime.getRuntime().halt(int)</code> does an immediate shutdown, without calling the shutdown hooks, and
skipping finalization.</p>
<p>Each of these methods should be used with extreme care, and only when the intent is to stop the whole Java process. For instance, none of them
should be called from applications running in a J2EE container.</p>
<h2>Noncompliant Code Example</h2>
<pre>
System.exit(0);
Runtime.getRuntime().exit(0);
Runtime.getRuntime().halt(0);
</pre>
<h2>Exceptions</h2>
<p>These methods are ignored inside <code>main</code>.</p>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/382"">MITRE, CWE-382</a> - Use of System.exit() </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/7zZGBQ"">CERT, ERR09-J.</a> - Do not allow untrusted code to terminate the JVM </li>
</ul>",BLOCKER,READY,False,[],"['cert', 'cwe', 'suspicious']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,30min,CONSTANT_ISSUE,30min,False,MAIN,False,"[{'key': 'default', 'content': '<p>Calling <code>System.exit(int status)</code> or <code>Rutime.getRuntime().exit(int status)</code> calls the shutdown hooks and shuts downs the\nentire Java virtual machine. Calling <code>Runtime.getRuntime().halt(int)</code> does an immediate shutdown, without calling the shutdown hooks, and\nskipping finalization.</p>\n<p>Each of these methods should be used with extreme care, and only when the intent is to stop the whole Java process. For instance, none of them\nshould be called from applications running in a J2EE container.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSystem.exit(0);\nRuntime.getRuntime().exit(0);\nRuntime.getRuntime().halt(0);\n</pre>\n<h2>Exceptions</h2>\n<p>These methods are ignored inside <code>main</code>.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/382"">MITRE, CWE-382</a> - Use of System.exit() </li>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/7zZGBQ"">CERT, ERR09-J.</a> - Do not allow untrusted code to terminate the JVM </li>\n</ul>'}]",[],['squid:S1147'],,,,
java:S2112,java,"""URL.hashCode"" and ""URL.equals"" should be avoided",2023-06-14T03:41:52+0000,"<p>The <code>equals</code> and <code>hashCode</code> methods of <code>java.net.URL</code> both may trigger a name service (usually DNS) lookup to
resolve the host name or IP address. Depending on the configuration, and network status, that can take a long time. <code>URI</code> on the other hand
makes no such calls and should be used instead unless the specific <code>URL</code> functionality is required.</p>
<p>In general it is better to use the <code>URI</code> class until access to the resource is actually needed, at which point you can just convert the
<code>URI</code> to a <code>URL</code> using <code>URI.toURL()</code>.</p>
<p>This rule checks for uses of <code>URL</code> 's in <code>Map</code> and <code>Set</code> , and for explicit calls to the <code>equals</code> and
<code>hashCode</code> methods.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void checkUrl(URL url) {
  Set&lt;URL&gt; sites = new HashSet&lt;URL&gt;();  // Noncompliant

  URL homepage = new URL(""http://sonarsource.com"");  // Compliant
  if (homepage.equals(url)) { // Noncompliant
    // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void checkUrl(URL url) {
  Set&lt;URI&gt; sites = new HashSet&lt;URI&gt;();  // Compliant

  URI homepage = new URI(""http://sonarsource.com"");  // Compliant
  URI uri = url.toURI();
  if (homepage.equals(uri)) {  // Compliant
    // ...
  }
}
</pre>","<p>The <code>equals</code> and <code>hashCode</code> methods of <code>java.net.URL</code> both may trigger a name service (usually DNS) lookup to
resolve the host name or IP address. Depending on the configuration, and network status, that can take a long time. <code>URI</code> on the other hand
makes no such calls and should be used instead unless the specific <code>URL</code> functionality is required.</p>
<p>In general it is better to use the <code>URI</code> class until access to the resource is actually needed, at which point you can just convert the
<code>URI</code> to a <code>URL</code> using <code>URI.toURL()</code>.</p>
<p>This rule checks for uses of <code>URL</code> 's in <code>Map</code> and <code>Set</code> , and for explicit calls to the <code>equals</code> and
<code>hashCode</code> methods.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void checkUrl(URL url) {
  Set&lt;URL&gt; sites = new HashSet&lt;URL&gt;();  // Noncompliant

  URL homepage = new URL(""http://sonarsource.com"");  // Compliant
  if (homepage.equals(url)) { // Noncompliant
    // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void checkUrl(URL url) {
  Set&lt;URI&gt; sites = new HashSet&lt;URI&gt;();  // Compliant

  URI homepage = new URI(""http://sonarsource.com"");  // Compliant
  URI uri = url.toURI();
  if (homepage.equals(uri)) {  // Compliant
    // ...
  }
}
</pre>",MAJOR,READY,False,[],['performance'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,20min,CONSTANT_ISSUE,20min,False,ALL,False,"[{'key': 'default', 'content': '<p>The <code>equals</code> and <code>hashCode</code> methods of <code>java.net.URL</code> both may trigger a name service (usually DNS) lookup to\nresolve the host name or IP address. Depending on the configuration, and network status, that can take a long time. <code>URI</code> on the other hand\nmakes no such calls and should be used instead unless the specific <code>URL</code> functionality is required.</p>\n<p>In general it is better to use the <code>URI</code> class until access to the resource is actually needed, at which point you can just convert the\n<code>URI</code> to a <code>URL</code> using <code>URI.toURL()</code>.</p>\n<p>This rule checks for uses of <code>URL</code> \'s in <code>Map</code> and <code>Set</code> , and for explicit calls to the <code>equals</code> and\n<code>hashCode</code> methods.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void checkUrl(URL url) {\n  Set&lt;URL&gt; sites = new HashSet&lt;URL&gt;();  // Noncompliant\n\n  URL homepage = new URL(""http://sonarsource.com"");  // Compliant\n  if (homepage.equals(url)) { // Noncompliant\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void checkUrl(URL url) {\n  Set&lt;URI&gt; sites = new HashSet&lt;URI&gt;();  // Compliant\n\n  URI homepage = new URI(""http://sonarsource.com"");  // Compliant\n  URI uri = url.toURI();\n  if (homepage.equals(uri)) {  // Compliant\n    // ...\n  }\n}\n</pre>'}]",[],['squid:S2112'],,,,
java:S2232,java,"""ResultSet.isLast()"" should not be used",2023-06-14T03:41:52+0000,"<p>There are several reasons to avoid <code>ResultSet.isLast()</code>. First, support for this method is optional for <code>TYPE_FORWARD_ONLY</code>
result sets. Second, it can be expensive (the driver may need to fetch the next row to answer the question). Finally, the specification is not clear
on what should be returned when the <code>ResultSet</code> is empty, so some drivers may return the opposite of what is expected.</p>
<h2>Noncompliant Code Example</h2>
<pre>
stmt.executeQuery(""SELECT name, address FROM PERSON"");
ResultSet rs = stmt.getResultSet();
while (! rs.isLast()) { // Noncompliant
  // process row
}
</pre>
<h2>Compliant Solution</h2>
<pre>
ResultSet rs = stmt.executeQuery(""SELECT name, address FROM PERSON"");
while (rs.next()) {
  // process row
}
</pre>","<p>There are several reasons to avoid <code>ResultSet.isLast()</code>. First, support for this method is optional for <code>TYPE_FORWARD_ONLY</code>
result sets. Second, it can be expensive (the driver may need to fetch the next row to answer the question). Finally, the specification is not clear
on what should be returned when the <code>ResultSet</code> is empty, so some drivers may return the opposite of what is expected.</p>
<h2>Noncompliant Code Example</h2>
<pre>
stmt.executeQuery(""SELECT name, address FROM PERSON"");
ResultSet rs = stmt.getResultSet();
while (! rs.isLast()) { // Noncompliant
  // process row
}
</pre>
<h2>Compliant Solution</h2>
<pre>
ResultSet rs = stmt.executeQuery(""SELECT name, address FROM PERSON"");
while (rs.next()) {
  // process row
}
</pre>",MAJOR,READY,False,[],"['performance', 'pitfall', 'sql']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,10min,CONSTANT_ISSUE,10min,False,MAIN,False,"[{'key': 'default', 'content': '<p>There are several reasons to avoid <code>ResultSet.isLast()</code>. First, support for this method is optional for <code>TYPE_FORWARD_ONLY</code>\nresult sets. Second, it can be expensive (the driver may need to fetch the next row to answer the question). Finally, the specification is not clear\non what should be returned when the <code>ResultSet</code> is empty, so some drivers may return the opposite of what is expected.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nstmt.executeQuery(""SELECT name, address FROM PERSON"");\nResultSet rs = stmt.getResultSet();\nwhile (! rs.isLast()) { // Noncompliant\n  // process row\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nResultSet rs = stmt.executeQuery(""SELECT name, address FROM PERSON"");\nwhile (rs.next()) {\n  // process row\n}\n</pre>'}]",[],['squid:S2232'],,,,
java:S2234,java,Parameters should be passed in the correct order,2023-06-14T03:41:52+0000,"<p>When the names of parameters in a method call match the names of the method arguments, it contributes to clearer, more readable code. However, when
the names match, but are passed in a different order than the method arguments, it indicates a mistake in the parameter order which will likely lead
to unexpected results.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public double divide(int divisor, int dividend) {
  return divisor/dividend;
}

public void doTheThing() {
  int divisor = 15;
  int dividend = 5;

  double result = divide(dividend, divisor);  // Noncompliant; operation succeeds, but result is unexpected
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public double divide(int divisor, int dividend) {
  return divisor/dividend;
}

public void doTheThing() {
  int divisor = 15;
  int dividend = 5;

  double result = divide(divisor, dividend);
  //...
}
</pre>","<p>When the names of parameters in a method call match the names of the method arguments, it contributes to clearer, more readable code. However, when
the names match, but are passed in a different order than the method arguments, it indicates a mistake in the parameter order which will likely lead
to unexpected results.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public double divide(int divisor, int dividend) {
  return divisor/dividend;
}

public void doTheThing() {
  int divisor = 15;
  int dividend = 5;

  double result = divide(dividend, divisor);  // Noncompliant; operation succeeds, but result is unexpected
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public double divide(int divisor, int dividend) {
  return divisor/dividend;
}

public void doTheThing() {
  int divisor = 15;
  int dividend = 5;

  double result = divide(divisor, dividend);
  //...
}
</pre>",MAJOR,READY,False,[],[],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>When the names of parameters in a method call match the names of the method arguments, it contributes to clearer, more readable code. However, when\nthe names match, but are passed in a different order than the method arguments, it indicates a mistake in the parameter order which will likely lead\nto unexpected results.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic double divide(int divisor, int dividend) {\n  return divisor/dividend;\n}\n\npublic void doTheThing() {\n  int divisor = 15;\n  int dividend = 5;\n\n  double result = divide(dividend, divisor);  // Noncompliant; operation succeeds, but result is unexpected\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic double divide(int divisor, int dividend) {\n  return divisor/dividend;\n}\n\npublic void doTheThing() {\n  int divisor = 15;\n  int dividend = 5;\n\n  double result = divide(divisor, dividend);\n  //...\n}\n</pre>'}]",[],['squid:S2234'],,,,
java:S2235,java,IllegalMonitorStateException should not be caught,2023-06-14T03:41:52+0000,"<p>According to Oracle Javadoc:</p>
<blockquote>
  <p><code>IllegalMonitorStateException</code> is thrown when a thread has attempted to wait on an object’s monitor or to notify other threads waiting
  on an object’s monitor without owning the specified monitor.</p>
</blockquote>
<p>In other words, this exception can be thrown only in case of bad design because <code>Object.wait(...)</code>, <code>Object.notify()</code> and
<code>Object.notifyAll()</code> methods should never be called on an object whose monitor is not held.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void doSomething(){
  ...
  try {
    ...
    anObject.notify();
    ...
  } catch(IllegalMonitorStateException e) {
    ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void doSomething(){
  ...
  synchronized(anObject) {
    ...
    anObject.notify();
    ...
  }
}
</pre>","<p>According to Oracle Javadoc:</p>
<blockquote>
  <p><code>IllegalMonitorStateException</code> is thrown when a thread has attempted to wait on an object’s monitor or to notify other threads waiting
  on an object’s monitor without owning the specified monitor.</p>
</blockquote>
<p>In other words, this exception can be thrown only in case of bad design because <code>Object.wait(...)</code>, <code>Object.notify()</code> and
<code>Object.notifyAll()</code> methods should never be called on an object whose monitor is not held.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void doSomething(){
  ...
  try {
    ...
    anObject.notify();
    ...
  } catch(IllegalMonitorStateException e) {
    ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void doSomething(){
  ...
  synchronized(anObject) {
    ...
    anObject.notify();
    ...
  }
}
</pre>",CRITICAL,READY,False,[],"['error-handling', 'multi-threading']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,20min,CONSTANT_ISSUE,20min,False,MAIN,False,"[{'key': 'default', 'content': '<p>According to Oracle Javadoc:</p>\n<blockquote>\n  <p><code>IllegalMonitorStateException</code> is thrown when a thread has attempted to wait on an object’s monitor or to notify other threads waiting\n  on an object’s monitor without owning the specified monitor.</p>\n</blockquote>\n<p>In other words, this exception can be thrown only in case of bad design because <code>Object.wait(...)</code>, <code>Object.notify()</code> and\n<code>Object.notifyAll()</code> methods should never be called on an object whose monitor is not held.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething(){\n  ...\n  try {\n    ...\n    anObject.notify();\n    ...\n  } catch(IllegalMonitorStateException e) {\n    ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(){\n  ...\n  synchronized(anObject) {\n    ...\n    anObject.notify();\n    ...\n  }\n}\n</pre>'}]",[],['squid:S2235'],,,,
java:S2479,java,Whitespace and control characters in literals should be explicit,2023-06-14T03:41:52+0000,"<p>Non-encoded control characters and whitespace characters are often injected in the source code because of a bad manipulation. They are either
invisible or difficult to recognize, which can result in bugs when the string is not what the developer expects. If you actually need to use a control
character use their encoded version (ex: ASCII <code>\n,\t,</code>…​ or Unicode <code>U+000D, U+0009,</code>…​).</p>
<p>This rule raises an issue when the following characters are seen in a literal string:</p>
<ul>
  <li> <a href=""https://en.wikipedia.org/wiki/ASCII#Control_characters"">ASCII control character</a>. (character index &lt; 32 or = 127) </li>
  <li> Unicode <a href=""https://en.wikipedia.org/wiki/Unicode_character_property#Whitespace"">whitespace characters</a>. </li>
  <li> Unicode <a href=""https://en.wikipedia.org/wiki/C0_and_C1_control_codes"">C0 control characters</a> </li>
  <li> Unicode characters <code>U+200B, U+200C, U+200D, U+2060, U+FEFF, U+2028, U+2029</code> </li>
</ul>
<p>No issue will be raised on the simple space character. Unicode <code>U+0020</code>, ASCII 32.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String tabInside = ""A	B"";  // Noncompliant, contains a tabulation
String zeroWidthSpaceInside = ""foo​bar""; // Noncompliant, it contains a U+200B character inside
char tab = '	';
</pre>
<h2>Compliant Solution</h2>
<pre>
String tabInside = ""A\tB"";  // Compliant, uses escaped value
String zeroWidthSpaceInside = ""foo\u200Bbar"";  // Compliant, uses escaped value
char tab = '\t';
</pre>","<p>Non-encoded control characters and whitespace characters are often injected in the source code because of a bad manipulation. They are either
invisible or difficult to recognize, which can result in bugs when the string is not what the developer expects. If you actually need to use a control
character use their encoded version (ex: ASCII <code>\n,\t,</code>…​ or Unicode <code>U+000D, U+0009,</code>…​).</p>
<p>This rule raises an issue when the following characters are seen in a literal string:</p>
<ul>
  <li> <a href=""https://en.wikipedia.org/wiki/ASCII#Control_characters"">ASCII control character</a>. (character index &lt; 32 or = 127) </li>
  <li> Unicode <a href=""https://en.wikipedia.org/wiki/Unicode_character_property#Whitespace"">whitespace characters</a>. </li>
  <li> Unicode <a href=""https://en.wikipedia.org/wiki/C0_and_C1_control_codes"">C0 control characters</a> </li>
  <li> Unicode characters <code>U+200B, U+200C, U+200D, U+2060, U+FEFF, U+2028, U+2029</code> </li>
</ul>
<p>No issue will be raised on the simple space character. Unicode <code>U+0020</code>, ASCII 32.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String tabInside = ""A	B"";  // Noncompliant, contains a tabulation
String zeroWidthSpaceInside = ""foo​bar""; // Noncompliant, it contains a U+200B character inside
char tab = '	';
</pre>
<h2>Compliant Solution</h2>
<pre>
String tabInside = ""A\tB"";  // Compliant, uses escaped value
String zeroWidthSpaceInside = ""foo\u200Bbar"";  // Compliant, uses escaped value
char tab = '\t';
</pre>",CRITICAL,READY,False,[],['pitfall'],java,Java,"[{'key': 'allowTabsInTextBlocks', 'htmlDesc': 'Allow tabs in text blocks', 'defaultValue': 'false', 'type': 'BOOLEAN'}]",CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,10min,CONSTANT_ISSUE,10min,False,MAIN,False,"[{'key': 'default', 'content': '<p>Non-encoded control characters and whitespace characters are often injected in the source code because of a bad manipulation. They are either\ninvisible or difficult to recognize, which can result in bugs when the string is not what the developer expects. If you actually need to use a control\ncharacter use their encoded version (ex: ASCII <code>\\n,\\t,</code>…\u200b or Unicode <code>U+000D, U+0009,</code>…\u200b).</p>\n<p>This rule raises an issue when the following characters are seen in a literal string:</p>\n<ul>\n  <li> <a href=""https://en.wikipedia.org/wiki/ASCII#Control_characters"">ASCII control character</a>. (character index &lt; 32 or = 127) </li>\n  <li> Unicode <a href=""https://en.wikipedia.org/wiki/Unicode_character_property#Whitespace"">whitespace characters</a>. </li>\n  <li> Unicode <a href=""https://en.wikipedia.org/wiki/C0_and_C1_control_codes"">C0 control characters</a> </li>\n  <li> Unicode characters <code>U+200B, U+200C, U+200D, U+2060, U+FEFF, U+2028, U+2029</code> </li>\n</ul>\n<p>No issue will be raised on the simple space character. Unicode <code>U+0020</code>, ASCII 32.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString tabInside = ""A\tB"";  // Noncompliant, contains a tabulation\nString zeroWidthSpaceInside = ""foo\u200bbar""; // Noncompliant, it contains a U+200B character inside\nchar tab = \'\t\';\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString tabInside = ""A\\tB"";  // Compliant, uses escaped value\nString zeroWidthSpaceInside = ""foo\\u200Bbar"";  // Compliant, uses escaped value\nchar tab = \'\\t\';\n</pre>'}]",[],['squid:S2479'],,,,
java:S5860,java,Names of regular expressions named groups should be used,2023-06-14T03:41:52+0000,"<p>Why use named groups only to never use any of them later on in the code?</p>
<p>This rule raises issues every time named groups are:</p>
<ul>
  <li> defined but never called anywhere in the code through their name; </li>
  <li> defined but called elsewhere in the code by their number instead; </li>
  <li> referenced while not defined. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
String date = ""01/02"";

Pattern datePattern = Pattern.compile(""(?&lt;month&gt;[0-9]{2})/(?&lt;year&gt;[0-9]{2})"");
Matcher dateMatcher = datePattern.matcher(date);

if (dateMatcher.matches()) {
  checkValidity(dateMatcher.group(1), dateMatcher.group(2));  // Noncompliant - numbers instead of names of groups are used
  checkValidity(dateMatcher.group(""day"")); // Noncompliant - there is no group called ""day""
}

// ...

String score = ""14:1"";

Pattern scorePattern = Pattern.compile(""(?&lt;player1&gt;[0-9]+):(?&lt;player2&gt;[0-9]+)""); // Noncompliant - named groups are never used
Matcher scoreMatcher = scorePattern.matcher(score);

if (scoreMatcher.matches()) {
  checkScore(score);
}
</pre>
<h2>Compliant Solution</h2>
<pre>
String date = ""01/02"";

Pattern datePattern = Pattern.compile(""(?&lt;month&gt;[0-9]{2})/(?&lt;year&gt;[0-9]{2})"");
Matcher dateMatcher = datePattern.matcher(date);

if (dateMatcher.matches()) {
  checkValidity(dateMatcher.group(""month""), dateMatcher.group(""year""));
}

// ...

String score = ""14:1"";

Pattern scorePattern = Pattern.compile(""(?&lt;player1&gt;[0-9]+):(?&lt;player2&gt;[0-9]+)"");
Matcher scoreMatcher = scorePattern.matcher(score);

if (scoreMatcher.matches()) {
  checkScore(scoreMatcher.group(""player1""));
  checkScore(scoreMatcher.group(""player2""));
}
</pre>
<p>Or, using dedicated variables instead of group names:</p>
<pre>
String score = ""14:1"";

String player = ""([0-9]+)"";
String gameScore = player + "":"" + player;

Pattern scorePattern = Pattern.compile(gameScore);
Matcher scoreMatcher = scorePattern.matcher(score);

if (scoreMatcher.matches()) {
  checkScore(score);
}
</pre>","<p>Why use named groups only to never use any of them later on in the code?</p>
<p>This rule raises issues every time named groups are:</p>
<ul>
  <li> defined but never called anywhere in the code through their name; </li>
  <li> defined but called elsewhere in the code by their number instead; </li>
  <li> referenced while not defined. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
String date = ""01/02"";

Pattern datePattern = Pattern.compile(""(?&lt;month&gt;[0-9]{2})/(?&lt;year&gt;[0-9]{2})"");
Matcher dateMatcher = datePattern.matcher(date);

if (dateMatcher.matches()) {
  checkValidity(dateMatcher.group(1), dateMatcher.group(2));  // Noncompliant - numbers instead of names of groups are used
  checkValidity(dateMatcher.group(""day"")); // Noncompliant - there is no group called ""day""
}

// ...

String score = ""14:1"";

Pattern scorePattern = Pattern.compile(""(?&lt;player1&gt;[0-9]+):(?&lt;player2&gt;[0-9]+)""); // Noncompliant - named groups are never used
Matcher scoreMatcher = scorePattern.matcher(score);

if (scoreMatcher.matches()) {
  checkScore(score);
}
</pre>
<h2>Compliant Solution</h2>
<pre>
String date = ""01/02"";

Pattern datePattern = Pattern.compile(""(?&lt;month&gt;[0-9]{2})/(?&lt;year&gt;[0-9]{2})"");
Matcher dateMatcher = datePattern.matcher(date);

if (dateMatcher.matches()) {
  checkValidity(dateMatcher.group(""month""), dateMatcher.group(""year""));
}

// ...

String score = ""14:1"";

Pattern scorePattern = Pattern.compile(""(?&lt;player1&gt;[0-9]+):(?&lt;player2&gt;[0-9]+)"");
Matcher scoreMatcher = scorePattern.matcher(score);

if (scoreMatcher.matches()) {
  checkScore(scoreMatcher.group(""player1""));
  checkScore(scoreMatcher.group(""player2""));
}
</pre>
<p>Or, using dedicated variables instead of group names:</p>
<pre>
String score = ""14:1"";

String player = ""([0-9]+)"";
String gameScore = player + "":"" + player;

Pattern scorePattern = Pattern.compile(gameScore);
Matcher scoreMatcher = scorePattern.matcher(score);

if (scoreMatcher.matches()) {
  checkScore(score);
}
</pre>",MAJOR,READY,False,[],['regex'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,10min,CONSTANT_ISSUE,10min,False,ALL,False,"[{'key': 'default', 'content': '<p>Why use named groups only to never use any of them later on in the code?</p>\n<p>This rule raises issues every time named groups are:</p>\n<ul>\n  <li> defined but never called anywhere in the code through their name; </li>\n  <li> defined but called elsewhere in the code by their number instead; </li>\n  <li> referenced while not defined. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString date = ""01/02"";\n\nPattern datePattern = Pattern.compile(""(?&lt;month&gt;[0-9]{2})/(?&lt;year&gt;[0-9]{2})"");\nMatcher dateMatcher = datePattern.matcher(date);\n\nif (dateMatcher.matches()) {\n  checkValidity(dateMatcher.group(1), dateMatcher.group(2));  // Noncompliant - numbers instead of names of groups are used\n  checkValidity(dateMatcher.group(""day"")); // Noncompliant - there is no group called ""day""\n}\n\n// ...\n\nString score = ""14:1"";\n\nPattern scorePattern = Pattern.compile(""(?&lt;player1&gt;[0-9]+):(?&lt;player2&gt;[0-9]+)""); // Noncompliant - named groups are never used\nMatcher scoreMatcher = scorePattern.matcher(score);\n\nif (scoreMatcher.matches()) {\n  checkScore(score);\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString date = ""01/02"";\n\nPattern datePattern = Pattern.compile(""(?&lt;month&gt;[0-9]{2})/(?&lt;year&gt;[0-9]{2})"");\nMatcher dateMatcher = datePattern.matcher(date);\n\nif (dateMatcher.matches()) {\n  checkValidity(dateMatcher.group(""month""), dateMatcher.group(""year""));\n}\n\n// ...\n\nString score = ""14:1"";\n\nPattern scorePattern = Pattern.compile(""(?&lt;player1&gt;[0-9]+):(?&lt;player2&gt;[0-9]+)"");\nMatcher scoreMatcher = scorePattern.matcher(score);\n\nif (scoreMatcher.matches()) {\n  checkScore(scoreMatcher.group(""player1""));\n  checkScore(scoreMatcher.group(""player2""));\n}\n</pre>\n<p>Or, using dedicated variables instead of group names:</p>\n<pre>\nString score = ""14:1"";\n\nString player = ""([0-9]+)"";\nString gameScore = player + "":"" + player;\n\nPattern scorePattern = Pattern.compile(gameScore);\nMatcher scoreMatcher = scorePattern.matcher(score);\n\nif (scoreMatcher.matches()) {\n  checkScore(score);\n}\n</pre>'}]",[],['squid:S5860'],,,,
java:S5867,java,Unicode-aware versions of character classes should be preferred,2023-06-14T03:41:52+0000,"<p>When using POSIX classes like <code>\p{Alpha}</code> without the <code>UNICODE_CHARACTER_CLASS</code> flag or when using hard-coded character
classes like <code>""[a-zA-Z]""</code>, letters outside of the ASCII range, such as umlauts, accented letters or letter from non-Latin languages, won’t
be matched. This may cause code to incorrectly handle input containing such letters.</p>
<p>To correctly handle non-ASCII input, it is recommended to use Unicode classes like <code>\p{IsAlphabetic}</code>. When using POSIX classes, Unicode
support should be enabled by either passing <code>Pattern.UNICODE_CHARACTER_CLASS</code> as a flag to <code>Pattern.compile</code> or by using
<code>(?U)</code> inside the regex.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Pattern.compile(""[a-zA-Z]"");
Pattern.compile(""\\p{Alpha}"");
</pre>
<h2>Compliant Solution</h2>
<pre>
Pattern.compile(""\\p{IsAlphabetic}""); // matches all letters from all languages
Pattern.compile(""\\p{IsLatin}""); // matches latin letters, including umlauts and other non-ASCII variations
Pattern.compile(""\\p{Alpha}"", Pattern.UNICODE_CHARACTER_CLASS);
Pattern.compile(""(?U)\\p{Alpha}"");
</pre>","<p>When using POSIX classes like <code>\p{Alpha}</code> without the <code>UNICODE_CHARACTER_CLASS</code> flag or when using hard-coded character
classes like <code>""[a-zA-Z]""</code>, letters outside of the ASCII range, such as umlauts, accented letters or letter from non-Latin languages, won’t
be matched. This may cause code to incorrectly handle input containing such letters.</p>
<p>To correctly handle non-ASCII input, it is recommended to use Unicode classes like <code>\p{IsAlphabetic}</code>. When using POSIX classes, Unicode
support should be enabled by either passing <code>Pattern.UNICODE_CHARACTER_CLASS</code> as a flag to <code>Pattern.compile</code> or by using
<code>(?U)</code> inside the regex.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Pattern.compile(""[a-zA-Z]"");
Pattern.compile(""\\p{Alpha}"");
</pre>
<h2>Compliant Solution</h2>
<pre>
Pattern.compile(""\\p{IsAlphabetic}""); // matches all letters from all languages
Pattern.compile(""\\p{IsLatin}""); // matches latin letters, including umlauts and other non-ASCII variations
Pattern.compile(""\\p{Alpha}"", Pattern.UNICODE_CHARACTER_CLASS);
Pattern.compile(""(?U)\\p{Alpha}"");
</pre>",MINOR,READY,False,[],['regex'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>When using POSIX classes like <code>\\p{Alpha}</code> without the <code>UNICODE_CHARACTER_CLASS</code> flag or when using hard-coded character\nclasses like <code>""[a-zA-Z]""</code>, letters outside of the ASCII range, such as umlauts, accented letters or letter from non-Latin languages, won’t\nbe matched. This may cause code to incorrectly handle input containing such letters.</p>\n<p>To correctly handle non-ASCII input, it is recommended to use Unicode classes like <code>\\p{IsAlphabetic}</code>. When using POSIX classes, Unicode\nsupport should be enabled by either passing <code>Pattern.UNICODE_CHARACTER_CLASS</code> as a flag to <code>Pattern.compile</code> or by using\n<code>(?U)</code> inside the regex.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nPattern.compile(""[a-zA-Z]"");\nPattern.compile(""\\\\p{Alpha}"");\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nPattern.compile(""\\\\p{IsAlphabetic}""); // matches all letters from all languages\nPattern.compile(""\\\\p{IsLatin}""); // matches latin letters, including umlauts and other non-ASCII variations\nPattern.compile(""\\\\p{Alpha}"", Pattern.UNICODE_CHARACTER_CLASS);\nPattern.compile(""(?U)\\\\p{Alpha}"");\n</pre>'}]",[],['squid:S5867'],,,,
java:S1141,java,Try-catch blocks should not be nested,2023-06-14T03:41:52+0000,"<p>Nesting <code>try</code>/<code>catch</code> blocks severely impacts the readability of source code because it makes it too difficult to understand
which block will catch which exception.</p>","<p>Nesting <code>try</code>/<code>catch</code> blocks severely impacts the readability of source code because it makes it too difficult to understand
which block will catch which exception.</p>",MAJOR,READY,False,[],"['confusing', 'error-handling']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,20min,CONSTANT_ISSUE,20min,False,ALL,False,"[{'key': 'default', 'content': '<p>Nesting <code>try</code>/<code>catch</code> blocks severely impacts the readability of source code because it makes it too difficult to understand\nwhich block will catch which exception.</p>'}]",[],['squid:S1141'],,,,
java:S1142,java,Methods should not have too many return statements,2023-06-14T03:41:52+0000,"<p>Having too many return statements in a method increases the method’s essential complexity because the flow of execution is broken each time a
return statement is encountered. This makes it harder to read and understand the logic of the method.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold of 3:</p>
<pre>
public boolean myMethod() { // Noncompliant; there are 4 return statements
  if (condition1) {
    return true;
  } else {
    if (condition2) {
      return false;
    } else {
      return true;
    }
  }
  return false;
}
</pre>","<p>Having too many return statements in a method increases the method’s essential complexity because the flow of execution is broken each time a
return statement is encountered. This makes it harder to read and understand the logic of the method.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold of 3:</p>
<pre>
public boolean myMethod() { // Noncompliant; there are 4 return statements
  if (condition1) {
    return true;
  } else {
    if (condition2) {
      return false;
    } else {
      return true;
    }
  }
  return false;
}
</pre>",MAJOR,READY,False,[],['brain-overload'],java,Java,"[{'key': 'max', 'htmlDesc': 'Maximum allowed return statements per method', 'defaultValue': '3', 'type': 'INTEGER'}]",CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,20min,CONSTANT_ISSUE,20min,False,MAIN,False,"[{'key': 'default', 'content': '<p>Having too many return statements in a method increases the method’s essential complexity because the flow of execution is broken each time a\nreturn statement is encountered. This makes it harder to read and understand the logic of the method.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 3:</p>\n<pre>\npublic boolean myMethod() { // Noncompliant; there are 4 return statements\n  if (condition1) {\n    return true;\n  } else {\n    if (condition2) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n  return false;\n}\n</pre>'}]",[],['squid:S1142'],,,,
java:S1149,java,"Synchronized classes Vector, Hashtable, Stack and StringBuffer should not be used",2023-06-14T03:41:52+0000,"<p>Early classes of the Java API, such as <code>Vector</code>, <code>Hashtable</code> and <code>StringBuffer</code>, were synchronized to make them
thread-safe. Unfortunately, synchronization has a big negative impact on performance, even when using these collections from a single thread.</p>
<p>It is better to use their new unsynchronized replacements:</p>
<ul>
  <li> <code>ArrayList</code> or <code>LinkedList</code> instead of <code>Vector</code> </li>
  <li> <code>Deque</code> instead of <code>Stack</code> </li>
  <li> <code>HashMap</code> instead of <code>Hashtable</code> </li>
  <li> <code>StringBuilder</code> instead of <code>StringBuffer</code> </li>
</ul>
<p>Even when used in synchronized context, you should think twice before using it, since it’s usage can be tricky. If you are confident the usage is
legitimate, you can safely ignore this warning.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Vector cats = new Vector();
</pre>
<h2>Compliant Solution</h2>
<pre>
ArrayList cats = new ArrayList();
</pre>
<h2>Exceptions</h2>
<p>Use of those synchronized classes is ignored in the signatures of overriding methods.</p>
<pre>
@Override
public Vector getCats() {...}
</pre>","<p>Early classes of the Java API, such as <code>Vector</code>, <code>Hashtable</code> and <code>StringBuffer</code>, were synchronized to make them
thread-safe. Unfortunately, synchronization has a big negative impact on performance, even when using these collections from a single thread.</p>
<p>It is better to use their new unsynchronized replacements:</p>
<ul>
  <li> <code>ArrayList</code> or <code>LinkedList</code> instead of <code>Vector</code> </li>
  <li> <code>Deque</code> instead of <code>Stack</code> </li>
  <li> <code>HashMap</code> instead of <code>Hashtable</code> </li>
  <li> <code>StringBuilder</code> instead of <code>StringBuffer</code> </li>
</ul>
<p>Even when used in synchronized context, you should think twice before using it, since it’s usage can be tricky. If you are confident the usage is
legitimate, you can safely ignore this warning.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Vector cats = new Vector();
</pre>
<h2>Compliant Solution</h2>
<pre>
ArrayList cats = new ArrayList();
</pre>
<h2>Exceptions</h2>
<p>Use of those synchronized classes is ignored in the signatures of overriding methods.</p>
<pre>
@Override
public Vector getCats() {...}
</pre>",MAJOR,READY,False,[],['performance'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,20min,CONSTANT_ISSUE,20min,False,MAIN,False,"[{'key': 'default', 'content': '<p>Early classes of the Java API, such as <code>Vector</code>, <code>Hashtable</code> and <code>StringBuffer</code>, were synchronized to make them\nthread-safe. Unfortunately, synchronization has a big negative impact on performance, even when using these collections from a single thread.</p>\n<p>It is better to use their new unsynchronized replacements:</p>\n<ul>\n  <li> <code>ArrayList</code> or <code>LinkedList</code> instead of <code>Vector</code> </li>\n  <li> <code>Deque</code> instead of <code>Stack</code> </li>\n  <li> <code>HashMap</code> instead of <code>Hashtable</code> </li>\n  <li> <code>StringBuilder</code> instead of <code>StringBuffer</code> </li>\n</ul>\n<p>Even when used in synchronized context, you should think twice before using it, since it’s usage can be tricky. If you are confident the usage is\nlegitimate, you can safely ignore this warning.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nVector cats = new Vector();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nArrayList cats = new ArrayList();\n</pre>\n<h2>Exceptions</h2>\n<p>Use of those synchronized classes is ignored in the signatures of overriding methods.</p>\n<pre>\n@Override\npublic Vector getCats() {...}\n</pre>'}]",[],['squid:S1149'],,,,
java:S1264,java,"A ""while"" loop should be used instead of a ""for"" loop",2023-06-14T03:41:52+0000,"<p>When only the condition expression is defined in a <code>for</code> loop, and the initialization and increment expressions are missing, a
<code>while</code> loop should be used instead to increase readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (;condition;) { /*...*/ }
</pre>
<h2>Compliant Solution</h2>
<pre>
while (condition) { /*...*/ }
</pre>","<p>When only the condition expression is defined in a <code>for</code> loop, and the initialization and increment expressions are missing, a
<code>while</code> loop should be used instead to increase readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (;condition;) { /*...*/ }
</pre>
<h2>Compliant Solution</h2>
<pre>
while (condition) { /*...*/ }
</pre>",MINOR,READY,False,[],['clumsy'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>When only the condition expression is defined in a <code>for</code> loop, and the initialization and increment expressions are missing, a\n<code>while</code> loop should be used instead to increase readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (;condition;) { /*...*/ }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nwhile (condition) { /*...*/ }\n</pre>'}]",[],['squid:S1264'],,,,
java:S2203,java,"""collect"" should be used with ""Streams"" instead of ""list::add""",2023-06-14T03:41:52+0000,"<p>While you can use either <code>forEach(list::add)</code> or <code>collect</code> with a <code>Stream</code>, <code>collect</code> is by far the
better choice because it’s automatically thread-safe and parallellizable.</p>
<h2>Noncompliant Code Example</h2>
<pre>
List&lt;String&gt; bookNames = new ArrayList&lt;&gt;();
books.stream().filter(book -&gt; book.getIsbn().startsWith(""0""))
                .map(Book::getTitle)
                .forEach(bookNames::add);  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
List&lt;String&gt; bookNames = books.stream().filter(book -&gt; book.getIsbn().startsWith(""0""))
                .map(Book::getTitle)
                .collect(Collectors.toList());
</pre>","<p>While you can use either <code>forEach(list::add)</code> or <code>collect</code> with a <code>Stream</code>, <code>collect</code> is by far the
better choice because it’s automatically thread-safe and parallellizable.</p>
<h2>Noncompliant Code Example</h2>
<pre>
List&lt;String&gt; bookNames = new ArrayList&lt;&gt;();
books.stream().filter(book -&gt; book.getIsbn().startsWith(""0""))
                .map(Book::getTitle)
                .forEach(bookNames::add);  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
List&lt;String&gt; bookNames = books.stream().filter(book -&gt; book.getIsbn().startsWith(""0""))
                .map(Book::getTitle)
                .collect(Collectors.toList());
</pre>",MINOR,READY,False,[],['java8'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,15min,CONSTANT_ISSUE,15min,False,ALL,False,"[{'key': 'default', 'content': '<p>While you can use either <code>forEach(list::add)</code> or <code>collect</code> with a <code>Stream</code>, <code>collect</code> is by far the\nbetter choice because it’s automatically thread-safe and parallellizable.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;String&gt; bookNames = new ArrayList&lt;&gt;();\nbooks.stream().filter(book -&gt; book.getIsbn().startsWith(""0""))\n                .map(Book::getTitle)\n                .forEach(bookNames::add);  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nList&lt;String&gt; bookNames = books.stream().filter(book -&gt; book.getIsbn().startsWith(""0""))\n                .map(Book::getTitle)\n                .collect(Collectors.toList());\n</pre>'}]",[],['squid:S2203'],,,,
java:S5869,java,Character classes in regular expressions should not contain the same character twice,2023-06-14T03:41:52+0000,"<p>Character classes in regular expressions are a convenient way to match one of several possible characters by listing the allowed characters or
ranges of characters. If the same character is listed twice in the same character class or if the character class contains overlapping ranges, this
has no effect.</p>
<p>Thus duplicate characters in a character class are either a simple oversight or a sign that a range in the character class matches more than is
intended or that the author misunderstood how character classes work and wanted to match more than one character. A common example of the latter
mistake is trying to use a range like <code>[0-99]</code> to match numbers of up to two digits, when in fact it is equivalent to <code>[0-9]</code>.
Another common cause is forgetting to escape the <code>-</code> character, creating an unintended range that overlaps with other characters in the
character class.</p>
<h2>Noncompliant Code Example</h2>
<pre>
str.matches(""[0-99]"") // Noncompliant, this won't actually match strings with two digits
str.matches(""[0-9.-_]"") // Noncompliant, .-_ is a range that already contains 0-9 (as well as various other characters such as capital letters)
</pre>
<h2>Compliant Solution</h2>
<pre>
str.matches(""[0-9]{1,2}"")
str.matches(""[0-9.\\-_]"")
</pre>","<p>Character classes in regular expressions are a convenient way to match one of several possible characters by listing the allowed characters or
ranges of characters. If the same character is listed twice in the same character class or if the character class contains overlapping ranges, this
has no effect.</p>
<p>Thus duplicate characters in a character class are either a simple oversight or a sign that a range in the character class matches more than is
intended or that the author misunderstood how character classes work and wanted to match more than one character. A common example of the latter
mistake is trying to use a range like <code>[0-99]</code> to match numbers of up to two digits, when in fact it is equivalent to <code>[0-9]</code>.
Another common cause is forgetting to escape the <code>-</code> character, creating an unintended range that overlaps with other characters in the
character class.</p>
<h2>Noncompliant Code Example</h2>
<pre>
str.matches(""[0-99]"") // Noncompliant, this won't actually match strings with two digits
str.matches(""[0-9.-_]"") // Noncompliant, .-_ is a range that already contains 0-9 (as well as various other characters such as capital letters)
</pre>
<h2>Compliant Solution</h2>
<pre>
str.matches(""[0-9]{1,2}"")
str.matches(""[0-9.\\-_]"")
</pre>",MAJOR,READY,False,[],['regex'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>Character classes in regular expressions are a convenient way to match one of several possible characters by listing the allowed characters or\nranges of characters. If the same character is listed twice in the same character class or if the character class contains overlapping ranges, this\nhas no effect.</p>\n<p>Thus duplicate characters in a character class are either a simple oversight or a sign that a range in the character class matches more than is\nintended or that the author misunderstood how character classes work and wanted to match more than one character. A common example of the latter\nmistake is trying to use a range like <code>[0-99]</code> to match numbers of up to two digits, when in fact it is equivalent to <code>[0-9]</code>.\nAnother common cause is forgetting to escape the <code>-</code> character, creating an unintended range that overlaps with other characters in the\ncharacter class.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nstr.matches(""[0-99]"") // Noncompliant, this won\'t actually match strings with two digits\nstr.matches(""[0-9.-_]"") // Noncompliant, .-_ is a range that already contains 0-9 (as well as various other characters such as capital letters)\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nstr.matches(""[0-9]{1,2}"")\nstr.matches(""[0-9.\\\\-_]"")\n</pre>'}]",[],['squid:S5869'],,,,
java:S881,java,Increment (++) and decrement (--) operators should not be used in a method call or mixed with other operators in an expression,2023-06-14T03:41:52+0000,"<p>The use of increment and decrement operators in method calls or in combination with other arithmetic operators is not recommended, because:</p>
<ul>
  <li> It can significantly impair the readability of the code. </li>
  <li> It introduces additional side effects into a statement, with the potential for undefined behavior. </li>
  <li> It is safer to use these operators in isolation from any other arithmetic operators. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
u8a = ++u8b + u8c--;
foo = bar++ / 4;
</pre>
<h2>Compliant Solution</h2>
<p>The following sequence is clearer and therefore safer:</p>
<pre>
++u8b;
u8a = u8b + u8c;
u8c--;
foo = bar / 4;
bar++;
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/StYxBQ"">CERT, EXP30-C.</a> - Do not depend on the order of evaluation for side effects </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/IXw-BQ"">CERT, EXP50-CPP.</a> - Do not depend on the order of evaluation for side effects </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/NDdGBQ"">CERT, EXP05-J.</a> - Do not follow a write by a subsequent write or read of the same
  object within an expression </li>
</ul>","<p>The use of increment and decrement operators in method calls or in combination with other arithmetic operators is not recommended, because:</p>
<ul>
  <li> It can significantly impair the readability of the code. </li>
  <li> It introduces additional side effects into a statement, with the potential for undefined behavior. </li>
  <li> It is safer to use these operators in isolation from any other arithmetic operators. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
u8a = ++u8b + u8c--;
foo = bar++ / 4;
</pre>
<h2>Compliant Solution</h2>
<p>The following sequence is clearer and therefore safer:</p>
<pre>
++u8b;
u8a = u8b + u8c;
u8c--;
foo = bar / 4;
bar++;
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/StYxBQ"">CERT, EXP30-C.</a> - Do not depend on the order of evaluation for side effects </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/IXw-BQ"">CERT, EXP50-CPP.</a> - Do not depend on the order of evaluation for side effects </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/NDdGBQ"">CERT, EXP05-J.</a> - Do not follow a write by a subsequent write or read of the same
  object within an expression </li>
</ul>",MAJOR,READY,False,[],['cert'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>The use of increment and decrement operators in method calls or in combination with other arithmetic operators is not recommended, because:</p>\n<ul>\n  <li> It can significantly impair the readability of the code. </li>\n  <li> It introduces additional side effects into a statement, with the potential for undefined behavior. </li>\n  <li> It is safer to use these operators in isolation from any other arithmetic operators. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nu8a = ++u8b + u8c--;\nfoo = bar++ / 4;\n</pre>\n<h2>Compliant Solution</h2>\n<p>The following sequence is clearer and therefore safer:</p>\n<pre>\n++u8b;\nu8a = u8b + u8c;\nu8c--;\nfoo = bar / 4;\nbar++;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/StYxBQ"">CERT, EXP30-C.</a> - Do not depend on the order of evaluation for side effects </li>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/IXw-BQ"">CERT, EXP50-CPP.</a> - Do not depend on the order of evaluation for side effects </li>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/NDdGBQ"">CERT, EXP05-J.</a> - Do not follow a write by a subsequent write or read of the same\n  object within an expression </li>\n</ul>'}]",[],['squid:S881'],,,,
java:S1598,java,Package declaration should match source file directory,2023-06-14T03:41:52+0000,"<p>By convention, a Java class' physical location (source directories) and its logical representation (packages) should be kept in sync. Thus a Java
file located at <code>""src/org/bar/Foo.java""</code> should have a package of <code>""org.bar""</code>.</p>
<p>Unfortunately, this convention is not enforced by Java compilers, and nothing prevents a developer from making the ""Foo.java"" class part of the
""com.apple"" package, which could degrade the maintainability of both the class and its application.</p>
<p>Similarly, source placed in a folder with dots in its name instead of having the equivalent folder structure will compile but cause problems at run
time. For instance, code with a package declaration of <code>org.foo.bar</code> that is placed in <code>org/foo.bar</code> will compile, but the
classloader will always search for the class into the folder based on package structure, and will consequently expect sources to be in
<code>org/foo/bar</code> folder. <code>foo.bar</code> is therefore not a proper folder name for sources.</p>","<p>By convention, a Java class' physical location (source directories) and its logical representation (packages) should be kept in sync. Thus a Java
file located at <code>""src/org/bar/Foo.java""</code> should have a package of <code>""org.bar""</code>.</p>
<p>Unfortunately, this convention is not enforced by Java compilers, and nothing prevents a developer from making the ""Foo.java"" class part of the
""com.apple"" package, which could degrade the maintainability of both the class and its application.</p>
<p>Similarly, source placed in a folder with dots in its name instead of having the equivalent folder structure will compile but cause problems at run
time. For instance, code with a package declaration of <code>org.foo.bar</code> that is placed in <code>org/foo.bar</code> will compile, but the
classloader will always search for the class into the folder based on package structure, and will consequently expect sources to be in
<code>org/foo/bar</code> folder. <code>foo.bar</code> is therefore not a proper folder name for sources.</p>",CRITICAL,READY,False,[],['pitfall'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>By convention, a Java class\' physical location (source directories) and its logical representation (packages) should be kept in sync. Thus a Java\nfile located at <code>""src/org/bar/Foo.java""</code> should have a package of <code>""org.bar""</code>.</p>\n<p>Unfortunately, this convention is not enforced by Java compilers, and nothing prevents a developer from making the ""Foo.java"" class part of the\n""com.apple"" package, which could degrade the maintainability of both the class and its application.</p>\n<p>Similarly, source placed in a folder with dots in its name instead of having the equivalent folder structure will compile but cause problems at run\ntime. For instance, code with a package declaration of <code>org.foo.bar</code> that is placed in <code>org/foo.bar</code> will compile, but the\nclassloader will always search for the class into the folder based on package structure, and will consequently expect sources to be in\n<code>org/foo/bar</code> folder. <code>foo.bar</code> is therefore not a proper folder name for sources.</p>'}]",[],['squid:S1598'],,,,
java:S2325,java,"""private"" and ""final"" methods that don't access instance data should be ""static""",2023-06-14T03:41:52+0000,"<p>Non-overridable methods (<code>private</code> or <code>final</code>) that don’t access instance data can be <code>static</code> to prevent any
misunderstanding about the contract of the method.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Utilities {
  private static String magicWord = ""magic"";

  private String getMagicWord() { // Noncompliant
    return magicWord;
  }

  private void setMagicWord(String value) { // Noncompliant
    magicWord = value;
  }

}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Utilities {
  private static String magicWord = ""magic"";

  private static String getMagicWord() {
    return magicWord;
  }

  private static void setMagicWord(String value) {
    magicWord = value;
  }

}
</pre>
<h2>Exceptions</h2>
<p>When <code>java.io.Serializable</code> is implemented the following three methods are excluded by the rule:</p>
<ul>
  <li> <code>private void writeObject(java.io.ObjectOutputStream out) throws IOException;</code> </li>
  <li> <code>private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException;</code> </li>
  <li> <code>private void readObjectNoData() throws ObjectStreamException;</code> </li>
</ul>","<p>Non-overridable methods (<code>private</code> or <code>final</code>) that don’t access instance data can be <code>static</code> to prevent any
misunderstanding about the contract of the method.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Utilities {
  private static String magicWord = ""magic"";

  private String getMagicWord() { // Noncompliant
    return magicWord;
  }

  private void setMagicWord(String value) { // Noncompliant
    magicWord = value;
  }

}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Utilities {
  private static String magicWord = ""magic"";

  private static String getMagicWord() {
    return magicWord;
  }

  private static void setMagicWord(String value) {
    magicWord = value;
  }

}
</pre>
<h2>Exceptions</h2>
<p>When <code>java.io.Serializable</code> is implemented the following three methods are excluded by the rule:</p>
<ul>
  <li> <code>private void writeObject(java.io.ObjectOutputStream out) throws IOException;</code> </li>
  <li> <code>private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException;</code> </li>
  <li> <code>private void readObjectNoData() throws ObjectStreamException;</code> </li>
</ul>",MINOR,READY,False,[],['pitfall'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>Non-overridable methods (<code>private</code> or <code>final</code>) that don’t access instance data can be <code>static</code> to prevent any\nmisunderstanding about the contract of the method.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Utilities {\n  private static String magicWord = ""magic"";\n\n  private String getMagicWord() { // Noncompliant\n    return magicWord;\n  }\n\n  private void setMagicWord(String value) { // Noncompliant\n    magicWord = value;\n  }\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Utilities {\n  private static String magicWord = ""magic"";\n\n  private static String getMagicWord() {\n    return magicWord;\n  }\n\n  private static void setMagicWord(String value) {\n    magicWord = value;\n  }\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>When <code>java.io.Serializable</code> is implemented the following three methods are excluded by the rule:</p>\n<ul>\n  <li> <code>private void writeObject(java.io.ObjectOutputStream out) throws IOException;</code> </li>\n  <li> <code>private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException;</code> </li>\n  <li> <code>private void readObjectNoData() throws ObjectStreamException;</code> </li>\n</ul>'}]",[],['squid:S2325'],,,,
java:S3414,java,Tests should be kept in a dedicated source directory,2023-06-14T03:41:52+0000,"<p>It is a good practice to isolate test classes in a separate package so that what is shipped to production is neither polluted by nor bloated with
them. Further, including unit tests in code assemblies could affect build processes.</p>
<p>This rule raises an issue when test classes are found in projects containing non-test-related code.</p>","<p>It is a good practice to isolate test classes in a separate package so that what is shipped to production is neither polluted by nor bloated with
them. Further, including unit tests in code assemblies could affect build processes.</p>
<p>This rule raises an issue when test classes are found in projects containing non-test-related code.</p>",MAJOR,READY,False,[],"['suspicious', 'tests']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,MAIN,False,"[{'key': 'default', 'content': '<p>It is a good practice to isolate test classes in a separate package so that what is shipped to production is neither polluted by nor bloated with\nthem. Further, including unit tests in code assemblies could affect build processes.</p>\n<p>This rule raises an issue when test classes are found in projects containing non-test-related code.</p>'}]",[],['squid:S3414'],,,,
java:S3776,java,Cognitive Complexity of methods should not be too high,2023-06-14T03:41:52+0000,"<p>Cognitive Complexity is a measure of how hard the control flow of a method is to understand. Methods with high Cognitive Complexity will be
difficult to maintain.</p>
<h2>Exceptions</h2>
<p><code>equals</code> and <code>hashCode</code> methods are ignored because they might be automatically generated and might end up being difficult to
understand, especially in presence of many fields.</p>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.sonarsource.com/docs/CognitiveComplexity.pdf"">Cognitive Complexity</a> </li>
</ul>","<p>Cognitive Complexity is a measure of how hard the control flow of a method is to understand. Methods with high Cognitive Complexity will be
difficult to maintain.</p>
<h2>Exceptions</h2>
<p><code>equals</code> and <code>hashCode</code> methods are ignored because they might be automatically generated and might end up being difficult to
understand, especially in presence of many fields.</p>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.sonarsource.com/docs/CognitiveComplexity.pdf"">Cognitive Complexity</a> </li>
</ul>",CRITICAL,READY,False,[],['brain-overload'],java,Java,"[{'key': 'Threshold', 'htmlDesc': 'The maximum authorized complexity.', 'defaultValue': '15', 'type': 'INTEGER'}]",LINEAR_OFFSET,LINEAR_OFFSET,CODE_SMELL,LINEAR_OFFSET,5min,LINEAR_OFFSET,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>Cognitive Complexity is a measure of how hard the control flow of a method is to understand. Methods with high Cognitive Complexity will be\ndifficult to maintain.</p>\n<h2>Exceptions</h2>\n<p><code>equals</code> and <code>hashCode</code> methods are ignored because they might be automatically generated and might end up being difficult to\nunderstand, especially in presence of many fields.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://www.sonarsource.com/docs/CognitiveComplexity.pdf"">Cognitive Complexity</a> </li>\n</ul>'}]",[],['squid:S3776'],1min,1min,per complexity point over the threshold,
java:S1113,java,The Object.finalize() method should not be overridden,2023-06-14T03:41:52+0000,"<p>The <code>Object.finalize()</code> method is called on an object by the garbage collector when it determines that there are no more references to
the object. But there is absolutely no warranty that this method will be called AS SOON AS the last references to the object are removed. It can be
few microseconds to few minutes later. So when system resources need to be disposed by an object, it’s better to not rely on this asynchronous
mechanism to dispose them.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass {
  ...
  protected void finalize() {
    releaseSomeResources();    // Noncompliant
  }
  ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/4jZGBQ"">CERT, MET12-J.</a> - Do not use finalizers </li>
</ul>","<p>The <code>Object.finalize()</code> method is called on an object by the garbage collector when it determines that there are no more references to
the object. But there is absolutely no warranty that this method will be called AS SOON AS the last references to the object are removed. It can be
few microseconds to few minutes later. So when system resources need to be disposed by an object, it’s better to not rely on this asynchronous
mechanism to dispose them.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass {
  ...
  protected void finalize() {
    releaseSomeResources();    // Noncompliant
  }
  ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/4jZGBQ"">CERT, MET12-J.</a> - Do not use finalizers </li>
</ul>",CRITICAL,READY,False,[],"['cert', 'unpredictable']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,20min,CONSTANT_ISSUE,20min,False,MAIN,False,"[{'key': 'default', 'content': '<p>The <code>Object.finalize()</code> method is called on an object by the garbage collector when it determines that there are no more references to\nthe object. But there is absolutely no warranty that this method will be called AS SOON AS the last references to the object are removed. It can be\nfew microseconds to few minutes later. So when system resources need to be disposed by an object, it’s better to not rely on this asynchronous\nmechanism to dispose them.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  ...\n  protected void finalize() {\n    releaseSomeResources();    // Noncompliant\n  }\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/4jZGBQ"">CERT, MET12-J.</a> - Do not use finalizers </li>\n</ul>'}]",[],['squid:ObjectFinalizeOverridenCheck'],,,,
java:S1596,java,"""Collections.EMPTY_LIST"", ""EMPTY_MAP"", and ""EMPTY_SET"" should not be used",2023-06-14T03:41:52+0000,"<p>Since the introduction of generics in Java 5, the use of generic types such as <code>List&lt;String&gt;</code> is recommended over the use of raw
ones such as <code>List</code>. Assigning a raw type to a generic one is not type safe, and will generate a warning. The old <code>EMPTY_...</code>
fields of the <code>Collections</code> class return raw types, whereas the newer <code>empty...()</code> methods return generic ones.</p>
<h2>Noncompliant Code Example</h2>
<pre>
List&lt;String&gt; collection1 = Collections.EMPTY_LIST;  // Noncompliant
Map&lt;String, String&gt; collection2 = Collections.EMPTY_MAP;  // Noncompliant
Set&lt;String&gt; collection3 = Collections.EMPTY_SET;  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
List&lt;String&gt; collection1 = Collections.emptyList();
Map&lt;String, String&gt; collection2 = Collections.emptyMap();
Set&lt;String&gt; collection3 = Collections.emptySet();
</pre>","<p>Since the introduction of generics in Java 5, the use of generic types such as <code>List&lt;String&gt;</code> is recommended over the use of raw
ones such as <code>List</code>. Assigning a raw type to a generic one is not type safe, and will generate a warning. The old <code>EMPTY_...</code>
fields of the <code>Collections</code> class return raw types, whereas the newer <code>empty...()</code> methods return generic ones.</p>
<h2>Noncompliant Code Example</h2>
<pre>
List&lt;String&gt; collection1 = Collections.EMPTY_LIST;  // Noncompliant
Map&lt;String, String&gt; collection2 = Collections.EMPTY_MAP;  // Noncompliant
Set&lt;String&gt; collection3 = Collections.EMPTY_SET;  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
List&lt;String&gt; collection1 = Collections.emptyList();
Map&lt;String, String&gt; collection2 = Collections.emptyMap();
Set&lt;String&gt; collection3 = Collections.emptySet();
</pre>",MINOR,READY,False,[],"['obsolete', 'pitfall']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,2min,CONSTANT_ISSUE,2min,False,ALL,False,"[{'key': 'default', 'content': '<p>Since the introduction of generics in Java 5, the use of generic types such as <code>List&lt;String&gt;</code> is recommended over the use of raw\nones such as <code>List</code>. Assigning a raw type to a generic one is not type safe, and will generate a warning. The old <code>EMPTY_...</code>\nfields of the <code>Collections</code> class return raw types, whereas the newer <code>empty...()</code> methods return generic ones.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;String&gt; collection1 = Collections.EMPTY_LIST;  // Noncompliant\nMap&lt;String, String&gt; collection2 = Collections.EMPTY_MAP;  // Noncompliant\nSet&lt;String&gt; collection3 = Collections.EMPTY_SET;  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nList&lt;String&gt; collection1 = Collections.emptyList();\nMap&lt;String, String&gt; collection2 = Collections.emptyMap();\nSet&lt;String&gt; collection3 = Collections.emptySet();\n</pre>'}]",[],['squid:S1596'],,,,
java:S2444,java,"Lazy initialization of ""static"" fields should be ""synchronized""",2023-06-14T03:41:52+0000,"<p>In a multi-threaded situation, un-<code>synchronized</code> lazy initialization of static fields could mean that a second thread has access to a
half-initialized object while the first thread is still creating it. Allowing such access could cause serious bugs. Instead. the initialization block
should be <code>synchronized</code>.</p>
<p>Similarly, updates of such fields should also be <code>synchronized</code>.</p>
<p>This rule raises an issue whenever a lazy static initialization is done on a class with at least one <code>synchronized</code> method, indicating
intended usage in multi-threaded applications.</p>
<h2>Noncompliant Code Example</h2>
<pre>
private static Properties fPreferences = null;

private static Properties getPreferences() {
        if (fPreferences == null) {
            fPreferences = new Properties(); // Noncompliant
            fPreferences.put(""loading"", ""true"");
            fPreferences.put(""filterstack"", ""true"");
            readPreferences();
        }
        return fPreferences;
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
private static Properties fPreferences = null;

private static synchronized Properties getPreferences() {
        if (fPreferences == null) {
            fPreferences = new Properties();
            fPreferences.put(""loading"", ""true"");
            fPreferences.put(""filterstack"", ""true"");
            readPreferences();
        }
        return fPreferences;
    }
}
</pre>","<p>In a multi-threaded situation, un-<code>synchronized</code> lazy initialization of static fields could mean that a second thread has access to a
half-initialized object while the first thread is still creating it. Allowing such access could cause serious bugs. Instead. the initialization block
should be <code>synchronized</code>.</p>
<p>Similarly, updates of such fields should also be <code>synchronized</code>.</p>
<p>This rule raises an issue whenever a lazy static initialization is done on a class with at least one <code>synchronized</code> method, indicating
intended usage in multi-threaded applications.</p>
<h2>Noncompliant Code Example</h2>
<pre>
private static Properties fPreferences = null;

private static Properties getPreferences() {
        if (fPreferences == null) {
            fPreferences = new Properties(); // Noncompliant
            fPreferences.put(""loading"", ""true"");
            fPreferences.put(""filterstack"", ""true"");
            readPreferences();
        }
        return fPreferences;
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
private static Properties fPreferences = null;

private static synchronized Properties getPreferences() {
        if (fPreferences == null) {
            fPreferences = new Properties();
            fPreferences.put(""loading"", ""true"");
            fPreferences.put(""filterstack"", ""true"");
            readPreferences();
        }
        return fPreferences;
    }
}
</pre>",CRITICAL,READY,False,[],['multi-threading'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,30min,CONSTANT_ISSUE,30min,False,ALL,False,"[{'key': 'default', 'content': '<p>In a multi-threaded situation, un-<code>synchronized</code> lazy initialization of static fields could mean that a second thread has access to a\nhalf-initialized object while the first thread is still creating it. Allowing such access could cause serious bugs. Instead. the initialization block\nshould be <code>synchronized</code>.</p>\n<p>Similarly, updates of such fields should also be <code>synchronized</code>.</p>\n<p>This rule raises an issue whenever a lazy static initialization is done on a class with at least one <code>synchronized</code> method, indicating\nintended usage in multi-threaded applications.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate static Properties fPreferences = null;\n\nprivate static Properties getPreferences() {\n        if (fPreferences == null) {\n            fPreferences = new Properties(); // Noncompliant\n            fPreferences.put(""loading"", ""true"");\n            fPreferences.put(""filterstack"", ""true"");\n            readPreferences();\n        }\n        return fPreferences;\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate static Properties fPreferences = null;\n\nprivate static synchronized Properties getPreferences() {\n        if (fPreferences == null) {\n            fPreferences = new Properties();\n            fPreferences.put(""loading"", ""true"");\n            fPreferences.put(""filterstack"", ""true"");\n            readPreferences();\n        }\n        return fPreferences;\n    }\n}\n</pre>'}]",[],['squid:S2444'],,,,
java:NoSonar,java,"Track uses of ""NOSONAR"" comments",2023-06-14T03:41:52+0000,"<p>Any issue to quality rule can be deactivated with the <code>NOSONAR</code> marker. This marker is pretty useful to exclude false-positive results
but it can also be used abusively to hide real quality flaws.</p>
<p>This rule raises an issue when <code>NOSONAR</code> is used.</p>","<p>Any issue to quality rule can be deactivated with the <code>NOSONAR</code> marker. This marker is pretty useful to exclude false-positive results
but it can also be used abusively to hide real quality flaws.</p>
<p>This rule raises an issue when <code>NOSONAR</code> is used.</p>",MAJOR,READY,False,[],['bad-practice'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,1min,CONSTANT_ISSUE,1min,False,ALL,False,"[{'key': 'default', 'content': '<p>Any issue to quality rule can be deactivated with the <code>NOSONAR</code> marker. This marker is pretty useful to exclude false-positive results\nbut it can also be used abusively to hide real quality flaws.</p>\n<p>This rule raises an issue when <code>NOSONAR</code> is used.</p>'}]",[],['squid:NoSonar'],,,,S1291
java:S1110,java,Redundant pairs of parentheses should be removed,2023-06-14T03:41:52+0000,"<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But
redundant pairs of parentheses could be misleading, and should be removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int x = (y / 2 + 1);   //Compliant even if the parenthesis are ignored by the compiler

if (a &amp;&amp; ((x+y &gt; 0))) {  // Noncompliant
  //...
}

return ((x + 1));  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
int x = (y / 2 + 1);

if (a &amp;&amp; (x+y &gt; 0)) {
  //...
}

return (x + 1);
</pre>","<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But
redundant pairs of parentheses could be misleading, and should be removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int x = (y / 2 + 1);   //Compliant even if the parenthesis are ignored by the compiler

if (a &amp;&amp; ((x+y &gt; 0))) {  // Noncompliant
  //...
}

return ((x + 1));  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
int x = (y / 2 + 1);

if (a &amp;&amp; (x+y &gt; 0)) {
  //...
}

return (x + 1);
</pre>",MAJOR,READY,False,[],['confusing'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,1min,CONSTANT_ISSUE,1min,False,ALL,False,"[{'key': 'default', 'content': '<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But\nredundant pairs of parentheses could be misleading, and should be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint x = (y / 2 + 1);   //Compliant even if the parenthesis are ignored by the compiler\n\nif (a &amp;&amp; ((x+y &gt; 0))) {  // Noncompliant\n  //...\n}\n\nreturn ((x + 1));  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint x = (y / 2 + 1);\n\nif (a &amp;&amp; (x+y &gt; 0)) {\n  //...\n}\n\nreturn (x + 1);\n</pre>'}]",[],['squid:UselessParenthesesCheck'],,,,
java:S1118,java,Utility classes should not have public constructors,2023-06-14T03:41:52+0000,"<p>Utility classes, which are collections of <code>static</code> members, are not meant to be instantiated. Even abstract utility classes, which can
be extended, should not have public constructors.</p>
<p>Java adds an implicit public constructor to every class which does not define at least one explicitly. Hence, at least one non-public constructor
should be defined.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class StringUtils { // Noncompliant

  public static String concatenate(String s1, String s2) {
    return s1 + s2;
  }

}
</pre>
<h2>Compliant Solution</h2>
<pre>
class StringUtils { // Compliant

  private StringUtils() {
    throw new IllegalStateException(""Utility class"");
  }

  public static String concatenate(String s1, String s2) {
    return s1 + s2;
  }

}
</pre>
<h2>Exceptions</h2>
<p>When class contains <code>public static void main(String[] args)</code> method it is not considered as utility class and will be ignored by this
rule.</p>","<p>Utility classes, which are collections of <code>static</code> members, are not meant to be instantiated. Even abstract utility classes, which can
be extended, should not have public constructors.</p>
<p>Java adds an implicit public constructor to every class which does not define at least one explicitly. Hence, at least one non-public constructor
should be defined.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class StringUtils { // Noncompliant

  public static String concatenate(String s1, String s2) {
    return s1 + s2;
  }

}
</pre>
<h2>Compliant Solution</h2>
<pre>
class StringUtils { // Compliant

  private StringUtils() {
    throw new IllegalStateException(""Utility class"");
  }

  public static String concatenate(String s1, String s2) {
    return s1 + s2;
  }

}
</pre>
<h2>Exceptions</h2>
<p>When class contains <code>public static void main(String[] args)</code> method it is not considered as utility class and will be ignored by this
rule.</p>",MAJOR,READY,False,[],['design'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>Utility classes, which are collections of <code>static</code> members, are not meant to be instantiated. Even abstract utility classes, which can\nbe extended, should not have public constructors.</p>\n<p>Java adds an implicit public constructor to every class which does not define at least one explicitly. Hence, at least one non-public constructor\nshould be defined.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass StringUtils { // Noncompliant\n\n  public static String concatenate(String s1, String s2) {\n    return s1 + s2;\n  }\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass StringUtils { // Compliant\n\n  private StringUtils() {\n    throw new IllegalStateException(""Utility class"");\n  }\n\n  public static String concatenate(String s1, String s2) {\n    return s1 + s2;\n  }\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>When class contains <code>public static void main(String[] args)</code> method it is not considered as utility class and will be ignored by this\nrule.</p>'}]",[],['squid:S1118'],,,,
java:S1119,java,Labels should not be used,2023-06-14T03:41:52+0000,"<p>Labels are not commonly used in Java, and many developers do not understand how they work. Moreover, their usage makes the control flow harder to
follow, which reduces the code’s readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int matrix[][] = {
  {1, 2, 3},
  {4, 5, 6},
  {7, 8, 9}
};

outer: for (int row = 0; row &lt; matrix.length; row++) {   // Non-Compliant
  for (int col = 0; col &lt; matrix[row].length; col++) {
    if (col == row) {
      continue outer;
    }
    System.out.println(matrix[row][col]);                // Prints the elements under the diagonal, i.e. 4, 7 and 8
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for (int row = 1; row &lt; matrix.length; row++) {          // Compliant
  for (int col = 0; col &lt; row; col++) {
    System.out.println(matrix[row][col]);                // Also prints 4, 7 and 8
  }
}
</pre>","<p>Labels are not commonly used in Java, and many developers do not understand how they work. Moreover, their usage makes the control flow harder to
follow, which reduces the code’s readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int matrix[][] = {
  {1, 2, 3},
  {4, 5, 6},
  {7, 8, 9}
};

outer: for (int row = 0; row &lt; matrix.length; row++) {   // Non-Compliant
  for (int col = 0; col &lt; matrix[row].length; col++) {
    if (col == row) {
      continue outer;
    }
    System.out.println(matrix[row][col]);                // Prints the elements under the diagonal, i.e. 4, 7 and 8
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for (int row = 1; row &lt; matrix.length; row++) {          // Compliant
  for (int col = 0; col &lt; row; col++) {
    System.out.println(matrix[row][col]);                // Also prints 4, 7 and 8
  }
}
</pre>",MAJOR,READY,False,[],['confusing'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,30min,CONSTANT_ISSUE,30min,False,ALL,False,"[{'key': 'default', 'content': '<p>Labels are not commonly used in Java, and many developers do not understand how they work. Moreover, their usage makes the control flow harder to\nfollow, which reduces the code’s readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint matrix[][] = {\n  {1, 2, 3},\n  {4, 5, 6},\n  {7, 8, 9}\n};\n\nouter: for (int row = 0; row &lt; matrix.length; row++) {   // Non-Compliant\n  for (int col = 0; col &lt; matrix[row].length; col++) {\n    if (col == row) {\n      continue outer;\n    }\n    System.out.println(matrix[row][col]);                // Prints the elements under the diagonal, i.e. 4, 7 and 8\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor (int row = 1; row &lt; matrix.length; row++) {          // Compliant\n  for (int col = 0; col &lt; row; col++) {\n    System.out.println(matrix[row][col]);                // Also prints 4, 7 and 8\n  }\n}\n</pre>'}]",[],['squid:LabelsShouldNotBeUsedCheck'],,,,
java:S2208,java,Wildcard imports should not be used,2023-06-14T03:41:52+0000,"<p>Blindly importing all the classes in a package clutters the class namespace and could lead to conflicts between classes in different packages with
the same name. On the other hand, specifically listing the necessary classes avoids that problem and makes clear which versions were wanted.</p>
<h2>Noncompliant Code Example</h2>
<pre>
import java.sql.*; // Noncompliant
import java.util.*; // Noncompliant

private Date date; // Date class exists in java.sql and java.util. Which one is this?
</pre>
<h2>Compliant Solution</h2>
<pre>
import java.sql.Date;
import java.util.List;
import java.util.ArrayList;

private Date date;
</pre>
<h2>Exceptions</h2>
<p>Static imports are ignored by this rule. E.G.</p>
<pre>
import static java.lang.Math.*;
</pre>","<p>Blindly importing all the classes in a package clutters the class namespace and could lead to conflicts between classes in different packages with
the same name. On the other hand, specifically listing the necessary classes avoids that problem and makes clear which versions were wanted.</p>
<h2>Noncompliant Code Example</h2>
<pre>
import java.sql.*; // Noncompliant
import java.util.*; // Noncompliant

private Date date; // Date class exists in java.sql and java.util. Which one is this?
</pre>
<h2>Compliant Solution</h2>
<pre>
import java.sql.Date;
import java.util.List;
import java.util.ArrayList;

private Date date;
</pre>
<h2>Exceptions</h2>
<p>Static imports are ignored by this rule. E.G.</p>
<pre>
import static java.lang.Math.*;
</pre>",CRITICAL,READY,False,[],['pitfall'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>Blindly importing all the classes in a package clutters the class namespace and could lead to conflicts between classes in different packages with\nthe same name. On the other hand, specifically listing the necessary classes avoids that problem and makes clear which versions were wanted.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport java.sql.*; // Noncompliant\nimport java.util.*; // Noncompliant\n\nprivate Date date; // Date class exists in java.sql and java.util. Which one is this?\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport java.sql.Date;\nimport java.util.List;\nimport java.util.ArrayList;\n\nprivate Date date;\n</pre>\n<h2>Exceptions</h2>\n<p>Static imports are ignored by this rule. E.G.</p>\n<pre>\nimport static java.lang.Math.*;\n</pre>'}]",[],['squid:S2208'],,,,
java:S2209,java,"""static"" members should be accessed statically",2023-06-14T03:41:52+0000,"<p>While it is <em>possible</em> to access <code>static</code> members from a class instance, it’s bad form, and considered by most to be misleading
because it implies to the readers of your code that there’s an instance of the member per class instance.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class A {
  public static int counter = 0;
}

public class B {
  private A first = new A();
  private A second = new A();

  public void runUpTheCount() {
    first.counter ++;  // Noncompliant
    second.counter ++;  // Noncompliant. A.counter is now 2, which is perhaps contrary to expectations
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class A {
  public static int counter = 0;
}

public class B {
  private A first = new A();
  private A second = new A();

  public void runUpTheCount() {
    A.counter ++;  // Compliant
    A.counter ++;  // Compliant
  }
}
</pre>","<p>While it is <em>possible</em> to access <code>static</code> members from a class instance, it’s bad form, and considered by most to be misleading
because it implies to the readers of your code that there’s an instance of the member per class instance.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class A {
  public static int counter = 0;
}

public class B {
  private A first = new A();
  private A second = new A();

  public void runUpTheCount() {
    first.counter ++;  // Noncompliant
    second.counter ++;  // Noncompliant. A.counter is now 2, which is perhaps contrary to expectations
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class A {
  public static int counter = 0;
}

public class B {
  private A first = new A();
  private A second = new A();

  public void runUpTheCount() {
    A.counter ++;  // Compliant
    A.counter ++;  // Compliant
  }
}
</pre>",MAJOR,READY,False,[],['pitfall'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,MAIN,False,"[{'key': 'default', 'content': '<p>While it is <em>possible</em> to access <code>static</code> members from a class instance, it’s bad form, and considered by most to be misleading\nbecause it implies to the readers of your code that there’s an instance of the member per class instance.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class A {\n  public static int counter = 0;\n}\n\npublic class B {\n  private A first = new A();\n  private A second = new A();\n\n  public void runUpTheCount() {\n    first.counter ++;  // Noncompliant\n    second.counter ++;  // Noncompliant. A.counter is now 2, which is perhaps contrary to expectations\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class A {\n  public static int counter = 0;\n}\n\npublic class B {\n  private A first = new A();\n  private A second = new A();\n\n  public void runUpTheCount() {\n    A.counter ++;  // Compliant\n    A.counter ++;  // Compliant\n  }\n}\n</pre>'}]",[],['squid:S2209'],,,,
java:S2326,java,Unused type parameters should be removed,2023-06-14T03:41:52+0000,"<p>Type parameters that aren’t used are dead code, which can only distract and possibly confuse developers during maintenance. Therefore, unused type
parameters should be removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int &lt;T&gt; Add(int a, int b) // Noncompliant; &lt;T&gt; is ignored
{
  return a + b;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
int Add(int a, int b)
{
  return a + b;
}
</pre>","<p>Type parameters that aren’t used are dead code, which can only distract and possibly confuse developers during maintenance. Therefore, unused type
parameters should be removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int &lt;T&gt; Add(int a, int b) // Noncompliant; &lt;T&gt; is ignored
{
  return a + b;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
int Add(int a, int b)
{
  return a + b;
}
</pre>",MAJOR,READY,False,[],"['cert', 'unused']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>Type parameters that aren’t used are dead code, which can only distract and possibly confuse developers during maintenance. Therefore, unused type\nparameters should be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint &lt;T&gt; Add(int a, int b) // Noncompliant; &lt;T&gt; is ignored\n{\n  return a + b;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint Add(int a, int b)\n{\n  return a + b;\n}\n</pre>'}]",[],['squid:S2326'],,,,
java:S2440,java,"Classes with only ""static"" methods should not be instantiated",2023-06-14T03:41:52+0000,"<p><code>static</code> methods can be accessed without an instance of the enclosing class, so there’s no reason to instantiate a class that has only
<code>static</code> methods.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class TextUtils {
  public static String stripHtml(String source) {
    return source.replaceAll(""&lt;[^&gt;]+&gt;"", """");
  }
}

public class TextManipulator {

  // ...

  public void cleanText(String source) {
    TextUtils textUtils = new TextUtils(); // Noncompliant

    String stripped = textUtils.stripHtml(source);

    //...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class TextUtils {
  public static String stripHtml(String source) {
    return source.replaceAll(""&lt;[^&gt;]+&gt;"", """");
  }
}

public class TextManipulator {

  // ...

  public void cleanText(String source) {
    String stripped = TextUtils.stripHtml(source);

    //...
  }
}
</pre>
<h2>See Also</h2>
<ul>
  <li> <a href='/coding_rules#rule_key=java%3AS1118'>S1118</a> - Utility classes should not have public constructors </li>
</ul>","<p><code>static</code> methods can be accessed without an instance of the enclosing class, so there’s no reason to instantiate a class that has only
<code>static</code> methods.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class TextUtils {
  public static String stripHtml(String source) {
    return source.replaceAll(""&lt;[^&gt;]+&gt;"", """");
  }
}

public class TextManipulator {

  // ...

  public void cleanText(String source) {
    TextUtils textUtils = new TextUtils(); // Noncompliant

    String stripped = textUtils.stripHtml(source);

    //...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class TextUtils {
  public static String stripHtml(String source) {
    return source.replaceAll(""&lt;[^&gt;]+&gt;"", """");
  }
}

public class TextManipulator {

  // ...

  public void cleanText(String source) {
    String stripped = TextUtils.stripHtml(source);

    //...
  }
}
</pre>
<h2>See Also</h2>
<ul>
  <li> <a href='/coding_rules#rule_key=java%3AS1118'>S1118</a> - Utility classes should not have public constructors </li>
</ul>",MAJOR,READY,False,[],['clumsy'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,2min,CONSTANT_ISSUE,2min,False,ALL,False,"[{'key': 'default', 'content': '<p><code>static</code> methods can be accessed without an instance of the enclosing class, so there’s no reason to instantiate a class that has only\n<code>static</code> methods.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class TextUtils {\n  public static String stripHtml(String source) {\n    return source.replaceAll(""&lt;[^&gt;]+&gt;"", """");\n  }\n}\n\npublic class TextManipulator {\n\n  // ...\n\n  public void cleanText(String source) {\n    TextUtils textUtils = new TextUtils(); // Noncompliant\n\n    String stripped = textUtils.stripHtml(source);\n\n    //...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class TextUtils {\n  public static String stripHtml(String source) {\n    return source.replaceAll(""&lt;[^&gt;]+&gt;"", """");\n  }\n}\n\npublic class TextManipulator {\n\n  // ...\n\n  public void cleanText(String source) {\n    String stripped = TextUtils.stripHtml(source);\n\n    //...\n  }\n}\n</pre>\n<h2>See Also</h2>\n<ul>\n  <li> <a href=\'/coding_rules#rule_key=java%3AS1118\'>S1118</a> - Utility classes should not have public constructors </li>\n</ul>'}]",[],['squid:S2440'],,,,
java:S2442,java,"""Lock"" objects should not be ""synchronized""",2023-06-14T03:41:52+0000,"<p><code>java.util.concurrent.locks.Lock</code> offers far more powerful and flexible locking operations than are available with
<code>synchronized</code> blocks. So synchronizing on a <code>Lock</code> throws away the power of the object, and is just silly. Instead, such
objects should be locked and unlocked using <code>tryLock()</code> and <code>unlock()</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Lock lock = new MyLockImpl();
synchronized(lock) {  // Noncompliant
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
Lock lock = new MyLockImpl();
lock.tryLock();
//...
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/qjdGBQ"">CERT, LCK03-J.</a> - Do not synchronize on the intrinsic locks of high-level concurrency
  objects </li>
</ul>","<p><code>java.util.concurrent.locks.Lock</code> offers far more powerful and flexible locking operations than are available with
<code>synchronized</code> blocks. So synchronizing on a <code>Lock</code> throws away the power of the object, and is just silly. Instead, such
objects should be locked and unlocked using <code>tryLock()</code> and <code>unlock()</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Lock lock = new MyLockImpl();
synchronized(lock) {  // Noncompliant
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
Lock lock = new MyLockImpl();
lock.tryLock();
//...
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/qjdGBQ"">CERT, LCK03-J.</a> - Do not synchronize on the intrinsic locks of high-level concurrency
  objects </li>
</ul>",MAJOR,READY,False,[],"['cert', 'clumsy', 'multi-threading']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,15min,CONSTANT_ISSUE,15min,False,ALL,False,"[{'key': 'default', 'content': '<p><code>java.util.concurrent.locks.Lock</code> offers far more powerful and flexible locking operations than are available with\n<code>synchronized</code> blocks. So synchronizing on a <code>Lock</code> throws away the power of the object, and is just silly. Instead, such\nobjects should be locked and unlocked using <code>tryLock()</code> and <code>unlock()</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nLock lock = new MyLockImpl();\nsynchronized(lock) {  // Noncompliant\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nLock lock = new MyLockImpl();\nlock.tryLock();\n//...\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/qjdGBQ"">CERT, LCK03-J.</a> - Do not synchronize on the intrinsic locks of high-level concurrency\n  objects </li>\n</ul>'}]",[],['squid:S2442'],,,,
java:S2681,java,Multiline blocks should be enclosed in curly braces,2023-06-14T03:41:52+0000,"<p>Curly braces can be omitted from a one-line block, such as with an <code>if</code> statement or <code>for</code> loop, but doing so can be
misleading and induce bugs.</p>
<p>This rule raises an issue when the whitespacing of the lines after a one line block indicates an intent to include those lines in the block, but
the omission of curly braces means the lines will be unconditionally executed once.</p>
<p>Note that this rule considers tab characters to be equivalent to 1 space. If you mix spaces and tabs you will sometimes see issues in code which
look fine in your editor but are confusing when you change the size of tabs.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (condition)
  firstActionInBlock();
  secondAction();  // Noncompliant; executed unconditionally
thirdAction();

if (condition) firstActionInBlock(); secondAction();  // Noncompliant; secondAction executed unconditionally

if (condition) firstActionInBlock();  // Noncompliant
  secondAction();  // Executed unconditionally

if (condition); secondAction();  // Noncompliant; secondAction executed unconditionally

String str = null;
for (int i = 0; i &lt; array.length; i++)
  str = array[i];
  doTheThing(str);  // Noncompliant; executed only on last array element
</pre>
<h2>Compliant Solution</h2>
<pre>
if (condition) {
  firstActionInBlock();
  secondAction();
}
thirdAction();

String str = null;
for (int i = 0; i &lt; array.length; i++) {
  str = array[i];
  doTheThing(str);
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/483"">MITRE, CWE-483</a> - Incorrect Block Delimitation </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/MzZGBQ"">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement </li>
</ul>","<p>Curly braces can be omitted from a one-line block, such as with an <code>if</code> statement or <code>for</code> loop, but doing so can be
misleading and induce bugs.</p>
<p>This rule raises an issue when the whitespacing of the lines after a one line block indicates an intent to include those lines in the block, but
the omission of curly braces means the lines will be unconditionally executed once.</p>
<p>Note that this rule considers tab characters to be equivalent to 1 space. If you mix spaces and tabs you will sometimes see issues in code which
look fine in your editor but are confusing when you change the size of tabs.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (condition)
  firstActionInBlock();
  secondAction();  // Noncompliant; executed unconditionally
thirdAction();

if (condition) firstActionInBlock(); secondAction();  // Noncompliant; secondAction executed unconditionally

if (condition) firstActionInBlock();  // Noncompliant
  secondAction();  // Executed unconditionally

if (condition); secondAction();  // Noncompliant; secondAction executed unconditionally

String str = null;
for (int i = 0; i &lt; array.length; i++)
  str = array[i];
  doTheThing(str);  // Noncompliant; executed only on last array element
</pre>
<h2>Compliant Solution</h2>
<pre>
if (condition) {
  firstActionInBlock();
  secondAction();
}
thirdAction();

String str = null;
for (int i = 0; i &lt; array.length; i++) {
  str = array[i];
  doTheThing(str);
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/483"">MITRE, CWE-483</a> - Incorrect Block Delimitation </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/MzZGBQ"">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement </li>
</ul>",MAJOR,READY,False,[],"['cert', 'cwe']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>Curly braces can be omitted from a one-line block, such as with an <code>if</code> statement or <code>for</code> loop, but doing so can be\nmisleading and induce bugs.</p>\n<p>This rule raises an issue when the whitespacing of the lines after a one line block indicates an intent to include those lines in the block, but\nthe omission of curly braces means the lines will be unconditionally executed once.</p>\n<p>Note that this rule considers tab characters to be equivalent to 1 space. If you mix spaces and tabs you will sometimes see issues in code which\nlook fine in your editor but are confusing when you change the size of tabs.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)\n  firstActionInBlock();\n  secondAction();  // Noncompliant; executed unconditionally\nthirdAction();\n\nif (condition) firstActionInBlock(); secondAction();  // Noncompliant; secondAction executed unconditionally\n\nif (condition) firstActionInBlock();  // Noncompliant\n  secondAction();  // Executed unconditionally\n\nif (condition); secondAction();  // Noncompliant; secondAction executed unconditionally\n\nString str = null;\nfor (int i = 0; i &lt; array.length; i++)\n  str = array[i];\n  doTheThing(str);  // Noncompliant; executed only on last array element\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition) {\n  firstActionInBlock();\n  secondAction();\n}\nthirdAction();\n\nString str = null;\nfor (int i = 0; i &lt; array.length; i++) {\n  str = array[i];\n  doTheThing(str);\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/483"">MITRE, CWE-483</a> - Incorrect Block Delimitation </li>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/MzZGBQ"">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement </li>\n</ul>'}]",[],['squid:S2681'],,,,
java:S3415,java,Assertion arguments should be passed in the correct order,2023-06-14T03:41:52+0000,"<p>The standard assertions library methods such as <code>org.junit.Assert.assertEquals</code>, and <code>org.junit.Assert.assertSame</code> expect the
first argument to be the expected value and the second argument to be the actual value. For AssertJ, it’s the other way around, the argument of
<code>org.assertj.core.api.Assertions.assertThat</code> is the actual value, and the subsequent calls contain the expected values. Swap them, and your
test will still have the same outcome (succeed/fail when it should) but the error messages will be confusing.</p>
<p>This rule raises an issue when the actual argument to an assertions library method is a hard-coded value and the expected argument is not.</p>
<p>Supported frameworks:</p>
<ul>
  <li> JUnit4 </li>
  <li> JUnit5 </li>
  <li> <a href=""https://assertj.github.io/doc/"">AssertJ</a> </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
org.junit.Assert.assertEquals(runner.exitCode(), 0, ""Unexpected exit code"");  // Noncompliant; Yields error message like: Expected:&lt;-1&gt;. Actual:&lt;0&gt;.
org.assertj.core.api.Assertions.assertThat(0).isEqualTo(runner.exitCode()); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
org.junit.Assert.assertEquals(0, runner.exitCode(), ""Unexpected exit code"");
org.assertj.core.api.Assertions.assertThat(runner.exitCode()).isEqualTo(0);
</pre>","<p>The standard assertions library methods such as <code>org.junit.Assert.assertEquals</code>, and <code>org.junit.Assert.assertSame</code> expect the
first argument to be the expected value and the second argument to be the actual value. For AssertJ, it’s the other way around, the argument of
<code>org.assertj.core.api.Assertions.assertThat</code> is the actual value, and the subsequent calls contain the expected values. Swap them, and your
test will still have the same outcome (succeed/fail when it should) but the error messages will be confusing.</p>
<p>This rule raises an issue when the actual argument to an assertions library method is a hard-coded value and the expected argument is not.</p>
<p>Supported frameworks:</p>
<ul>
  <li> JUnit4 </li>
  <li> JUnit5 </li>
  <li> <a href=""https://assertj.github.io/doc/"">AssertJ</a> </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
org.junit.Assert.assertEquals(runner.exitCode(), 0, ""Unexpected exit code"");  // Noncompliant; Yields error message like: Expected:&lt;-1&gt;. Actual:&lt;0&gt;.
org.assertj.core.api.Assertions.assertThat(0).isEqualTo(runner.exitCode()); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
org.junit.Assert.assertEquals(0, runner.exitCode(), ""Unexpected exit code"");
org.assertj.core.api.Assertions.assertThat(runner.exitCode()).isEqualTo(0);
</pre>",MAJOR,READY,False,[],"['junit', 'suspicious', 'tests']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,2min,CONSTANT_ISSUE,2min,False,TEST,False,"[{'key': 'default', 'content': '<p>The standard assertions library methods such as <code>org.junit.Assert.assertEquals</code>, and <code>org.junit.Assert.assertSame</code> expect the\nfirst argument to be the expected value and the second argument to be the actual value. For AssertJ, it’s the other way around, the argument of\n<code>org.assertj.core.api.Assertions.assertThat</code> is the actual value, and the subsequent calls contain the expected values. Swap them, and your\ntest will still have the same outcome (succeed/fail when it should) but the error messages will be confusing.</p>\n<p>This rule raises an issue when the actual argument to an assertions library method is a hard-coded value and the expected argument is not.</p>\n<p>Supported frameworks:</p>\n<ul>\n  <li> JUnit4 </li>\n  <li> JUnit5 </li>\n  <li> <a href=""https://assertj.github.io/doc/"">AssertJ</a> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\norg.junit.Assert.assertEquals(runner.exitCode(), 0, ""Unexpected exit code"");  // Noncompliant; Yields error message like: Expected:&lt;-1&gt;. Actual:&lt;0&gt;.\norg.assertj.core.api.Assertions.assertThat(0).isEqualTo(runner.exitCode()); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\norg.junit.Assert.assertEquals(0, runner.exitCode(), ""Unexpected exit code"");\norg.assertj.core.api.Assertions.assertThat(runner.exitCode()).isEqualTo(0);\n</pre>'}]",[],['squid:S3415'],,,,
java:S5838,java,Chained AssertJ assertions should be simplified to the corresponding dedicated assertion,2023-06-14T03:41:52+0000,"<p>AssertJ contains many assertions methods specific to common types. Both versions will test the same things, but the dedicated one will provide a
better error message, simplifying the debugging process.</p>
<p>This rule reports an issue when an assertion can be simplified to a dedicated one.</p>
<p>The array below gives a non-exhaustive list of assertion reported by the rule. Code behaving similarly, or with a negation will also be
reported.</p>
<table>
  <colgroup>
    <col style=""width: 50%;"">
    <col style=""width: 50%;"">
  </colgroup>
  <thead>
    <tr>
      <th>Original</th>
      <th>Dedicated</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><p><strong>Related to Object</strong></p></td>
      <td></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getObject()).isEqualTo(null)</code></p></td>
      <td><p><code>assertThat(getObject()).isNull()</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getBoolean()).isEqualTo(true)</code></p></td>
      <td><p><code>assertThat(getBoolean()).isTrue()</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getBoolean()).isEqualTo(false)</code></p></td>
      <td><p><code>assertThat(getBoolean()).isFalse()</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(x.equals(y)).isTrue()</code></p></td>
      <td><p><code>assertThat(x).isEqualTo(y)</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(x == y).isTrue()</code></p></td>
      <td><p><code>assertThat(x).isSameAs(y)</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(x == null).isTrue()</code></p></td>
      <td><p><code>assertThat(x).isNull()</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(x.toString()).isEqualTo(y)</code></p></td>
      <td><p><code>assertThat(x).hasToString(y)</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(x.hashCode()).isEqualTo(y.hashCode())</code></p></td>
      <td><p><code>assertThat(x).hasSameHashCodeAs(y)</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getObject() instanceof MyClass).isTrue()</code></p></td>
      <td><p><code>assertThat(getObject()).isInstanceOf(MyClass.class)</code></p></td>
    </tr>
    <tr>
      <td><p><strong>Related to <code>Comparable</code></strong></p></td>
      <td></td>
    </tr>
    <tr>
      <td><p><code>assertThat(x.compareTo(y)).isZero()</code></p></td>
      <td><p><code>assertThat(x).isEqualByComparingTo(y)</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(x &gt;= y).isTrue()</code></p></td>
      <td><p><code>assertThat(x).isGreaterThanOrEqualTo(y)</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(x &gt; y).isTrue()</code></p></td>
      <td><p><code>assertThat(x).isGreaterThan(y)</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(x &lt;= y).isTrue()</code></p></td>
      <td><p><code>assertThat(x).isLessThanOrEqualTo(y)</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(x &lt; y).isTrue()</code></p></td>
      <td><p><code>assertThat(x).isLessThan(y)</code></p></td>
    </tr>
    <tr>
      <td><p><strong>Related to <code>String</code></strong></p></td>
      <td></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getString().isEmpty()).isTrue()</code></p></td>
      <td><p><code>assertThat(getString()).isEmpty()</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getString()).hasSize(0)</code></p></td>
      <td><p><code>assertThat(getString()).isEmpty()</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getString().equals(expected)).isTrue()</code></p></td>
      <td><p><code>assertThat(getString()).isEqualTo(expected)</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getString().equalsIgnoreCase(expected)).isTrue()</code></p></td>
      <td><p><code>assertThat(getString()).isEqualToIgnoringCase(expected)</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getString().contains(expected)).isTrue()</code></p></td>
      <td><p><code>assertThat(getString()).contains(expected)</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getString().startsWith(expected)).isTrue()</code></p></td>
      <td><p><code>assertThat(getString()).startsWith(expected)</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getString().endsWith(expected)).isTrue()</code></p></td>
      <td><p><code>assertThat(getString()).endsWith(expected)</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getString().matches(expected)).isTrue()</code></p></td>
      <td><p><code>assertThat(getString()).matches(expected)</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getString().trim()).isEmpty()</code></p></td>
      <td><p><code>assertThat(getString()).isBlank()</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getString().length()).isEqualTo(length)</code></p></td>
      <td><p><code>assertThat(getString()).hasSize(length)</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getString().length()).hasSize(expected.length())</code></p></td>
      <td><p><code>assertThat(getString()).hasSameSizeAs(expected)</code></p></td>
    </tr>
    <tr>
      <td><p><strong>&nbsp;Related to <code>File</code></strong></p></td>
      <td></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getFile()).hasSize(0)</code></p></td>
      <td><p><code>assertThat(getFile()).isEmpty()</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getFile().length()).isZero()</code></p></td>
      <td><p><code>assertThat(getFile()).isEmpty()</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getFile().length()).isEqualTo(length)</code></p></td>
      <td><p><code>assertThat(getFile()).hasSize(length)</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getFile().canRead()).isTrue()</code></p></td>
      <td><p><code>assertThat(getFile()).canRead()</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getFile().canWrite()).isTrue()</code></p></td>
      <td><p><code>assertThat(getFile()).canWrite()</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getFile().exists()).isTrue()</code></p></td>
      <td><p><code>assertThat(getFile()).exists()</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getFile().getName()).isEqualTo(name)</code></p></td>
      <td><p><code>assertThat(getFile()).hasName(name)</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getFile().getParent()).isEqualTo(pathname)</code></p></td>
      <td><p><code>assertThat(getFile()).hasParent(pathname)</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getFile().getParentFile()).isNull()</code></p></td>
      <td><p><code>assertThat(getFile()).hasNoParent()</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getFile().isAbsolute()).isTrue()</code></p></td>
      <td><p><code>assertThat(getFile()).isAbsolute()</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getFile().isAbsolute()).isFalse()</code></p></td>
      <td><p><code>assertThat(getFile()).isRelative()</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getFile().isDirectory()).isTrue()</code></p></td>
      <td><p><code>assertThat(getFile()).isDirectory()</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getFile().isFile()).isTrue()</code></p></td>
      <td><p><code>assertThat(getFile()).isFile()</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getFile().list()).isEmpty()</code></p></td>
      <td><p><code>assertThat(getFile()).isEmptyDirectory()</code></p></td>
    </tr>
    <tr>
      <td><p><strong>&nbsp;Related to <code>Path</code></strong></p></td>
      <td></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getPath().startsWith(path)).isTrue()</code></p></td>
      <td><p><code>assertThat(getPath()).startsWithRaw(path)</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getPath().endsWith(path)).isTrue()</code></p></td>
      <td><p><code>assertThat(getPath()).endsWithRaw(path)</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getPath().getParent()).isEqualTo(name)</code></p></td>
      <td><p><code>assertThat(getPath()).hasParentRaw(name)</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getPath().getParent()).isNull()</code></p></td>
      <td><p><code>assertThat(getPath()).hasNoParentRaw()</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getPath().isAbsolute()).isTrue()</code></p></td>
      <td><p><code>assertThat(getPath()).isAbsolute()</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getPath().isAbsolute()).isFalse()</code></p></td>
      <td><p><code>assertThat(getPath()).isRelative()</code></p></td>
    </tr>
    <tr>
      <td><p><strong>&nbsp;Related to <code>Array</code></strong></p></td>
      <td></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getArray().length).isZero()</code></p></td>
      <td><p><code>assertThat(getArray()).isEmpty()</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getArray().length).isEqualTo(length)</code></p></td>
      <td><p><code>assertThat(getArray()).hasSize(length)</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getArray().length).isEqualTo(anotherArray.length)</code></p></td>
      <td><p><code>assertThat(getArray()).hasSameSizeAs(anotherArray)</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getArray().length).isLessThanOrEqualTo(expression)</code></p></td>
      <td><p><code>assertThat(getArray()).hasSizeLessThanOrEqualTo(expression)</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getArray().length).isLessThan(expression)</code></p></td>
      <td><p><code>assertThat(getArray()).hasSizeLessThan(expression)</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getArray().length).isGreaterThan(expression)</code></p></td>
      <td><p><code>assertThat(getArray()).hasSizeGreaterThan(expression)</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getArray().length).isGreaterThanOrEqualTo(expression)</code></p></td>
      <td><p><code>assertThat(getArray()).hasSizeGreaterThanOrEqualTo(expression)</code></p></td>
    </tr>
    <tr>
      <td><p><strong>Related to <code>Collection</code></strong></p></td>
      <td></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getCollection().isEmpty()).isTrue()</code></p></td>
      <td><p><code>assertThat(getCollection()).isEmpty()</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getCollection().size()).isZero()</code></p></td>
      <td><p><code>assertThat(getCollection()).isEmpty()</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getCollection().contains(something)).isTrue()</code></p></td>
      <td><p><code>assertThat(getCollection()).contains(something)</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getCollection().containsAll(otherCollection)).isTrue()</code></p></td>
      <td><p><code>assertThat(getCollection()).containsAll(otherCollection)</code></p></td>
    </tr>
    <tr>
      <td><p><strong>Related to <code>Map</code></strong></p></td>
      <td></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getMap().size()).isEqualTo(otherMap().size()</code></p></td>
      <td><p><code>assertThat(getMap()).hasSameSizeAs(otherMap())</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getMap().containsKey(key)).isTrue()</code></p></td>
      <td><p><code>assertThat(getMap()).containsKey(key)</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getMap().keySet()).contains(key)</code></p></td>
      <td><p><code>assertThat(getMap()).containsKey(key)</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getMap().keySet()).containsOnlyKey(key)</code></p></td>
      <td><p><code>assertThat(getMap()).containsOnlyKey(key)</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getMap().containsValue(value)).isTrue()</code></p></td>
      <td><p><code>assertThat(getMap()).containsValue(value)</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getMap().values()).contains(value)</code></p></td>
      <td><p><code>assertThat(getMap()).containsValue(value)</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getMap().get(key)).isEqualTo(value)</code></p></td>
      <td><p><code>assertThat(getMap()).containsEntry(key, value)</code></p></td>
    </tr>
    <tr>
      <td><p><strong>Related to <code>Optional</code></strong></p></td>
      <td></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getOptional().isPresent()).isTrue()</code></p></td>
      <td><p><code>assertThat(getOptional()).isPresent()</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getOptional().get()).isEqualTo(something)</code></p></td>
      <td><p><code>assertThat(getOptional()).contains(something)</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getOptional().get()).isSameAs(something)</code></p></td>
      <td><p><code>assertThat(getOptional()).containsSame(something)</code></p></td>
    </tr>
  </tbody>
</table>
<h2>Noncompliant Code Example</h2>
<pre>
assertThat(getObject()).isEqualTo(null); // Noncompliant
assertThat(getObject()).isNotEqualTo(null); // Noncompliant - not listed above but also supported

assertThat(getString().trim()).isEmpty();
assertThat(getFile().canRead()).isTrue();
assertThat(getPath().getParent()).isNull();
</pre>
<h2>Compliant Solution</h2>
<pre>
assertThat(getObject()).isNull();
assertThat(getObject()).isNotNull();

assertThat(getString()).isBlank();
assertThat(getFile()).canRead();
assertThat(getPath()).hasNoParentRaw();
</pre>","<p>AssertJ contains many assertions methods specific to common types. Both versions will test the same things, but the dedicated one will provide a
better error message, simplifying the debugging process.</p>
<p>This rule reports an issue when an assertion can be simplified to a dedicated one.</p>
<p>The array below gives a non-exhaustive list of assertion reported by the rule. Code behaving similarly, or with a negation will also be
reported.</p>
<table>
  <colgroup>
    <col style=""width: 50%;"">
    <col style=""width: 50%;"">
  </colgroup>
  <thead>
    <tr>
      <th>Original</th>
      <th>Dedicated</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><p><strong>Related to Object</strong></p></td>
      <td></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getObject()).isEqualTo(null)</code></p></td>
      <td><p><code>assertThat(getObject()).isNull()</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getBoolean()).isEqualTo(true)</code></p></td>
      <td><p><code>assertThat(getBoolean()).isTrue()</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getBoolean()).isEqualTo(false)</code></p></td>
      <td><p><code>assertThat(getBoolean()).isFalse()</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(x.equals(y)).isTrue()</code></p></td>
      <td><p><code>assertThat(x).isEqualTo(y)</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(x == y).isTrue()</code></p></td>
      <td><p><code>assertThat(x).isSameAs(y)</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(x == null).isTrue()</code></p></td>
      <td><p><code>assertThat(x).isNull()</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(x.toString()).isEqualTo(y)</code></p></td>
      <td><p><code>assertThat(x).hasToString(y)</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(x.hashCode()).isEqualTo(y.hashCode())</code></p></td>
      <td><p><code>assertThat(x).hasSameHashCodeAs(y)</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getObject() instanceof MyClass).isTrue()</code></p></td>
      <td><p><code>assertThat(getObject()).isInstanceOf(MyClass.class)</code></p></td>
    </tr>
    <tr>
      <td><p><strong>Related to <code>Comparable</code></strong></p></td>
      <td></td>
    </tr>
    <tr>
      <td><p><code>assertThat(x.compareTo(y)).isZero()</code></p></td>
      <td><p><code>assertThat(x).isEqualByComparingTo(y)</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(x &gt;= y).isTrue()</code></p></td>
      <td><p><code>assertThat(x).isGreaterThanOrEqualTo(y)</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(x &gt; y).isTrue()</code></p></td>
      <td><p><code>assertThat(x).isGreaterThan(y)</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(x &lt;= y).isTrue()</code></p></td>
      <td><p><code>assertThat(x).isLessThanOrEqualTo(y)</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(x &lt; y).isTrue()</code></p></td>
      <td><p><code>assertThat(x).isLessThan(y)</code></p></td>
    </tr>
    <tr>
      <td><p><strong>Related to <code>String</code></strong></p></td>
      <td></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getString().isEmpty()).isTrue()</code></p></td>
      <td><p><code>assertThat(getString()).isEmpty()</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getString()).hasSize(0)</code></p></td>
      <td><p><code>assertThat(getString()).isEmpty()</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getString().equals(expected)).isTrue()</code></p></td>
      <td><p><code>assertThat(getString()).isEqualTo(expected)</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getString().equalsIgnoreCase(expected)).isTrue()</code></p></td>
      <td><p><code>assertThat(getString()).isEqualToIgnoringCase(expected)</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getString().contains(expected)).isTrue()</code></p></td>
      <td><p><code>assertThat(getString()).contains(expected)</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getString().startsWith(expected)).isTrue()</code></p></td>
      <td><p><code>assertThat(getString()).startsWith(expected)</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getString().endsWith(expected)).isTrue()</code></p></td>
      <td><p><code>assertThat(getString()).endsWith(expected)</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getString().matches(expected)).isTrue()</code></p></td>
      <td><p><code>assertThat(getString()).matches(expected)</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getString().trim()).isEmpty()</code></p></td>
      <td><p><code>assertThat(getString()).isBlank()</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getString().length()).isEqualTo(length)</code></p></td>
      <td><p><code>assertThat(getString()).hasSize(length)</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getString().length()).hasSize(expected.length())</code></p></td>
      <td><p><code>assertThat(getString()).hasSameSizeAs(expected)</code></p></td>
    </tr>
    <tr>
      <td><p><strong>&nbsp;Related to <code>File</code></strong></p></td>
      <td></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getFile()).hasSize(0)</code></p></td>
      <td><p><code>assertThat(getFile()).isEmpty()</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getFile().length()).isZero()</code></p></td>
      <td><p><code>assertThat(getFile()).isEmpty()</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getFile().length()).isEqualTo(length)</code></p></td>
      <td><p><code>assertThat(getFile()).hasSize(length)</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getFile().canRead()).isTrue()</code></p></td>
      <td><p><code>assertThat(getFile()).canRead()</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getFile().canWrite()).isTrue()</code></p></td>
      <td><p><code>assertThat(getFile()).canWrite()</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getFile().exists()).isTrue()</code></p></td>
      <td><p><code>assertThat(getFile()).exists()</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getFile().getName()).isEqualTo(name)</code></p></td>
      <td><p><code>assertThat(getFile()).hasName(name)</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getFile().getParent()).isEqualTo(pathname)</code></p></td>
      <td><p><code>assertThat(getFile()).hasParent(pathname)</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getFile().getParentFile()).isNull()</code></p></td>
      <td><p><code>assertThat(getFile()).hasNoParent()</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getFile().isAbsolute()).isTrue()</code></p></td>
      <td><p><code>assertThat(getFile()).isAbsolute()</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getFile().isAbsolute()).isFalse()</code></p></td>
      <td><p><code>assertThat(getFile()).isRelative()</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getFile().isDirectory()).isTrue()</code></p></td>
      <td><p><code>assertThat(getFile()).isDirectory()</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getFile().isFile()).isTrue()</code></p></td>
      <td><p><code>assertThat(getFile()).isFile()</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getFile().list()).isEmpty()</code></p></td>
      <td><p><code>assertThat(getFile()).isEmptyDirectory()</code></p></td>
    </tr>
    <tr>
      <td><p><strong>&nbsp;Related to <code>Path</code></strong></p></td>
      <td></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getPath().startsWith(path)).isTrue()</code></p></td>
      <td><p><code>assertThat(getPath()).startsWithRaw(path)</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getPath().endsWith(path)).isTrue()</code></p></td>
      <td><p><code>assertThat(getPath()).endsWithRaw(path)</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getPath().getParent()).isEqualTo(name)</code></p></td>
      <td><p><code>assertThat(getPath()).hasParentRaw(name)</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getPath().getParent()).isNull()</code></p></td>
      <td><p><code>assertThat(getPath()).hasNoParentRaw()</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getPath().isAbsolute()).isTrue()</code></p></td>
      <td><p><code>assertThat(getPath()).isAbsolute()</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getPath().isAbsolute()).isFalse()</code></p></td>
      <td><p><code>assertThat(getPath()).isRelative()</code></p></td>
    </tr>
    <tr>
      <td><p><strong>&nbsp;Related to <code>Array</code></strong></p></td>
      <td></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getArray().length).isZero()</code></p></td>
      <td><p><code>assertThat(getArray()).isEmpty()</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getArray().length).isEqualTo(length)</code></p></td>
      <td><p><code>assertThat(getArray()).hasSize(length)</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getArray().length).isEqualTo(anotherArray.length)</code></p></td>
      <td><p><code>assertThat(getArray()).hasSameSizeAs(anotherArray)</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getArray().length).isLessThanOrEqualTo(expression)</code></p></td>
      <td><p><code>assertThat(getArray()).hasSizeLessThanOrEqualTo(expression)</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getArray().length).isLessThan(expression)</code></p></td>
      <td><p><code>assertThat(getArray()).hasSizeLessThan(expression)</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getArray().length).isGreaterThan(expression)</code></p></td>
      <td><p><code>assertThat(getArray()).hasSizeGreaterThan(expression)</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getArray().length).isGreaterThanOrEqualTo(expression)</code></p></td>
      <td><p><code>assertThat(getArray()).hasSizeGreaterThanOrEqualTo(expression)</code></p></td>
    </tr>
    <tr>
      <td><p><strong>Related to <code>Collection</code></strong></p></td>
      <td></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getCollection().isEmpty()).isTrue()</code></p></td>
      <td><p><code>assertThat(getCollection()).isEmpty()</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getCollection().size()).isZero()</code></p></td>
      <td><p><code>assertThat(getCollection()).isEmpty()</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getCollection().contains(something)).isTrue()</code></p></td>
      <td><p><code>assertThat(getCollection()).contains(something)</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getCollection().containsAll(otherCollection)).isTrue()</code></p></td>
      <td><p><code>assertThat(getCollection()).containsAll(otherCollection)</code></p></td>
    </tr>
    <tr>
      <td><p><strong>Related to <code>Map</code></strong></p></td>
      <td></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getMap().size()).isEqualTo(otherMap().size()</code></p></td>
      <td><p><code>assertThat(getMap()).hasSameSizeAs(otherMap())</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getMap().containsKey(key)).isTrue()</code></p></td>
      <td><p><code>assertThat(getMap()).containsKey(key)</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getMap().keySet()).contains(key)</code></p></td>
      <td><p><code>assertThat(getMap()).containsKey(key)</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getMap().keySet()).containsOnlyKey(key)</code></p></td>
      <td><p><code>assertThat(getMap()).containsOnlyKey(key)</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getMap().containsValue(value)).isTrue()</code></p></td>
      <td><p><code>assertThat(getMap()).containsValue(value)</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getMap().values()).contains(value)</code></p></td>
      <td><p><code>assertThat(getMap()).containsValue(value)</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getMap().get(key)).isEqualTo(value)</code></p></td>
      <td><p><code>assertThat(getMap()).containsEntry(key, value)</code></p></td>
    </tr>
    <tr>
      <td><p><strong>Related to <code>Optional</code></strong></p></td>
      <td></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getOptional().isPresent()).isTrue()</code></p></td>
      <td><p><code>assertThat(getOptional()).isPresent()</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getOptional().get()).isEqualTo(something)</code></p></td>
      <td><p><code>assertThat(getOptional()).contains(something)</code></p></td>
    </tr>
    <tr>
      <td><p><code>assertThat(getOptional().get()).isSameAs(something)</code></p></td>
      <td><p><code>assertThat(getOptional()).containsSame(something)</code></p></td>
    </tr>
  </tbody>
</table>
<h2>Noncompliant Code Example</h2>
<pre>
assertThat(getObject()).isEqualTo(null); // Noncompliant
assertThat(getObject()).isNotEqualTo(null); // Noncompliant - not listed above but also supported

assertThat(getString().trim()).isEmpty();
assertThat(getFile().canRead()).isTrue();
assertThat(getPath().getParent()).isNull();
</pre>
<h2>Compliant Solution</h2>
<pre>
assertThat(getObject()).isNull();
assertThat(getObject()).isNotNull();

assertThat(getString()).isBlank();
assertThat(getFile()).canRead();
assertThat(getPath()).hasNoParentRaw();
</pre>",MINOR,READY,False,[],"['assertj', 'tests']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,TEST,False,"[{'key': 'default', 'content': '<p>AssertJ contains many assertions methods specific to common types. Both versions will test the same things, but the dedicated one will provide a\nbetter error message, simplifying the debugging process.</p>\n<p>This rule reports an issue when an assertion can be simplified to a dedicated one.</p>\n<p>The array below gives a non-exhaustive list of assertion reported by the rule. Code behaving similarly, or with a negation will also be\nreported.</p>\n<table>\n  <colgroup>\n    <col style=""width: 50%;"">\n    <col style=""width: 50%;"">\n  </colgroup>\n  <thead>\n    <tr>\n      <th>Original</th>\n      <th>Dedicated</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><p><strong>Related to Object</strong></p></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getObject()).isEqualTo(null)</code></p></td>\n      <td><p><code>assertThat(getObject()).isNull()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getBoolean()).isEqualTo(true)</code></p></td>\n      <td><p><code>assertThat(getBoolean()).isTrue()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getBoolean()).isEqualTo(false)</code></p></td>\n      <td><p><code>assertThat(getBoolean()).isFalse()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(x.equals(y)).isTrue()</code></p></td>\n      <td><p><code>assertThat(x).isEqualTo(y)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(x == y).isTrue()</code></p></td>\n      <td><p><code>assertThat(x).isSameAs(y)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(x == null).isTrue()</code></p></td>\n      <td><p><code>assertThat(x).isNull()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(x.toString()).isEqualTo(y)</code></p></td>\n      <td><p><code>assertThat(x).hasToString(y)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(x.hashCode()).isEqualTo(y.hashCode())</code></p></td>\n      <td><p><code>assertThat(x).hasSameHashCodeAs(y)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getObject() instanceof MyClass).isTrue()</code></p></td>\n      <td><p><code>assertThat(getObject()).isInstanceOf(MyClass.class)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><strong>Related to <code>Comparable</code></strong></p></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(x.compareTo(y)).isZero()</code></p></td>\n      <td><p><code>assertThat(x).isEqualByComparingTo(y)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(x &gt;= y).isTrue()</code></p></td>\n      <td><p><code>assertThat(x).isGreaterThanOrEqualTo(y)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(x &gt; y).isTrue()</code></p></td>\n      <td><p><code>assertThat(x).isGreaterThan(y)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(x &lt;= y).isTrue()</code></p></td>\n      <td><p><code>assertThat(x).isLessThanOrEqualTo(y)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(x &lt; y).isTrue()</code></p></td>\n      <td><p><code>assertThat(x).isLessThan(y)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><strong>Related to <code>String</code></strong></p></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getString().isEmpty()).isTrue()</code></p></td>\n      <td><p><code>assertThat(getString()).isEmpty()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getString()).hasSize(0)</code></p></td>\n      <td><p><code>assertThat(getString()).isEmpty()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getString().equals(expected)).isTrue()</code></p></td>\n      <td><p><code>assertThat(getString()).isEqualTo(expected)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getString().equalsIgnoreCase(expected)).isTrue()</code></p></td>\n      <td><p><code>assertThat(getString()).isEqualToIgnoringCase(expected)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getString().contains(expected)).isTrue()</code></p></td>\n      <td><p><code>assertThat(getString()).contains(expected)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getString().startsWith(expected)).isTrue()</code></p></td>\n      <td><p><code>assertThat(getString()).startsWith(expected)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getString().endsWith(expected)).isTrue()</code></p></td>\n      <td><p><code>assertThat(getString()).endsWith(expected)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getString().matches(expected)).isTrue()</code></p></td>\n      <td><p><code>assertThat(getString()).matches(expected)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getString().trim()).isEmpty()</code></p></td>\n      <td><p><code>assertThat(getString()).isBlank()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getString().length()).isEqualTo(length)</code></p></td>\n      <td><p><code>assertThat(getString()).hasSize(length)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getString().length()).hasSize(expected.length())</code></p></td>\n      <td><p><code>assertThat(getString()).hasSameSizeAs(expected)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><strong>&nbsp;Related to <code>File</code></strong></p></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getFile()).hasSize(0)</code></p></td>\n      <td><p><code>assertThat(getFile()).isEmpty()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getFile().length()).isZero()</code></p></td>\n      <td><p><code>assertThat(getFile()).isEmpty()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getFile().length()).isEqualTo(length)</code></p></td>\n      <td><p><code>assertThat(getFile()).hasSize(length)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getFile().canRead()).isTrue()</code></p></td>\n      <td><p><code>assertThat(getFile()).canRead()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getFile().canWrite()).isTrue()</code></p></td>\n      <td><p><code>assertThat(getFile()).canWrite()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getFile().exists()).isTrue()</code></p></td>\n      <td><p><code>assertThat(getFile()).exists()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getFile().getName()).isEqualTo(name)</code></p></td>\n      <td><p><code>assertThat(getFile()).hasName(name)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getFile().getParent()).isEqualTo(pathname)</code></p></td>\n      <td><p><code>assertThat(getFile()).hasParent(pathname)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getFile().getParentFile()).isNull()</code></p></td>\n      <td><p><code>assertThat(getFile()).hasNoParent()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getFile().isAbsolute()).isTrue()</code></p></td>\n      <td><p><code>assertThat(getFile()).isAbsolute()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getFile().isAbsolute()).isFalse()</code></p></td>\n      <td><p><code>assertThat(getFile()).isRelative()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getFile().isDirectory()).isTrue()</code></p></td>\n      <td><p><code>assertThat(getFile()).isDirectory()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getFile().isFile()).isTrue()</code></p></td>\n      <td><p><code>assertThat(getFile()).isFile()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getFile().list()).isEmpty()</code></p></td>\n      <td><p><code>assertThat(getFile()).isEmptyDirectory()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><strong>&nbsp;Related to <code>Path</code></strong></p></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getPath().startsWith(path)).isTrue()</code></p></td>\n      <td><p><code>assertThat(getPath()).startsWithRaw(path)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getPath().endsWith(path)).isTrue()</code></p></td>\n      <td><p><code>assertThat(getPath()).endsWithRaw(path)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getPath().getParent()).isEqualTo(name)</code></p></td>\n      <td><p><code>assertThat(getPath()).hasParentRaw(name)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getPath().getParent()).isNull()</code></p></td>\n      <td><p><code>assertThat(getPath()).hasNoParentRaw()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getPath().isAbsolute()).isTrue()</code></p></td>\n      <td><p><code>assertThat(getPath()).isAbsolute()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getPath().isAbsolute()).isFalse()</code></p></td>\n      <td><p><code>assertThat(getPath()).isRelative()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><strong>&nbsp;Related to <code>Array</code></strong></p></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getArray().length).isZero()</code></p></td>\n      <td><p><code>assertThat(getArray()).isEmpty()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getArray().length).isEqualTo(length)</code></p></td>\n      <td><p><code>assertThat(getArray()).hasSize(length)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getArray().length).isEqualTo(anotherArray.length)</code></p></td>\n      <td><p><code>assertThat(getArray()).hasSameSizeAs(anotherArray)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getArray().length).isLessThanOrEqualTo(expression)</code></p></td>\n      <td><p><code>assertThat(getArray()).hasSizeLessThanOrEqualTo(expression)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getArray().length).isLessThan(expression)</code></p></td>\n      <td><p><code>assertThat(getArray()).hasSizeLessThan(expression)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getArray().length).isGreaterThan(expression)</code></p></td>\n      <td><p><code>assertThat(getArray()).hasSizeGreaterThan(expression)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getArray().length).isGreaterThanOrEqualTo(expression)</code></p></td>\n      <td><p><code>assertThat(getArray()).hasSizeGreaterThanOrEqualTo(expression)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><strong>Related to <code>Collection</code></strong></p></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getCollection().isEmpty()).isTrue()</code></p></td>\n      <td><p><code>assertThat(getCollection()).isEmpty()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getCollection().size()).isZero()</code></p></td>\n      <td><p><code>assertThat(getCollection()).isEmpty()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getCollection().contains(something)).isTrue()</code></p></td>\n      <td><p><code>assertThat(getCollection()).contains(something)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getCollection().containsAll(otherCollection)).isTrue()</code></p></td>\n      <td><p><code>assertThat(getCollection()).containsAll(otherCollection)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><strong>Related to <code>Map</code></strong></p></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getMap().size()).isEqualTo(otherMap().size()</code></p></td>\n      <td><p><code>assertThat(getMap()).hasSameSizeAs(otherMap())</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getMap().containsKey(key)).isTrue()</code></p></td>\n      <td><p><code>assertThat(getMap()).containsKey(key)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getMap().keySet()).contains(key)</code></p></td>\n      <td><p><code>assertThat(getMap()).containsKey(key)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getMap().keySet()).containsOnlyKey(key)</code></p></td>\n      <td><p><code>assertThat(getMap()).containsOnlyKey(key)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getMap().containsValue(value)).isTrue()</code></p></td>\n      <td><p><code>assertThat(getMap()).containsValue(value)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getMap().values()).contains(value)</code></p></td>\n      <td><p><code>assertThat(getMap()).containsValue(value)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getMap().get(key)).isEqualTo(value)</code></p></td>\n      <td><p><code>assertThat(getMap()).containsEntry(key, value)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><strong>Related to <code>Optional</code></strong></p></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getOptional().isPresent()).isTrue()</code></p></td>\n      <td><p><code>assertThat(getOptional()).isPresent()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getOptional().get()).isEqualTo(something)</code></p></td>\n      <td><p><code>assertThat(getOptional()).contains(something)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getOptional().get()).isSameAs(something)</code></p></td>\n      <td><p><code>assertThat(getOptional()).containsSame(something)</code></p></td>\n    </tr>\n  </tbody>\n</table>\n<h2>Noncompliant Code Example</h2>\n<pre>\nassertThat(getObject()).isEqualTo(null); // Noncompliant\nassertThat(getObject()).isNotEqualTo(null); // Noncompliant - not listed above but also supported\n\nassertThat(getString().trim()).isEmpty();\nassertThat(getFile().canRead()).isTrue();\nassertThat(getPath().getParent()).isNull();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nassertThat(getObject()).isNull();\nassertThat(getObject()).isNotNull();\n\nassertThat(getString()).isBlank();\nassertThat(getFile()).canRead();\nassertThat(getPath()).hasNoParentRaw();\n</pre>'}]",[],['squid:S5838'],,,,
java:S1116,java,Empty statements should be removed,2023-06-14T03:41:52+0000,"<p>Empty statements, i.e. <code>;</code>, are usually introduced by mistake, for example because:</p>
<ul>
  <li> It was meant to be replaced by an actual statement, but this was forgotten. </li>
  <li> There was a typo which lead the semicolon to be doubled, i.e. <code>;;</code>. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
void doSomething() {
  ;                                                       // Noncompliant - was used as a kind of TODO marker
}

void doSomethingElse() {
  System.out.println(""Hello, world!"");;                     // Noncompliant - double ;
  ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void doSomething() {}

void doSomethingElse() {
  System.out.println(""Hello, world!"");
  ...
  for (int i = 0; i &lt; 3; i++) ; // compliant if unique statement of a loop
  ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/5dUxBQ"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed
  </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/IDZGBQ"">CERT, MSC51-J.</a> - Do not place a semicolon immediately following an if, for, or while
  condition </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/WtYxBQ"">CERT, EXP15-C.</a> - Do not place a semicolon on the same line as an if, for, or while
  statement </li>
</ul>","<p>Empty statements, i.e. <code>;</code>, are usually introduced by mistake, for example because:</p>
<ul>
  <li> It was meant to be replaced by an actual statement, but this was forgotten. </li>
  <li> There was a typo which lead the semicolon to be doubled, i.e. <code>;;</code>. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
void doSomething() {
  ;                                                       // Noncompliant - was used as a kind of TODO marker
}

void doSomethingElse() {
  System.out.println(""Hello, world!"");;                     // Noncompliant - double ;
  ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void doSomething() {}

void doSomethingElse() {
  System.out.println(""Hello, world!"");
  ...
  for (int i = 0; i &lt; 3; i++) ; // compliant if unique statement of a loop
  ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/5dUxBQ"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed
  </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/IDZGBQ"">CERT, MSC51-J.</a> - Do not place a semicolon immediately following an if, for, or while
  condition </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/WtYxBQ"">CERT, EXP15-C.</a> - Do not place a semicolon on the same line as an if, for, or while
  statement </li>
</ul>",MINOR,READY,False,[],"['cert', 'unused']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,2min,CONSTANT_ISSUE,2min,False,ALL,False,"[{'key': 'default', 'content': '<p>Empty statements, i.e. <code>;</code>, are usually introduced by mistake, for example because:</p>\n<ul>\n  <li> It was meant to be replaced by an actual statement, but this was forgotten. </li>\n  <li> There was a typo which lead the semicolon to be doubled, i.e. <code>;;</code>. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid doSomething() {\n  ;                                                       // Noncompliant - was used as a kind of TODO marker\n}\n\nvoid doSomethingElse() {\n  System.out.println(""Hello, world!"");;                     // Noncompliant - double ;\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvoid doSomething() {}\n\nvoid doSomethingElse() {\n  System.out.println(""Hello, world!"");\n  ...\n  for (int i = 0; i &lt; 3; i++) ; // compliant if unique statement of a loop\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/5dUxBQ"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed\n  </li>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/IDZGBQ"">CERT, MSC51-J.</a> - Do not place a semicolon immediately following an if, for, or while\n  condition </li>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/WtYxBQ"">CERT, EXP15-C.</a> - Do not place a semicolon on the same line as an if, for, or while\n  statement </li>\n</ul>'}]",[],['squid:EmptyStatementUsageCheck'],,,,
java:S1117,java,Local variables should not shadow class fields,2023-06-14T03:41:52+0000,"<p>Overriding or shadowing a variable declared in an outer scope can strongly impact the readability, and therefore the maintainability, of a piece of
code. Further, it could lead maintainers to introduce bugs because they think they’re using one variable but are really using another.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Foo {
  public int myField;

  public void doSomething() {
    int myField = 0;
    ...
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/display/c/DCL01-C.+Do+not+reuse+variable+names+in+subscopes"">CERT, DCL01-C.</a> - Do not reuse
  variable names in subscopes </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/display/java/DCL51-J.+Do+not+shadow+or+obscure+identifiers+in+subscopes"">CERT, DCL51-J.</a> - Do
  not shadow or obscure identifiers in subscopes </li>
</ul>","<p>Overriding or shadowing a variable declared in an outer scope can strongly impact the readability, and therefore the maintainability, of a piece of
code. Further, it could lead maintainers to introduce bugs because they think they’re using one variable but are really using another.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Foo {
  public int myField;

  public void doSomething() {
    int myField = 0;
    ...
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/display/c/DCL01-C.+Do+not+reuse+variable+names+in+subscopes"">CERT, DCL01-C.</a> - Do not reuse
  variable names in subscopes </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/display/java/DCL51-J.+Do+not+shadow+or+obscure+identifiers+in+subscopes"">CERT, DCL51-J.</a> - Do
  not shadow or obscure identifiers in subscopes </li>
</ul>",MAJOR,READY,False,[],"['cert', 'pitfall', 'suspicious']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>Overriding or shadowing a variable declared in an outer scope can strongly impact the readability, and therefore the maintainability, of a piece of\ncode. Further, it could lead maintainers to introduce bugs because they think they’re using one variable but are really using another.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Foo {\n  public int myField;\n\n  public void doSomething() {\n    int myField = 0;\n    ...\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/display/c/DCL01-C.+Do+not+reuse+variable+names+in+subscopes"">CERT, DCL01-C.</a> - Do not reuse\n  variable names in subscopes </li>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/display/java/DCL51-J.+Do+not+shadow+or+obscure+identifiers+in+subscopes"">CERT, DCL51-J.</a> - Do\n  not shadow or obscure identifiers in subscopes </li>\n</ul>'}]",[],['squid:HiddenFieldCheck'],,,,
java:S1126,java,"Return of boolean expressions should not be wrapped into an ""if-then-else"" statement",2023-06-14T03:41:52+0000,"<p>Return of boolean literal statements wrapped into <code>if-then-else</code> ones should be simplified.</p>
<p>Similarly, method invocations wrapped into <code>if-then-else</code> differing only from boolean literals should be simplified into a single
invocation.</p>
<h2>Noncompliant Code Example</h2>
<pre>
boolean foo(Object param) {
  if (expression) { // Noncompliant
    bar(param, true, ""qix"");
  } else {
    bar(param, false, ""qix"");
  }

  if (expression) {  // Noncompliant
    return true;
  } else {
    return false;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
boolean foo(Object param) {
  bar(param, expression, ""qix"");

  return expression;
}
</pre>","<p>Return of boolean literal statements wrapped into <code>if-then-else</code> ones should be simplified.</p>
<p>Similarly, method invocations wrapped into <code>if-then-else</code> differing only from boolean literals should be simplified into a single
invocation.</p>
<h2>Noncompliant Code Example</h2>
<pre>
boolean foo(Object param) {
  if (expression) { // Noncompliant
    bar(param, true, ""qix"");
  } else {
    bar(param, false, ""qix"");
  }

  if (expression) {  // Noncompliant
    return true;
  } else {
    return false;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
boolean foo(Object param) {
  bar(param, expression, ""qix"");

  return expression;
}
</pre>",MINOR,READY,False,[],['clumsy'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,2min,CONSTANT_ISSUE,2min,False,ALL,False,"[{'key': 'default', 'content': '<p>Return of boolean literal statements wrapped into <code>if-then-else</code> ones should be simplified.</p>\n<p>Similarly, method invocations wrapped into <code>if-then-else</code> differing only from boolean literals should be simplified into a single\ninvocation.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nboolean foo(Object param) {\n  if (expression) { // Noncompliant\n    bar(param, true, ""qix"");\n  } else {\n    bar(param, false, ""qix"");\n  }\n\n  if (expression) {  // Noncompliant\n    return true;\n  } else {\n    return false;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nboolean foo(Object param) {\n  bar(param, expression, ""qix"");\n\n  return expression;\n}\n</pre>'}]",[],['squid:S1126'],,,,
java:S1479,java,"""switch"" statements should not have too many ""case"" clauses",2023-06-14T03:41:52+0000,"<p>When <code>switch</code> statements have large sets of <code>case</code> clauses, it is usually an attempt to map two sets of data. A real map
structure would be more readable and maintainable, and should be used instead.</p>
<h2>Exceptions</h2>
<p>This rule ignores <code>switch</code>es over <code>Enum</code>s and empty, fall-through cases.</p>","<p>When <code>switch</code> statements have large sets of <code>case</code> clauses, it is usually an attempt to map two sets of data. A real map
structure would be more readable and maintainable, and should be used instead.</p>
<h2>Exceptions</h2>
<p>This rule ignores <code>switch</code>es over <code>Enum</code>s and empty, fall-through cases.</p>",MAJOR,READY,False,[],['brain-overload'],java,Java,"[{'key': 'maximum', 'htmlDesc': 'Maximum number of case', 'defaultValue': '30', 'type': 'INTEGER'}]",CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,30min,CONSTANT_ISSUE,30min,False,ALL,False,"[{'key': 'default', 'content': '<p>When <code>switch</code> statements have large sets of <code>case</code> clauses, it is usually an attempt to map two sets of data. A real map\nstructure would be more readable and maintainable, and should be used instead.</p>\n<h2>Exceptions</h2>\n<p>This rule ignores <code>switch</code>es over <code>Enum</code>s and empty, fall-through cases.</p>'}]",[],['squid:S1479'],,,,
java:S2447,java,"Null should not be returned from a ""Boolean"" method",2023-06-14T03:41:52+0000,"<p>While <code>null</code> is technically a valid <code>Boolean</code> value, that fact, and the distinction between <code>Boolean</code> and
<code>boolean</code> is easy to forget. So returning <code>null</code> from a <code>Boolean</code> method is likely to cause problems with callers'
code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public Boolean isUsable() {
  // ...
  return null;  // Noncompliant
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/476"">MITRE, CWE-476</a> - NULL Pointer Dereference </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/aDdGBQ"">CERT, EXP01-J.</a> - Do not use a null in a case where an object is required </li>
</ul>","<p>While <code>null</code> is technically a valid <code>Boolean</code> value, that fact, and the distinction between <code>Boolean</code> and
<code>boolean</code> is easy to forget. So returning <code>null</code> from a <code>Boolean</code> method is likely to cause problems with callers'
code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public Boolean isUsable() {
  // ...
  return null;  // Noncompliant
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/476"">MITRE, CWE-476</a> - NULL Pointer Dereference </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/aDdGBQ"">CERT, EXP01-J.</a> - Do not use a null in a case where an object is required </li>
</ul>",CRITICAL,READY,False,[],"['cert', 'cwe', 'pitfall']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,20min,CONSTANT_ISSUE,20min,False,ALL,False,"[{'key': 'default', 'content': '<p>While <code>null</code> is technically a valid <code>Boolean</code> value, that fact, and the distinction between <code>Boolean</code> and\n<code>boolean</code> is easy to forget. So returning <code>null</code> from a <code>Boolean</code> method is likely to cause problems with callers\'\ncode.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic Boolean isUsable() {\n  // ...\n  return null;  // Noncompliant\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/476"">MITRE, CWE-476</a> - NULL Pointer Dereference </li>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/aDdGBQ"">CERT, EXP01-J.</a> - Do not use a null in a case where an object is required </li>\n</ul>'}]",[],['squid:S2447'],,,,
java:S2698,java,Test assertions should include messages,2023-06-14T03:41:52+0000,"<p>Adding messages to JUnit, FEST and AssertJ assertions is an investment in your future productivity. Spend a few seconds writing them now, and
you’ll save a lot of time on the other end when either the tests fail and you need to quickly diagnose the problem, or when you need to maintain the
tests and the assertion messages work as a sort of documentation.</p>
<h2>Noncompliant Code Example</h2>
<pre>
assertEquals(4, list.size());  // Noncompliant

try {
  fail();  // Noncompliant
} catch (Exception e) {
  assertThat(list.get(0)).isEqualTo(""pear"");  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
assertEquals(""There should have been 4 Fruits in the list"", 4, list.size());

try {
  fail(""And exception is expected here"");
} catch (Exception e) {
  assertThat(list.get(0)).as(""check first element"").overridingErrorMessage(""The first element should be a pear, not a %s"", list.get(0)).isEqualTo(""pear"");
}
</pre>","<p>Adding messages to JUnit, FEST and AssertJ assertions is an investment in your future productivity. Spend a few seconds writing them now, and
you’ll save a lot of time on the other end when either the tests fail and you need to quickly diagnose the problem, or when you need to maintain the
tests and the assertion messages work as a sort of documentation.</p>
<h2>Noncompliant Code Example</h2>
<pre>
assertEquals(4, list.size());  // Noncompliant

try {
  fail();  // Noncompliant
} catch (Exception e) {
  assertThat(list.get(0)).isEqualTo(""pear"");  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
assertEquals(""There should have been 4 Fruits in the list"", 4, list.size());

try {
  fail(""And exception is expected here"");
} catch (Exception e) {
  assertThat(list.get(0)).as(""check first element"").overridingErrorMessage(""The first element should be a pear, not a %s"", list.get(0)).isEqualTo(""pear"");
}
</pre>",MINOR,READY,False,[],"['junit', 'tests']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,TEST,False,"[{'key': 'default', 'content': '<p>Adding messages to JUnit, FEST and AssertJ assertions is an investment in your future productivity. Spend a few seconds writing them now, and\nyou’ll save a lot of time on the other end when either the tests fail and you need to quickly diagnose the problem, or when you need to maintain the\ntests and the assertion messages work as a sort of documentation.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nassertEquals(4, list.size());  // Noncompliant\n\ntry {\n  fail();  // Noncompliant\n} catch (Exception e) {\n  assertThat(list.get(0)).isEqualTo(""pear"");  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nassertEquals(""There should have been 4 Fruits in the list"", 4, list.size());\n\ntry {\n  fail(""And exception is expected here"");\n} catch (Exception e) {\n  assertThat(list.get(0)).as(""check first element"").overridingErrorMessage(""The first element should be a pear, not a %s"", list.get(0)).isEqualTo(""pear"");\n}\n</pre>'}]",[],['squid:S2698'],,,,
java:S2699,java,Tests should include assertions,2023-06-14T03:41:52+0000,"<p>A test case without assertions ensures only that no exceptions are thrown. Beyond basic runnability, it ensures nothing about the behavior of the
code under test.</p>
<p>This rule raises an exception when no assertions from any of the following known frameworks are found in a test:</p>
<ul>
  <li> AssertJ </li>
  <li> Awaitility </li>
  <li> EasyMock </li>
  <li> Eclipse Vert.x </li>
  <li> Fest 1.x and 2.x </li>
  <li> Hamcrest </li>
  <li> JMock </li>
  <li> JMockit </li>
  <li> JUnit </li>
  <li> Mockito </li>
  <li> Rest-assured 2.x, 3.x and 4.x </li>
  <li> RxJava 1.x and 2.x </li>
  <li> Selenide </li>
  <li> Spring’s <code>org.springframework.test.web.servlet.ResultActions.andExpect()</code> and
  <code>org.springframework.test.web.servlet.ResultActions.andExpectAll()</code> </li>
  <li> Truth Framework </li>
  <li> WireMock </li>
</ul>
<p>Furthermore, as new or custom assertion frameworks may be used, the rule can be parametrized to define specific methods that will also be
considered as assertions. No issue will be raised when such methods are found in test cases. The parameter value should have the following format
<code>&lt;FullyQualifiedClassName&gt;#&lt;MethodName&gt;</code>, where <code>MethodName</code> can end with the wildcard character. For constructors,
the pattern should be <code>&lt;FullyQualifiedClassName&gt;#&lt;init&gt;</code>.</p>
<p>Example:&nbsp;<code>com.company.CompareToTester#compare*,com.company.CustomAssert#customAssertMethod,com.company.CheckVerifier#&lt;init&gt;</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@Test
public void testDoSomething() {  // Noncompliant
  MyClass myClass = new MyClass();
  myClass.doSomething();
}
</pre>
<h2>Compliant Solution</h2>
<p>Example when <code>com.company.CompareToTester#compare*</code> is used as parameter to the rule.</p>
<pre>
import com.company.CompareToTester;

@Test
public void testDoSomething() {
  MyClass myClass = new MyClass();
  assertNull(myClass.doSomething());  // JUnit assertion
  assertThat(myClass.doSomething()).isNull();  // Fest assertion
}

@Test
public void testDoSomethingElse() {
  MyClass myClass = new MyClass();
  new CompareToTester().compareWith(myClass);  // Compliant - custom assertion method defined as rule parameter
  CompareToTester.compareStatic(myClass);  // Compliant
}
</pre>","<p>A test case without assertions ensures only that no exceptions are thrown. Beyond basic runnability, it ensures nothing about the behavior of the
code under test.</p>
<p>This rule raises an exception when no assertions from any of the following known frameworks are found in a test:</p>
<ul>
  <li> AssertJ </li>
  <li> Awaitility </li>
  <li> EasyMock </li>
  <li> Eclipse Vert.x </li>
  <li> Fest 1.x and 2.x </li>
  <li> Hamcrest </li>
  <li> JMock </li>
  <li> JMockit </li>
  <li> JUnit </li>
  <li> Mockito </li>
  <li> Rest-assured 2.x, 3.x and 4.x </li>
  <li> RxJava 1.x and 2.x </li>
  <li> Selenide </li>
  <li> Spring’s <code>org.springframework.test.web.servlet.ResultActions.andExpect()</code> and
  <code>org.springframework.test.web.servlet.ResultActions.andExpectAll()</code> </li>
  <li> Truth Framework </li>
  <li> WireMock </li>
</ul>
<p>Furthermore, as new or custom assertion frameworks may be used, the rule can be parametrized to define specific methods that will also be
considered as assertions. No issue will be raised when such methods are found in test cases. The parameter value should have the following format
<code>&lt;FullyQualifiedClassName&gt;#&lt;MethodName&gt;</code>, where <code>MethodName</code> can end with the wildcard character. For constructors,
the pattern should be <code>&lt;FullyQualifiedClassName&gt;#&lt;init&gt;</code>.</p>
<p>Example:&nbsp;<code>com.company.CompareToTester#compare*,com.company.CustomAssert#customAssertMethod,com.company.CheckVerifier#&lt;init&gt;</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@Test
public void testDoSomething() {  // Noncompliant
  MyClass myClass = new MyClass();
  myClass.doSomething();
}
</pre>
<h2>Compliant Solution</h2>
<p>Example when <code>com.company.CompareToTester#compare*</code> is used as parameter to the rule.</p>
<pre>
import com.company.CompareToTester;

@Test
public void testDoSomething() {
  MyClass myClass = new MyClass();
  assertNull(myClass.doSomething());  // JUnit assertion
  assertThat(myClass.doSomething()).isNull();  // Fest assertion
}

@Test
public void testDoSomethingElse() {
  MyClass myClass = new MyClass();
  new CompareToTester().compareWith(myClass);  // Compliant - custom assertion method defined as rule parameter
  CompareToTester.compareStatic(myClass);  // Compliant
}
</pre>",BLOCKER,READY,False,[],"['junit', 'tests']",java,Java,"[{'key': 'customAssertionMethods', 'htmlDesc': 'Comma-separated list of fully qualified method symbols that should be considered as assertion methods. The wildcard character can be used at the end of the method name.', 'type': 'STRING'}]",CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,10min,CONSTANT_ISSUE,10min,False,TEST,False,"[{'key': 'default', 'content': '<p>A test case without assertions ensures only that no exceptions are thrown. Beyond basic runnability, it ensures nothing about the behavior of the\ncode under test.</p>\n<p>This rule raises an exception when no assertions from any of the following known frameworks are found in a test:</p>\n<ul>\n  <li> AssertJ </li>\n  <li> Awaitility </li>\n  <li> EasyMock </li>\n  <li> Eclipse Vert.x </li>\n  <li> Fest 1.x and 2.x </li>\n  <li> Hamcrest </li>\n  <li> JMock </li>\n  <li> JMockit </li>\n  <li> JUnit </li>\n  <li> Mockito </li>\n  <li> Rest-assured 2.x, 3.x and 4.x </li>\n  <li> RxJava 1.x and 2.x </li>\n  <li> Selenide </li>\n  <li> Spring’s <code>org.springframework.test.web.servlet.ResultActions.andExpect()</code> and\n  <code>org.springframework.test.web.servlet.ResultActions.andExpectAll()</code> </li>\n  <li> Truth Framework </li>\n  <li> WireMock </li>\n</ul>\n<p>Furthermore, as new or custom assertion frameworks may be used, the rule can be parametrized to define specific methods that will also be\nconsidered as assertions. No issue will be raised when such methods are found in test cases. The parameter value should have the following format\n<code>&lt;FullyQualifiedClassName&gt;#&lt;MethodName&gt;</code>, where <code>MethodName</code> can end with the wildcard character. For constructors,\nthe pattern should be <code>&lt;FullyQualifiedClassName&gt;#&lt;init&gt;</code>.</p>\n<p>Example:&nbsp;<code>com.company.CompareToTester#compare*,com.company.CustomAssert#customAssertMethod,com.company.CheckVerifier#&lt;init&gt;</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Test\npublic void testDoSomething() {  // Noncompliant\n  MyClass myClass = new MyClass();\n  myClass.doSomething();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<p>Example when <code>com.company.CompareToTester#compare*</code> is used as parameter to the rule.</p>\n<pre>\nimport com.company.CompareToTester;\n\n@Test\npublic void testDoSomething() {\n  MyClass myClass = new MyClass();\n  assertNull(myClass.doSomething());  // JUnit assertion\n  assertThat(myClass.doSomething()).isNull();  // Fest assertion\n}\n\n@Test\npublic void testDoSomethingElse() {\n  MyClass myClass = new MyClass();\n  new CompareToTester().compareWith(myClass);  // Compliant - custom assertion method defined as rule parameter\n  CompareToTester.compareStatic(myClass);  // Compliant\n}\n</pre>'}]",[],['squid:S2699'],,,,
java:S3416,java,Loggers should be named for their enclosing classes,2023-06-14T03:41:52+0000,"<p>It is convention to name each class’s logger for the class itself. Doing so allows you to set up clear, communicative logger configuration. Naming
loggers by some other convention confuses configuration, and using the same class name for multiple class loggers prevents the granular configuration
of each class' logger. Some libraries, such as SLF4J warn about this, but not all do.</p>
<p>This rule raises an issue when a logger is not named for its enclosing class.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass {
  private final static Logger LOG = LoggerFactory.getLogger(WrongClass.class);  // Noncompliant; multiple classes using same logger
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass {
  private final static Logger LOG = LoggerFactory.getLogger(MyClass.class);
}
</pre>","<p>It is convention to name each class’s logger for the class itself. Doing so allows you to set up clear, communicative logger configuration. Naming
loggers by some other convention confuses configuration, and using the same class name for multiple class loggers prevents the granular configuration
of each class' logger. Some libraries, such as SLF4J warn about this, but not all do.</p>
<p>This rule raises an issue when a logger is not named for its enclosing class.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass {
  private final static Logger LOG = LoggerFactory.getLogger(WrongClass.class);  // Noncompliant; multiple classes using same logger
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass {
  private final static Logger LOG = LoggerFactory.getLogger(MyClass.class);
}
</pre>",MINOR,READY,False,[],['confusing'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,MAIN,False,"[{'key': 'default', 'content': ""<p>It is convention to name each class’s logger for the class itself. Doing so allows you to set up clear, communicative logger configuration. Naming\nloggers by some other convention confuses configuration, and using the same class name for multiple class loggers prevents the granular configuration\nof each class' logger. Some libraries, such as SLF4J warn about this, but not all do.</p>\n<p>This rule raises an issue when a logger is not named for its enclosing class.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  private final static Logger LOG = LoggerFactory.getLogger(WrongClass.class);  // Noncompliant; multiple classes using same logger\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  private final static Logger LOG = LoggerFactory.getLogger(MyClass.class);\n}\n</pre>""}]",[],['squid:S3416'],,,,
java:S3658,java,Unit tests should throw exceptions,2023-06-14T03:41:52+0000,"<p>When the code under test in a unit test throws an exception, the test itself fails. Therefore, there is no need to surround the tested code with a
<code>try</code>-<code>catch</code> structure to detect failure. Instead, you can simply move the exception type to the method signature.</p>
<p>This rule raises an issue when there is a fail assertion inside a <code>catch</code> block.</p>
<p>Supported frameworks:</p>
<ul>
  <li> JUnit3 </li>
  <li> JUnit4 </li>
  <li> JUnit5 </li>
  <li> Fest assert </li>
  <li> AssertJ </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
@Test
public void testMethod() {
  try {
            // Some code
  } catch (MyException e) {
    Assert.fail(e.getMessage());  // Noncompliant
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@Test
public void testMethod() throws MyException {
    // Some code
}
</pre>","<p>When the code under test in a unit test throws an exception, the test itself fails. Therefore, there is no need to surround the tested code with a
<code>try</code>-<code>catch</code> structure to detect failure. Instead, you can simply move the exception type to the method signature.</p>
<p>This rule raises an issue when there is a fail assertion inside a <code>catch</code> block.</p>
<p>Supported frameworks:</p>
<ul>
  <li> JUnit3 </li>
  <li> JUnit4 </li>
  <li> JUnit5 </li>
  <li> Fest assert </li>
  <li> AssertJ </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
@Test
public void testMethod() {
  try {
            // Some code
  } catch (MyException e) {
    Assert.fail(e.getMessage());  // Noncompliant
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@Test
public void testMethod() throws MyException {
    // Some code
}
</pre>",MINOR,READY,False,[],"['clumsy', 'error-handling', 'junit', 'tests']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,2min,CONSTANT_ISSUE,2min,False,TEST,False,"[{'key': 'default', 'content': '<p>When the code under test in a unit test throws an exception, the test itself fails. Therefore, there is no need to surround the tested code with a\n<code>try</code>-<code>catch</code> structure to detect failure. Instead, you can simply move the exception type to the method signature.</p>\n<p>This rule raises an issue when there is a fail assertion inside a <code>catch</code> block.</p>\n<p>Supported frameworks:</p>\n<ul>\n  <li> JUnit3 </li>\n  <li> JUnit4 </li>\n  <li> JUnit5 </li>\n  <li> Fest assert </li>\n  <li> AssertJ </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Test\npublic void testMethod() {\n  try {\n            // Some code\n  } catch (MyException e) {\n    Assert.fail(e.getMessage());  // Noncompliant\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Test\npublic void testMethod() throws MyException {\n    // Some code\n}\n</pre>'}]",[],['squid:S3658'],,,,
java:S5843,java,Regular expressions should not be too complicated,2023-06-14T03:41:52+0000,"<p>Overly complicated regular expressions are hard to read and to maintain and can easily cause hard-to-find bugs. If a regex is too complicated, you
should consider replacing it or parts of it with regular code or splitting it apart into multiple patterns at least.</p>
<p>The complexity of a regular expression is determined as follows:</p>
<p>Each of the following operators increases the complexity by an amount equal to the current nesting level and also increases the current nesting
level by one for its arguments:</p>
<ul>
  <li> <code>|</code> - when multiple <code>|</code> operators are used together, the subsequent ones only increase the complexity by 1 </li>
  <li> <code>&amp;&amp;</code> (inside character classes) - when multiple <code>&amp;&amp;</code> operators are used together, the subsequent ones
  only increase the complexity by 1 </li>
  <li> Quantifiers (<code>*</code>, <code>+</code>, <code>?</code>, <code>{n,m}</code>, <code>{n,}</code> or <code>{n}</code>) </li>
  <li> Non-capturing groups that set flags (such as <code>(?i:some_pattern)</code> or <code>(?i)some_pattern</code>) </li>
  <li> Lookahead and lookbehind assertions </li>
</ul>
<p>Additionally, each use of the following features increase the complexity by 1 regardless of nesting:</p>
<ul>
  <li> character classes </li>
  <li> back references </li>
</ul>
<p>If a regular expression is split among multiple variables, the complexity is calculated for each variable individually, not for the whole regular
expression. If a regular expression is split over multiple lines, each line is treated individually if it is accompanied by a comment (either a Java
comment or a comment within the regular expression), otherwise the regular expression is analyzed as a whole.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (dateString.matches(""^(?:(?:31(\\/|-|\\.)(?:0?[13578]|1[02]))\\1|(?:(?:29|30)(\\/|-|\\.)(?:0?[13-9]|1[0-2])\\2))(?:(?:1[6-9]|[2-9]\\d)?\\d{2})$|^(?:29(\\/|-|\\.)0?2\\3(?:(?:(?:1[6-9]|[2-9]\\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\\d|2[0-8])(\\/|-|\\.)(?:(?:0?[1-9])|(?:1[0-2]))\\4(?:(?:1[6-9]|[2-9]\\d)?\\d{2})$"")) {
    handleDate(dateString);
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (dateString.matches(""^\\d{1,2}([-/.])\\d{1,2}\\1\\d{1,4}$"")) {
    String dateParts[] = dateString.split(""[-/.]"");
    int day = Integer.parseInt(dateParts[0]);
    int month = Integer.parseInt(dateParts[1]);
    int year = Integer.parseInt(dateParts[2]);
    // Put logic to validate and process the date based on its integer parts here
}
</pre>
<h2>Exceptions</h2>
<p>Regular expressions are only analyzed if all parts of the regular expression are either string literals, effectively final local variables or
<code>static final</code> fields, all of which can be combined using the '<code>+</code>' operator.</p>
<p>When a regular expression is split among multiple variables or commented lines, each part is only analyzed if it is syntactically valid by
itself.</p>","<p>Overly complicated regular expressions are hard to read and to maintain and can easily cause hard-to-find bugs. If a regex is too complicated, you
should consider replacing it or parts of it with regular code or splitting it apart into multiple patterns at least.</p>
<p>The complexity of a regular expression is determined as follows:</p>
<p>Each of the following operators increases the complexity by an amount equal to the current nesting level and also increases the current nesting
level by one for its arguments:</p>
<ul>
  <li> <code>|</code> - when multiple <code>|</code> operators are used together, the subsequent ones only increase the complexity by 1 </li>
  <li> <code>&amp;&amp;</code> (inside character classes) - when multiple <code>&amp;&amp;</code> operators are used together, the subsequent ones
  only increase the complexity by 1 </li>
  <li> Quantifiers (<code>*</code>, <code>+</code>, <code>?</code>, <code>{n,m}</code>, <code>{n,}</code> or <code>{n}</code>) </li>
  <li> Non-capturing groups that set flags (such as <code>(?i:some_pattern)</code> or <code>(?i)some_pattern</code>) </li>
  <li> Lookahead and lookbehind assertions </li>
</ul>
<p>Additionally, each use of the following features increase the complexity by 1 regardless of nesting:</p>
<ul>
  <li> character classes </li>
  <li> back references </li>
</ul>
<p>If a regular expression is split among multiple variables, the complexity is calculated for each variable individually, not for the whole regular
expression. If a regular expression is split over multiple lines, each line is treated individually if it is accompanied by a comment (either a Java
comment or a comment within the regular expression), otherwise the regular expression is analyzed as a whole.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (dateString.matches(""^(?:(?:31(\\/|-|\\.)(?:0?[13578]|1[02]))\\1|(?:(?:29|30)(\\/|-|\\.)(?:0?[13-9]|1[0-2])\\2))(?:(?:1[6-9]|[2-9]\\d)?\\d{2})$|^(?:29(\\/|-|\\.)0?2\\3(?:(?:(?:1[6-9]|[2-9]\\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\\d|2[0-8])(\\/|-|\\.)(?:(?:0?[1-9])|(?:1[0-2]))\\4(?:(?:1[6-9]|[2-9]\\d)?\\d{2})$"")) {
    handleDate(dateString);
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (dateString.matches(""^\\d{1,2}([-/.])\\d{1,2}\\1\\d{1,4}$"")) {
    String dateParts[] = dateString.split(""[-/.]"");
    int day = Integer.parseInt(dateParts[0]);
    int month = Integer.parseInt(dateParts[1]);
    int year = Integer.parseInt(dateParts[2]);
    // Put logic to validate and process the date based on its integer parts here
}
</pre>
<h2>Exceptions</h2>
<p>Regular expressions are only analyzed if all parts of the regular expression are either string literals, effectively final local variables or
<code>static final</code> fields, all of which can be combined using the '<code>+</code>' operator.</p>
<p>When a regular expression is split among multiple variables or commented lines, each part is only analyzed if it is syntactically valid by
itself.</p>",MAJOR,READY,False,[],['regex'],java,Java,"[{'key': 'maxComplexity', 'htmlDesc': 'The maximum authorized complexity.', 'defaultValue': '20', 'type': 'INTEGER'}]",LINEAR_OFFSET,LINEAR_OFFSET,CODE_SMELL,LINEAR_OFFSET,8min,LINEAR_OFFSET,8min,False,ALL,False,"[{'key': 'default', 'content': '<p>Overly complicated regular expressions are hard to read and to maintain and can easily cause hard-to-find bugs. If a regex is too complicated, you\nshould consider replacing it or parts of it with regular code or splitting it apart into multiple patterns at least.</p>\n<p>The complexity of a regular expression is determined as follows:</p>\n<p>Each of the following operators increases the complexity by an amount equal to the current nesting level and also increases the current nesting\nlevel by one for its arguments:</p>\n<ul>\n  <li> <code>|</code> - when multiple <code>|</code> operators are used together, the subsequent ones only increase the complexity by 1 </li>\n  <li> <code>&amp;&amp;</code> (inside character classes) - when multiple <code>&amp;&amp;</code> operators are used together, the subsequent ones\n  only increase the complexity by 1 </li>\n  <li> Quantifiers (<code>*</code>, <code>+</code>, <code>?</code>, <code>{n,m}</code>, <code>{n,}</code> or <code>{n}</code>) </li>\n  <li> Non-capturing groups that set flags (such as <code>(?i:some_pattern)</code> or <code>(?i)some_pattern</code>) </li>\n  <li> Lookahead and lookbehind assertions </li>\n</ul>\n<p>Additionally, each use of the following features increase the complexity by 1 regardless of nesting:</p>\n<ul>\n  <li> character classes </li>\n  <li> back references </li>\n</ul>\n<p>If a regular expression is split among multiple variables, the complexity is calculated for each variable individually, not for the whole regular\nexpression. If a regular expression is split over multiple lines, each line is treated individually if it is accompanied by a comment (either a Java\ncomment or a comment within the regular expression), otherwise the regular expression is analyzed as a whole.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (dateString.matches(""^(?:(?:31(\\\\/|-|\\\\.)(?:0?[13578]|1[02]))\\\\1|(?:(?:29|30)(\\\\/|-|\\\\.)(?:0?[13-9]|1[0-2])\\\\2))(?:(?:1[6-9]|[2-9]\\\\d)?\\\\d{2})$|^(?:29(\\\\/|-|\\\\.)0?2\\\\3(?:(?:(?:1[6-9]|[2-9]\\\\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\\\\d|2[0-8])(\\\\/|-|\\\\.)(?:(?:0?[1-9])|(?:1[0-2]))\\\\4(?:(?:1[6-9]|[2-9]\\\\d)?\\\\d{2})$"")) {\n    handleDate(dateString);\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (dateString.matches(""^\\\\d{1,2}([-/.])\\\\d{1,2}\\\\1\\\\d{1,4}$"")) {\n    String dateParts[] = dateString.split(""[-/.]"");\n    int day = Integer.parseInt(dateParts[0]);\n    int month = Integer.parseInt(dateParts[1]);\n    int year = Integer.parseInt(dateParts[2]);\n    // Put logic to validate and process the date based on its integer parts here\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Regular expressions are only analyzed if all parts of the regular expression are either string literals, effectively final local variables or\n<code>static final</code> fields, all of which can be combined using the \'<code>+</code>\' operator.</p>\n<p>When a regular expression is split among multiple variables or commented lines, each part is only analyzed if it is syntactically valid by\nitself.</p>'}]",[],['squid:S5843'],2min,2min,number of complexity points over the configurable limit,
java:S5958,java,"AssertJ ""assertThatThrownBy"" should not be used alone",2023-06-14T03:41:52+0000,"<p>Unlike similar AssertJ methods testing exceptions (<code>assertThatCode()</code>, <code>assertThatExceptionOfType()</code>, …​), the
<code>assertThatThrownBy()</code> method can be used alone, failing if the code did not raise any exception.</p>
<p>Still, only testing that an exception was raised is not enough to guarantee that it was the expected one, and you should test the exception type or
content further. In addition, it will make explicit what you are expecting, without relying on side-effects.</p>
<p>This rule raises an issue when <code>assertThatThrownBy</code> is used, without testing the exception further.</p>
<h2>Noncompliant Code Example</h2>
<pre>
assertThatThrownBy(() -&gt; shouldThrow()); // Noncompliant, is it really the exception you expected?
</pre>
<h2>Compliant Solution</h2>
<pre>
assertThatThrownBy(() -&gt; shouldThrow()).isInstanceOf(IOException.class);
//or
assertThatThrownBy(() -&gt; shouldThrow()).hasMessage(""My exception"");
</pre>","<p>Unlike similar AssertJ methods testing exceptions (<code>assertThatCode()</code>, <code>assertThatExceptionOfType()</code>, …​), the
<code>assertThatThrownBy()</code> method can be used alone, failing if the code did not raise any exception.</p>
<p>Still, only testing that an exception was raised is not enough to guarantee that it was the expected one, and you should test the exception type or
content further. In addition, it will make explicit what you are expecting, without relying on side-effects.</p>
<p>This rule raises an issue when <code>assertThatThrownBy</code> is used, without testing the exception further.</p>
<h2>Noncompliant Code Example</h2>
<pre>
assertThatThrownBy(() -&gt; shouldThrow()); // Noncompliant, is it really the exception you expected?
</pre>
<h2>Compliant Solution</h2>
<pre>
assertThatThrownBy(() -&gt; shouldThrow()).isInstanceOf(IOException.class);
//or
assertThatThrownBy(() -&gt; shouldThrow()).hasMessage(""My exception"");
</pre>",MAJOR,READY,False,[],"['assertj', 'tests']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,TEST,False,"[{'key': 'default', 'content': '<p>Unlike similar AssertJ methods testing exceptions (<code>assertThatCode()</code>, <code>assertThatExceptionOfType()</code>, …\u200b), the\n<code>assertThatThrownBy()</code> method can be used alone, failing if the code did not raise any exception.</p>\n<p>Still, only testing that an exception was raised is not enough to guarantee that it was the expected one, and you should test the exception type or\ncontent further. In addition, it will make explicit what you are expecting, without relying on side-effects.</p>\n<p>This rule raises an issue when <code>assertThatThrownBy</code> is used, without testing the exception further.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nassertThatThrownBy(() -&gt; shouldThrow()); // Noncompliant, is it really the exception you expected?\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nassertThatThrownBy(() -&gt; shouldThrow()).isInstanceOf(IOException.class);\n//or\nassertThatThrownBy(() -&gt; shouldThrow()).hasMessage(""My exception"");\n</pre>'}]",[],['squid:S5958'],,,,
java:S1121,java,Assignments should not be made from within sub-expressions,2023-06-14T03:41:52+0000,"<p>Assignments within sub-expressions are hard to spot and therefore make the code less readable. Ideally, sub-expressions should not have
side-effects.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if ((str = cont.substring(pos1, pos2)).isEmpty()) {  // Noncompliant
  //...
</pre>
<h2>Compliant Solution</h2>
<pre>
str = cont.substring(pos1, pos2);
if (str.isEmpty()) {
  //...
</pre>
<h2>Exceptions</h2>
<p>Assignments in <code>while</code> statement conditions, and assignments enclosed in relational expressions are ignored.</p>
<pre>
BufferedReader br = new BufferedReader(/* ... */);
String line;
while ((line = br.readLine()) != null) {...}
if ((i = j) &gt;= 1) {...}
</pre>
<p>Chained assignments, including compound assignments, are ignored.</p>
<pre>
int i = j = 0;
int k = (j += 1);
result = (bresult = new byte[len]);
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/481"">MITRE, CWE-481</a> - Assigning instead of Comparing </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/ZNYxBQ"">CERT, EXP45-C.</a> - Do not perform assignments in selection statements </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/ITZGBQ"">CERT, EXP51-J.</a> - Do not perform assignments in conditional expressions </li>
</ul>","<p>Assignments within sub-expressions are hard to spot and therefore make the code less readable. Ideally, sub-expressions should not have
side-effects.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if ((str = cont.substring(pos1, pos2)).isEmpty()) {  // Noncompliant
  //...
</pre>
<h2>Compliant Solution</h2>
<pre>
str = cont.substring(pos1, pos2);
if (str.isEmpty()) {
  //...
</pre>
<h2>Exceptions</h2>
<p>Assignments in <code>while</code> statement conditions, and assignments enclosed in relational expressions are ignored.</p>
<pre>
BufferedReader br = new BufferedReader(/* ... */);
String line;
while ((line = br.readLine()) != null) {...}
if ((i = j) &gt;= 1) {...}
</pre>
<p>Chained assignments, including compound assignments, are ignored.</p>
<pre>
int i = j = 0;
int k = (j += 1);
result = (bresult = new byte[len]);
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/481"">MITRE, CWE-481</a> - Assigning instead of Comparing </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/ZNYxBQ"">CERT, EXP45-C.</a> - Do not perform assignments in selection statements </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/ITZGBQ"">CERT, EXP51-J.</a> - Do not perform assignments in conditional expressions </li>
</ul>",MAJOR,READY,False,[],"['cert', 'cwe', 'suspicious']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>Assignments within sub-expressions are hard to spot and therefore make the code less readable. Ideally, sub-expressions should not have\nside-effects.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ((str = cont.substring(pos1, pos2)).isEmpty()) {  // Noncompliant\n  //...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nstr = cont.substring(pos1, pos2);\nif (str.isEmpty()) {\n  //...\n</pre>\n<h2>Exceptions</h2>\n<p>Assignments in <code>while</code> statement conditions, and assignments enclosed in relational expressions are ignored.</p>\n<pre>\nBufferedReader br = new BufferedReader(/* ... */);\nString line;\nwhile ((line = br.readLine()) != null) {...}\nif ((i = j) &gt;= 1) {...}\n</pre>\n<p>Chained assignments, including compound assignments, are ignored.</p>\n<pre>\nint i = j = 0;\nint k = (j += 1);\nresult = (bresult = new byte[len]);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/481"">MITRE, CWE-481</a> - Assigning instead of Comparing </li>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/ZNYxBQ"">CERT, EXP45-C.</a> - Do not perform assignments in selection statements </li>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/ITZGBQ"">CERT, EXP51-J.</a> - Do not perform assignments in conditional expressions </li>\n</ul>'}]",[],['squid:AssignmentInSubExpressionCheck'],,,,
java:S1123,java,Deprecated elements should have both the annotation and the Javadoc tag,2023-06-14T03:41:52+0000,"<p>Deprecation should be marked with both the <code>@Deprecated</code> annotation and @deprecated Javadoc tag. The annotation enables tools such as
IDEs to warn about referencing deprecated elements, and the tag can be used to explain when it was deprecated, why, and how references should be
refactored.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class MyClass {

  @Deprecated
  public void foo1() {    // Noncompliant: Add the missing @deprecated Javadoc tag.
  }

  /**
    * @deprecated
    */
  public void foo2() {    // Noncompliant: Add the missing @Deprecated annotation.
  }

}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass {

  /**
    * @deprecated (when, why, refactoring advice...)
    */
  @Deprecated
  public void foo1() {
  }

}
</pre>
<h2>Exceptions</h2>
<p>The members and methods of a deprecated class or interface are ignored by this rule. The classes and interfaces themselves are still subject to
it.</p>
<pre>
/**
 * @deprecated (when, why, etc...)
 */
@Deprecated
class Qix  {

  public void foo() {} // Compliant; class is deprecated

}

/**
 * @deprecated (when, why, etc...)
 */
@Deprecated
interface Plop {

  void bar();

}
</pre>","<p>Deprecation should be marked with both the <code>@Deprecated</code> annotation and @deprecated Javadoc tag. The annotation enables tools such as
IDEs to warn about referencing deprecated elements, and the tag can be used to explain when it was deprecated, why, and how references should be
refactored.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class MyClass {

  @Deprecated
  public void foo1() {    // Noncompliant: Add the missing @deprecated Javadoc tag.
  }

  /**
    * @deprecated
    */
  public void foo2() {    // Noncompliant: Add the missing @Deprecated annotation.
  }

}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass {

  /**
    * @deprecated (when, why, refactoring advice...)
    */
  @Deprecated
  public void foo1() {
  }

}
</pre>
<h2>Exceptions</h2>
<p>The members and methods of a deprecated class or interface are ignored by this rule. The classes and interfaces themselves are still subject to
it.</p>
<pre>
/**
 * @deprecated (when, why, etc...)
 */
@Deprecated
class Qix  {

  public void foo() {} // Compliant; class is deprecated

}

/**
 * @deprecated (when, why, etc...)
 */
@Deprecated
interface Plop {

  void bar();

}
</pre>",MAJOR,READY,False,[],"['bad-practice', 'obsolete']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>Deprecation should be marked with both the <code>@Deprecated</code> annotation and @deprecated Javadoc tag. The annotation enables tools such as\nIDEs to warn about referencing deprecated elements, and the tag can be used to explain when it was deprecated, why, and how references should be\nrefactored.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass {\n\n  @Deprecated\n  public void foo1() {    // Noncompliant: Add the missing @deprecated Javadoc tag.\n  }\n\n  /**\n    * @deprecated\n    */\n  public void foo2() {    // Noncompliant: Add the missing @Deprecated annotation.\n  }\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n\n  /**\n    * @deprecated (when, why, refactoring advice...)\n    */\n  @Deprecated\n  public void foo1() {\n  }\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>The members and methods of a deprecated class or interface are ignored by this rule. The classes and interfaces themselves are still subject to\nit.</p>\n<pre>\n/**\n * @deprecated (when, why, etc...)\n */\n@Deprecated\nclass Qix  {\n\n  public void foo() {} // Compliant; class is deprecated\n\n}\n\n/**\n * @deprecated (when, why, etc...)\n */\n@Deprecated\ninterface Plop {\n\n  void bar();\n\n}\n</pre>'}]",[],['squid:MissingDeprecatedCheck'],,,,
java:S1124,java,Modifiers should be declared in the correct order,2023-06-14T03:41:52+0000,"<p>The Java Language Specification recommends listing modifiers in the following order:</p>
<ol>
  <li> Annotations </li>
  <li> public </li>
  <li> protected </li>
  <li> private </li>
  <li> abstract </li>
  <li> static </li>
  <li> final </li>
  <li> transient </li>
  <li> volatile </li>
  <li> synchronized </li>
  <li> native </li>
  <li> default </li>
  <li> strictfp </li>
</ol>
<p>Not following this convention has no technical impact, but will reduce the code’s readability because most developers are used to the standard
order.</p>
<h2>Noncompliant Code Example</h2>
<pre>
static public void main(String[] args) {   // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public static void main(String[] args) {   // Compliant
}
</pre>","<p>The Java Language Specification recommends listing modifiers in the following order:</p>
<ol>
  <li> Annotations </li>
  <li> public </li>
  <li> protected </li>
  <li> private </li>
  <li> abstract </li>
  <li> static </li>
  <li> final </li>
  <li> transient </li>
  <li> volatile </li>
  <li> synchronized </li>
  <li> native </li>
  <li> default </li>
  <li> strictfp </li>
</ol>
<p>Not following this convention has no technical impact, but will reduce the code’s readability because most developers are used to the standard
order.</p>
<h2>Noncompliant Code Example</h2>
<pre>
static public void main(String[] args) {   // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public static void main(String[] args) {   // Compliant
}
</pre>",MINOR,READY,False,[],['convention'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,2min,CONSTANT_ISSUE,2min,False,ALL,False,"[{'key': 'default', 'content': '<p>The Java Language Specification recommends listing modifiers in the following order:</p>\n<ol>\n  <li> Annotations </li>\n  <li> public </li>\n  <li> protected </li>\n  <li> private </li>\n  <li> abstract </li>\n  <li> static </li>\n  <li> final </li>\n  <li> transient </li>\n  <li> volatile </li>\n  <li> synchronized </li>\n  <li> native </li>\n  <li> default </li>\n  <li> strictfp </li>\n</ol>\n<p>Not following this convention has no technical impact, but will reduce the code’s readability because most developers are used to the standard\norder.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nstatic public void main(String[] args) {   // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static void main(String[] args) {   // Compliant\n}\n</pre>'}]",[],['squid:ModifiersOrderCheck'],,,,
java:S1125,java,Boolean literals should not be redundant,2023-06-14T03:41:52+0000,"<p>Redundant Boolean literals should be removed from expressions to improve readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (booleanMethod() == true) { /* ... */ }
if (booleanMethod() == false) { /* ... */ }
if (booleanMethod() || false) { /* ... */ }
doSomething(!false);
doSomething(booleanMethod() == true);

booleanVariable = booleanMethod() ? true : false;
booleanVariable = booleanMethod() ? true : exp;
booleanVariable = booleanMethod() ? false : exp;
booleanVariable = booleanMethod() ? exp : true;
booleanVariable = booleanMethod() ? exp : false;
</pre>
<h2>Compliant Solution</h2>
<pre>
if (booleanMethod()) { /* ... */ }
if (!booleanMethod()) { /* ... */ }
if (booleanMethod()) { /* ... */ }
doSomething(true);
doSomething(booleanMethod());

booleanVariable = booleanMethod();
booleanVariable = booleanMethod() || exp;
booleanVariable = !booleanMethod() &amp;&amp; exp;
booleanVariable = !booleanMethod() || exp;
booleanVariable = booleanMethod() &amp;&amp; exp;
</pre>","<p>Redundant Boolean literals should be removed from expressions to improve readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (booleanMethod() == true) { /* ... */ }
if (booleanMethod() == false) { /* ... */ }
if (booleanMethod() || false) { /* ... */ }
doSomething(!false);
doSomething(booleanMethod() == true);

booleanVariable = booleanMethod() ? true : false;
booleanVariable = booleanMethod() ? true : exp;
booleanVariable = booleanMethod() ? false : exp;
booleanVariable = booleanMethod() ? exp : true;
booleanVariable = booleanMethod() ? exp : false;
</pre>
<h2>Compliant Solution</h2>
<pre>
if (booleanMethod()) { /* ... */ }
if (!booleanMethod()) { /* ... */ }
if (booleanMethod()) { /* ... */ }
doSomething(true);
doSomething(booleanMethod());

booleanVariable = booleanMethod();
booleanVariable = booleanMethod() || exp;
booleanVariable = !booleanMethod() &amp;&amp; exp;
booleanVariable = !booleanMethod() || exp;
booleanVariable = booleanMethod() &amp;&amp; exp;
</pre>",MINOR,READY,False,[],['clumsy'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>Redundant Boolean literals should be removed from expressions to improve readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (booleanMethod() == true) { /* ... */ }\nif (booleanMethod() == false) { /* ... */ }\nif (booleanMethod() || false) { /* ... */ }\ndoSomething(!false);\ndoSomething(booleanMethod() == true);\n\nbooleanVariable = booleanMethod() ? true : false;\nbooleanVariable = booleanMethod() ? true : exp;\nbooleanVariable = booleanMethod() ? false : exp;\nbooleanVariable = booleanMethod() ? exp : true;\nbooleanVariable = booleanMethod() ? exp : false;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (booleanMethod()) { /* ... */ }\nif (!booleanMethod()) { /* ... */ }\nif (booleanMethod()) { /* ... */ }\ndoSomething(true);\ndoSomething(booleanMethod());\n\nbooleanVariable = booleanMethod();\nbooleanVariable = booleanMethod() || exp;\nbooleanVariable = !booleanMethod() &amp;&amp; exp;\nbooleanVariable = !booleanMethod() || exp;\nbooleanVariable = booleanMethod() &amp;&amp; exp;\n</pre>'}]",[],['squid:S1125'],,,,
java:S1488,java,Local variables should not be declared and then immediately returned or thrown,2023-06-14T03:41:52+0000,"<p>Declaring a variable only to immediately return or throw it is a bad practice.</p>
<p>Some developers argue that the practice improves code readability, because it enables them to explicitly name what is being returned. However, this
variable is an internal implementation detail that is not exposed to the callers of the method. The method name should be sufficient for callers to
know exactly what will be returned.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public long computeDurationInMilliseconds() {
  long duration = (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;
  return duration;
}

public void doSomething() {
  RuntimeException myException = new RuntimeException();
  throw myException;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public long computeDurationInMilliseconds() {
  return (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;
}

public void doSomething() {
  throw new RuntimeException();
}
</pre>","<p>Declaring a variable only to immediately return or throw it is a bad practice.</p>
<p>Some developers argue that the practice improves code readability, because it enables them to explicitly name what is being returned. However, this
variable is an internal implementation detail that is not exposed to the callers of the method. The method name should be sufficient for callers to
know exactly what will be returned.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public long computeDurationInMilliseconds() {
  long duration = (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;
  return duration;
}

public void doSomething() {
  RuntimeException myException = new RuntimeException();
  throw myException;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public long computeDurationInMilliseconds() {
  return (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;
}

public void doSomething() {
  throw new RuntimeException();
}
</pre>",MINOR,READY,False,[],['clumsy'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,2min,CONSTANT_ISSUE,2min,False,ALL,False,"[{'key': 'default', 'content': '<p>Declaring a variable only to immediately return or throw it is a bad practice.</p>\n<p>Some developers argue that the practice improves code readability, because it enables them to explicitly name what is being returned. However, this\nvariable is an internal implementation detail that is not exposed to the callers of the method. The method name should be sufficient for callers to\nknow exactly what will be returned.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic long computeDurationInMilliseconds() {\n  long duration = (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;\n  return duration;\n}\n\npublic void doSomething() {\n  RuntimeException myException = new RuntimeException();\n  throw myException;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic long computeDurationInMilliseconds() {\n  return (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;\n}\n\npublic void doSomething() {\n  throw new RuntimeException();\n}\n</pre>'}]",[],['squid:S1488'],,,,
java:S2211,java,Types should be used in lambdas,2023-06-14T03:41:52+0000,"<p>Shared coding conventions allow teams to collaborate effectively. While types for lambda arguments are optional, specifying them anyway makes the
code clearer and easier to read.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Arrays.sort(rosterAsArray,
    (a, b) -&gt; {  // Noncompliant
        return a.getBirthday().compareTo(b.getBirthday());
    }
);
</pre>
<h2>Compliant Solution</h2>
<pre>
Arrays.sort(rosterAsArray,
    (Person a, Person b) -&gt; {
        return a.getBirthday().compareTo(b.getBirthday());
    }
);
</pre>
<h2>Exceptions</h2>
<p>When the lambda has one or two parameters and does not have a block this rule will not fire up an issue as things are considered more readable in
those cases.</p>
<pre>
stream.map((a, b) -&gt; a.length); // compliant
</pre>","<p>Shared coding conventions allow teams to collaborate effectively. While types for lambda arguments are optional, specifying them anyway makes the
code clearer and easier to read.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Arrays.sort(rosterAsArray,
    (a, b) -&gt; {  // Noncompliant
        return a.getBirthday().compareTo(b.getBirthday());
    }
);
</pre>
<h2>Compliant Solution</h2>
<pre>
Arrays.sort(rosterAsArray,
    (Person a, Person b) -&gt; {
        return a.getBirthday().compareTo(b.getBirthday());
    }
);
</pre>
<h2>Exceptions</h2>
<p>When the lambda has one or two parameters and does not have a block this rule will not fire up an issue as things are considered more readable in
those cases.</p>
<pre>
stream.map((a, b) -&gt; a.length); // compliant
</pre>",MAJOR,READY,False,[],"['convention', 'java8']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>Shared coding conventions allow teams to collaborate effectively. While types for lambda arguments are optional, specifying them anyway makes the\ncode clearer and easier to read.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nArrays.sort(rosterAsArray,\n    (a, b) -&gt; {  // Noncompliant\n        return a.getBirthday().compareTo(b.getBirthday());\n    }\n);\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nArrays.sort(rosterAsArray,\n    (Person a, Person b) -&gt; {\n        return a.getBirthday().compareTo(b.getBirthday());\n    }\n);\n</pre>\n<h2>Exceptions</h2>\n<p>When the lambda has one or two parameters and does not have a block this rule will not fire up an issue as things are considered more readable in\nthose cases.</p>\n<pre>\nstream.map((a, b) -&gt; a.length); // compliant\n</pre>'}]",[],['squid:S2211'],,,,
java:S2333,java,Redundant modifiers should not be used,2023-06-14T03:41:52+0000,"<p>The methods declared in an <code>interface</code> are <code>public</code> and <code>abstract</code> by default. Any variables are automatically
<code>public static final</code>. Finally, <code>class</code> and <code>interface</code> are automatically <code>public static</code>. There is no
need to explicitly declare them so.</p>
<p>Since annotations are implicitly interfaces, the same holds true for them as well.</p>
<p>Similarly, the <code>final</code> modifier is redundant on any method of a <code>final</code> class, <code>private</code> is redundant on the
constructor of an <code>Enum</code>, and <code>static</code> is redundant for <code>interface</code> nested into a <code>class</code> or
<code>enum</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public interface Vehicle {

  public void go(int speed, Direction direction);  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
public interface Vehicle {

  void go(int speed, Direction direction);
</pre>","<p>The methods declared in an <code>interface</code> are <code>public</code> and <code>abstract</code> by default. Any variables are automatically
<code>public static final</code>. Finally, <code>class</code> and <code>interface</code> are automatically <code>public static</code>. There is no
need to explicitly declare them so.</p>
<p>Since annotations are implicitly interfaces, the same holds true for them as well.</p>
<p>Similarly, the <code>final</code> modifier is redundant on any method of a <code>final</code> class, <code>private</code> is redundant on the
constructor of an <code>Enum</code>, and <code>static</code> is redundant for <code>interface</code> nested into a <code>class</code> or
<code>enum</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public interface Vehicle {

  public void go(int speed, Direction direction);  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
public interface Vehicle {

  void go(int speed, Direction direction);
</pre>",MINOR,READY,False,[],"['clumsy', 'finding']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,2min,CONSTANT_ISSUE,2min,False,ALL,False,"[{'key': 'default', 'content': '<p>The methods declared in an <code>interface</code> are <code>public</code> and <code>abstract</code> by default. Any variables are automatically\n<code>public static final</code>. Finally, <code>class</code> and <code>interface</code> are automatically <code>public static</code>. There is no\nneed to explicitly declare them so.</p>\n<p>Since annotations are implicitly interfaces, the same holds true for them as well.</p>\n<p>Similarly, the <code>final</code> modifier is redundant on any method of a <code>final</code> class, <code>private</code> is redundant on the\nconstructor of an <code>Enum</code>, and <code>static</code> is redundant for <code>interface</code> nested into a <code>class</code> or\n<code>enum</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface Vehicle {\n\n  public void go(int speed, Direction direction);  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic interface Vehicle {\n\n  void go(int speed, Direction direction);\n</pre>'}]",[],['squid:S2333'],,,,
java:S2694,java,"Inner classes which do not reference their owning classes should be ""static""",2023-06-14T03:41:52+0000,"<p>A non-static inner class has a reference to its outer class, and access to the outer class' fields and methods. That class reference makes the
inner class larger and could cause the outer class instance to live in memory longer than necessary.</p>
<p>If the reference to the outer class isn’t used, it is more efficient to make the inner class <code>static</code> (also called nested). If the
reference is used only in the class constructor, then explicitly pass a class reference to the constructor. If the inner class is anonymous, it will
also be necessary to name it.</p>
<p>However, while a nested/<code>static</code> class would be more efficient, it’s worth noting that there are semantic differences between an inner
class and a nested one:</p>
<ul>
  <li> an inner class can only be instantiated within the context of an instance of the outer class. </li>
  <li> a nested (<code>static</code>) class can be instantiated independently of the outer class. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
public class Fruit {
  // ...

  public class Seed {  // Noncompliant; there's no use of the outer class reference so make it static
    int germinationDays = 0;
    public Seed(int germinationDays) {
      this.germinationDays = germinationDays;
    }
    public int getGerminationDays() {
      return germinationDays;
    }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Fruit {
  // ...

  public static class Seed {
    int germinationDays = 0;
    public Seed(int germinationDays) {
      this.germinationDays = germinationDays;
    }
    public int getGerminationDays() {
      return germinationDays;
    }
  }
}
</pre>","<p>A non-static inner class has a reference to its outer class, and access to the outer class' fields and methods. That class reference makes the
inner class larger and could cause the outer class instance to live in memory longer than necessary.</p>
<p>If the reference to the outer class isn’t used, it is more efficient to make the inner class <code>static</code> (also called nested). If the
reference is used only in the class constructor, then explicitly pass a class reference to the constructor. If the inner class is anonymous, it will
also be necessary to name it.</p>
<p>However, while a nested/<code>static</code> class would be more efficient, it’s worth noting that there are semantic differences between an inner
class and a nested one:</p>
<ul>
  <li> an inner class can only be instantiated within the context of an instance of the outer class. </li>
  <li> a nested (<code>static</code>) class can be instantiated independently of the outer class. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
public class Fruit {
  // ...

  public class Seed {  // Noncompliant; there's no use of the outer class reference so make it static
    int germinationDays = 0;
    public Seed(int germinationDays) {
      this.germinationDays = germinationDays;
    }
    public int getGerminationDays() {
      return germinationDays;
    }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Fruit {
  // ...

  public static class Seed {
    int germinationDays = 0;
    public Seed(int germinationDays) {
      this.germinationDays = germinationDays;
    }
    public int getGerminationDays() {
      return germinationDays;
    }
  }
}
</pre>",MAJOR,READY,False,[],['performance'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,15min,CONSTANT_ISSUE,15min,False,MAIN,False,"[{'key': 'default', 'content': ""<p>A non-static inner class has a reference to its outer class, and access to the outer class' fields and methods. That class reference makes the\ninner class larger and could cause the outer class instance to live in memory longer than necessary.</p>\n<p>If the reference to the outer class isn’t used, it is more efficient to make the inner class <code>static</code> (also called nested). If the\nreference is used only in the class constructor, then explicitly pass a class reference to the constructor. If the inner class is anonymous, it will\nalso be necessary to name it.</p>\n<p>However, while a nested/<code>static</code> class would be more efficient, it’s worth noting that there are semantic differences between an inner\nclass and a nested one:</p>\n<ul>\n  <li> an inner class can only be instantiated within the context of an instance of the outer class. </li>\n  <li> a nested (<code>static</code>) class can be instantiated independently of the outer class. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit {\n  // ...\n\n  public class Seed {  // Noncompliant; there's no use of the outer class reference so make it static\n    int germinationDays = 0;\n    public Seed(int germinationDays) {\n      this.germinationDays = germinationDays;\n    }\n    public int getGerminationDays() {\n      return germinationDays;\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Fruit {\n  // ...\n\n  public static class Seed {\n    int germinationDays = 0;\n    public Seed(int germinationDays) {\n      this.germinationDays = germinationDays;\n    }\n    public int getGerminationDays() {\n      return germinationDays;\n    }\n  }\n}\n</pre>""}]",[],['squid:S2694'],,,,
java:S2696,java,"Instance methods should not write to ""static"" fields",2023-06-14T03:41:52+0000,"<p>Correctly updating a <code>static</code> field from a non-static method is tricky to get right and could easily lead to bugs if there are multiple
class instances and/or multiple threads in play. Ideally, <code>static</code> fields are only updated from <code>synchronized static</code>
methods.</p>
<p>This rule raises an issue each time a <code>static</code> field is updated from a non-static method.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass {

  private static int count = 0;

  public void doSomething() {
    //...
    count++;  // Noncompliant
  }
}
</pre>","<p>Correctly updating a <code>static</code> field from a non-static method is tricky to get right and could easily lead to bugs if there are multiple
class instances and/or multiple threads in play. Ideally, <code>static</code> fields are only updated from <code>synchronized static</code>
methods.</p>
<p>This rule raises an issue each time a <code>static</code> field is updated from a non-static method.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass {

  private static int count = 0;

  public void doSomething() {
    //...
    count++;  // Noncompliant
  }
}
</pre>",CRITICAL,READY,False,[],['multi-threading'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,20min,CONSTANT_ISSUE,20min,False,MAIN,False,"[{'key': 'default', 'content': '<p>Correctly updating a <code>static</code> field from a non-static method is tricky to get right and could easily lead to bugs if there are multiple\nclass instances and/or multiple threads in play. Ideally, <code>static</code> fields are only updated from <code>synchronized static</code>\nmethods.</p>\n<p>This rule raises an issue each time a <code>static</code> field is updated from a non-static method.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  private static int count = 0;\n\n  public void doSomething() {\n    //...\n    count++;  // Noncompliant\n  }\n}\n</pre>'}]",[],['squid:S2696'],,,,
java:S4635,java,String offset-based methods should be preferred for finding substrings from offsets,2023-06-14T03:41:52+0000,"<p>Looking for a given substring starting from a specified offset can be achieved by such code: <code>str.substring(beginIndex).indexOf(char1)</code>.
This works well, but it creates a new <code>String</code> for each call to the <code>substring</code> method. When this is done in a loop, a lot of
<code>Strings</code> are created for nothing, which can lead to performance problems if <code>str</code> is large.</p>
<p>To avoid performance problems, <code>String.substring(beginIndex)</code> should not be chained with the following methods:</p>
<ul>
  <li> <code>indexOf(int ch)</code> </li>
  <li> <code>indexOf(String str)</code> </li>
  <li> <code>lastIndexOf(int ch)</code> </li>
  <li> <code>lastIndexOf(String str)</code> </li>
  <li> <code>startsWith(String prefix)</code> </li>
</ul>
<p>For each of these methods, another method with an additional parameter is available to specify an offset.</p>
<p>Using these methods will avoid the creation of additional <code>String</code> instances. For indexOf methods, adjust the returned value by
subtracting the substring index parameter to obtain the same result.</p>
<h2>Noncompliant Code Example</h2>
<pre>
str.substring(beginIndex).indexOf(char1); // Noncompliant; a new String is going to be created by ""substring""
</pre>
<h2>Compliant Solution</h2>
<pre>
str.indexOf(char1, beginIndex) - beginIndex; // index for char1 not found is (-1-beginIndex)
</pre>","<p>Looking for a given substring starting from a specified offset can be achieved by such code: <code>str.substring(beginIndex).indexOf(char1)</code>.
This works well, but it creates a new <code>String</code> for each call to the <code>substring</code> method. When this is done in a loop, a lot of
<code>Strings</code> are created for nothing, which can lead to performance problems if <code>str</code> is large.</p>
<p>To avoid performance problems, <code>String.substring(beginIndex)</code> should not be chained with the following methods:</p>
<ul>
  <li> <code>indexOf(int ch)</code> </li>
  <li> <code>indexOf(String str)</code> </li>
  <li> <code>lastIndexOf(int ch)</code> </li>
  <li> <code>lastIndexOf(String str)</code> </li>
  <li> <code>startsWith(String prefix)</code> </li>
</ul>
<p>For each of these methods, another method with an additional parameter is available to specify an offset.</p>
<p>Using these methods will avoid the creation of additional <code>String</code> instances. For indexOf methods, adjust the returned value by
subtracting the substring index parameter to obtain the same result.</p>
<h2>Noncompliant Code Example</h2>
<pre>
str.substring(beginIndex).indexOf(char1); // Noncompliant; a new String is going to be created by ""substring""
</pre>
<h2>Compliant Solution</h2>
<pre>
str.indexOf(char1, beginIndex) - beginIndex; // index for char1 not found is (-1-beginIndex)
</pre>",CRITICAL,READY,False,[],['performance'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>Looking for a given substring starting from a specified offset can be achieved by such code: <code>str.substring(beginIndex).indexOf(char1)</code>.\nThis works well, but it creates a new <code>String</code> for each call to the <code>substring</code> method. When this is done in a loop, a lot of\n<code>Strings</code> are created for nothing, which can lead to performance problems if <code>str</code> is large.</p>\n<p>To avoid performance problems, <code>String.substring(beginIndex)</code> should not be chained with the following methods:</p>\n<ul>\n  <li> <code>indexOf(int ch)</code> </li>\n  <li> <code>indexOf(String str)</code> </li>\n  <li> <code>lastIndexOf(int ch)</code> </li>\n  <li> <code>lastIndexOf(String str)</code> </li>\n  <li> <code>startsWith(String prefix)</code> </li>\n</ul>\n<p>For each of these methods, another method with an additional parameter is available to specify an offset.</p>\n<p>Using these methods will avoid the creation of additional <code>String</code> instances. For indexOf methods, adjust the returned value by\nsubtracting the substring index parameter to obtain the same result.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nstr.substring(beginIndex).indexOf(char1); // Noncompliant; a new String is going to be created by ""substring""\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nstr.indexOf(char1, beginIndex) - beginIndex; // index for char1 not found is (-1-beginIndex)\n</pre>'}]",[],['squid:S4635'],,,,
java:S1120,java,Source code should be indented consistently,2023-06-14T03:41:52+0000,"<p>Proper indentation is a simple and effective way to improve the code’s readability. Consistent indentation among the developers within a team also
reduces the differences that are committed to source control systems, making code reviews easier.</p>
<p>This rule raises an issue when indentation does not match the configured value. Only the first line of a badly indented section is reported.</p>
<h2>Noncompliant Code Example</h2>
<p>With an indent size of 2:</p>
<pre>
class Foo {
  public int a;
   public int b;   // Noncompliant, expected to start at column 4

...

  public void doSomething() {
    if(something) {
          doSomethingElse();  // Noncompliant, expected to start at column 6
  }   // Noncompliant, expected to start at column 4
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Foo {
  public int a;
  public int b;

...

  public void doSomething() {
    if(something) {
        doSomethingElse();
    }
  }
}
</pre>","<p>Proper indentation is a simple and effective way to improve the code’s readability. Consistent indentation among the developers within a team also
reduces the differences that are committed to source control systems, making code reviews easier.</p>
<p>This rule raises an issue when indentation does not match the configured value. Only the first line of a badly indented section is reported.</p>
<h2>Noncompliant Code Example</h2>
<p>With an indent size of 2:</p>
<pre>
class Foo {
  public int a;
   public int b;   // Noncompliant, expected to start at column 4

...

  public void doSomething() {
    if(something) {
          doSomethingElse();  // Noncompliant, expected to start at column 6
  }   // Noncompliant, expected to start at column 4
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Foo {
  public int a;
  public int b;

...

  public void doSomething() {
    if(something) {
        doSomethingElse();
    }
  }
}
</pre>",MINOR,READY,False,[],['convention'],java,Java,"[{'key': 'indentationLevel', 'htmlDesc': 'Number of white-spaces of an indent.', 'defaultValue': '2', 'type': 'INTEGER'}]",CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,1min,CONSTANT_ISSUE,1min,False,ALL,False,"[{'key': 'default', 'content': '<p>Proper indentation is a simple and effective way to improve the code’s readability. Consistent indentation among the developers within a team also\nreduces the differences that are committed to source control systems, making code reviews easier.</p>\n<p>This rule raises an issue when indentation does not match the configured value. Only the first line of a badly indented section is reported.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With an indent size of 2:</p>\n<pre>\nclass Foo {\n  public int a;\n   public int b;   // Noncompliant, expected to start at column 4\n\n...\n\n  public void doSomething() {\n    if(something) {\n          doSomethingElse();  // Noncompliant, expected to start at column 6\n  }   // Noncompliant, expected to start at column 4\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Foo {\n  public int a;\n  public int b;\n\n...\n\n  public void doSomething() {\n    if(something) {\n        doSomethingElse();\n    }\n  }\n}\n</pre>'}]",[],['squid:IndentationCheck'],,,,
java:S1128,java,Unnecessary imports should be removed,2023-06-14T03:41:52+0000,"<p>The imports part of a file should be handled by the Integrated Development Environment (IDE), not manually by the developer.</p>
<p>Unused and useless imports should not occur if that is the case.</p>
<p>Leaving them in reduces the code’s readability, since their presence can be confusing.</p>
<h2>Noncompliant Code Example</h2>
<pre>
package my.company;

import java.lang.String;        // Noncompliant; java.lang classes are always implicitly imported
import my.company.SomeClass;    // Noncompliant; same-package files are always implicitly imported
import java.io.File;            // Noncompliant; File is not used

import my.company2.SomeType;
import my.company2.SomeType;    // Noncompliant; 'SomeType' is already imported

class ExampleClass {

  public String someString;
  public SomeType something;

}
</pre>
<h2>Exceptions</h2>
<p>Imports for types mentioned in Javadocs are ignored.</p>","<p>The imports part of a file should be handled by the Integrated Development Environment (IDE), not manually by the developer.</p>
<p>Unused and useless imports should not occur if that is the case.</p>
<p>Leaving them in reduces the code’s readability, since their presence can be confusing.</p>
<h2>Noncompliant Code Example</h2>
<pre>
package my.company;

import java.lang.String;        // Noncompliant; java.lang classes are always implicitly imported
import my.company.SomeClass;    // Noncompliant; same-package files are always implicitly imported
import java.io.File;            // Noncompliant; File is not used

import my.company2.SomeType;
import my.company2.SomeType;    // Noncompliant; 'SomeType' is already imported

class ExampleClass {

  public String someString;
  public SomeType something;

}
</pre>
<h2>Exceptions</h2>
<p>Imports for types mentioned in Javadocs are ignored.</p>",MINOR,READY,False,[],['unused'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,2min,CONSTANT_ISSUE,2min,False,ALL,False,"[{'key': 'default', 'content': ""<p>The imports part of a file should be handled by the Integrated Development Environment (IDE), not manually by the developer.</p>\n<p>Unused and useless imports should not occur if that is the case.</p>\n<p>Leaving them in reduces the code’s readability, since their presence can be confusing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npackage my.company;\n\nimport java.lang.String;        // Noncompliant; java.lang classes are always implicitly imported\nimport my.company.SomeClass;    // Noncompliant; same-package files are always implicitly imported\nimport java.io.File;            // Noncompliant; File is not used\n\nimport my.company2.SomeType;\nimport my.company2.SomeType;    // Noncompliant; 'SomeType' is already imported\n\nclass ExampleClass {\n\n  public String someString;\n  public SomeType something;\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Imports for types mentioned in Javadocs are ignored.</p>""}]",[],['squid:UselessImportCheck'],,,,
java:S1481,java,Unused local variables should be removed,2023-06-14T03:41:52+0000,"<p>If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will
not wonder what the variable is used for.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public int numberOfMinutes(int hours) {
  int seconds = 0;   // seconds is never used
  return hours * 60;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public int numberOfMinutes(int hours) {
  return hours * 60;
}
</pre>","<p>If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will
not wonder what the variable is used for.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public int numberOfMinutes(int hours) {
  int seconds = 0;   // seconds is never used
  return hours * 60;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public int numberOfMinutes(int hours) {
  return hours * 60;
}
</pre>",MINOR,READY,False,[],['unused'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will\nnot wonder what the variable is used for.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int numberOfMinutes(int hours) {\n  int seconds = 0;   // seconds is never used\n  return hours * 60;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int numberOfMinutes(int hours) {\n  return hours * 60;\n}\n</pre>'}]",[],['squid:S1481'],,,,
java:S2148,java,Underscores should be used to make large numbers readable,2023-06-14T03:41:52+0000,"<p>Beginning with Java 7, it is possible to add underscores ('_') to numeric literals to enhance readability. The addition of underscores in this
manner has no semantic meaning, but makes it easier for maintainers to understand the code.</p>
<p>The number of digits to the left of a decimal point needed to trigger this rule varies by base.</p>
<table>
  <colgroup>
    <col style=""width: 50%;"">
    <col style=""width: 50%;"">
  </colgroup>
  <thead>
    <tr>
      <th>Base</th>
      <th>Minimum digits</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><p>binary</p></td>
      <td><p>9</p></td>
    </tr>
    <tr>
      <td><p>octal</p></td>
      <td><p>9</p></td>
    </tr>
    <tr>
      <td><p>decimal</p></td>
      <td><p>6</p></td>
    </tr>
    <tr>
      <td><p>hexadecimal</p></td>
      <td><p>9</p></td>
    </tr>
  </tbody>
</table>
<p>It is only the presence of underscores, not their spacing that is scrutinized by this rule.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project’s <code>sonar.java.source</code> is lower than <code>7</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int i = 10000000;  // Noncompliant; is this 10 million or 100 million?
int  j = 0b01101001010011011110010101011110;  // Noncompliant
long l = 0x7fffffffffffffffL;  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
int i = 10_000_000;
int  j = 0b01101001_01001101_11100101_01011110;
long l = 0x7fff_ffff_ffff_ffffL;
</pre>","<p>Beginning with Java 7, it is possible to add underscores ('_') to numeric literals to enhance readability. The addition of underscores in this
manner has no semantic meaning, but makes it easier for maintainers to understand the code.</p>
<p>The number of digits to the left of a decimal point needed to trigger this rule varies by base.</p>
<table>
  <colgroup>
    <col style=""width: 50%;"">
    <col style=""width: 50%;"">
  </colgroup>
  <thead>
    <tr>
      <th>Base</th>
      <th>Minimum digits</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><p>binary</p></td>
      <td><p>9</p></td>
    </tr>
    <tr>
      <td><p>octal</p></td>
      <td><p>9</p></td>
    </tr>
    <tr>
      <td><p>decimal</p></td>
      <td><p>6</p></td>
    </tr>
    <tr>
      <td><p>hexadecimal</p></td>
      <td><p>9</p></td>
    </tr>
  </tbody>
</table>
<p>It is only the presence of underscores, not their spacing that is scrutinized by this rule.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project’s <code>sonar.java.source</code> is lower than <code>7</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int i = 10000000;  // Noncompliant; is this 10 million or 100 million?
int  j = 0b01101001010011011110010101011110;  // Noncompliant
long l = 0x7fffffffffffffffL;  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
int i = 10_000_000;
int  j = 0b01101001_01001101_11100101_01011110;
long l = 0x7fff_ffff_ffff_ffffL;
</pre>",MINOR,READY,False,[],['convention'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>Beginning with Java 7, it is possible to add underscores (\'_\') to numeric literals to enhance readability. The addition of underscores in this\nmanner has no semantic meaning, but makes it easier for maintainers to understand the code.</p>\n<p>The number of digits to the left of a decimal point needed to trigger this rule varies by base.</p>\n<table>\n  <colgroup>\n    <col style=""width: 50%;"">\n    <col style=""width: 50%;"">\n  </colgroup>\n  <thead>\n    <tr>\n      <th>Base</th>\n      <th>Minimum digits</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><p>binary</p></td>\n      <td><p>9</p></td>\n    </tr>\n    <tr>\n      <td><p>octal</p></td>\n      <td><p>9</p></td>\n    </tr>\n    <tr>\n      <td><p>decimal</p></td>\n      <td><p>6</p></td>\n    </tr>\n    <tr>\n      <td><p>hexadecimal</p></td>\n      <td><p>9</p></td>\n    </tr>\n  </tbody>\n</table>\n<p>It is only the presence of underscores, not their spacing that is scrutinized by this rule.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project’s <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint i = 10000000;  // Noncompliant; is this 10 million or 100 million?\nint  j = 0b01101001010011011110010101011110;  // Noncompliant\nlong l = 0x7fffffffffffffffL;  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint i = 10_000_000;\nint  j = 0b01101001_01001101_11100101_01011110;\nlong l = 0x7fff_ffff_ffff_ffffL;\n</pre>'}]",[],['squid:S2148'],,,,
java:S2692,java,"""indexOf"" checks should not be for positive numbers",2023-06-14T03:41:52+0000,"<p>Most checks against an <code>indexOf</code> value compare it with -1 because 0 is a valid index. Any checks which look for values &gt;0 ignore the
first element, which is likely a bug. If the intent is merely to check inclusion of a value in a <code>String</code> or a <code>List</code>, consider
using the <code>contains</code> method instead.</p>
<p>This rule raises an issue when an <code>indexOf</code> value retrieved either from a <code>String</code> or a <code>List</code> is tested against
<code>&gt;0</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String color = ""blue"";
String name = ""ishmael"";

List&lt;String&gt; strings = new ArrayList&lt;String&gt; ();
strings.add(color);
strings.add(name);

if (strings.indexOf(color) &gt; 0) {  // Noncompliant
  // ...
}
if (name.indexOf(""ish"") &gt; 0) { // Noncompliant
  // ...
}
if (name.indexOf(""ae"") &gt; 0) { // Noncompliant
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
String color = ""blue"";
String name = ""ishmael"";

List&lt;String&gt; strings = new ArrayList&lt;String&gt; ();
strings.add(color);
strings.add(name);

if (strings.indexOf(color) &gt; -1) {
  // ...
}
if (name.indexOf(""ish"") &gt;= 0) {
  // ...
}
if (name.contains(""ae"") {
  // ...
}
</pre>","<p>Most checks against an <code>indexOf</code> value compare it with -1 because 0 is a valid index. Any checks which look for values &gt;0 ignore the
first element, which is likely a bug. If the intent is merely to check inclusion of a value in a <code>String</code> or a <code>List</code>, consider
using the <code>contains</code> method instead.</p>
<p>This rule raises an issue when an <code>indexOf</code> value retrieved either from a <code>String</code> or a <code>List</code> is tested against
<code>&gt;0</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String color = ""blue"";
String name = ""ishmael"";

List&lt;String&gt; strings = new ArrayList&lt;String&gt; ();
strings.add(color);
strings.add(name);

if (strings.indexOf(color) &gt; 0) {  // Noncompliant
  // ...
}
if (name.indexOf(""ish"") &gt; 0) { // Noncompliant
  // ...
}
if (name.indexOf(""ae"") &gt; 0) { // Noncompliant
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
String color = ""blue"";
String name = ""ishmael"";

List&lt;String&gt; strings = new ArrayList&lt;String&gt; ();
strings.add(color);
strings.add(name);

if (strings.indexOf(color) &gt; -1) {
  // ...
}
if (name.indexOf(""ish"") &gt;= 0) {
  // ...
}
if (name.contains(""ae"") {
  // ...
}
</pre>",CRITICAL,READY,False,[],['suspicious'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,2min,CONSTANT_ISSUE,2min,False,ALL,False,"[{'key': 'default', 'content': '<p>Most checks against an <code>indexOf</code> value compare it with -1 because 0 is a valid index. Any checks which look for values &gt;0 ignore the\nfirst element, which is likely a bug. If the intent is merely to check inclusion of a value in a <code>String</code> or a <code>List</code>, consider\nusing the <code>contains</code> method instead.</p>\n<p>This rule raises an issue when an <code>indexOf</code> value retrieved either from a <code>String</code> or a <code>List</code> is tested against\n<code>&gt;0</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString color = ""blue"";\nString name = ""ishmael"";\n\nList&lt;String&gt; strings = new ArrayList&lt;String&gt; ();\nstrings.add(color);\nstrings.add(name);\n\nif (strings.indexOf(color) &gt; 0) {  // Noncompliant\n  // ...\n}\nif (name.indexOf(""ish"") &gt; 0) { // Noncompliant\n  // ...\n}\nif (name.indexOf(""ae"") &gt; 0) { // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString color = ""blue"";\nString name = ""ishmael"";\n\nList&lt;String&gt; strings = new ArrayList&lt;String&gt; ();\nstrings.add(color);\nstrings.add(name);\n\nif (strings.indexOf(color) &gt; -1) {\n  // ...\n}\nif (name.indexOf(""ish"") &gt;= 0) {\n  // ...\n}\nif (name.contains(""ae"") {\n  // ...\n}\n</pre>'}]",[],['squid:S2692'],,,,
java:S2693,java,Threads should not be started in constructors,2023-06-14T03:41:52+0000,"<p>The problem with invoking <code>Thread.start()</code> in a constructor is that you’ll have a confusing mess on your hands if the class is ever
extended because the superclass' constructor will start the thread before the child class has truly been initialized.</p>
<p>This rule raises an issue any time <code>start</code> is invoked in the constructor of a non-<code>final</code> class.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass {

  Thread thread = null;

  public MyClass(Runnable runnable) {
    thread = new Thread(runnable);
    thread.start(); // Noncompliant
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/FDdGBQ"">CERT, TSM02-J.</a> - Do not use background threads during class initialization </li>
</ul>","<p>The problem with invoking <code>Thread.start()</code> in a constructor is that you’ll have a confusing mess on your hands if the class is ever
extended because the superclass' constructor will start the thread before the child class has truly been initialized.</p>
<p>This rule raises an issue any time <code>start</code> is invoked in the constructor of a non-<code>final</code> class.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass {

  Thread thread = null;

  public MyClass(Runnable runnable) {
    thread = new Thread(runnable);
    thread.start(); // Noncompliant
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/FDdGBQ"">CERT, TSM02-J.</a> - Do not use background threads during class initialization </li>
</ul>",BLOCKER,READY,False,[],"['cert', 'multi-threading', 'pitfall']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,30min,CONSTANT_ISSUE,30min,False,MAIN,False,"[{'key': 'default', 'content': '<p>The problem with invoking <code>Thread.start()</code> in a constructor is that you’ll have a confusing mess on your hands if the class is ever\nextended because the superclass\' constructor will start the thread before the child class has truly been initialized.</p>\n<p>This rule raises an issue any time <code>start</code> is invoked in the constructor of a non-<code>final</code> class.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  Thread thread = null;\n\n  public MyClass(Runnable runnable) {\n    thread = new Thread(runnable);\n    thread.start(); // Noncompliant\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/FDdGBQ"">CERT, TSM02-J.</a> - Do not use background threads during class initialization </li>\n</ul>'}]",[],['squid:S2693'],,,,
java:S3305,java,"Factory method injection should be used in ""@Configuration"" classes",2023-06-14T03:41:52+0000,"<p>When <code>@Autowired</code> is used, dependencies need to be resolved when the class is instantiated, which may cause early initialization of
beans or lead the context to look in places it shouldn’t to find the bean. To avoid this tricky issue and optimize the way the context loads,
dependencies should be requested as late as possible. That means using parameter injection instead of field injection for dependencies that are only
used in a single <code>@Bean</code> method.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@Configuration
public class ​FooConfiguration {

  @Autowired private ​DataSource dataSource​;  // Noncompliant

  @Bean
  public ​MyService myService() {
    return new ​MyService(this​.dataSource​);
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@Configuration
public class ​FooConfiguration {

 @Bean
  public ​MyService myService(DataSource dataSource) {
    return new ​MyService(dataSource);
  }
}
</pre>
<h2>Exceptions</h2>
<p>Fields used in methods that are called directly by other methods in the application (as opposed to being invoked automatically by the Spring
framework) are ignored by this rule so that direct callers don’t have to provide the dependencies themselves.</p>","<p>When <code>@Autowired</code> is used, dependencies need to be resolved when the class is instantiated, which may cause early initialization of
beans or lead the context to look in places it shouldn’t to find the bean. To avoid this tricky issue and optimize the way the context loads,
dependencies should be requested as late as possible. That means using parameter injection instead of field injection for dependencies that are only
used in a single <code>@Bean</code> method.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@Configuration
public class ​FooConfiguration {

  @Autowired private ​DataSource dataSource​;  // Noncompliant

  @Bean
  public ​MyService myService() {
    return new ​MyService(this​.dataSource​);
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@Configuration
public class ​FooConfiguration {

 @Bean
  public ​MyService myService(DataSource dataSource) {
    return new ​MyService(dataSource);
  }
}
</pre>
<h2>Exceptions</h2>
<p>Fields used in methods that are called directly by other methods in the application (as opposed to being invoked automatically by the Spring
framework) are ignored by this rule so that direct callers don’t have to provide the dependencies themselves.</p>",CRITICAL,READY,False,[],"['performance', 'spring']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,MAIN,False,"[{'key': 'default', 'content': '<p>When <code>@Autowired</code> is used, dependencies need to be resolved when the class is instantiated, which may cause early initialization of\nbeans or lead the context to look in places it shouldn’t to find the bean. To avoid this tricky issue and optimize the way the context loads,\ndependencies should be requested as late as possible. That means using parameter injection instead of field injection for dependencies that are only\nused in a single <code>@Bean</code> method.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Configuration\npublic class \u200bFooConfiguration {\n\n  @Autowired private \u200bDataSource dataSource\u200b;  // Noncompliant\n\n  @Bean\n  public \u200bMyService myService() {\n    return new \u200bMyService(this\u200b.dataSource\u200b);\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Configuration\npublic class \u200bFooConfiguration {\n\n @Bean\n  public \u200bMyService myService(DataSource dataSource) {\n    return new \u200bMyService(dataSource);\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Fields used in methods that are called directly by other methods in the application (as opposed to being invoked automatically by the Spring\nframework) are ignored by this rule so that direct callers don’t have to provide the dependencies themselves.</p>'}]",[],['squid:S3305'],,,,
java:S5777,java,Exception testing via JUnit @Test annotation should be avoided,2023-06-14T03:41:52+0000,"<p>When testing exception via <code>@Test</code> annotation, having additional assertions inside that test method can be problematic because any code
after the raised exception will not be executed. It will prevent you to test the state of the program after the raised exception and, at worst, make
you&nbsp;misleadingly think that it is executed.</p>
<p>You should consider moving any assertions into a separate test method where possible, or using <a
href=""https://github.com/junit-team/junit4/wiki/Exception-testing#using-assertthrows-method"">org.junit.Assert.assertThrows</a> instead.</p>
<p>Alternatively, you could use <a href=""https://github.com/junit-team/junit4/wiki/Exception-testing#trycatch-idiom"">try-catch idiom</a> for JUnit
version &lt; 4.13 or if your project does not support lambdas.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@Test(expected = IndexOutOfBoundsException.class)
public void testShouldFail() {
  get();
  // This test pass since execution will never get past this line.
  Assert.assertEquals(0, 1);
}

private Object get() {
  throw new IndexOutOfBoundsException();
}
</pre>
<h2>Compliant Solution</h2>
<ul>
  <li> For JUnit &gt;= 4.13, use <a
  href=""https://github.com/junit-team/junit4/wiki/Exception-testing#using-assertthrows-method"">org.junit.Assert.assertThrows</a>: </li>
</ul>
<pre>
// This test correctly fails.
@Test
public void testToString() {
    Object obj = get();
    Assert.assertThrows(IndexOutOfBoundsException.class, () -&gt; obj.toString());
    Assert.assertEquals(0, 1);
}
</pre>
<ul>
  <li> For JUnit &lt; 4.13, use the <a href=""https://github.com/junit-team/junit4/wiki/Exception-testing#trycatch-idiom"">try-catch idiom</a>: </li>
</ul>
<pre>
@Test
public void testShouldFail() {
    Object obj = get();
    try {
        obj.toString();
        Assert.fail(""Expected an IndexOutOfBoundsException to be thrown"");
    } catch (IndexOutOfBoundsException e) {}
    Assert.assertEquals(0, 1); // Correctly fails.
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://github.com/junit-team/junit4/wiki/Exception-testing"">JUnit exception testing documentation</a> </li>
</ul>","<p>When testing exception via <code>@Test</code> annotation, having additional assertions inside that test method can be problematic because any code
after the raised exception will not be executed. It will prevent you to test the state of the program after the raised exception and, at worst, make
you&nbsp;misleadingly think that it is executed.</p>
<p>You should consider moving any assertions into a separate test method where possible, or using <a
href=""https://github.com/junit-team/junit4/wiki/Exception-testing#using-assertthrows-method"">org.junit.Assert.assertThrows</a> instead.</p>
<p>Alternatively, you could use <a href=""https://github.com/junit-team/junit4/wiki/Exception-testing#trycatch-idiom"">try-catch idiom</a> for JUnit
version &lt; 4.13 or if your project does not support lambdas.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@Test(expected = IndexOutOfBoundsException.class)
public void testShouldFail() {
  get();
  // This test pass since execution will never get past this line.
  Assert.assertEquals(0, 1);
}

private Object get() {
  throw new IndexOutOfBoundsException();
}
</pre>
<h2>Compliant Solution</h2>
<ul>
  <li> For JUnit &gt;= 4.13, use <a
  href=""https://github.com/junit-team/junit4/wiki/Exception-testing#using-assertthrows-method"">org.junit.Assert.assertThrows</a>: </li>
</ul>
<pre>
// This test correctly fails.
@Test
public void testToString() {
    Object obj = get();
    Assert.assertThrows(IndexOutOfBoundsException.class, () -&gt; obj.toString());
    Assert.assertEquals(0, 1);
}
</pre>
<ul>
  <li> For JUnit &lt; 4.13, use the <a href=""https://github.com/junit-team/junit4/wiki/Exception-testing#trycatch-idiom"">try-catch idiom</a>: </li>
</ul>
<pre>
@Test
public void testShouldFail() {
    Object obj = get();
    try {
        obj.toString();
        Assert.fail(""Expected an IndexOutOfBoundsException to be thrown"");
    } catch (IndexOutOfBoundsException e) {}
    Assert.assertEquals(0, 1); // Correctly fails.
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://github.com/junit-team/junit4/wiki/Exception-testing"">JUnit exception testing documentation</a> </li>
</ul>",MINOR,READY,False,[],"['junit', 'tests']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,TEST,False,"[{'key': 'default', 'content': '<p>When testing exception via <code>@Test</code> annotation, having additional assertions inside that test method can be problematic because any code\nafter the raised exception will not be executed. It will prevent you to test the state of the program after the raised exception and, at worst, make\nyou&nbsp;misleadingly think that it is executed.</p>\n<p>You should consider moving any assertions into a separate test method where possible, or using <a\nhref=""https://github.com/junit-team/junit4/wiki/Exception-testing#using-assertthrows-method"">org.junit.Assert.assertThrows</a> instead.</p>\n<p>Alternatively, you could use <a href=""https://github.com/junit-team/junit4/wiki/Exception-testing#trycatch-idiom"">try-catch idiom</a> for JUnit\nversion &lt; 4.13 or if your project does not support lambdas.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Test(expected = IndexOutOfBoundsException.class)\npublic void testShouldFail() {\n  get();\n  // This test pass since execution will never get past this line.\n  Assert.assertEquals(0, 1);\n}\n\nprivate Object get() {\n  throw new IndexOutOfBoundsException();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<ul>\n  <li> For JUnit &gt;= 4.13, use <a\n  href=""https://github.com/junit-team/junit4/wiki/Exception-testing#using-assertthrows-method"">org.junit.Assert.assertThrows</a>: </li>\n</ul>\n<pre>\n// This test correctly fails.\n@Test\npublic void testToString() {\n    Object obj = get();\n    Assert.assertThrows(IndexOutOfBoundsException.class, () -&gt; obj.toString());\n    Assert.assertEquals(0, 1);\n}\n</pre>\n<ul>\n  <li> For JUnit &lt; 4.13, use the <a href=""https://github.com/junit-team/junit4/wiki/Exception-testing#trycatch-idiom"">try-catch idiom</a>: </li>\n</ul>\n<pre>\n@Test\npublic void testShouldFail() {\n    Object obj = get();\n    try {\n        obj.toString();\n        Assert.fail(""Expected an IndexOutOfBoundsException to be thrown"");\n    } catch (IndexOutOfBoundsException e) {}\n    Assert.assertEquals(0, 1); // Correctly fails.\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://github.com/junit-team/junit4/wiki/Exception-testing"">JUnit exception testing documentation</a> </li>\n</ul>'}]",[],['squid:S5777'],,,,
java:S5846,java,Empty lines should not be tested with regex MULTILINE flag,2023-06-14T03:41:52+0000,"<p>One way to test for empty lines is to use the regex <code>""^$""</code>, which can be extremely handy when filtering out empty lines from collections
of Strings, for instance. With regard to this, the Javadoc for <a
href=""https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/regex/Pattern.html"">Pattern (Line Terminators)</a> states the
following:</p>
<blockquote>
  <p>By default, the regular expressions ^ and <code>$</code> ignore line terminators and only match at the beginning and the end, respectively, of
  the entire input sequence. If <code>MULTILINE</code> mode is activated then ^ matches at the beginning of input and after any line terminator
  <strong>except at the end of input</strong>. When in <code>MULTILINE</code> mode <code>$</code> matches just before a line terminator or the end of
  the input sequence.</p>
</blockquote>
<p>As emphasized, ^ is not going to match at the end of an input, and the end of the input is necessarily included in the empty string, which might
lead to completely missing empty lines, while it would be the initial reason for using such regex.</p>
<p>Therefore, when searching for empty lines using a multi-line regular expression, you should also check whether the string is empty.</p>
<p>This rule is raising an issue every time a pattern that can match the empty string is used with <code>MULTILINE</code> flag and without calling
<code>isEmpty()</code> on the string.</p>
<h2>Noncompliant Code Example</h2>
<pre>
static final Pattern p = Pattern.compile(""^$"", Pattern.MULTILINE); // Noncompliant

// Alternatively
static final Pattern p = Pattern.compile(""(?m)^$""); // Noncompliant


boolean containsEmptyLines(String str) {
    return p.matcher(str).find();
}

// ...
System.out.println(containsEmptyLines(""a\n\nb"")); // correctly prints 'true'
System.out.println(containsEmptyLines("""")); // incorrectly prints 'false'
</pre>
<h2>Compliant Solution</h2>
<pre>
static final Pattern p = Pattern.compile(""^$"", Pattern.MULTILINE);

boolean containsEmptyLines(String str) {
    return p.matcher(str).find() || str.isEmpty();
}

// ...
System.out.println(containsEmptyLines(""a\n\nb"")); // correctly prints 'true'
System.out.println(containsEmptyLines("""")); // also correctly prints 'true'
</pre>","<p>One way to test for empty lines is to use the regex <code>""^$""</code>, which can be extremely handy when filtering out empty lines from collections
of Strings, for instance. With regard to this, the Javadoc for <a
href=""https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/regex/Pattern.html"">Pattern (Line Terminators)</a> states the
following:</p>
<blockquote>
  <p>By default, the regular expressions ^ and <code>$</code> ignore line terminators and only match at the beginning and the end, respectively, of
  the entire input sequence. If <code>MULTILINE</code> mode is activated then ^ matches at the beginning of input and after any line terminator
  <strong>except at the end of input</strong>. When in <code>MULTILINE</code> mode <code>$</code> matches just before a line terminator or the end of
  the input sequence.</p>
</blockquote>
<p>As emphasized, ^ is not going to match at the end of an input, and the end of the input is necessarily included in the empty string, which might
lead to completely missing empty lines, while it would be the initial reason for using such regex.</p>
<p>Therefore, when searching for empty lines using a multi-line regular expression, you should also check whether the string is empty.</p>
<p>This rule is raising an issue every time a pattern that can match the empty string is used with <code>MULTILINE</code> flag and without calling
<code>isEmpty()</code> on the string.</p>
<h2>Noncompliant Code Example</h2>
<pre>
static final Pattern p = Pattern.compile(""^$"", Pattern.MULTILINE); // Noncompliant

// Alternatively
static final Pattern p = Pattern.compile(""(?m)^$""); // Noncompliant


boolean containsEmptyLines(String str) {
    return p.matcher(str).find();
}

// ...
System.out.println(containsEmptyLines(""a\n\nb"")); // correctly prints 'true'
System.out.println(containsEmptyLines("""")); // incorrectly prints 'false'
</pre>
<h2>Compliant Solution</h2>
<pre>
static final Pattern p = Pattern.compile(""^$"", Pattern.MULTILINE);

boolean containsEmptyLines(String str) {
    return p.matcher(str).find() || str.isEmpty();
}

// ...
System.out.println(containsEmptyLines(""a\n\nb"")); // correctly prints 'true'
System.out.println(containsEmptyLines("""")); // also correctly prints 'true'
</pre>",CRITICAL,READY,False,[],['regex'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,15min,CONSTANT_ISSUE,15min,False,ALL,False,"[{'key': 'default', 'content': '<p>One way to test for empty lines is to use the regex <code>""^$""</code>, which can be extremely handy when filtering out empty lines from collections\nof Strings, for instance. With regard to this, the Javadoc for <a\nhref=""https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/regex/Pattern.html"">Pattern (Line Terminators)</a> states the\nfollowing:</p>\n<blockquote>\n  <p>By default, the regular expressions ^ and <code>$</code> ignore line terminators and only match at the beginning and the end, respectively, of\n  the entire input sequence. If <code>MULTILINE</code> mode is activated then ^ matches at the beginning of input and after any line terminator\n  <strong>except at the end of input</strong>. When in <code>MULTILINE</code> mode <code>$</code> matches just before a line terminator or the end of\n  the input sequence.</p>\n</blockquote>\n<p>As emphasized, ^ is not going to match at the end of an input, and the end of the input is necessarily included in the empty string, which might\nlead to completely missing empty lines, while it would be the initial reason for using such regex.</p>\n<p>Therefore, when searching for empty lines using a multi-line regular expression, you should also check whether the string is empty.</p>\n<p>This rule is raising an issue every time a pattern that can match the empty string is used with <code>MULTILINE</code> flag and without calling\n<code>isEmpty()</code> on the string.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nstatic final Pattern p = Pattern.compile(""^$"", Pattern.MULTILINE); // Noncompliant\n\n// Alternatively\nstatic final Pattern p = Pattern.compile(""(?m)^$""); // Noncompliant\n\n\nboolean containsEmptyLines(String str) {\n    return p.matcher(str).find();\n}\n\n// ...\nSystem.out.println(containsEmptyLines(""a\\n\\nb"")); // correctly prints \'true\'\nSystem.out.println(containsEmptyLines("""")); // incorrectly prints \'false\'\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nstatic final Pattern p = Pattern.compile(""^$"", Pattern.MULTILINE);\n\nboolean containsEmptyLines(String str) {\n    return p.matcher(str).find() || str.isEmpty();\n}\n\n// ...\nSystem.out.println(containsEmptyLines(""a\\n\\nb"")); // correctly prints \'true\'\nSystem.out.println(containsEmptyLines("""")); // also correctly prints \'true\'\n</pre>'}]",[],['squid:S5846'],,,,
java:S5961,java,Test methods should not contain too many assertions,2023-06-14T03:41:52+0000,"<p>A common good practice is to write test methods targeting only one logical concept, that can only fail for one reason.</p>
<p>While it might make sense to have more than one assertion to test one concept, having too many is a sign that a test became too complex and should
be refactored to multiples ones.</p>
<p>This rule will report any test method containing more than a given number of assertion.</p>
<h2>Noncompliant Code Example</h2>
<p>With a parameter of 2.</p>
<pre>
@Test
void test() { // Refactor this method.
  assertEquals(1, f(1));
  assertEquals(2, f(2));
  assertEquals(3, g(1));
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void test_f() {
  assertEquals(1, f(1));
  assertEquals(2, f(2));
}
void test_g() {
  assertEquals(3, g(1));
}
</pre>","<p>A common good practice is to write test methods targeting only one logical concept, that can only fail for one reason.</p>
<p>While it might make sense to have more than one assertion to test one concept, having too many is a sign that a test became too complex and should
be refactored to multiples ones.</p>
<p>This rule will report any test method containing more than a given number of assertion.</p>
<h2>Noncompliant Code Example</h2>
<p>With a parameter of 2.</p>
<pre>
@Test
void test() { // Refactor this method.
  assertEquals(1, f(1));
  assertEquals(2, f(2));
  assertEquals(3, g(1));
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void test_f() {
  assertEquals(1, f(1));
  assertEquals(2, f(2));
}
void test_g() {
  assertEquals(3, g(1));
}
</pre>",MAJOR,READY,False,[],['tests'],java,Java,"[{'key': 'MaximumAssertionNumber', 'htmlDesc': 'The maximum authorized number of assertions in a test method', 'defaultValue': '25', 'type': 'INTEGER'}]",CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,20min,CONSTANT_ISSUE,20min,False,TEST,False,"[{'key': 'default', 'content': '<p>A common good practice is to write test methods targeting only one logical concept, that can only fail for one reason.</p>\n<p>While it might make sense to have more than one assertion to test one concept, having too many is a sign that a test became too complex and should\nbe refactored to multiples ones.</p>\n<p>This rule will report any test method containing more than a given number of assertion.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With a parameter of 2.</p>\n<pre>\n@Test\nvoid test() { // Refactor this method.\n  assertEquals(1, f(1));\n  assertEquals(2, f(2));\n  assertEquals(3, g(1));\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvoid test_f() {\n  assertEquals(1, f(1));\n  assertEquals(2, f(2));\n}\nvoid test_g() {\n  assertEquals(3, g(1));\n}\n</pre>'}]",[],['squid:S5961'],,,,
java:S5969,java,Mocking all non-private methods of a class should be avoided,2023-06-14T03:41:52+0000,"<p>If you end up mocking every non-private method of a class in order to write tests, it is a strong sign that your test became too complex, or that
you misunderstood the way you are supposed to use the mocking mechanism.</p>
<p>You should either refactor the test code into multiple units, or consider using the class itself, by either directly instantiating it, or creating
a new one inheriting from it, with the expected behavior.</p>
<p>This rule reports an issue when every member of a given class are mocked.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@Test
void test_requiring_MyClass() {
  MyClass myClassMock = mock(MyClass.class); // Noncompliant
  when(myClassMock.f()).thenReturn(1);
  when(myClassMock.g()).thenReturn(2);
  //...
}

abstract class MyClass {
  abstract int f();
  abstract int g();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@Test
void test_requiring_MyClass() {
  MyClass myClass = new MyClassForTest();
  //...
}

class MyClassForTest extends MyClass {

  @Override
  int f() {
    return 1;
  }

  @Override
  int g() {
    return 2;
  }
}
</pre>
<p>or</p>
<pre>
@Test
void test_requiring_f() {
  MyClass myClassMock = mock(MyClass.class);
  when(myClassMock.f()).thenReturn(1);
  //...
}

@Test
void test_requiring_g() {
  MyClass myClassMock = mock(MyClass.class);
  when(myClassMock.g()).thenReturn(2);
  //...
}

abstract class MyClass {
  abstract int f();
  abstract int g();
}
</pre>","<p>If you end up mocking every non-private method of a class in order to write tests, it is a strong sign that your test became too complex, or that
you misunderstood the way you are supposed to use the mocking mechanism.</p>
<p>You should either refactor the test code into multiple units, or consider using the class itself, by either directly instantiating it, or creating
a new one inheriting from it, with the expected behavior.</p>
<p>This rule reports an issue when every member of a given class are mocked.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@Test
void test_requiring_MyClass() {
  MyClass myClassMock = mock(MyClass.class); // Noncompliant
  when(myClassMock.f()).thenReturn(1);
  when(myClassMock.g()).thenReturn(2);
  //...
}

abstract class MyClass {
  abstract int f();
  abstract int g();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@Test
void test_requiring_MyClass() {
  MyClass myClass = new MyClassForTest();
  //...
}

class MyClassForTest extends MyClass {

  @Override
  int f() {
    return 1;
  }

  @Override
  int g() {
    return 2;
  }
}
</pre>
<p>or</p>
<pre>
@Test
void test_requiring_f() {
  MyClass myClassMock = mock(MyClass.class);
  when(myClassMock.f()).thenReturn(1);
  //...
}

@Test
void test_requiring_g() {
  MyClass myClassMock = mock(MyClass.class);
  when(myClassMock.g()).thenReturn(2);
  //...
}

abstract class MyClass {
  abstract int f();
  abstract int g();
}
</pre>",CRITICAL,READY,False,[],"['mockito', 'tests']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,10min,CONSTANT_ISSUE,10min,False,TEST,False,"[{'key': 'default', 'content': '<p>If you end up mocking every non-private method of a class in order to write tests, it is a strong sign that your test became too complex, or that\nyou misunderstood the way you are supposed to use the mocking mechanism.</p>\n<p>You should either refactor the test code into multiple units, or consider using the class itself, by either directly instantiating it, or creating\na new one inheriting from it, with the expected behavior.</p>\n<p>This rule reports an issue when every member of a given class are mocked.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Test\nvoid test_requiring_MyClass() {\n  MyClass myClassMock = mock(MyClass.class); // Noncompliant\n  when(myClassMock.f()).thenReturn(1);\n  when(myClassMock.g()).thenReturn(2);\n  //...\n}\n\nabstract class MyClass {\n  abstract int f();\n  abstract int g();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Test\nvoid test_requiring_MyClass() {\n  MyClass myClass = new MyClassForTest();\n  //...\n}\n\nclass MyClassForTest extends MyClass {\n\n  @Override\n  int f() {\n    return 1;\n  }\n\n  @Override\n  int g() {\n    return 2;\n  }\n}\n</pre>\n<p>or</p>\n<pre>\n@Test\nvoid test_requiring_f() {\n  MyClass myClassMock = mock(MyClass.class);\n  when(myClassMock.f()).thenReturn(1);\n  //...\n}\n\n@Test\nvoid test_requiring_g() {\n  MyClass myClassMock = mock(MyClass.class);\n  when(myClassMock.g()).thenReturn(2);\n  //...\n}\n\nabstract class MyClass {\n  abstract int f();\n  abstract int g();\n}\n</pre>'}]",[],['squid:S5969'],,,,
java:S1176,java,"Public types, methods and fields (API) should be documented with Javadoc",2023-06-14T03:41:52+0000,"<p>Try to imagine using the standard Java API (Collections, JDBC, IO, …​) without Javadoc. It would be a nightmare, because Javadoc is the only way to
understand of the contract of the API. Documenting an API with Javadoc increases the productivity of the developers consuming it.</p>
<p>On top of a main description for each member of a public API, the following Javadoc elements are required to be described:</p>
<ul>
  <li> Parameters, using <code>@param parameterName</code>. </li>
  <li> Thrown exceptions, using <code>@throws exceptionName</code>. </li>
  <li> Method return values, using <code>@return</code>. </li>
  <li> Generic types, using <code>@param &lt;T&gt;</code>. </li>
</ul>
<p>Furthermore the following guidelines should be followed:</p>
<ul>
  <li> At least 1 line of description. </li>
  <li> All parameters documented with <code>@param</code>, and names should match. </li>
  <li> All checked exceptions documented with <code>@throws</code> </li>
  <li> <code>@return</code> present and documented when not <code>void</code>. </li>
  <li> Placeholders like <code>""TODO""</code>, <code>""FIXME""</code>, <code>""...""</code> should be avoided. </li>
</ul>
<p>The following public methods and constructors are not taken into account by this rule:</p>
<ul>
  <li> Getters and setters. </li>
  <li> Methods overriding another method (usually decorated with <code>@Override</code>). </li>
  <li> Empty constructors. </li>
  <li> Static constants. </li>
</ul>
<p>For the parameters of the rule, the following rules are applied:</p>
<ul>
  <li> <code>?</code> matches a single character </li>
  <li> <code>*</code> matches zero or more characters </li>
  <li> <code>**</code> matches zero or more packages </li>
</ul>
<p>Examples:</p>
<ul>
  <li> <code>java.internal.InternalClass</code> will match only <code>InternalClass</code> class. </li>
  <li> <code>java.internal.*</code> will match any member of <code>java.internal</code> package. </li>
  <li> <code>java.internal.**</code> same as above, but including sub-packages. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
/**
  * This is a Javadoc comment
  */
public class MyClass&lt;T&gt; implements Runnable {    // Noncompliant - missing '@param &lt;T&gt;'

  public static final DEFAULT_STATUS = 0;    // Compliant - static constant
  private int status;                           // Compliant - not public

  public String message;                  // Noncompliant

  public MyClass() {                         // Noncompliant - missing documentation
    this.status = DEFAULT_STATUS;
  }

  public void setStatus(int status) {  // Compliant - setter
    this.status = status;
  }

  @Override
  public void run() {                          // Compliant - has @Override annotation
  }

  protected void doSomething() {    // Compliant - not public
  }

  public void doSomething2(int value) {  // Noncompliant
  }

  public int doSomething3(int value) {  // Noncompliant
    return value;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
/**
  * This is a Javadoc comment
  * @param &lt;T&gt; the parameter of the class
  */
public class MyClass&lt;T&gt; implements Runnable {

  public static final DEFAULT_STATUS = 0;
  private int status;

  /**
    * This is a Javadoc comment
    */
  public String message;

  /**
   * Class comment...
   */
  public MyClass() {
    this.status = DEFAULT_STATUS;
  }

  public void setStatus(int status) {
    this.status = status;
  }

  @Override
  public void run() {
  }

  protected void doSomething() {
  }

  /**
    * Will do something.
    * @param value the value to be used
    */
  public void doSomething(int value) {

  /**
    *  {@inheritDoc}
    */
  public int doSomething(int value) {
    return value;
  }
}
</pre>","<p>Try to imagine using the standard Java API (Collections, JDBC, IO, …​) without Javadoc. It would be a nightmare, because Javadoc is the only way to
understand of the contract of the API. Documenting an API with Javadoc increases the productivity of the developers consuming it.</p>
<p>On top of a main description for each member of a public API, the following Javadoc elements are required to be described:</p>
<ul>
  <li> Parameters, using <code>@param parameterName</code>. </li>
  <li> Thrown exceptions, using <code>@throws exceptionName</code>. </li>
  <li> Method return values, using <code>@return</code>. </li>
  <li> Generic types, using <code>@param &lt;T&gt;</code>. </li>
</ul>
<p>Furthermore the following guidelines should be followed:</p>
<ul>
  <li> At least 1 line of description. </li>
  <li> All parameters documented with <code>@param</code>, and names should match. </li>
  <li> All checked exceptions documented with <code>@throws</code> </li>
  <li> <code>@return</code> present and documented when not <code>void</code>. </li>
  <li> Placeholders like <code>""TODO""</code>, <code>""FIXME""</code>, <code>""...""</code> should be avoided. </li>
</ul>
<p>The following public methods and constructors are not taken into account by this rule:</p>
<ul>
  <li> Getters and setters. </li>
  <li> Methods overriding another method (usually decorated with <code>@Override</code>). </li>
  <li> Empty constructors. </li>
  <li> Static constants. </li>
</ul>
<p>For the parameters of the rule, the following rules are applied:</p>
<ul>
  <li> <code>?</code> matches a single character </li>
  <li> <code>*</code> matches zero or more characters </li>
  <li> <code>**</code> matches zero or more packages </li>
</ul>
<p>Examples:</p>
<ul>
  <li> <code>java.internal.InternalClass</code> will match only <code>InternalClass</code> class. </li>
  <li> <code>java.internal.*</code> will match any member of <code>java.internal</code> package. </li>
  <li> <code>java.internal.**</code> same as above, but including sub-packages. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
/**
  * This is a Javadoc comment
  */
public class MyClass&lt;T&gt; implements Runnable {    // Noncompliant - missing '@param &lt;T&gt;'

  public static final DEFAULT_STATUS = 0;    // Compliant - static constant
  private int status;                           // Compliant - not public

  public String message;                  // Noncompliant

  public MyClass() {                         // Noncompliant - missing documentation
    this.status = DEFAULT_STATUS;
  }

  public void setStatus(int status) {  // Compliant - setter
    this.status = status;
  }

  @Override
  public void run() {                          // Compliant - has @Override annotation
  }

  protected void doSomething() {    // Compliant - not public
  }

  public void doSomething2(int value) {  // Noncompliant
  }

  public int doSomething3(int value) {  // Noncompliant
    return value;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
/**
  * This is a Javadoc comment
  * @param &lt;T&gt; the parameter of the class
  */
public class MyClass&lt;T&gt; implements Runnable {

  public static final DEFAULT_STATUS = 0;
  private int status;

  /**
    * This is a Javadoc comment
    */
  public String message;

  /**
   * Class comment...
   */
  public MyClass() {
    this.status = DEFAULT_STATUS;
  }

  public void setStatus(int status) {
    this.status = status;
  }

  @Override
  public void run() {
  }

  protected void doSomething() {
  }

  /**
    * Will do something.
    * @param value the value to be used
    */
  public void doSomething(int value) {

  /**
    *  {@inheritDoc}
    */
  public int doSomething(int value) {
    return value;
  }
}
</pre>",MAJOR,READY,False,[],['convention'],java,Java,"[{'key': 'forClasses', 'htmlDesc': 'Pattern of classes which should adhere to this constraint. Ex : *<strong>.api.</strong>*', 'defaultValue': '**.api.**', 'type': 'STRING'}, {'key': 'exclusion', 'htmlDesc': 'Pattern of classes which are excluded from adhering to this constraint.', 'defaultValue': '**.internal.**', 'type': 'STRING'}]",CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,10min,CONSTANT_ISSUE,10min,False,ALL,False,"[{'key': 'default', 'content': '<p>Try to imagine using the standard Java API (Collections, JDBC, IO, …\u200b) without Javadoc. It would be a nightmare, because Javadoc is the only way to\nunderstand of the contract of the API. Documenting an API with Javadoc increases the productivity of the developers consuming it.</p>\n<p>On top of a main description for each member of a public API, the following Javadoc elements are required to be described:</p>\n<ul>\n  <li> Parameters, using <code>@param parameterName</code>. </li>\n  <li> Thrown exceptions, using <code>@throws exceptionName</code>. </li>\n  <li> Method return values, using <code>@return</code>. </li>\n  <li> Generic types, using <code>@param &lt;T&gt;</code>. </li>\n</ul>\n<p>Furthermore the following guidelines should be followed:</p>\n<ul>\n  <li> At least 1 line of description. </li>\n  <li> All parameters documented with <code>@param</code>, and names should match. </li>\n  <li> All checked exceptions documented with <code>@throws</code> </li>\n  <li> <code>@return</code> present and documented when not <code>void</code>. </li>\n  <li> Placeholders like <code>""TODO""</code>, <code>""FIXME""</code>, <code>""...""</code> should be avoided. </li>\n</ul>\n<p>The following public methods and constructors are not taken into account by this rule:</p>\n<ul>\n  <li> Getters and setters. </li>\n  <li> Methods overriding another method (usually decorated with <code>@Override</code>). </li>\n  <li> Empty constructors. </li>\n  <li> Static constants. </li>\n</ul>\n<p>For the parameters of the rule, the following rules are applied:</p>\n<ul>\n  <li> <code>?</code> matches a single character </li>\n  <li> <code>*</code> matches zero or more characters </li>\n  <li> <code>**</code> matches zero or more packages </li>\n</ul>\n<p>Examples:</p>\n<ul>\n  <li> <code>java.internal.InternalClass</code> will match only <code>InternalClass</code> class. </li>\n  <li> <code>java.internal.*</code> will match any member of <code>java.internal</code> package. </li>\n  <li> <code>java.internal.**</code> same as above, but including sub-packages. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\n/**\n  * This is a Javadoc comment\n  */\npublic class MyClass&lt;T&gt; implements Runnable {    // Noncompliant - missing \'@param &lt;T&gt;\'\n\n  public static final DEFAULT_STATUS = 0;    // Compliant - static constant\n  private int status;                           // Compliant - not public\n\n  public String message;                  // Noncompliant\n\n  public MyClass() {                         // Noncompliant - missing documentation\n    this.status = DEFAULT_STATUS;\n  }\n\n  public void setStatus(int status) {  // Compliant - setter\n    this.status = status;\n  }\n\n  @Override\n  public void run() {                          // Compliant - has @Override annotation\n  }\n\n  protected void doSomething() {    // Compliant - not public\n  }\n\n  public void doSomething2(int value) {  // Noncompliant\n  }\n\n  public int doSomething3(int value) {  // Noncompliant\n    return value;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n/**\n  * This is a Javadoc comment\n  * @param &lt;T&gt; the parameter of the class\n  */\npublic class MyClass&lt;T&gt; implements Runnable {\n\n  public static final DEFAULT_STATUS = 0;\n  private int status;\n\n  /**\n    * This is a Javadoc comment\n    */\n  public String message;\n\n  /**\n   * Class comment...\n   */\n  public MyClass() {\n    this.status = DEFAULT_STATUS;\n  }\n\n  public void setStatus(int status) {\n    this.status = status;\n  }\n\n  @Override\n  public void run() {\n  }\n\n  protected void doSomething() {\n  }\n\n  /**\n    * Will do something.\n    * @param value the value to be used\n    */\n  public void doSomething(int value) {\n\n  /**\n    *  {@inheritDoc}\n    */\n  public int doSomething(int value) {\n    return value;\n  }\n}\n</pre>'}]",[],['squid:UndocumentedApi'],,,,
java:S2147,java,Catches should be combined,2023-06-14T03:41:52+0000,"<p>Since Java 7 it has been possible to catch multiple exceptions at once. Therefore, when multiple <code>catch</code> blocks have the same code, they
should be combined for better readability.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project’s <code>sonar.java.source</code> is lower than <code>7</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
catch (IOException e) {
  doCleanup();
  logger.log(e);
}
catch (SQLException e) {  // Noncompliant
  doCleanup();
  logger.log(e);
}
catch (TimeoutException e) {  // Compliant; block contents are different
  doCleanup();
  throw e;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
catch (IOException|SQLException e) {
  doCleanup();
  logger.log(e);
}
catch (TimeoutException e) {
  doCleanup();
  throw e;
}
</pre>","<p>Since Java 7 it has been possible to catch multiple exceptions at once. Therefore, when multiple <code>catch</code> blocks have the same code, they
should be combined for better readability.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project’s <code>sonar.java.source</code> is lower than <code>7</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
catch (IOException e) {
  doCleanup();
  logger.log(e);
}
catch (SQLException e) {  // Noncompliant
  doCleanup();
  logger.log(e);
}
catch (TimeoutException e) {  // Compliant; block contents are different
  doCleanup();
  throw e;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
catch (IOException|SQLException e) {
  doCleanup();
  logger.log(e);
}
catch (TimeoutException e) {
  doCleanup();
  throw e;
}
</pre>",MINOR,READY,False,[],['clumsy'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>Since Java 7 it has been possible to catch multiple exceptions at once. Therefore, when multiple <code>catch</code> blocks have the same code, they\nshould be combined for better readability.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project’s <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ncatch (IOException e) {\n  doCleanup();\n  logger.log(e);\n}\ncatch (SQLException e) {  // Noncompliant\n  doCleanup();\n  logger.log(e);\n}\ncatch (TimeoutException e) {  // Compliant; block contents are different\n  doCleanup();\n  throw e;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ncatch (IOException|SQLException e) {\n  doCleanup();\n  logger.log(e);\n}\ncatch (TimeoutException e) {\n  doCleanup();\n  throw e;\n}\n</pre>'}]",[],['squid:S2147'],,,,
java:S2384,java,Mutable members should not be stored or returned directly,2023-06-14T03:41:52+0000,"<p>Mutable objects are those whose state can be changed. For instance, an array is mutable, but a String is not. Mutable class members should never be
returned to a caller or accepted and stored directly. Doing so leaves you vulnerable to unexpected changes in your class state.</p>
<p>Instead use an unmodifiable <code>Collection</code> (via <code>Collections.unmodifiableCollection</code>,
<code>Collections.unmodifiableList</code>, …​) or make a copy of the mutable object, and store or return the copy instead.</p>
<p>This rule checks that arrays, collections and Dates are not stored or returned directly.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class A {
  private String [] strings;

  public A () {
    strings = new String[]{""first"", ""second""};
  }

  public String [] getStrings() {
    return strings; // Noncompliant
  }

  public void setStrings(String [] strings) {
    this.strings = strings;  // Noncompliant
  }
}

public class B {

  private A a = new A();  // At this point a.strings = {""first"", ""second""};

  public void wreakHavoc() {
    a.getStrings()[0] = ""yellow"";  // a.strings = {""yellow"", ""second""};
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class A {
  private String [] strings;

  public A () {
    strings = new String[]{""first"", ""second""};
  }

  public String [] getStrings() {
    return strings.clone();
  }

  public void setStrings(String [] strings) {
    this.strings = strings.clone();
  }
}

public class B {

  private A a = new A();  // At this point a.strings = {""first"", ""second""};

  public void wreakHavoc() {
    a.getStrings()[0] = ""yellow"";  // a.strings = {""first"", ""second""};
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/374"">MITRE, CWE-374</a> - Passing Mutable Objects to an Untrusted Method </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/375"">MITRE, CWE-375</a> - Returning a Mutable Object to an Untrusted Caller </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/OTdGBQ"">CERT, OBJ05-J.</a> - Do not return references to private mutable class members </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/HTdGBQ"">CERT, OBJ06-J.</a> - Defensively copy mutable inputs and mutable internal components
  </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/VzZGBQ"">CERT, OBJ13-J.</a> - Ensure that references to mutable objects are not exposed </li>
</ul>","<p>Mutable objects are those whose state can be changed. For instance, an array is mutable, but a String is not. Mutable class members should never be
returned to a caller or accepted and stored directly. Doing so leaves you vulnerable to unexpected changes in your class state.</p>
<p>Instead use an unmodifiable <code>Collection</code> (via <code>Collections.unmodifiableCollection</code>,
<code>Collections.unmodifiableList</code>, …​) or make a copy of the mutable object, and store or return the copy instead.</p>
<p>This rule checks that arrays, collections and Dates are not stored or returned directly.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class A {
  private String [] strings;

  public A () {
    strings = new String[]{""first"", ""second""};
  }

  public String [] getStrings() {
    return strings; // Noncompliant
  }

  public void setStrings(String [] strings) {
    this.strings = strings;  // Noncompliant
  }
}

public class B {

  private A a = new A();  // At this point a.strings = {""first"", ""second""};

  public void wreakHavoc() {
    a.getStrings()[0] = ""yellow"";  // a.strings = {""yellow"", ""second""};
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class A {
  private String [] strings;

  public A () {
    strings = new String[]{""first"", ""second""};
  }

  public String [] getStrings() {
    return strings.clone();
  }

  public void setStrings(String [] strings) {
    this.strings = strings.clone();
  }
}

public class B {

  private A a = new A();  // At this point a.strings = {""first"", ""second""};

  public void wreakHavoc() {
    a.getStrings()[0] = ""yellow"";  // a.strings = {""first"", ""second""};
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/374"">MITRE, CWE-374</a> - Passing Mutable Objects to an Untrusted Method </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/375"">MITRE, CWE-375</a> - Returning a Mutable Object to an Untrusted Caller </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/OTdGBQ"">CERT, OBJ05-J.</a> - Do not return references to private mutable class members </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/HTdGBQ"">CERT, OBJ06-J.</a> - Defensively copy mutable inputs and mutable internal components
  </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/VzZGBQ"">CERT, OBJ13-J.</a> - Ensure that references to mutable objects are not exposed </li>
</ul>",MINOR,READY,False,[],"['cert', 'cwe', 'unpredictable']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,MAIN,False,"[{'key': 'default', 'content': '<p>Mutable objects are those whose state can be changed. For instance, an array is mutable, but a String is not. Mutable class members should never be\nreturned to a caller or accepted and stored directly. Doing so leaves you vulnerable to unexpected changes in your class state.</p>\n<p>Instead use an unmodifiable <code>Collection</code> (via <code>Collections.unmodifiableCollection</code>,\n<code>Collections.unmodifiableList</code>, …\u200b) or make a copy of the mutable object, and store or return the copy instead.</p>\n<p>This rule checks that arrays, collections and Dates are not stored or returned directly.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass A {\n  private String [] strings;\n\n  public A () {\n    strings = new String[]{""first"", ""second""};\n  }\n\n  public String [] getStrings() {\n    return strings; // Noncompliant\n  }\n\n  public void setStrings(String [] strings) {\n    this.strings = strings;  // Noncompliant\n  }\n}\n\npublic class B {\n\n  private A a = new A();  // At this point a.strings = {""first"", ""second""};\n\n  public void wreakHavoc() {\n    a.getStrings()[0] = ""yellow"";  // a.strings = {""yellow"", ""second""};\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass A {\n  private String [] strings;\n\n  public A () {\n    strings = new String[]{""first"", ""second""};\n  }\n\n  public String [] getStrings() {\n    return strings.clone();\n  }\n\n  public void setStrings(String [] strings) {\n    this.strings = strings.clone();\n  }\n}\n\npublic class B {\n\n  private A a = new A();  // At this point a.strings = {""first"", ""second""};\n\n  public void wreakHavoc() {\n    a.getStrings()[0] = ""yellow"";  // a.strings = {""first"", ""second""};\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/374"">MITRE, CWE-374</a> - Passing Mutable Objects to an Untrusted Method </li>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/375"">MITRE, CWE-375</a> - Returning a Mutable Object to an Untrusted Caller </li>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/OTdGBQ"">CERT, OBJ05-J.</a> - Do not return references to private mutable class members </li>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/HTdGBQ"">CERT, OBJ06-J.</a> - Defensively copy mutable inputs and mutable internal components\n  </li>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/VzZGBQ"">CERT, OBJ13-J.</a> - Ensure that references to mutable objects are not exposed </li>\n</ul>'}]",[],['squid:S2384'],,,,
java:S2386,java,"Mutable fields should not be ""public static""",2023-06-14T03:41:52+0000,"<p>There is no good reason to have a mutable object as the <code>public</code> (by default), <code>static</code> member of an <code>interface</code>.
Such variables should be moved into classes and their visibility lowered.</p>
<p>Similarly, mutable <code>static</code> members of classes and enumerations which are accessed directly, rather than through getters and setters,
should be protected to the degree possible. That can be done by reducing visibility or making the field <code>final</code> if appropriate.</p>
<p>Note that making a mutable field, such as an array, <code>final</code> will keep the variable from being reassigned, but doing so has no effect on
the mutability of the internal state of the array (i.e. it doesn’t accomplish the goal).</p>
<p>This rule raises issues for <code>public static</code> array, <code>Collection</code>, <code>Date</code>, and <code>awt.Point</code> members.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public interface MyInterface {
  public static String [] strings; // Noncompliant
}

public class A {
  public static String [] strings1 = {""first"",""second""};  // Noncompliant
  public static String [] strings2 = {""first"",""second""};  // Noncompliant
  public static List&lt;String&gt; strings3 = new ArrayList&lt;&gt;();  // Noncompliant
  // ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/582"">MITRE, CWE-582</a> - Array Declared Public, Final, and Static </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/607"">MITRE, CWE-607</a> - Public Static Final Field References Mutable Object </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/LjdGBQ"">CERT, OBJ01-J.</a> - Limit accessibility of fields </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/VzZGBQ"">CERT, OBJ13-J.</a> - Ensure that references to mutable objects are not exposed </li>
</ul>","<p>There is no good reason to have a mutable object as the <code>public</code> (by default), <code>static</code> member of an <code>interface</code>.
Such variables should be moved into classes and their visibility lowered.</p>
<p>Similarly, mutable <code>static</code> members of classes and enumerations which are accessed directly, rather than through getters and setters,
should be protected to the degree possible. That can be done by reducing visibility or making the field <code>final</code> if appropriate.</p>
<p>Note that making a mutable field, such as an array, <code>final</code> will keep the variable from being reassigned, but doing so has no effect on
the mutability of the internal state of the array (i.e. it doesn’t accomplish the goal).</p>
<p>This rule raises issues for <code>public static</code> array, <code>Collection</code>, <code>Date</code>, and <code>awt.Point</code> members.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public interface MyInterface {
  public static String [] strings; // Noncompliant
}

public class A {
  public static String [] strings1 = {""first"",""second""};  // Noncompliant
  public static String [] strings2 = {""first"",""second""};  // Noncompliant
  public static List&lt;String&gt; strings3 = new ArrayList&lt;&gt;();  // Noncompliant
  // ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/582"">MITRE, CWE-582</a> - Array Declared Public, Final, and Static </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/607"">MITRE, CWE-607</a> - Public Static Final Field References Mutable Object </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/LjdGBQ"">CERT, OBJ01-J.</a> - Limit accessibility of fields </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/VzZGBQ"">CERT, OBJ13-J.</a> - Ensure that references to mutable objects are not exposed </li>
</ul>",MINOR,READY,False,[],"['cert', 'cwe', 'unpredictable']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,15min,CONSTANT_ISSUE,15min,False,MAIN,False,"[{'key': 'default', 'content': '<p>There is no good reason to have a mutable object as the <code>public</code> (by default), <code>static</code> member of an <code>interface</code>.\nSuch variables should be moved into classes and their visibility lowered.</p>\n<p>Similarly, mutable <code>static</code> members of classes and enumerations which are accessed directly, rather than through getters and setters,\nshould be protected to the degree possible. That can be done by reducing visibility or making the field <code>final</code> if appropriate.</p>\n<p>Note that making a mutable field, such as an array, <code>final</code> will keep the variable from being reassigned, but doing so has no effect on\nthe mutability of the internal state of the array (i.e. it doesn’t accomplish the goal).</p>\n<p>This rule raises issues for <code>public static</code> array, <code>Collection</code>, <code>Date</code>, and <code>awt.Point</code> members.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface MyInterface {\n  public static String [] strings; // Noncompliant\n}\n\npublic class A {\n  public static String [] strings1 = {""first"",""second""};  // Noncompliant\n  public static String [] strings2 = {""first"",""second""};  // Noncompliant\n  public static List&lt;String&gt; strings3 = new ArrayList&lt;&gt;();  // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/582"">MITRE, CWE-582</a> - Array Declared Public, Final, and Static </li>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/607"">MITRE, CWE-607</a> - Public Static Final Field References Mutable Object </li>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/LjdGBQ"">CERT, OBJ01-J.</a> - Limit accessibility of fields </li>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/VzZGBQ"">CERT, OBJ13-J.</a> - Ensure that references to mutable objects are not exposed </li>\n</ul>'}]",[],['squid:S2386'],,,,
java:S2387,java,Child class fields should not shadow parent class fields,2023-06-14T03:41:52+0000,"<p>Having a variable with the same name in two unrelated classes is fine, but do the same thing within a class hierarchy and you’ll get confusion at
best, chaos at worst.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Fruit {
  protected Season ripe;
  protected Color flesh;

  // ...
}

public class Raspberry extends Fruit {
  private boolean ripe;  // Noncompliant
  private static Color FLESH; // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Fruit {
  protected Season ripe;
  protected Color flesh;

  // ...
}

public class Raspberry extends Fruit {
  private boolean ripened;
  private static Color FLESH_COLOR;

}
</pre>
<h2>Exceptions</h2>
<p>This rule ignores same-name fields that are <code>static</code> in both the parent and child classes. This rule ignores <code>private</code> parent
class fields, but in all other such cases, the child class field should be renamed.</p>
<pre>
public class Fruit {
  private Season ripe;
  // ...
}

public class Raspberry extends Fruit {
  private Season ripe;  // Compliant as parent field 'ripe' is anyway not visible from Raspberry
  // ...
}
</pre>","<p>Having a variable with the same name in two unrelated classes is fine, but do the same thing within a class hierarchy and you’ll get confusion at
best, chaos at worst.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Fruit {
  protected Season ripe;
  protected Color flesh;

  // ...
}

public class Raspberry extends Fruit {
  private boolean ripe;  // Noncompliant
  private static Color FLESH; // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Fruit {
  protected Season ripe;
  protected Color flesh;

  // ...
}

public class Raspberry extends Fruit {
  private boolean ripened;
  private static Color FLESH_COLOR;

}
</pre>
<h2>Exceptions</h2>
<p>This rule ignores same-name fields that are <code>static</code> in both the parent and child classes. This rule ignores <code>private</code> parent
class fields, but in all other such cases, the child class field should be renamed.</p>
<pre>
public class Fruit {
  private Season ripe;
  // ...
}

public class Raspberry extends Fruit {
  private Season ripe;  // Compliant as parent field 'ripe' is anyway not visible from Raspberry
  // ...
}
</pre>",BLOCKER,READY,False,[],['confusing'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,MAIN,False,"[{'key': 'default', 'content': ""<p>Having a variable with the same name in two unrelated classes is fine, but do the same thing within a class hierarchy and you’ll get confusion at\nbest, chaos at worst.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit {\n  protected Season ripe;\n  protected Color flesh;\n\n  // ...\n}\n\npublic class Raspberry extends Fruit {\n  private boolean ripe;  // Noncompliant\n  private static Color FLESH; // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Fruit {\n  protected Season ripe;\n  protected Color flesh;\n\n  // ...\n}\n\npublic class Raspberry extends Fruit {\n  private boolean ripened;\n  private static Color FLESH_COLOR;\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule ignores same-name fields that are <code>static</code> in both the parent and child classes. This rule ignores <code>private</code> parent\nclass fields, but in all other such cases, the child class field should be renamed.</p>\n<pre>\npublic class Fruit {\n  private Season ripe;\n  // ...\n}\n\npublic class Raspberry extends Fruit {\n  private Season ripe;  // Compliant as parent field 'ripe' is anyway not visible from Raspberry\n  // ...\n}\n</pre>""}]",[],['squid:S2387'],,,,
java:S2388,java,Inner class calls to super class methods should be unambiguous,2023-06-14T03:41:52+0000,"<p>When an inner class extends another class, and both its outer class and its parent class have a method with the same name, calls to that method can
be confusing. The compiler will resolve the call to the superclass method, but maintainers may be confused, so the superclass method should be called
explicitly, using <code>super.</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Parent {
  public void foo() { ... }
}

public class Outer {

  public void foo() { ... }

  public class Inner extends Parent {

    public void doTheThing() {
      foo();  // Noncompliant; was Outer.this.foo() intended instead?
      // ...
    }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Parent {
  public void foo() { ... }
}

public class Outer {

  public void foo() { ... }

  public class Inner extends Parent {

    public void doTheThing() {
      super.foo();
      // ...
    }
  }
}
</pre>","<p>When an inner class extends another class, and both its outer class and its parent class have a method with the same name, calls to that method can
be confusing. The compiler will resolve the call to the superclass method, but maintainers may be confused, so the superclass method should be called
explicitly, using <code>super.</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Parent {
  public void foo() { ... }
}

public class Outer {

  public void foo() { ... }

  public class Inner extends Parent {

    public void doTheThing() {
      foo();  // Noncompliant; was Outer.this.foo() intended instead?
      // ...
    }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Parent {
  public void foo() { ... }
}

public class Outer {

  public void foo() { ... }

  public class Inner extends Parent {

    public void doTheThing() {
      super.foo();
      // ...
    }
  }
}
</pre>",MAJOR,READY,False,[],['pitfall'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>When an inner class extends another class, and both its outer class and its parent class have a method with the same name, calls to that method can\nbe confusing. The compiler will resolve the call to the superclass method, but maintainers may be confused, so the superclass method should be called\nexplicitly, using <code>super.</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Parent {\n  public void foo() { ... }\n}\n\npublic class Outer {\n\n  public void foo() { ... }\n\n  public class Inner extends Parent {\n\n    public void doTheThing() {\n      foo();  // Noncompliant; was Outer.this.foo() intended instead?\n      // ...\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Parent {\n  public void foo() { ... }\n}\n\npublic class Outer {\n\n  public void foo() { ... }\n\n  public class Inner extends Parent {\n\n    public void doTheThing() {\n      super.foo();\n      // ...\n    }\n  }\n}\n</pre>'}]",[],['squid:S2388'],,,,
java:S3358,java,Ternary operators should not be nested,2023-06-14T03:41:52+0000,"<p>Just because you <em>can</em> do something, doesn’t mean you should, and that’s the case with nested ternary operations. Nesting ternary operators
results in the kind of code that may seem clear as day when you write it, but six months later will leave maintainers (or worse - future you)
scratching their heads and cursing.</p>
<p>Instead, err on the side of clarity, and use another line to express the nested operation as a separate statement.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public String getReadableStatus(Job j) {
  return j.isRunning() ? ""Running"" : j.hasErrors() ? ""Failed"" : ""Succeeded"";  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public String getReadableStatus(Job j) {
  if (j.isRunning()) {
    return ""Running"";
  }
  return j.hasErrors() ? ""Failed"" : ""Succeeded"";
}
</pre>","<p>Just because you <em>can</em> do something, doesn’t mean you should, and that’s the case with nested ternary operations. Nesting ternary operators
results in the kind of code that may seem clear as day when you write it, but six months later will leave maintainers (or worse - future you)
scratching their heads and cursing.</p>
<p>Instead, err on the side of clarity, and use another line to express the nested operation as a separate statement.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public String getReadableStatus(Job j) {
  return j.isRunning() ? ""Running"" : j.hasErrors() ? ""Failed"" : ""Succeeded"";  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public String getReadableStatus(Job j) {
  if (j.isRunning()) {
    return ""Running"";
  }
  return j.hasErrors() ? ""Failed"" : ""Succeeded"";
}
</pre>",MAJOR,READY,False,[],['confusing'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>Just because you <em>can</em> do something, doesn’t mean you should, and that’s the case with nested ternary operations. Nesting ternary operators\nresults in the kind of code that may seem clear as day when you write it, but six months later will leave maintainers (or worse - future you)\nscratching their heads and cursing.</p>\n<p>Instead, err on the side of clarity, and use another line to express the nested operation as a separate statement.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic String getReadableStatus(Job j) {\n  return j.isRunning() ? ""Running"" : j.hasErrors() ? ""Failed"" : ""Succeeded"";  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic String getReadableStatus(Job j) {\n  if (j.isRunning()) {\n    return ""Running"";\n  }\n  return j.hasErrors() ? ""Failed"" : ""Succeeded"";\n}\n</pre>'}]",[],['squid:S3358'],,,,
java:S5413,java,'List.remove()' should not be used in ascending 'for' loops,2023-06-14T03:41:52+0000,"<p>When <code>List.remove()</code> is called it will shrink the list. If this is done inside the ascending loop iterating through all elements it will
skip the element after the removed index.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void removeFrom(List&lt;String&gt; list) {
  // expected: iterate over all the elements of the list
  for (int i = 0; i &lt; list.size(); i++) {
    if (list.get(i).isEmpty()) {
      // actual: remaining elements are shifted, so the one immediately following will be skipped
      list.remove(i); // Noncompliant
    }
  }
}
</pre>
<h2>Compliant Solution</h2>
<p>You can either adjust the loop index to account for the change in the size of the list</p>
<pre>
static void removeFrom(List&lt;String&gt; list) {
    // expected: iterate over all the elements of the list
    for (int i = 0; i &lt; list.size(); i++) {
      if (list.get(i).isEmpty()) {
        // actual: remaining elements are shifted, so the one immediately following will be skipped
        list.remove(i);
        i--;
      }
    }
  }
</pre>
<p>Or preferably it’s probably better to rely on Java 8’s <code>removeIf</code> method</p>
<pre>
 static void removeFrom(List&lt;String&gt; list) {
    list.removeIf(String::isEmpty);
  }
</pre>
<p>&nbsp;</p>
<h2>Exceptions</h2>
<p>The descending loop doesn’t have this issue, because the index will be correct when we loop in descending order</p>
<pre>
void removeFrom(List&lt;String&gt; list) {
  for (int i = list.size() - 1; i &gt;= 0; i--) {
    if (list.get(i).isEmpty()) {
      list.remove(i);
    }
  }
}
</pre>
<p>&nbsp;</p>","<p>When <code>List.remove()</code> is called it will shrink the list. If this is done inside the ascending loop iterating through all elements it will
skip the element after the removed index.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void removeFrom(List&lt;String&gt; list) {
  // expected: iterate over all the elements of the list
  for (int i = 0; i &lt; list.size(); i++) {
    if (list.get(i).isEmpty()) {
      // actual: remaining elements are shifted, so the one immediately following will be skipped
      list.remove(i); // Noncompliant
    }
  }
}
</pre>
<h2>Compliant Solution</h2>
<p>You can either adjust the loop index to account for the change in the size of the list</p>
<pre>
static void removeFrom(List&lt;String&gt; list) {
    // expected: iterate over all the elements of the list
    for (int i = 0; i &lt; list.size(); i++) {
      if (list.get(i).isEmpty()) {
        // actual: remaining elements are shifted, so the one immediately following will be skipped
        list.remove(i);
        i--;
      }
    }
  }
</pre>
<p>Or preferably it’s probably better to rely on Java 8’s <code>removeIf</code> method</p>
<pre>
 static void removeFrom(List&lt;String&gt; list) {
    list.removeIf(String::isEmpty);
  }
</pre>
<p>&nbsp;</p>
<h2>Exceptions</h2>
<p>The descending loop doesn’t have this issue, because the index will be correct when we loop in descending order</p>
<pre>
void removeFrom(List&lt;String&gt; list) {
  for (int i = list.size() - 1; i &gt;= 0; i--) {
    if (list.get(i).isEmpty()) {
      list.remove(i);
    }
  }
}
</pre>
<p>&nbsp;</p>",MAJOR,READY,False,[],[],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>When <code>List.remove()</code> is called it will shrink the list. If this is done inside the ascending loop iterating through all elements it will\nskip the element after the removed index.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid removeFrom(List&lt;String&gt; list) {\n  // expected: iterate over all the elements of the list\n  for (int i = 0; i &lt; list.size(); i++) {\n    if (list.get(i).isEmpty()) {\n      // actual: remaining elements are shifted, so the one immediately following will be skipped\n      list.remove(i); // Noncompliant\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<p>You can either adjust the loop index to account for the change in the size of the list</p>\n<pre>\nstatic void removeFrom(List&lt;String&gt; list) {\n    // expected: iterate over all the elements of the list\n    for (int i = 0; i &lt; list.size(); i++) {\n      if (list.get(i).isEmpty()) {\n        // actual: remaining elements are shifted, so the one immediately following will be skipped\n        list.remove(i);\n        i--;\n      }\n    }\n  }\n</pre>\n<p>Or preferably it’s probably better to rely on Java 8’s <code>removeIf</code> method</p>\n<pre>\n static void removeFrom(List&lt;String&gt; list) {\n    list.removeIf(String::isEmpty);\n  }\n</pre>\n<p>&nbsp;</p>\n<h2>Exceptions</h2>\n<p>The descending loop doesn’t have this issue, because the index will be correct when we loop in descending order</p>\n<pre>\nvoid removeFrom(List&lt;String&gt; list) {\n  for (int i = list.size() - 1; i &gt;= 0; i--) {\n    if (list.get(i).isEmpty()) {\n      list.remove(i);\n    }\n  }\n}\n</pre>\n<p>&nbsp;</p>'}]",[],['squid:S5413'],,,,
java:S5776,java,Exception testing via JUnit ExpectedException rule should not be mixed with other assertions,2023-06-14T03:41:52+0000,"<p>When testing exception via <code>org.junit.rules.ExpectedException</code> any code after the raised exception will not be executed, so adding
subsequent assertions is wrong and misleading. This rule raises an issue when an assertion is done after the ""expect(…​)"" invocation, only the code
throwing the expected exception should be after ""expect(…​)"".</p>
<p>You should consider using <a
href=""https://github.com/junit-team/junit4/wiki/Exception-testing#using-assertthrows-method"">org.junit.Assert.assertThrows</a> instead, it’s available
since JUnit 4.13 and it allows additional subsequent assertions.</p>
<p>Alternatively, you could use <a href=""https://github.com/junit-team/junit4/wiki/Exception-testing#trycatch-idiom"">try-catch idiom</a> for JUnit
version &lt; 4.13 or if your project does not support lambdas.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@Rule
public ExpectedException thrown = ExpectedException.none();

@Test
public void test() throws IndexOutOfBoundsException {
  thrown.expect(IndexOutOfBoundsException.class); // Noncompliant
  Object o = get();
  // This test pass since execution will never get past this line.
  Assert.assertEquals(0, 1);
}

private Object get() {
  throw new IndexOutOfBoundsException();
}
</pre>
<h2>Compliant Solution</h2>
<ul>
  <li> For JUnit &gt;= 4.13, use <a
  href=""https://github.com/junit-team/junit4/wiki/Exception-testing#using-assertthrows-method"">org.junit.Assert.assertThrows</a>: </li>
</ul>
<pre>
Assert.assertThrows(IndexOutOfBoundsException.class, () -&gt; get());
// This test correctly fails.
Assert.assertEquals(0, 1);
</pre>
<ul>
  <li> For JUnit &lt; 4.13, use the <a href=""https://github.com/junit-team/junit4/wiki/Exception-testing#trycatch-idiom"">try-catch idiom</a>: </li>
</ul>
<pre>
try {
  get();
  Assert.fail(""Expected an IndexOutOfBoundsException to be thrown"");
} catch (IndexOutOfBoundsException e) {}
Assert.assertEquals(0, 1); // Correctly fails.
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://github.com/junit-team/junit4/wiki/Exception-testing"">JUnit exception testing documentation</a> </li>
</ul>","<p>When testing exception via <code>org.junit.rules.ExpectedException</code> any code after the raised exception will not be executed, so adding
subsequent assertions is wrong and misleading. This rule raises an issue when an assertion is done after the ""expect(…​)"" invocation, only the code
throwing the expected exception should be after ""expect(…​)"".</p>
<p>You should consider using <a
href=""https://github.com/junit-team/junit4/wiki/Exception-testing#using-assertthrows-method"">org.junit.Assert.assertThrows</a> instead, it’s available
since JUnit 4.13 and it allows additional subsequent assertions.</p>
<p>Alternatively, you could use <a href=""https://github.com/junit-team/junit4/wiki/Exception-testing#trycatch-idiom"">try-catch idiom</a> for JUnit
version &lt; 4.13 or if your project does not support lambdas.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@Rule
public ExpectedException thrown = ExpectedException.none();

@Test
public void test() throws IndexOutOfBoundsException {
  thrown.expect(IndexOutOfBoundsException.class); // Noncompliant
  Object o = get();
  // This test pass since execution will never get past this line.
  Assert.assertEquals(0, 1);
}

private Object get() {
  throw new IndexOutOfBoundsException();
}
</pre>
<h2>Compliant Solution</h2>
<ul>
  <li> For JUnit &gt;= 4.13, use <a
  href=""https://github.com/junit-team/junit4/wiki/Exception-testing#using-assertthrows-method"">org.junit.Assert.assertThrows</a>: </li>
</ul>
<pre>
Assert.assertThrows(IndexOutOfBoundsException.class, () -&gt; get());
// This test correctly fails.
Assert.assertEquals(0, 1);
</pre>
<ul>
  <li> For JUnit &lt; 4.13, use the <a href=""https://github.com/junit-team/junit4/wiki/Exception-testing#trycatch-idiom"">try-catch idiom</a>: </li>
</ul>
<pre>
try {
  get();
  Assert.fail(""Expected an IndexOutOfBoundsException to be thrown"");
} catch (IndexOutOfBoundsException e) {}
Assert.assertEquals(0, 1); // Correctly fails.
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://github.com/junit-team/junit4/wiki/Exception-testing"">JUnit exception testing documentation</a> </li>
</ul>",MAJOR,READY,False,[],"['junit', 'tests']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,10min,CONSTANT_ISSUE,10min,False,TEST,False,"[{'key': 'default', 'content': '<p>When testing exception via <code>org.junit.rules.ExpectedException</code> any code after the raised exception will not be executed, so adding\nsubsequent assertions is wrong and misleading. This rule raises an issue when an assertion is done after the ""expect(…\u200b)"" invocation, only the code\nthrowing the expected exception should be after ""expect(…\u200b)"".</p>\n<p>You should consider using <a\nhref=""https://github.com/junit-team/junit4/wiki/Exception-testing#using-assertthrows-method"">org.junit.Assert.assertThrows</a> instead, it’s available\nsince JUnit 4.13 and it allows additional subsequent assertions.</p>\n<p>Alternatively, you could use <a href=""https://github.com/junit-team/junit4/wiki/Exception-testing#trycatch-idiom"">try-catch idiom</a> for JUnit\nversion &lt; 4.13 or if your project does not support lambdas.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Rule\npublic ExpectedException thrown = ExpectedException.none();\n\n@Test\npublic void test() throws IndexOutOfBoundsException {\n  thrown.expect(IndexOutOfBoundsException.class); // Noncompliant\n  Object o = get();\n  // This test pass since execution will never get past this line.\n  Assert.assertEquals(0, 1);\n}\n\nprivate Object get() {\n  throw new IndexOutOfBoundsException();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<ul>\n  <li> For JUnit &gt;= 4.13, use <a\n  href=""https://github.com/junit-team/junit4/wiki/Exception-testing#using-assertthrows-method"">org.junit.Assert.assertThrows</a>: </li>\n</ul>\n<pre>\nAssert.assertThrows(IndexOutOfBoundsException.class, () -&gt; get());\n// This test correctly fails.\nAssert.assertEquals(0, 1);\n</pre>\n<ul>\n  <li> For JUnit &lt; 4.13, use the <a href=""https://github.com/junit-team/junit4/wiki/Exception-testing#trycatch-idiom"">try-catch idiom</a>: </li>\n</ul>\n<pre>\ntry {\n  get();\n  Assert.fail(""Expected an IndexOutOfBoundsException to be thrown"");\n} catch (IndexOutOfBoundsException e) {}\nAssert.assertEquals(0, 1); // Correctly fails.\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://github.com/junit-team/junit4/wiki/Exception-testing"">JUnit exception testing documentation</a> </li>\n</ul>'}]",[],['squid:S5776'],,,,
java:S5778,java,Only one method invocation is expected when testing runtime exceptions,2023-06-14T03:41:52+0000,"<p>When verifying that code raises a runtime exception, a good practice is to avoid having multiple method calls inside the tested code, to be
explicit about which method call is expected to raise the exception.</p>
<p>It increases the clarity of the test, and avoid incorrect testing when another method is actually raising the exception.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@Test
public void testToString() {
  // Do you expect get() or toString() throwing the exception?
  org.junit.Assert.assertThrows(IndexOutOfBoundsException.class, () -&gt; get().toString());
}

@Test
public void testToStringTryCatchIdiom() {
  try {
    // Do you expect get() or toString() throwing the exception?
    get().toString();
    Assert.fail(""Expected an IndexOutOfBoundsException to be thrown"");
  } catch (IndexOutOfBoundsException e) {
    // Test exception message...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@Test
public void testToString() {
   Object obj = get();
   Assert.assertThrows(IndexOutOfBoundsException.class, () -&gt; obj.toString());
}

@Test
public void testToStringTryCatchIdiom() {
  Object obj = get();
  try {
    obj.toString();
    Assert.fail(""Expected an IndexOutOfBoundsException to be thrown"");
  } catch (IndexOutOfBoundsException e) {
    // Test exception message...
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://github.com/junit-team/junit4/wiki/Exception-testing"">JUnit exception testing documentation</a> </li>
</ul>","<p>When verifying that code raises a runtime exception, a good practice is to avoid having multiple method calls inside the tested code, to be
explicit about which method call is expected to raise the exception.</p>
<p>It increases the clarity of the test, and avoid incorrect testing when another method is actually raising the exception.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@Test
public void testToString() {
  // Do you expect get() or toString() throwing the exception?
  org.junit.Assert.assertThrows(IndexOutOfBoundsException.class, () -&gt; get().toString());
}

@Test
public void testToStringTryCatchIdiom() {
  try {
    // Do you expect get() or toString() throwing the exception?
    get().toString();
    Assert.fail(""Expected an IndexOutOfBoundsException to be thrown"");
  } catch (IndexOutOfBoundsException e) {
    // Test exception message...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@Test
public void testToString() {
   Object obj = get();
   Assert.assertThrows(IndexOutOfBoundsException.class, () -&gt; obj.toString());
}

@Test
public void testToStringTryCatchIdiom() {
  Object obj = get();
  try {
    obj.toString();
    Assert.fail(""Expected an IndexOutOfBoundsException to be thrown"");
  } catch (IndexOutOfBoundsException e) {
    // Test exception message...
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://github.com/junit-team/junit4/wiki/Exception-testing"">JUnit exception testing documentation</a> </li>
</ul>",MAJOR,READY,False,[],"['junit', 'tests']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,TEST,False,"[{'key': 'default', 'content': '<p>When verifying that code raises a runtime exception, a good practice is to avoid having multiple method calls inside the tested code, to be\nexplicit about which method call is expected to raise the exception.</p>\n<p>It increases the clarity of the test, and avoid incorrect testing when another method is actually raising the exception.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Test\npublic void testToString() {\n  // Do you expect get() or toString() throwing the exception?\n  org.junit.Assert.assertThrows(IndexOutOfBoundsException.class, () -&gt; get().toString());\n}\n\n@Test\npublic void testToStringTryCatchIdiom() {\n  try {\n    // Do you expect get() or toString() throwing the exception?\n    get().toString();\n    Assert.fail(""Expected an IndexOutOfBoundsException to be thrown"");\n  } catch (IndexOutOfBoundsException e) {\n    // Test exception message...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Test\npublic void testToString() {\n   Object obj = get();\n   Assert.assertThrows(IndexOutOfBoundsException.class, () -&gt; obj.toString());\n}\n\n@Test\npublic void testToStringTryCatchIdiom() {\n  Object obj = get();\n  try {\n    obj.toString();\n    Assert.fail(""Expected an IndexOutOfBoundsException to be thrown"");\n  } catch (IndexOutOfBoundsException e) {\n    // Test exception message...\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://github.com/junit-team/junit4/wiki/Exception-testing"">JUnit exception testing documentation</a> </li>\n</ul>'}]",[],['squid:S5778'],,,,
java:S1174,java,"""Object.finalize()"" should remain protected (versus public) when overriding",2023-06-14T03:41:52+0000,"<p>The contract of the <code>Object.finalize()</code> method is clear: only the Garbage Collector is supposed to call this method.</p>
<p>Making this method public is misleading, because it implies that any caller can use it.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass {

  @Override
  public void finalize() {    // Noncompliant
    /* ... */
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/583"">MITRE, CWE-583</a> - finalize() Method Declared Public </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/4jZGBQ"">CERT, MET12-J.</a> - Do not use finalizers </li>
</ul>","<p>The contract of the <code>Object.finalize()</code> method is clear: only the Garbage Collector is supposed to call this method.</p>
<p>Making this method public is misleading, because it implies that any caller can use it.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass {

  @Override
  public void finalize() {    // Noncompliant
    /* ... */
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/583"">MITRE, CWE-583</a> - finalize() Method Declared Public </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/4jZGBQ"">CERT, MET12-J.</a> - Do not use finalizers </li>
</ul>",CRITICAL,READY,False,[],"['cert', 'cwe']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,10min,CONSTANT_ISSUE,10min,False,MAIN,False,"[{'key': 'default', 'content': '<p>The contract of the <code>Object.finalize()</code> method is clear: only the Garbage Collector is supposed to call this method.</p>\n<p>Making this method public is misleading, because it implies that any caller can use it.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  @Override\n  public void finalize() {    // Noncompliant\n    /* ... */\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/583"">MITRE, CWE-583</a> - finalize() Method Declared Public </li>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/4jZGBQ"">CERT, MET12-J.</a> - Do not use finalizers </li>\n</ul>'}]",[],['squid:S1174'],,,,
java:S2143,java,"""java.time"" classes should be used for dates and times",2023-06-14T03:41:52+0000,"<p>The old, much-derided <code>Date</code> and <code>Calendar</code> classes have always been confusing and difficult to use properly, particularly in
a multi-threaded context. <code>JodaTime</code> has long been a popular alternative, but now an even better option is built-in. Java 8’s JSR 310
implementation offers specific classes for:</p>
<table>
  <colgroup>
    <col style=""width: 50%;"">
    <col style=""width: 50%;"">
  </colgroup>
  <thead>
    <tr>
      <th>Class</th>
      <th>Use for</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><p>LocalDate</p></td>
      <td><p>a date, without time of day, offset, or zone</p></td>
    </tr>
    <tr>
      <td><p>LocalTime</p></td>
      <td><p>the time of day, without date, offset, or zone</p></td>
    </tr>
    <tr>
      <td><p>LocalDateTime</p></td>
      <td><p>the date and time, without offset, or zone</p></td>
    </tr>
    <tr>
      <td><p>OffsetDate</p></td>
      <td><p>a date with an offset such as +02:00, without time of day, or zone</p></td>
    </tr>
    <tr>
      <td><p>OffsetTime</p></td>
      <td><p>the time of day with an offset such as +02:00, without date, or zone</p></td>
    </tr>
    <tr>
      <td><p>OffsetDateTime</p></td>
      <td><p>the date and time with an offset such as +02:00, without a zone</p></td>
    </tr>
    <tr>
      <td><p>ZonedDateTime</p></td>
      <td><p>the date and time with a time zone and offset</p></td>
    </tr>
    <tr>
      <td><p>YearMonth</p></td>
      <td><p>a year and month</p></td>
    </tr>
    <tr>
      <td><p>MonthDay</p></td>
      <td><p>month and day</p></td>
    </tr>
    <tr>
      <td><p>Year/MonthOfDay/DayOfWeek/…​</p></td>
      <td><p>classes for the important fields</p></td>
    </tr>
    <tr>
      <td><p>DateTimeFields</p></td>
      <td><p>stores a map of field-value pairs which may be invalid</p></td>
    </tr>
    <tr>
      <td><p>Calendrical</p></td>
      <td><p>access to the low-level API</p></td>
    </tr>
    <tr>
      <td><p>Period</p></td>
      <td><p>a descriptive amount of time, such as ""2 months and 3 days""</p></td>
    </tr>
  </tbody>
</table>
<h2>Noncompliant Code Example</h2>
<pre>
Date now = new Date();  // Noncompliant
DateFormat df = new SimpleDateFormat(""dd.MM.yyyy"");
Calendar christmas  = Calendar.getInstance();  // Noncompliant
christmas.setTime(df.parse(""25.12.2020""));
</pre>
<h2>Compliant Solution</h2>
<pre>
LocalDate now = LocalDate.now();  // gets calendar date. no time component
LocalTime now2 = LocalTime.now(); // gets current time. no date component
LocalDate christmas = LocalDate.of(2020,12,25);
</pre>","<p>The old, much-derided <code>Date</code> and <code>Calendar</code> classes have always been confusing and difficult to use properly, particularly in
a multi-threaded context. <code>JodaTime</code> has long been a popular alternative, but now an even better option is built-in. Java 8’s JSR 310
implementation offers specific classes for:</p>
<table>
  <colgroup>
    <col style=""width: 50%;"">
    <col style=""width: 50%;"">
  </colgroup>
  <thead>
    <tr>
      <th>Class</th>
      <th>Use for</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><p>LocalDate</p></td>
      <td><p>a date, without time of day, offset, or zone</p></td>
    </tr>
    <tr>
      <td><p>LocalTime</p></td>
      <td><p>the time of day, without date, offset, or zone</p></td>
    </tr>
    <tr>
      <td><p>LocalDateTime</p></td>
      <td><p>the date and time, without offset, or zone</p></td>
    </tr>
    <tr>
      <td><p>OffsetDate</p></td>
      <td><p>a date with an offset such as +02:00, without time of day, or zone</p></td>
    </tr>
    <tr>
      <td><p>OffsetTime</p></td>
      <td><p>the time of day with an offset such as +02:00, without date, or zone</p></td>
    </tr>
    <tr>
      <td><p>OffsetDateTime</p></td>
      <td><p>the date and time with an offset such as +02:00, without a zone</p></td>
    </tr>
    <tr>
      <td><p>ZonedDateTime</p></td>
      <td><p>the date and time with a time zone and offset</p></td>
    </tr>
    <tr>
      <td><p>YearMonth</p></td>
      <td><p>a year and month</p></td>
    </tr>
    <tr>
      <td><p>MonthDay</p></td>
      <td><p>month and day</p></td>
    </tr>
    <tr>
      <td><p>Year/MonthOfDay/DayOfWeek/…​</p></td>
      <td><p>classes for the important fields</p></td>
    </tr>
    <tr>
      <td><p>DateTimeFields</p></td>
      <td><p>stores a map of field-value pairs which may be invalid</p></td>
    </tr>
    <tr>
      <td><p>Calendrical</p></td>
      <td><p>access to the low-level API</p></td>
    </tr>
    <tr>
      <td><p>Period</p></td>
      <td><p>a descriptive amount of time, such as ""2 months and 3 days""</p></td>
    </tr>
  </tbody>
</table>
<h2>Noncompliant Code Example</h2>
<pre>
Date now = new Date();  // Noncompliant
DateFormat df = new SimpleDateFormat(""dd.MM.yyyy"");
Calendar christmas  = Calendar.getInstance();  // Noncompliant
christmas.setTime(df.parse(""25.12.2020""));
</pre>
<h2>Compliant Solution</h2>
<pre>
LocalDate now = LocalDate.now();  // gets calendar date. no time component
LocalTime now2 = LocalTime.now(); // gets current time. no date component
LocalDate christmas = LocalDate.of(2020,12,25);
</pre>",MAJOR,READY,False,[],"['java8', 'pitfall']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,15min,CONSTANT_ISSUE,15min,False,MAIN,False,"[{'key': 'default', 'content': '<p>The old, much-derided <code>Date</code> and <code>Calendar</code> classes have always been confusing and difficult to use properly, particularly in\na multi-threaded context. <code>JodaTime</code> has long been a popular alternative, but now an even better option is built-in. Java 8’s JSR 310\nimplementation offers specific classes for:</p>\n<table>\n  <colgroup>\n    <col style=""width: 50%;"">\n    <col style=""width: 50%;"">\n  </colgroup>\n  <thead>\n    <tr>\n      <th>Class</th>\n      <th>Use for</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><p>LocalDate</p></td>\n      <td><p>a date, without time of day, offset, or zone</p></td>\n    </tr>\n    <tr>\n      <td><p>LocalTime</p></td>\n      <td><p>the time of day, without date, offset, or zone</p></td>\n    </tr>\n    <tr>\n      <td><p>LocalDateTime</p></td>\n      <td><p>the date and time, without offset, or zone</p></td>\n    </tr>\n    <tr>\n      <td><p>OffsetDate</p></td>\n      <td><p>a date with an offset such as +02:00, without time of day, or zone</p></td>\n    </tr>\n    <tr>\n      <td><p>OffsetTime</p></td>\n      <td><p>the time of day with an offset such as +02:00, without date, or zone</p></td>\n    </tr>\n    <tr>\n      <td><p>OffsetDateTime</p></td>\n      <td><p>the date and time with an offset such as +02:00, without a zone</p></td>\n    </tr>\n    <tr>\n      <td><p>ZonedDateTime</p></td>\n      <td><p>the date and time with a time zone and offset</p></td>\n    </tr>\n    <tr>\n      <td><p>YearMonth</p></td>\n      <td><p>a year and month</p></td>\n    </tr>\n    <tr>\n      <td><p>MonthDay</p></td>\n      <td><p>month and day</p></td>\n    </tr>\n    <tr>\n      <td><p>Year/MonthOfDay/DayOfWeek/…\u200b</p></td>\n      <td><p>classes for the important fields</p></td>\n    </tr>\n    <tr>\n      <td><p>DateTimeFields</p></td>\n      <td><p>stores a map of field-value pairs which may be invalid</p></td>\n    </tr>\n    <tr>\n      <td><p>Calendrical</p></td>\n      <td><p>access to the low-level API</p></td>\n    </tr>\n    <tr>\n      <td><p>Period</p></td>\n      <td><p>a descriptive amount of time, such as ""2 months and 3 days""</p></td>\n    </tr>\n  </tbody>\n</table>\n<h2>Noncompliant Code Example</h2>\n<pre>\nDate now = new Date();  // Noncompliant\nDateFormat df = new SimpleDateFormat(""dd.MM.yyyy"");\nCalendar christmas  = Calendar.getInstance();  // Noncompliant\nchristmas.setTime(df.parse(""25.12.2020""));\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nLocalDate now = LocalDate.now();  // gets calendar date. no time component\nLocalTime now2 = LocalTime.now(); // gets current time. no date component\nLocalDate christmas = LocalDate.of(2020,12,25);\n</pre>'}]",[],['squid:S2143'],,,,
java:S4201,java,"Null checks should not be used with ""instanceof""",2023-06-14T03:41:52+0000,"<p>There’s no need to null test in conjunction with an <code>instanceof</code> test. <code>null</code> is not an <code>instanceof</code> anything, so
a null check is redundant.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (x != null &amp;&amp; x instanceof MyClass) { ... }  // Noncompliant

if (x == null || ! x instanceof MyClass) { ... } // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
if (x instanceof MyClass) { ... }

if (! x instanceof MyClass) { ... }
</pre>","<p>There’s no need to null test in conjunction with an <code>instanceof</code> test. <code>null</code> is not an <code>instanceof</code> anything, so
a null check is redundant.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (x != null &amp;&amp; x instanceof MyClass) { ... }  // Noncompliant

if (x == null || ! x instanceof MyClass) { ... } // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
if (x instanceof MyClass) { ... }

if (! x instanceof MyClass) { ... }
</pre>",MINOR,READY,False,[],['redundant'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>There’s no need to null test in conjunction with an <code>instanceof</code> test. <code>null</code> is not an <code>instanceof</code> anything, so\na null check is redundant.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (x != null &amp;&amp; x instanceof MyClass) { ... }  // Noncompliant\n\nif (x == null || ! x instanceof MyClass) { ... } // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (x instanceof MyClass) { ... }\n\nif (! x instanceof MyClass) { ... }\n</pre>'}]",[],['squid:S4201'],,,,
java:S4449,java,Nullness of parameters should be guaranteed,2023-06-14T03:41:52+0000,"<p>When using null-related annotations at global scope level, for instance using <code>javax.annotation.ParametersAreNonnullByDefault</code> (from
JSR-305) at package level, it means that all the parameters to all the methods included in the package will, or should, be considered
Non-<code>null</code>. It is equivalent to annotating every parameter in every method with non-null annotations (such as <code>@Nonnull</code>).</p>
<p>The rule raises an issue every time a parameter could be <code>null</code> for a method invocation, where the method is annotated as forbidding
null parameters.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@javax.annotation.ParametersAreNonnullByDefault
class A {

  void foo() {
    bar(getValue()); // Noncompliant - method 'bar' do not expect 'null' values as parameter
  }

  void bar(Object o) { // 'o' is by contract expected never to be null
    // ...
  }

  @javax.annotation.CheckForNull
  abstract Object getValue();
}
</pre>
<h2>Compliant Solution</h2>
<p>Two solutions are possible:</p>
<ul>
  <li> The signature of the method is correct, and null check should be done prior to the call. </li>
  <li> The signature of the method is not coherent and should be annotated to allow null values being passed as parameter </li>
</ul>
<pre>
@javax.annotation.ParametersAreNonnullByDefault
abstract class A {

  void foo() {
      Object o = getValue();
      if (o != null) {
        bar(o); // Compliant - 'o' can not be null
      }
  }

  void bar(Object o) {
    // ...
  }

  @javax.annotation.CheckForNull
  abstract Object getValue();
}
</pre>
<p>or</p>
<pre>
@javax.annotation.ParametersAreNonnullByDefault
abstract class A {

  void foo() {
    bar(getValue());
  }

  void bar(@javax.annotation.Nullable Object o) { // annotation was missing
    // ...
  }

  @javax.annotation.CheckForNull
  abstract Object getValue();
}
</pre>","<p>When using null-related annotations at global scope level, for instance using <code>javax.annotation.ParametersAreNonnullByDefault</code> (from
JSR-305) at package level, it means that all the parameters to all the methods included in the package will, or should, be considered
Non-<code>null</code>. It is equivalent to annotating every parameter in every method with non-null annotations (such as <code>@Nonnull</code>).</p>
<p>The rule raises an issue every time a parameter could be <code>null</code> for a method invocation, where the method is annotated as forbidding
null parameters.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@javax.annotation.ParametersAreNonnullByDefault
class A {

  void foo() {
    bar(getValue()); // Noncompliant - method 'bar' do not expect 'null' values as parameter
  }

  void bar(Object o) { // 'o' is by contract expected never to be null
    // ...
  }

  @javax.annotation.CheckForNull
  abstract Object getValue();
}
</pre>
<h2>Compliant Solution</h2>
<p>Two solutions are possible:</p>
<ul>
  <li> The signature of the method is correct, and null check should be done prior to the call. </li>
  <li> The signature of the method is not coherent and should be annotated to allow null values being passed as parameter </li>
</ul>
<pre>
@javax.annotation.ParametersAreNonnullByDefault
abstract class A {

  void foo() {
      Object o = getValue();
      if (o != null) {
        bar(o); // Compliant - 'o' can not be null
      }
  }

  void bar(Object o) {
    // ...
  }

  @javax.annotation.CheckForNull
  abstract Object getValue();
}
</pre>
<p>or</p>
<pre>
@javax.annotation.ParametersAreNonnullByDefault
abstract class A {

  void foo() {
    bar(getValue());
  }

  void bar(@javax.annotation.Nullable Object o) { // annotation was missing
    // ...
  }

  @javax.annotation.CheckForNull
  abstract Object getValue();
}
</pre>",MAJOR,READY,False,[],[],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,10min,CONSTANT_ISSUE,10min,False,MAIN,False,"[{'key': 'default', 'content': ""<p>When using null-related annotations at global scope level, for instance using <code>javax.annotation.ParametersAreNonnullByDefault</code> (from\nJSR-305) at package level, it means that all the parameters to all the methods included in the package will, or should, be considered\nNon-<code>null</code>. It is equivalent to annotating every parameter in every method with non-null annotations (such as <code>@Nonnull</code>).</p>\n<p>The rule raises an issue every time a parameter could be <code>null</code> for a method invocation, where the method is annotated as forbidding\nnull parameters.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@javax.annotation.ParametersAreNonnullByDefault\nclass A {\n\n  void foo() {\n    bar(getValue()); // Noncompliant - method 'bar' do not expect 'null' values as parameter\n  }\n\n  void bar(Object o) { // 'o' is by contract expected never to be null\n    // ...\n  }\n\n  @javax.annotation.CheckForNull\n  abstract Object getValue();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<p>Two solutions are possible:</p>\n<ul>\n  <li> The signature of the method is correct, and null check should be done prior to the call. </li>\n  <li> The signature of the method is not coherent and should be annotated to allow null values being passed as parameter </li>\n</ul>\n<pre>\n@javax.annotation.ParametersAreNonnullByDefault\nabstract class A {\n\n  void foo() {\n      Object o = getValue();\n      if (o != null) {\n        bar(o); // Compliant - 'o' can not be null\n      }\n  }\n\n  void bar(Object o) {\n    // ...\n  }\n\n  @javax.annotation.CheckForNull\n  abstract Object getValue();\n}\n</pre>\n<p>or</p>\n<pre>\n@javax.annotation.ParametersAreNonnullByDefault\nabstract class A {\n\n  void foo() {\n    bar(getValue());\n  }\n\n  void bar(@javax.annotation.Nullable Object o) { // annotation was missing\n    // ...\n  }\n\n  @javax.annotation.CheckForNull\n  abstract Object getValue();\n}\n</pre>""}]",[],['squid:S4449'],,,,
java:S5411,java,"Avoid using boxed ""Boolean"" types directly in boolean expressions",2023-06-14T03:41:52+0000,"<p>When boxed type <code>java.lang.Boolean</code> is used as an expression to determine the control flow (as described in <a
href=""https://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.2.5"">Java Language Specification §4.2.5 The <code>boolean</code> Type and
boolean Values</a>) it will throw a <code>NullPointerException</code> if the value is <code>null</code> (as defined in <a
href=""https://docs.oracle.com/javase/specs/jls/se8/html/jls-5.html#jls-5.1.8"">Java Language Specification §5.1.8 Unboxing Conversion</a>).</p>
<p>It is safer to avoid such conversion altogether and handle the <code>null</code> value explicitly.</p>
<p>Note, however, that no issues will be raised for Booleans that have already been null-checked.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Boolean b = getBoolean();
if (b) {  // Noncompliant, it will throw NPE when b == null
  foo();
} else {
  bar();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
Boolean b = getBoolean();
if (Boolean.TRUE.equals(b)) {
  foo();
} else {
  bar();  // will be invoked for both b == false and b == null
}


Boolean b = getBoolean();
if(b != null){
  String test = b ? ""test"" : """";
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://docs.oracle.com/javase/specs/jls/se8/html/jls-5.html#jls-5.1.8"">Java Language Specification §5.1.8 Unboxing Conversion</a>
  </li>
</ul>","<p>When boxed type <code>java.lang.Boolean</code> is used as an expression to determine the control flow (as described in <a
href=""https://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.2.5"">Java Language Specification §4.2.5 The <code>boolean</code> Type and
boolean Values</a>) it will throw a <code>NullPointerException</code> if the value is <code>null</code> (as defined in <a
href=""https://docs.oracle.com/javase/specs/jls/se8/html/jls-5.html#jls-5.1.8"">Java Language Specification §5.1.8 Unboxing Conversion</a>).</p>
<p>It is safer to avoid such conversion altogether and handle the <code>null</code> value explicitly.</p>
<p>Note, however, that no issues will be raised for Booleans that have already been null-checked.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Boolean b = getBoolean();
if (b) {  // Noncompliant, it will throw NPE when b == null
  foo();
} else {
  bar();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
Boolean b = getBoolean();
if (Boolean.TRUE.equals(b)) {
  foo();
} else {
  bar();  // will be invoked for both b == false and b == null
}


Boolean b = getBoolean();
if(b != null){
  String test = b ? ""test"" : """";
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://docs.oracle.com/javase/specs/jls/se8/html/jls-5.html#jls-5.1.8"">Java Language Specification §5.1.8 Unboxing Conversion</a>
  </li>
</ul>",MINOR,READY,False,[],['pitfall'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>When boxed type <code>java.lang.Boolean</code> is used as an expression to determine the control flow (as described in <a\nhref=""https://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.2.5"">Java Language Specification §4.2.5 The <code>boolean</code> Type and\nboolean Values</a>) it will throw a <code>NullPointerException</code> if the value is <code>null</code> (as defined in <a\nhref=""https://docs.oracle.com/javase/specs/jls/se8/html/jls-5.html#jls-5.1.8"">Java Language Specification §5.1.8 Unboxing Conversion</a>).</p>\n<p>It is safer to avoid such conversion altogether and handle the <code>null</code> value explicitly.</p>\n<p>Note, however, that no issues will be raised for Booleans that have already been null-checked.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nBoolean b = getBoolean();\nif (b) {  // Noncompliant, it will throw NPE when b == null\n  foo();\n} else {\n  bar();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nBoolean b = getBoolean();\nif (Boolean.TRUE.equals(b)) {\n  foo();\n} else {\n  bar();  // will be invoked for both b == false and b == null\n}\n\n\nBoolean b = getBoolean();\nif(b != null){\n  String test = b ? ""test"" : """";\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://docs.oracle.com/javase/specs/jls/se8/html/jls-5.html#jls-5.1.8"">Java Language Specification §5.1.8 Unboxing Conversion</a>\n  </li>\n</ul>'}]",[],['squid:S5411'],,,,
java:S1068,java,"Unused ""private"" fields should be removed",2023-06-14T03:41:52+0000,"<p>If a <code>private</code> field is declared but not used in the program, it can be considered dead code and should therefore be removed. This will
improve maintainability because developers will not wonder what the variable is used for.</p>
<p>Note that this rule does not take reflection into account, which means that issues will be raised on <code>private</code> fields that are only
accessed using the reflection API.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass {
  private int foo = 42;

  public int compute(int a) {
    return a * 42;
  }

}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass {
  public int compute(int a) {
    return a * 42;
  }
}
</pre>
<h2>Exceptions</h2>
<p>The rule admits 3 exceptions:</p>
<ul>
  <li> Serialization id fields </li>
  <li> Annotated fields </li>
  <li> Fields from classes with native methods </li>
</ul>
<h3>Serialization id fields</h3>
<p>The Java serialization runtime associates with each serializable class a version number, called <code>serialVersionUID</code>, which is used during
deserialization to verify that the sender and receiver of a serialized object have loaded classes for that object that are compatible with respect to
serialization.</p>
<p>A serializable class can declare its own <code>serialVersionUID</code> explicitly by declaring a field named <code>serialVersionUID</code> that
must be static, final, and of type long. By definition those <code>serialVersionUID</code> fields should not be reported by this rule:</p>
<pre>
public class MyClass implements java.io.Serializable {
  private static final long serialVersionUID = 42L;
}
</pre>
<h3>Annotated fields</h3>
<p>The unused field in this class will not be reported by the rule as it is annotated.</p>
<pre>
public class MyClass {
  @SomeAnnotation
  private int unused;
}
</pre>
<h3>Fields from classes with native methods</h3>
<p>The unused field in this class will not be reported by the rule as it might be used by native code.</p>
<pre>
public class MyClass {
  private int unused = 42;
  private native static void doSomethingNative();
}
</pre>","<p>If a <code>private</code> field is declared but not used in the program, it can be considered dead code and should therefore be removed. This will
improve maintainability because developers will not wonder what the variable is used for.</p>
<p>Note that this rule does not take reflection into account, which means that issues will be raised on <code>private</code> fields that are only
accessed using the reflection API.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass {
  private int foo = 42;

  public int compute(int a) {
    return a * 42;
  }

}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass {
  public int compute(int a) {
    return a * 42;
  }
}
</pre>
<h2>Exceptions</h2>
<p>The rule admits 3 exceptions:</p>
<ul>
  <li> Serialization id fields </li>
  <li> Annotated fields </li>
  <li> Fields from classes with native methods </li>
</ul>
<h3>Serialization id fields</h3>
<p>The Java serialization runtime associates with each serializable class a version number, called <code>serialVersionUID</code>, which is used during
deserialization to verify that the sender and receiver of a serialized object have loaded classes for that object that are compatible with respect to
serialization.</p>
<p>A serializable class can declare its own <code>serialVersionUID</code> explicitly by declaring a field named <code>serialVersionUID</code> that
must be static, final, and of type long. By definition those <code>serialVersionUID</code> fields should not be reported by this rule:</p>
<pre>
public class MyClass implements java.io.Serializable {
  private static final long serialVersionUID = 42L;
}
</pre>
<h3>Annotated fields</h3>
<p>The unused field in this class will not be reported by the rule as it is annotated.</p>
<pre>
public class MyClass {
  @SomeAnnotation
  private int unused;
}
</pre>
<h3>Fields from classes with native methods</h3>
<p>The unused field in this class will not be reported by the rule as it might be used by native code.</p>
<pre>
public class MyClass {
  private int unused = 42;
  private native static void doSomethingNative();
}
</pre>",MAJOR,READY,False,[],['unused'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>If a <code>private</code> field is declared but not used in the program, it can be considered dead code and should therefore be removed. This will\nimprove maintainability because developers will not wonder what the variable is used for.</p>\n<p>Note that this rule does not take reflection into account, which means that issues will be raised on <code>private</code> fields that are only\naccessed using the reflection API.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  private int foo = 42;\n\n  public int compute(int a) {\n    return a * 42;\n  }\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  public int compute(int a) {\n    return a * 42;\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>The rule admits 3 exceptions:</p>\n<ul>\n  <li> Serialization id fields </li>\n  <li> Annotated fields </li>\n  <li> Fields from classes with native methods </li>\n</ul>\n<h3>Serialization id fields</h3>\n<p>The Java serialization runtime associates with each serializable class a version number, called <code>serialVersionUID</code>, which is used during\ndeserialization to verify that the sender and receiver of a serialized object have loaded classes for that object that are compatible with respect to\nserialization.</p>\n<p>A serializable class can declare its own <code>serialVersionUID</code> explicitly by declaring a field named <code>serialVersionUID</code> that\nmust be static, final, and of type long. By definition those <code>serialVersionUID</code> fields should not be reported by this rule:</p>\n<pre>\npublic class MyClass implements java.io.Serializable {\n  private static final long serialVersionUID = 42L;\n}\n</pre>\n<h3>Annotated fields</h3>\n<p>The unused field in this class will not be reported by the rule as it is annotated.</p>\n<pre>\npublic class MyClass {\n  @SomeAnnotation\n  private int unused;\n}\n</pre>\n<h3>Fields from classes with native methods</h3>\n<p>The unused field in this class will not be reported by the rule as it might be used by native code.</p>\n<pre>\npublic class MyClass {\n  private int unused = 42;\n  private native static void doSomethingNative();\n}\n</pre>'}]",[],['squid:S1068'],,,,
java:S1170,java,"Public constants and fields initialized at declaration should be ""static final"" rather than merely ""final""",2023-06-14T03:41:52+0000,"<p>Making a <code>public</code> constant just <code>final</code> as opposed to <code>static final</code> leads to duplicating its value for every
instance of the class, uselessly increasing the amount of memory required to execute the application.</p>
<p>Further, when a non-<code>public</code>, <code>final</code> field isn’t also <code>static</code>, it implies that different instances can have
different values. However, initializing a non-<code>static final</code> field in its declaration forces every instance to have the same value. So such
fields should either be made <code>static</code> or initialized in the constructor.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Myclass {
  public final int THRESHOLD = 3;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Myclass {
  public static final int THRESHOLD = 3;    // Compliant
}
</pre>
<h2>Exceptions</h2>
<p>No issues are reported on final fields of inner classes whose type is not a primitive or a String. Indeed according to the Java specification:</p>
<blockquote>
  <p>An inner class is a nested class that is not explicitly or implicitly declared static. Inner classes may not declare static initializers (§8.7)
  or member interfaces. Inner classes may not declare static members, unless they are compile-time constant fields (§15.28).</p>
</blockquote>","<p>Making a <code>public</code> constant just <code>final</code> as opposed to <code>static final</code> leads to duplicating its value for every
instance of the class, uselessly increasing the amount of memory required to execute the application.</p>
<p>Further, when a non-<code>public</code>, <code>final</code> field isn’t also <code>static</code>, it implies that different instances can have
different values. However, initializing a non-<code>static final</code> field in its declaration forces every instance to have the same value. So such
fields should either be made <code>static</code> or initialized in the constructor.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Myclass {
  public final int THRESHOLD = 3;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Myclass {
  public static final int THRESHOLD = 3;    // Compliant
}
</pre>
<h2>Exceptions</h2>
<p>No issues are reported on final fields of inner classes whose type is not a primitive or a String. Indeed according to the Java specification:</p>
<blockquote>
  <p>An inner class is a nested class that is not explicitly or implicitly declared static. Inner classes may not declare static initializers (§8.7)
  or member interfaces. Inner classes may not declare static members, unless they are compile-time constant fields (§15.28).</p>
</blockquote>",MINOR,READY,False,[],['convention'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,2min,CONSTANT_ISSUE,2min,False,ALL,False,"[{'key': 'default', 'content': '<p>Making a <code>public</code> constant just <code>final</code> as opposed to <code>static final</code> leads to duplicating its value for every\ninstance of the class, uselessly increasing the amount of memory required to execute the application.</p>\n<p>Further, when a non-<code>public</code>, <code>final</code> field isn’t also <code>static</code>, it implies that different instances can have\ndifferent values. However, initializing a non-<code>static final</code> field in its declaration forces every instance to have the same value. So such\nfields should either be made <code>static</code> or initialized in the constructor.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Myclass {\n  public final int THRESHOLD = 3;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Myclass {\n  public static final int THRESHOLD = 3;    // Compliant\n}\n</pre>\n<h2>Exceptions</h2>\n<p>No issues are reported on final fields of inner classes whose type is not a primitive or a String. Indeed according to the Java specification:</p>\n<blockquote>\n  <p>An inner class is a nested class that is not explicitly or implicitly declared static. Inner classes may not declare static initializers (§8.7)\n  or member interfaces. Inner classes may not declare static members, unless they are compile-time constant fields (§15.28).</p>\n</blockquote>'}]",[],['squid:S1170'],,,,
java:S1171,java,Only static class initializers should be used,2023-06-14T03:41:52+0000,"<p>Non-static initializers are rarely used, and can be confusing for most developers because they only run when new class instances are created. When
possible, non-static initializers should be refactored into standard constructors or field initializers.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class MyClass {
  private static final Map&lt;String, String&gt; MY_MAP = new HashMap&lt;String, String&gt;() {

    // Noncompliant - HashMap should be extended only to add behavior, not for initialization
    {
      put(""a"", ""b"");
    }

  };
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass {
  private static final Map&lt;String, String&gt; MY_MAP = new HashMap&lt;String, String&gt;();

  static {
    MY_MAP.put(""a"", ""b"");
  }
}
</pre>
<p>or using Java 9 <code>Map.of</code>:</p>
<pre>
class MyClass {
  // Compliant
  private static final Map&lt;String, String&gt; MY_MAP = java.util.Map.of(""a"", ""b"");
}
</pre>
<p>or using Guava:</p>
<pre>
class MyClass {
  // Compliant
  private static final Map&lt;String, String&gt; MY_MAP = ImmutableMap.of(""a"", ""b"");
}
</pre>","<p>Non-static initializers are rarely used, and can be confusing for most developers because they only run when new class instances are created. When
possible, non-static initializers should be refactored into standard constructors or field initializers.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class MyClass {
  private static final Map&lt;String, String&gt; MY_MAP = new HashMap&lt;String, String&gt;() {

    // Noncompliant - HashMap should be extended only to add behavior, not for initialization
    {
      put(""a"", ""b"");
    }

  };
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass {
  private static final Map&lt;String, String&gt; MY_MAP = new HashMap&lt;String, String&gt;();

  static {
    MY_MAP.put(""a"", ""b"");
  }
}
</pre>
<p>or using Java 9 <code>Map.of</code>:</p>
<pre>
class MyClass {
  // Compliant
  private static final Map&lt;String, String&gt; MY_MAP = java.util.Map.of(""a"", ""b"");
}
</pre>
<p>or using Guava:</p>
<pre>
class MyClass {
  // Compliant
  private static final Map&lt;String, String&gt; MY_MAP = ImmutableMap.of(""a"", ""b"");
}
</pre>",MAJOR,READY,False,[],['pitfall'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,30min,CONSTANT_ISSUE,30min,False,ALL,False,"[{'key': 'default', 'content': '<p>Non-static initializers are rarely used, and can be confusing for most developers because they only run when new class instances are created. When\npossible, non-static initializers should be refactored into standard constructors or field initializers.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass {\n  private static final Map&lt;String, String&gt; MY_MAP = new HashMap&lt;String, String&gt;() {\n\n    // Noncompliant - HashMap should be extended only to add behavior, not for initialization\n    {\n      put(""a"", ""b"");\n    }\n\n  };\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n  private static final Map&lt;String, String&gt; MY_MAP = new HashMap&lt;String, String&gt;();\n\n  static {\n    MY_MAP.put(""a"", ""b"");\n  }\n}\n</pre>\n<p>or using Java 9 <code>Map.of</code>:</p>\n<pre>\nclass MyClass {\n  // Compliant\n  private static final Map&lt;String, String&gt; MY_MAP = java.util.Map.of(""a"", ""b"");\n}\n</pre>\n<p>or using Guava:</p>\n<pre>\nclass MyClass {\n  // Compliant\n  private static final Map&lt;String, String&gt; MY_MAP = ImmutableMap.of(""a"", ""b"");\n}\n</pre>'}]",[],['squid:S1171'],,,,
java:S1172,java,Unused method parameters should be removed,2023-06-14T03:41:52+0000,"<p>Unused parameters are misleading. Whatever the values passed to such parameters, the behavior will be the same.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void doSomething(int a, int b) {     // ""b"" is unused
  compute(a);
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void doSomething(int a) {
  compute(a);
}
</pre>
<h2>Exceptions</h2>
<p>The rule will not raise issues for unused parameters:</p>
<ul>
  <li> that are annotated with <code>@javax.enterprise.event.Observes</code> </li>
  <li> in overrides and implementation methods </li>
  <li> in interface <code>default</code> methods </li>
  <li> in non-private methods that only <code>throw</code> or that have empty bodies </li>
  <li> in annotated methods, unless the annotation is <code>@SuppressWarning(""unchecked"")</code> or <code>@SuppressWarning(""rawtypes"")</code>, in
  which case the annotation will be ignored </li>
  <li> in overridable methods (non-final, or not member of a final class, non-static, non-private), if the parameter is documented with a proper
  javadoc. </li>
</ul>
<pre>
@Override
void doSomething(int a, int b) {     // no issue reported on b
  compute(a);
}

public void foo(String s) {
  // designed to be extended but noop in standard case
}

protected void bar(String s) {
  //open-closed principle
}

public void qix(String s) {
  throw new UnsupportedOperationException(""This method should be implemented in subclasses"");
}

/**
 * @param s This string may be use for further computation in overriding classes
 */
protected void foobar(int a, String s) { // no issue, method is overridable and unused parameter has proper javadoc
  compute(a);
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/5dUxBQ"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed
  </li>
</ul>","<p>Unused parameters are misleading. Whatever the values passed to such parameters, the behavior will be the same.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void doSomething(int a, int b) {     // ""b"" is unused
  compute(a);
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void doSomething(int a) {
  compute(a);
}
</pre>
<h2>Exceptions</h2>
<p>The rule will not raise issues for unused parameters:</p>
<ul>
  <li> that are annotated with <code>@javax.enterprise.event.Observes</code> </li>
  <li> in overrides and implementation methods </li>
  <li> in interface <code>default</code> methods </li>
  <li> in non-private methods that only <code>throw</code> or that have empty bodies </li>
  <li> in annotated methods, unless the annotation is <code>@SuppressWarning(""unchecked"")</code> or <code>@SuppressWarning(""rawtypes"")</code>, in
  which case the annotation will be ignored </li>
  <li> in overridable methods (non-final, or not member of a final class, non-static, non-private), if the parameter is documented with a proper
  javadoc. </li>
</ul>
<pre>
@Override
void doSomething(int a, int b) {     // no issue reported on b
  compute(a);
}

public void foo(String s) {
  // designed to be extended but noop in standard case
}

protected void bar(String s) {
  //open-closed principle
}

public void qix(String s) {
  throw new UnsupportedOperationException(""This method should be implemented in subclasses"");
}

/**
 * @param s This string may be use for further computation in overriding classes
 */
protected void foobar(int a, String s) { // no issue, method is overridable and unused parameter has proper javadoc
  compute(a);
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/5dUxBQ"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed
  </li>
</ul>",MAJOR,READY,False,[],"['cert', 'unused']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>Unused parameters are misleading. Whatever the values passed to such parameters, the behavior will be the same.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid doSomething(int a, int b) {     // ""b"" is unused\n  compute(a);\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvoid doSomething(int a) {\n  compute(a);\n}\n</pre>\n<h2>Exceptions</h2>\n<p>The rule will not raise issues for unused parameters:</p>\n<ul>\n  <li> that are annotated with <code>@javax.enterprise.event.Observes</code> </li>\n  <li> in overrides and implementation methods </li>\n  <li> in interface <code>default</code> methods </li>\n  <li> in non-private methods that only <code>throw</code> or that have empty bodies </li>\n  <li> in annotated methods, unless the annotation is <code>@SuppressWarning(""unchecked"")</code> or <code>@SuppressWarning(""rawtypes"")</code>, in\n  which case the annotation will be ignored </li>\n  <li> in overridable methods (non-final, or not member of a final class, non-static, non-private), if the parameter is documented with a proper\n  javadoc. </li>\n</ul>\n<pre>\n@Override\nvoid doSomething(int a, int b) {     // no issue reported on b\n  compute(a);\n}\n\npublic void foo(String s) {\n  // designed to be extended but noop in standard case\n}\n\nprotected void bar(String s) {\n  //open-closed principle\n}\n\npublic void qix(String s) {\n  throw new UnsupportedOperationException(""This method should be implemented in subclasses"");\n}\n\n/**\n * @param s This string may be use for further computation in overriding classes\n */\nprotected void foobar(int a, String s) { // no issue, method is overridable and unused parameter has proper javadoc\n  compute(a);\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/5dUxBQ"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed\n  </li>\n</ul>'}]",[],['squid:S1172'],,,,
java:S1188,java,Anonymous classes should not have too many lines,2023-06-14T03:41:52+0000,"<p>Anonymous classes are a very convenient and compact way to inject a behavior without having to create a dedicated class. But those anonymous inner
classes should be used only if the behavior to be injected can be defined in a few lines of code, otherwise the source code can quickly become
unreadable.</p>","<p>Anonymous classes are a very convenient and compact way to inject a behavior without having to create a dedicated class. But those anonymous inner
classes should be used only if the behavior to be injected can be defined in a few lines of code, otherwise the source code can quickly become
unreadable.</p>",MAJOR,READY,False,[],[],java,Java,"[{'key': 'Max', 'htmlDesc': 'Maximum allowed lines in an anonymous class', 'defaultValue': '20', 'type': 'INTEGER'}]",CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,20min,CONSTANT_ISSUE,20min,False,MAIN,False,"[{'key': 'default', 'content': '<p>Anonymous classes are a very convenient and compact way to inject a behavior without having to create a dedicated class. But those anonymous inner\nclasses should be used only if the behavior to be injected can be defined in a few lines of code, otherwise the source code can quickly become\nunreadable.</p>'}]",[],['squid:S1188'],,,,
java:S2039,java,Member variable visibility should be specified,2023-06-14T03:41:52+0000,"<p>Failing to explicitly declare the visibility of a member variable could result it in having a visibility you don’t expect, and potentially leave it
open to unexpected modification by other classes.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Ball {
    String color=""red"";  // Noncompliant
}
enum A {
  B;
  int a;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Ball {
    private String color=""red"";  // Compliant
}
enum A {
  B;
  private int a;
}
</pre>
<h2>Exceptions</h2>
<p>Members annotated with <code>@VisibleForTesting</code> annotation are ignored, as it indicates that visibility has been purposely relaxed to make
the code testable.</p>
<pre>
class Cone {
  @VisibleForTesting
  Logger logger; // Compliant
}
</pre>
<h2>Deprecated</h2>
<p>This rule is deprecated, and will eventually be removed.</p>","<p>Failing to explicitly declare the visibility of a member variable could result it in having a visibility you don’t expect, and potentially leave it
open to unexpected modification by other classes.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Ball {
    String color=""red"";  // Noncompliant
}
enum A {
  B;
  int a;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Ball {
    private String color=""red"";  // Compliant
}
enum A {
  B;
  private int a;
}
</pre>
<h2>Exceptions</h2>
<p>Members annotated with <code>@VisibleForTesting</code> annotation are ignored, as it indicates that visibility has been purposely relaxed to make
the code testable.</p>
<pre>
class Cone {
  @VisibleForTesting
  Logger logger; // Compliant
}
</pre>
<h2>Deprecated</h2>
<p>This rule is deprecated, and will eventually be removed.</p>",MINOR,DEPRECATED,False,[],[],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,MAIN,False,"[{'key': 'default', 'content': '<p>Failing to explicitly declare the visibility of a member variable could result it in having a visibility you don’t expect, and potentially leave it\nopen to unexpected modification by other classes.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Ball {\n    String color=""red"";  // Noncompliant\n}\nenum A {\n  B;\n  int a;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Ball {\n    private String color=""red"";  // Compliant\n}\nenum A {\n  B;\n  private int a;\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Members annotated with <code>@VisibleForTesting</code> annotation are ignored, as it indicates that visibility has been purposely relaxed to make\nthe code testable.</p>\n<pre>\nclass Cone {\n  @VisibleForTesting\n  Logger logger; // Compliant\n}\n</pre>\n<h2>Deprecated</h2>\n<p>This rule is deprecated, and will eventually be removed.</p>'}]",[],['squid:S2039'],,,,
java:S2140,java,"Methods of ""Random"" that return floating point values should not be used in random integer generation",2023-06-14T03:41:52+0000,"<p>There is no need to multiply the output of <code>Random</code>'s <code>nextDouble</code> method to get a random integer. Use the
<code>nextInt</code> method instead.</p>
<p>This rule raises an issue when the return value of any of <code>Random</code>'s methods that return a floating point value is converted to an
integer.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Random r = new Random();
int rand = (int)r.nextDouble() * 50;  // Noncompliant way to get a pseudo-random value between 0 and 50
int rand2 = (int)r.nextFloat(); // Noncompliant; will always be 0;
</pre>
<h2>Compliant Solution</h2>
<pre>
Random r = new Random();
int rand = r.nextInt(50);  // returns pseudo-random value between 0 and 50
</pre>","<p>There is no need to multiply the output of <code>Random</code>'s <code>nextDouble</code> method to get a random integer. Use the
<code>nextInt</code> method instead.</p>
<p>This rule raises an issue when the return value of any of <code>Random</code>'s methods that return a floating point value is converted to an
integer.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Random r = new Random();
int rand = (int)r.nextDouble() * 50;  // Noncompliant way to get a pseudo-random value between 0 and 50
int rand2 = (int)r.nextFloat(); // Noncompliant; will always be 0;
</pre>
<h2>Compliant Solution</h2>
<pre>
Random r = new Random();
int rand = r.nextInt(50);  // returns pseudo-random value between 0 and 50
</pre>",MINOR,READY,False,[],['clumsy'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': ""<p>There is no need to multiply the output of <code>Random</code>'s <code>nextDouble</code> method to get a random integer. Use the\n<code>nextInt</code> method instead.</p>\n<p>This rule raises an issue when the return value of any of <code>Random</code>'s methods that return a floating point value is converted to an\ninteger.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nRandom r = new Random();\nint rand = (int)r.nextDouble() * 50;  // Noncompliant way to get a pseudo-random value between 0 and 50\nint rand2 = (int)r.nextFloat(); // Noncompliant; will always be 0;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nRandom r = new Random();\nint rand = r.nextInt(50);  // returns pseudo-random value between 0 and 50\n</pre>""}]",[],['squid:S2140'],,,,
java:S2157,java,"""Cloneables"" should implement ""clone""",2023-06-14T03:41:52+0000,"<p>Simply implementing <code>Cloneable</code> without also overriding <code>Object.clone()</code> does not necessarily make the class cloneable. While
the <code>Cloneable</code> interface does not include a <code>clone</code> method, it is required by convention, and ensures true cloneability.
Otherwise the default JVM <code>clone</code> will be used, which copies primitive values and object references from the source to the target. I.e.
without overriding <code>clone</code>, any cloned instances will potentially share members with the source instance.</p>
<p>Removing the <code>Cloneable</code> implementation and providing a good copy constructor is another viable (some say preferable) way of allowing a
class to be copied.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Team implements Cloneable {  // Noncompliant
  private Person coach;
  private List&lt;Person&gt; players;
  public void addPlayer(Person p) {...}
  public Person getCoach() {...}
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Team implements Cloneable {
  private Person coach;
  private List&lt;Person&gt; players;
  public void addPlayer(Person p) { ... }
  public Person getCoach() { ... }

  @Override
  public Object clone() {
    Team clone = (Team) super.clone();
    //...
  }
}
</pre>","<p>Simply implementing <code>Cloneable</code> without also overriding <code>Object.clone()</code> does not necessarily make the class cloneable. While
the <code>Cloneable</code> interface does not include a <code>clone</code> method, it is required by convention, and ensures true cloneability.
Otherwise the default JVM <code>clone</code> will be used, which copies primitive values and object references from the source to the target. I.e.
without overriding <code>clone</code>, any cloned instances will potentially share members with the source instance.</p>
<p>Removing the <code>Cloneable</code> implementation and providing a good copy constructor is another viable (some say preferable) way of allowing a
class to be copied.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Team implements Cloneable {  // Noncompliant
  private Person coach;
  private List&lt;Person&gt; players;
  public void addPlayer(Person p) {...}
  public Person getCoach() {...}
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Team implements Cloneable {
  private Person coach;
  private List&lt;Person&gt; players;
  public void addPlayer(Person p) { ... }
  public Person getCoach() { ... }

  @Override
  public Object clone() {
    Team clone = (Team) super.clone();
    //...
  }
}
</pre>",CRITICAL,READY,False,[],"['api-design', 'convention']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,30min,CONSTANT_ISSUE,30min,False,MAIN,False,"[{'key': 'default', 'content': '<p>Simply implementing <code>Cloneable</code> without also overriding <code>Object.clone()</code> does not necessarily make the class cloneable. While\nthe <code>Cloneable</code> interface does not include a <code>clone</code> method, it is required by convention, and ensures true cloneability.\nOtherwise the default JVM <code>clone</code> will be used, which copies primitive values and object references from the source to the target. I.e.\nwithout overriding <code>clone</code>, any cloned instances will potentially share members with the source instance.</p>\n<p>Removing the <code>Cloneable</code> implementation and providing a good copy constructor is another viable (some say preferable) way of allowing a\nclass to be copied.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Team implements Cloneable {  // Noncompliant\n  private Person coach;\n  private List&lt;Person&gt; players;\n  public void addPlayer(Person p) {...}\n  public Person getCoach() {...}\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Team implements Cloneable {\n  private Person coach;\n  private List&lt;Person&gt; players;\n  public void addPlayer(Person p) { ... }\n  public Person getCoach() { ... }\n\n  @Override\n  public Object clone() {\n    Team clone = (Team) super.clone();\n    //...\n  }\n}\n</pre>'}]",[],['squid:S2157'],,,,
java:S2260,java,Java parser failure,2023-06-14T03:41:52+0000,"<p>When the Java parser fails, it is possible to record the failure as a violation on the file. This way, not only it is possible to track the number
of files that do not parse but also to easily find out why they do not parse.</p>","<p>When the Java parser fails, it is possible to record the failure as a violation on the file. This way, not only it is possible to track the number
of files that do not parse but also to easily find out why they do not parse.</p>",MAJOR,READY,False,[],['suspicious'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,30min,CONSTANT_ISSUE,30min,False,ALL,False,"[{'key': 'default', 'content': '<p>When the Java parser fails, it is possible to record the failure as a violation on the file. This way, not only it is possible to track the number\nof files that do not parse but also to easily find out why they do not parse.</p>'}]",[],['squid:ParsingError'],,,,
java:S4682,java,"""@CheckForNull"" or ""@Nullable"" should not be used on primitive types",2023-06-14T03:41:52+0000,"<p>By definition, primitive types are not Objects and so they can’t be <code>null</code>. Adding <code>@CheckForNull</code> or <code>@Nullable</code>
on primitive types adds confusion and is useless.</p>
<p>This rule raises an issue when <code>@CheckForNull</code> or <code>@Nullable</code> is set on a method returning a primitive type: byte, short,
int, long, float, double, boolean, char.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@CheckForNull
boolean isFoo() {
 ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
boolean isFoo() {
 ...
}
</pre>","<p>By definition, primitive types are not Objects and so they can’t be <code>null</code>. Adding <code>@CheckForNull</code> or <code>@Nullable</code>
on primitive types adds confusion and is useless.</p>
<p>This rule raises an issue when <code>@CheckForNull</code> or <code>@Nullable</code> is set on a method returning a primitive type: byte, short,
int, long, float, double, boolean, char.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@CheckForNull
boolean isFoo() {
 ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
boolean isFoo() {
 ...
}
</pre>",MINOR,READY,False,[],[],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,1min,CONSTANT_ISSUE,1min,False,MAIN,False,"[{'key': 'default', 'content': '<p>By definition, primitive types are not Objects and so they can’t be <code>null</code>. Adding <code>@CheckForNull</code> or <code>@Nullable</code>\non primitive types adds confusion and is useless.</p>\n<p>This rule raises an issue when <code>@CheckForNull</code> or <code>@Nullable</code> is set on a method returning a primitive type: byte, short,\nint, long, float, double, boolean, char.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@CheckForNull\nboolean isFoo() {\n ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nboolean isFoo() {\n ...\n}\n</pre>'}]",[],['squid:S4682'],,,,
java:S5663,java,Simple string literal should be used for single line strings,2023-06-14T03:41:52+0000,"<p>If a string fits on a single line, without concatenation and escaped newlines, you should probably continue to use a string literal.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String question = """"""
              What's the point, really?"""""";
</pre>
<h2>Compliant Solution</h2>
<pre>
String question = ""What's the point, really?"";
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://openjdk.java.net/jeps/378"">JEP 378: Text Blocks</a> </li>
  <li> <a href=""https://cr.openjdk.java.net/~jlaskey/Strings/TextBlocksGuide_v9.html"">Programmer’s Guide To Text Blocks</a>, by Jim Laskey and Stuart
  Marks </li>
</ul>","<p>If a string fits on a single line, without concatenation and escaped newlines, you should probably continue to use a string literal.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String question = """"""
              What's the point, really?"""""";
</pre>
<h2>Compliant Solution</h2>
<pre>
String question = ""What's the point, really?"";
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://openjdk.java.net/jeps/378"">JEP 378: Text Blocks</a> </li>
  <li> <a href=""https://cr.openjdk.java.net/~jlaskey/Strings/TextBlocksGuide_v9.html"">Programmer’s Guide To Text Blocks</a>, by Jim Laskey and Stuart
  Marks </li>
</ul>",MINOR,READY,False,[],['java14'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>If a string fits on a single line, without concatenation and escaped newlines, you should probably continue to use a string literal.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString question = """"""\n              What\'s the point, really?"""""";\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString question = ""What\'s the point, really?"";\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://openjdk.java.net/jeps/378"">JEP 378: Text Blocks</a> </li>\n  <li> <a href=""https://cr.openjdk.java.net/~jlaskey/Strings/TextBlocksGuide_v9.html"">Programmer’s Guide To Text Blocks</a>, by Jim Laskey and Stuart\n  Marks </li>\n</ul>'}]",[],['squid:S5663'],,,,
java:S5669,java,Vararg method arguments should not be confusing,2023-06-14T03:41:52+0000,"<p>Passing single <code>null</code> or primitive array argument to the variable arity method may not work as expected. In the case of
<code>null</code>, it is not passed as array with single element, but the argument itself is <code>null</code>. In the case of a primitive array, if
the formal parameter is <code>Object...</code>, it is passed as a single element array. This may not be obvious to someone not familiar with such
corner cases, and it is probably better to avoid such ambiguities by explicitly casting the argument to the desired type.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class A {
  public static void main(String[] args) {
    vararg(null);  // Noncompliant, prints ""null""
    int[] arr = {1,2,3};
    vararg(arr);  // Noncompliant, prints ""length: 1""
  }

  static void vararg(Object... s) {
    if (s == null) {
      System.out.println(""null"");
    } else {
      System.out.println(""length: "" + s.length);
    }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class A {
  public static void main(String[] args) {
    vararg((Object) null); // prints 1
    Object[] arr = {1,2,3};
    vararg(arr); // prints 3
  }

  static void vararg(Object... s) {
    if (s == null) {
      System.out.println(""null""); // not reached
    } else {
      System.out.println(""length: "" + s.length);
    }
  }
}
</pre>","<p>Passing single <code>null</code> or primitive array argument to the variable arity method may not work as expected. In the case of
<code>null</code>, it is not passed as array with single element, but the argument itself is <code>null</code>. In the case of a primitive array, if
the formal parameter is <code>Object...</code>, it is passed as a single element array. This may not be obvious to someone not familiar with such
corner cases, and it is probably better to avoid such ambiguities by explicitly casting the argument to the desired type.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class A {
  public static void main(String[] args) {
    vararg(null);  // Noncompliant, prints ""null""
    int[] arr = {1,2,3};
    vararg(arr);  // Noncompliant, prints ""length: 1""
  }

  static void vararg(Object... s) {
    if (s == null) {
      System.out.println(""null"");
    } else {
      System.out.println(""length: "" + s.length);
    }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class A {
  public static void main(String[] args) {
    vararg((Object) null); // prints 1
    Object[] arr = {1,2,3};
    vararg(arr); // prints 3
  }

  static void vararg(Object... s) {
    if (s == null) {
      System.out.println(""null""); // not reached
    } else {
      System.out.println(""length: "" + s.length);
    }
  }
}
</pre>",MAJOR,READY,False,[],[],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>Passing single <code>null</code> or primitive array argument to the variable arity method may not work as expected. In the case of\n<code>null</code>, it is not passed as array with single element, but the argument itself is <code>null</code>. In the case of a primitive array, if\nthe formal parameter is <code>Object...</code>, it is passed as a single element array. This may not be obvious to someone not familiar with such\ncorner cases, and it is probably better to avoid such ambiguities by explicitly casting the argument to the desired type.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass A {\n  public static void main(String[] args) {\n    vararg(null);  // Noncompliant, prints ""null""\n    int[] arr = {1,2,3};\n    vararg(arr);  // Noncompliant, prints ""length: 1""\n  }\n\n  static void vararg(Object... s) {\n    if (s == null) {\n      System.out.println(""null"");\n    } else {\n      System.out.println(""length: "" + s.length);\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass A {\n  public static void main(String[] args) {\n    vararg((Object) null); // prints 1\n    Object[] arr = {1,2,3};\n    vararg(arr); // prints 3\n  }\n\n  static void vararg(Object... s) {\n    if (s == null) {\n      System.out.println(""null""); // not reached\n    } else {\n      System.out.println(""length: "" + s.length);\n    }\n  }\n}\n</pre>'}]",[],['squid:S5669'],,,,
java:S1065,java,Unused labels should be removed,2023-06-14T03:41:52+0000,"<p>If a label is declared but not used in the program, it can be considered as dead code and should therefore be removed.</p>
<p>This will improve maintainability as developers will not wonder what this label is used for.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void foo() {
  outer: //label is not used.
  for(int i = 0; i&lt;10; i++) {
    break;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void foo() {
  for(int i = 0; i&lt;10; i++) {
    break;
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/5dUxBQ"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed
  </li>
</ul>","<p>If a label is declared but not used in the program, it can be considered as dead code and should therefore be removed.</p>
<p>This will improve maintainability as developers will not wonder what this label is used for.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void foo() {
  outer: //label is not used.
  for(int i = 0; i&lt;10; i++) {
    break;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void foo() {
  for(int i = 0; i&lt;10; i++) {
    break;
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/5dUxBQ"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed
  </li>
</ul>",MAJOR,READY,False,[],"['cert', 'unused']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,2min,CONSTANT_ISSUE,2min,False,ALL,False,"[{'key': 'default', 'content': '<p>If a label is declared but not used in the program, it can be considered as dead code and should therefore be removed.</p>\n<p>This will improve maintainability as developers will not wonder what this label is used for.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid foo() {\n  outer: //label is not used.\n  for(int i = 0; i&lt;10; i++) {\n    break;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvoid foo() {\n  for(int i = 0; i&lt;10; i++) {\n    break;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/5dUxBQ"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed\n  </li>\n</ul>'}]",[],['squid:S1065'],,,,
java:S1066,java,"Collapsible ""if"" statements should be merged",2023-06-14T03:41:52+0000,"<p>Merging collapsible <code>if</code> statements increases the code’s readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (file != null) {
  if (file.isFile() || file.isDirectory()) {
    /* ... */
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (file != null &amp;&amp; isFileOrDirectory(file)) {
  /* ... */
}

private static boolean isFileOrDirectory(File file) {
  return file.isFile() || file.isDirectory();
}
</pre>","<p>Merging collapsible <code>if</code> statements increases the code’s readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (file != null) {
  if (file.isFile() || file.isDirectory()) {
    /* ... */
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (file != null &amp;&amp; isFileOrDirectory(file)) {
  /* ... */
}

private static boolean isFileOrDirectory(File file) {
  return file.isFile() || file.isDirectory();
}
</pre>",MAJOR,READY,False,[],['clumsy'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>Merging collapsible <code>if</code> statements increases the code’s readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (file != null) {\n  if (file.isFile() || file.isDirectory()) {\n    /* ... */\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (file != null &amp;&amp; isFileOrDirectory(file)) {\n  /* ... */\n}\n\nprivate static boolean isFileOrDirectory(File file) {\n  return file.isFile() || file.isDirectory();\n}\n</pre>'}]",[],['squid:S1066'],,,,
java:S1067,java,Expressions should not be too complex,2023-06-14T03:41:52+0000,"<p>The complexity of an expression is defined by the number of <code>&amp;&amp;</code>, <code>||</code> and <code>condition ? ifTrue : ifFalse</code>
operators it contains.</p>
<p>A single expression’s complexity should not become too high to keep the code readable.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold value of 3:</p>
<pre>
if (((condition1 &amp;&amp; condition2) || (condition3 &amp;&amp; condition4)) &amp;&amp; condition5) { ... }
</pre>
<h2>Compliant Solution</h2>
<pre>
if ( (myFirstCondition() || mySecondCondition()) &amp;&amp; myLastCondition()) { ... }
</pre>
<h2>Exceptions</h2>
<p>No issue is reported inside <code>equals</code> methods, because it is common to compare all the fields of a class for equality inside this kind of
method.</p>","<p>The complexity of an expression is defined by the number of <code>&amp;&amp;</code>, <code>||</code> and <code>condition ? ifTrue : ifFalse</code>
operators it contains.</p>
<p>A single expression’s complexity should not become too high to keep the code readable.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold value of 3:</p>
<pre>
if (((condition1 &amp;&amp; condition2) || (condition3 &amp;&amp; condition4)) &amp;&amp; condition5) { ... }
</pre>
<h2>Compliant Solution</h2>
<pre>
if ( (myFirstCondition() || mySecondCondition()) &amp;&amp; myLastCondition()) { ... }
</pre>
<h2>Exceptions</h2>
<p>No issue is reported inside <code>equals</code> methods, because it is common to compare all the fields of a class for equality inside this kind of
method.</p>",CRITICAL,READY,False,[],['brain-overload'],java,Java,"[{'key': 'max', 'htmlDesc': 'Maximum number of allowed conditional operators in an expression', 'defaultValue': '3', 'type': 'INTEGER'}]",LINEAR_OFFSET,LINEAR_OFFSET,CODE_SMELL,LINEAR_OFFSET,5min,LINEAR_OFFSET,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>The complexity of an expression is defined by the number of <code>&amp;&amp;</code>, <code>||</code> and <code>condition ? ifTrue : ifFalse</code>\noperators it contains.</p>\n<p>A single expression’s complexity should not become too high to keep the code readable.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold value of 3:</p>\n<pre>\nif (((condition1 &amp;&amp; condition2) || (condition3 &amp;&amp; condition4)) &amp;&amp; condition5) { ... }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif ( (myFirstCondition() || mySecondCondition()) &amp;&amp; myLastCondition()) { ... }\n</pre>\n<h2>Exceptions</h2>\n<p>No issue is reported inside <code>equals</code> methods, because it is common to compare all the fields of a class for equality inside this kind of\nmethod.</p>'}]",[],['squid:S1067'],1min,1min,per complexity point above the threshold,
java:S1186,java,Methods should not be empty,2023-06-14T03:41:52+0000,"<p>There are several reasons for a method not to have a method body:</p>
<ul>
  <li> It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. </li>
  <li> It is not yet, or never will be, supported. In this case an <code>UnsupportedOperationException</code> should be thrown. </li>
  <li> The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
public void doSomething() {
}

public void doSomethingElse() {
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@Override
public void doSomething() {
  // Do nothing because of X and Y.
}

@Override
public void doSomethingElse() {
  throw new UnsupportedOperationException();
}
</pre>
<h2>Exceptions</h2>
<p>This does not raise an issue in the following cases:</p>
<ul>
  <li> Non-public default (no-argument) constructors </li>
  <li> Public default (no-argument) constructors when there are other constructors in the class </li>
  <li> Empty methods in abstract classes </li>
  <li> Methods annotated with <code>@org.aspectj.lang.annotation.Pointcut()</code> </li>
</ul>
<pre>
public abstract class Animal {
  void speak() {  // default implementation ignored
  }
}
</pre>","<p>There are several reasons for a method not to have a method body:</p>
<ul>
  <li> It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. </li>
  <li> It is not yet, or never will be, supported. In this case an <code>UnsupportedOperationException</code> should be thrown. </li>
  <li> The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
public void doSomething() {
}

public void doSomethingElse() {
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@Override
public void doSomething() {
  // Do nothing because of X and Y.
}

@Override
public void doSomethingElse() {
  throw new UnsupportedOperationException();
}
</pre>
<h2>Exceptions</h2>
<p>This does not raise an issue in the following cases:</p>
<ul>
  <li> Non-public default (no-argument) constructors </li>
  <li> Public default (no-argument) constructors when there are other constructors in the class </li>
  <li> Empty methods in abstract classes </li>
  <li> Methods annotated with <code>@org.aspectj.lang.annotation.Pointcut()</code> </li>
</ul>
<pre>
public abstract class Animal {
  void speak() {  // default implementation ignored
  }
}
</pre>",CRITICAL,READY,False,[],['suspicious'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>There are several reasons for a method not to have a method body:</p>\n<ul>\n  <li> It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. </li>\n  <li> It is not yet, or never will be, supported. In this case an <code>UnsupportedOperationException</code> should be thrown. </li>\n  <li> The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething() {\n}\n\npublic void doSomethingElse() {\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Override\npublic void doSomething() {\n  // Do nothing because of X and Y.\n}\n\n@Override\npublic void doSomethingElse() {\n  throw new UnsupportedOperationException();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This does not raise an issue in the following cases:</p>\n<ul>\n  <li> Non-public default (no-argument) constructors </li>\n  <li> Public default (no-argument) constructors when there are other constructors in the class </li>\n  <li> Empty methods in abstract classes </li>\n  <li> Methods annotated with <code>@org.aspectj.lang.annotation.Pointcut()</code> </li>\n</ul>\n<pre>\npublic abstract class Animal {\n  void speak() {  // default implementation ignored\n  }\n}\n</pre>'}]",[],['squid:S1186'],,,,
java:S2156,java,"""final"" classes should not have ""protected"" members",2023-06-14T03:41:52+0000,"<p>The difference between <code>private</code> and <code>protected</code> visibility is that child classes can see and use <code>protected</code>
members, but they cannot see <code>private</code> ones. Since a <code>final</code> class will have no children, marking the members of a
<code>final</code> class <code>protected</code> is confusingly pointless.</p>
<p>Note that the <code>protected</code> members of a class can also be seen and used by other classes that are placed within the same package, this
could lead to accidental, unintended access to otherwise private members.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public final class MyFinalClass {

  protected String name = ""Fred"";  // Noncompliant
  protected void setName(String name) {  // Noncompliant
    // ...
  }
</pre>
<h2>Compliant Solution</h2>
<pre>
public final class MyFinalClass {

  private String name = ""Fred"";
  public void setName(String name) {
    // ...
  }
</pre>
<h2>Exceptions</h2>
<p>Members annotated with&nbsp;<code>@VisibleForTesting</code> annotation are ignored, as it indicates that visibility has been purposely relaxed to
make the code testable.</p>
<pre>
public final class MyFinalClass {
  @VisibleForTesting
  protected Logger logger; // Compliant

  @VisibleForTesting
  protected int calculateSomethingComplex(String input) { // Compliant
    // ...
  }
}
</pre>","<p>The difference between <code>private</code> and <code>protected</code> visibility is that child classes can see and use <code>protected</code>
members, but they cannot see <code>private</code> ones. Since a <code>final</code> class will have no children, marking the members of a
<code>final</code> class <code>protected</code> is confusingly pointless.</p>
<p>Note that the <code>protected</code> members of a class can also be seen and used by other classes that are placed within the same package, this
could lead to accidental, unintended access to otherwise private members.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public final class MyFinalClass {

  protected String name = ""Fred"";  // Noncompliant
  protected void setName(String name) {  // Noncompliant
    // ...
  }
</pre>
<h2>Compliant Solution</h2>
<pre>
public final class MyFinalClass {

  private String name = ""Fred"";
  public void setName(String name) {
    // ...
  }
</pre>
<h2>Exceptions</h2>
<p>Members annotated with&nbsp;<code>@VisibleForTesting</code> annotation are ignored, as it indicates that visibility has been purposely relaxed to
make the code testable.</p>
<pre>
public final class MyFinalClass {
  @VisibleForTesting
  protected Logger logger; // Compliant

  @VisibleForTesting
  protected int calculateSomethingComplex(String input) { // Compliant
    // ...
  }
}
</pre>",MINOR,READY,False,[],['confusing'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>The difference between <code>private</code> and <code>protected</code> visibility is that child classes can see and use <code>protected</code>\nmembers, but they cannot see <code>private</code> ones. Since a <code>final</code> class will have no children, marking the members of a\n<code>final</code> class <code>protected</code> is confusingly pointless.</p>\n<p>Note that the <code>protected</code> members of a class can also be seen and used by other classes that are placed within the same package, this\ncould lead to accidental, unintended access to otherwise private members.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic final class MyFinalClass {\n\n  protected String name = ""Fred"";  // Noncompliant\n  protected void setName(String name) {  // Noncompliant\n    // ...\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic final class MyFinalClass {\n\n  private String name = ""Fred"";\n  public void setName(String name) {\n    // ...\n  }\n</pre>\n<h2>Exceptions</h2>\n<p>Members annotated with&nbsp;<code>@VisibleForTesting</code> annotation are ignored, as it indicates that visibility has been purposely relaxed to\nmake the code testable.</p>\n<pre>\npublic final class MyFinalClass {\n  @VisibleForTesting\n  protected Logger logger; // Compliant\n\n  @VisibleForTesting\n  protected int calculateSomethingComplex(String input) { // Compliant\n    // ...\n  }\n}\n</pre>'}]",[],['squid:S2156'],,,,
java:S2274,java,"""Object.wait(...)"" and ""Condition.await(...)"" should be called inside a ""while"" loop",2023-06-14T03:41:52+0000,"<p>According to the documentation of the Java <code>Condition</code> interface:</p>
<blockquote>
  <p>When waiting upon a <code>Condition</code>, a ""spurious wakeup"" is permitted to occur, in general, as a concession to the underlying platform
  semantics. This has little practical impact on most application programs as a Condition should always be waited upon in a loop, testing the state
  predicate that is being waited for. An implementation is free to remove the possibility of spurious wakeups but it is recommended that applications
  programmers always assume that they can occur and so always wait in a loop.</p>
</blockquote>
<p>The same advice is also found for the <code>Object.wait(...)</code> method:</p>
<blockquote>
  <p>waits should always occur in loops, like this one:</p>
  <pre>
synchronized (obj) {
  while (&lt;condition does not hold&gt;){
    obj.wait(timeout);
  }
   ... // Perform action appropriate to condition
}
</pre>
</blockquote>
<h2>Noncompliant Code Example</h2>
<pre>
synchronized (obj) {
  if (!suitableCondition()){
    obj.wait(timeout);   //the thread can wake up even if the condition is still false
  }
   ... // Perform action appropriate to condition
}
</pre>
<h2>Compliant Solution</h2>
<pre>
synchronized (obj) {
  while (!suitableCondition()){
    obj.wait(timeout);
  }
   ... // Perform action appropriate to condition
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/EzdGBQ"">CERT THI03-J.</a> - Always invoke wait() and await() methods inside a loop </li>
</ul>","<p>According to the documentation of the Java <code>Condition</code> interface:</p>
<blockquote>
  <p>When waiting upon a <code>Condition</code>, a ""spurious wakeup"" is permitted to occur, in general, as a concession to the underlying platform
  semantics. This has little practical impact on most application programs as a Condition should always be waited upon in a loop, testing the state
  predicate that is being waited for. An implementation is free to remove the possibility of spurious wakeups but it is recommended that applications
  programmers always assume that they can occur and so always wait in a loop.</p>
</blockquote>
<p>The same advice is also found for the <code>Object.wait(...)</code> method:</p>
<blockquote>
  <p>waits should always occur in loops, like this one:</p>
  <pre>
synchronized (obj) {
  while (&lt;condition does not hold&gt;){
    obj.wait(timeout);
  }
   ... // Perform action appropriate to condition
}
</pre>
</blockquote>
<h2>Noncompliant Code Example</h2>
<pre>
synchronized (obj) {
  if (!suitableCondition()){
    obj.wait(timeout);   //the thread can wake up even if the condition is still false
  }
   ... // Perform action appropriate to condition
}
</pre>
<h2>Compliant Solution</h2>
<pre>
synchronized (obj) {
  while (!suitableCondition()){
    obj.wait(timeout);
  }
   ... // Perform action appropriate to condition
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/EzdGBQ"">CERT THI03-J.</a> - Always invoke wait() and await() methods inside a loop </li>
</ul>",CRITICAL,READY,False,[],"['cert', 'multi-threading']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,20min,CONSTANT_ISSUE,20min,False,ALL,False,"[{'key': 'default', 'content': '<p>According to the documentation of the Java <code>Condition</code> interface:</p>\n<blockquote>\n  <p>When waiting upon a <code>Condition</code>, a ""spurious wakeup"" is permitted to occur, in general, as a concession to the underlying platform\n  semantics. This has little practical impact on most application programs as a Condition should always be waited upon in a loop, testing the state\n  predicate that is being waited for. An implementation is free to remove the possibility of spurious wakeups but it is recommended that applications\n  programmers always assume that they can occur and so always wait in a loop.</p>\n</blockquote>\n<p>The same advice is also found for the <code>Object.wait(...)</code> method:</p>\n<blockquote>\n  <p>waits should always occur in loops, like this one:</p>\n  <pre>\nsynchronized (obj) {\n  while (&lt;condition does not hold&gt;){\n    obj.wait(timeout);\n  }\n   ... // Perform action appropriate to condition\n}\n</pre>\n</blockquote>\n<h2>Noncompliant Code Example</h2>\n<pre>\nsynchronized (obj) {\n  if (!suitableCondition()){\n    obj.wait(timeout);   //the thread can wake up even if the condition is still false\n  }\n   ... // Perform action appropriate to condition\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nsynchronized (obj) {\n  while (!suitableCondition()){\n    obj.wait(timeout);\n  }\n   ... // Perform action appropriate to condition\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/EzdGBQ"">CERT THI03-J.</a> - Always invoke wait() and await() methods inside a loop </li>\n</ul>'}]",[],['squid:S2274'],,,,
java:S3242,java,Method parameters should be declared with base types,2023-06-14T03:41:52+0000,"<p>For maximum reusability, methods should accept parameters with as little specialization as possible. So unless specific features from a child class
are required by a method, a type higher up the class hierarchy should be used instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void printSize(ArrayList&lt;Object&gt; list) {  // Collection can be used instead
    System.out.println(list.size());
}

public static void loop(List&lt;Object&gt; list) { // java.lang.Iterable can be used instead
   for (Object o : list) {
     o.toString();
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void printSize(Collection&lt;?&gt; list) {  // Collection can be used instead
    System.out.println(list.size());
}

public static void loop(Iterable&lt;?&gt; list) { // java.lang.Iterable can be used instead
   for (Object o : list) {
     o.toString();
  }
}
</pre>
<h2>Exceptions</h2>
<p>Parameters in non-public methods are not checked, because such methods are not intended to be generally reusable. <code>java.lang.String</code>
parameters are excluded, because String is immutable and can not be always substituted for more generic type. Parameters used in any other context
than method invocation or enhanced for loop are also excluded.</p>","<p>For maximum reusability, methods should accept parameters with as little specialization as possible. So unless specific features from a child class
are required by a method, a type higher up the class hierarchy should be used instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void printSize(ArrayList&lt;Object&gt; list) {  // Collection can be used instead
    System.out.println(list.size());
}

public static void loop(List&lt;Object&gt; list) { // java.lang.Iterable can be used instead
   for (Object o : list) {
     o.toString();
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void printSize(Collection&lt;?&gt; list) {  // Collection can be used instead
    System.out.println(list.size());
}

public static void loop(Iterable&lt;?&gt; list) { // java.lang.Iterable can be used instead
   for (Object o : list) {
     o.toString();
  }
}
</pre>
<h2>Exceptions</h2>
<p>Parameters in non-public methods are not checked, because such methods are not intended to be generally reusable. <code>java.lang.String</code>
parameters are excluded, because String is immutable and can not be always substituted for more generic type. Parameters used in any other context
than method invocation or enhanced for loop are also excluded.</p>",MINOR,READY,False,[],['api-design'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>For maximum reusability, methods should accept parameters with as little specialization as possible. So unless specific features from a child class\nare required by a method, a type higher up the class hierarchy should be used instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void printSize(ArrayList&lt;Object&gt; list) {  // Collection can be used instead\n    System.out.println(list.size());\n}\n\npublic static void loop(List&lt;Object&gt; list) { // java.lang.Iterable can be used instead\n   for (Object o : list) {\n     o.toString();\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void printSize(Collection&lt;?&gt; list) {  // Collection can be used instead\n    System.out.println(list.size());\n}\n\npublic static void loop(Iterable&lt;?&gt; list) { // java.lang.Iterable can be used instead\n   for (Object o : list) {\n     o.toString();\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Parameters in non-public methods are not checked, because such methods are not intended to be generally reusable. <code>java.lang.String</code>\nparameters are excluded, because String is immutable and can not be always substituted for more generic type. Parameters used in any other context\nthan method invocation or enhanced for loop are also excluded.</p>'}]",[],['squid:S3242'],,,,
java:S3366,java,"""this"" should not be exposed from constructors",2023-06-14T03:41:52+0000,"<p>In single-threaded environments, the use of <code>this</code> in constructors is normal, and expected. But in multi-threaded environments, it could
expose partially-constructed objects to other threads, and should be used with caution.</p>
<p>The classic example is a class with a <code>static</code> list of its instances. If the constructor stores <code>this</code> in the list, another
thread could access the object before it’s fully-formed. Even when the storage of <code>this</code> is the last instruction in the constructor,
there’s still a danger if the class is not <code>final</code>. In that case, the initialization of subclasses won’t be complete before
<code>this</code> is exposed.</p>
<p>This rule raises an issue when <code>this</code> is assigned to any globally-visible object in a constructor, and when it is passed to the method
of another object in a constructor</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Monument {

  public static final List&lt;Monument&gt; ALL_MONUMENTS = new ArrayList()&lt;&gt;;
  // ...

  public Monument(String location, ...) {
    ALL_MONUMENTS.add(this);  // Noncompliant; passed to a method of another object

    this.location = location;
    // ...
  }
}
</pre>
<h2>Exceptions</h2>
<p>This rule ignores instances of assigning <code>this</code> directly to a <code>static</code> field of the same class because that case is covered
by <a href='/coding_rules#rule_key=java%3AS3010'>S3010</a> .</p>
<h2>See</h2>
<ul>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/iDdGBQ"">CERT, TSM01-J.</a> - Do not let the this reference escape during object construction
  </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/vzdGBQ"">CERT, TSM03-J.</a> - Do not publish partially initialized objects </li>
</ul>","<p>In single-threaded environments, the use of <code>this</code> in constructors is normal, and expected. But in multi-threaded environments, it could
expose partially-constructed objects to other threads, and should be used with caution.</p>
<p>The classic example is a class with a <code>static</code> list of its instances. If the constructor stores <code>this</code> in the list, another
thread could access the object before it’s fully-formed. Even when the storage of <code>this</code> is the last instruction in the constructor,
there’s still a danger if the class is not <code>final</code>. In that case, the initialization of subclasses won’t be complete before
<code>this</code> is exposed.</p>
<p>This rule raises an issue when <code>this</code> is assigned to any globally-visible object in a constructor, and when it is passed to the method
of another object in a constructor</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Monument {

  public static final List&lt;Monument&gt; ALL_MONUMENTS = new ArrayList()&lt;&gt;;
  // ...

  public Monument(String location, ...) {
    ALL_MONUMENTS.add(this);  // Noncompliant; passed to a method of another object

    this.location = location;
    // ...
  }
}
</pre>
<h2>Exceptions</h2>
<p>This rule ignores instances of assigning <code>this</code> directly to a <code>static</code> field of the same class because that case is covered
by <a href='/coding_rules#rule_key=java%3AS3010'>S3010</a> .</p>
<h2>See</h2>
<ul>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/iDdGBQ"">CERT, TSM01-J.</a> - Do not let the this reference escape during object construction
  </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/vzdGBQ"">CERT, TSM03-J.</a> - Do not publish partially initialized objects </li>
</ul>",MAJOR,READY,False,[],"['cert', 'multi-threading', 'suspicious']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,30min,CONSTANT_ISSUE,30min,False,MAIN,False,"[{'key': 'default', 'content': '<p>In single-threaded environments, the use of <code>this</code> in constructors is normal, and expected. But in multi-threaded environments, it could\nexpose partially-constructed objects to other threads, and should be used with caution.</p>\n<p>The classic example is a class with a <code>static</code> list of its instances. If the constructor stores <code>this</code> in the list, another\nthread could access the object before it’s fully-formed. Even when the storage of <code>this</code> is the last instruction in the constructor,\nthere’s still a danger if the class is not <code>final</code>. In that case, the initialization of subclasses won’t be complete before\n<code>this</code> is exposed.</p>\n<p>This rule raises an issue when <code>this</code> is assigned to any globally-visible object in a constructor, and when it is passed to the method\nof another object in a constructor</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Monument {\n\n  public static final List&lt;Monument&gt; ALL_MONUMENTS = new ArrayList()&lt;&gt;;\n  // ...\n\n  public Monument(String location, ...) {\n    ALL_MONUMENTS.add(this);  // Noncompliant; passed to a method of another object\n\n    this.location = location;\n    // ...\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule ignores instances of assigning <code>this</code> directly to a <code>static</code> field of the same class because that case is covered\nby <a href=\'/coding_rules#rule_key=java%3AS3010\'>S3010</a> .</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/iDdGBQ"">CERT, TSM01-J.</a> - Do not let the this reference escape during object construction\n  </li>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/vzdGBQ"">CERT, TSM03-J.</a> - Do not publish partially initialized objects </li>\n</ul>'}]",[],['squid:S3366'],,,,
java:S5665,java,Escape sequences should not be used in text blocks,2023-06-14T03:41:52+0000,"<p>The use of escape sequences is mostly unnecessary in text blocks.</p>
<h2>Noncompliant Code Example</h2>
<p><code>\n</code> can be replaced by simply introducing the newline, <code>\""\""\""</code> it is sufficient to escape only the first qoute.</p>
<pre>
String textBlock = """"""
        \""\""\"" this \nis
        text  block!
        !!!!
      """""";
</pre>
<h2>Compliant Solution</h2>
<pre>
String textBlock = """"""
        \"""""" this
        is
        text  block!
        !!!!
      """""";
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://openjdk.java.net/jeps/378"">JEP 378: Text Blocks</a> </li>
  <li> <a href=""https://cr.openjdk.java.net/~jlaskey/Strings/TextBlocksGuide_v9.html"">Programmer’s Guide To Text Blocks</a>, by Jim Laskey and Stuart
  Marks </li>
</ul>","<p>The use of escape sequences is mostly unnecessary in text blocks.</p>
<h2>Noncompliant Code Example</h2>
<p><code>\n</code> can be replaced by simply introducing the newline, <code>\""\""\""</code> it is sufficient to escape only the first qoute.</p>
<pre>
String textBlock = """"""
        \""\""\"" this \nis
        text  block!
        !!!!
      """""";
</pre>
<h2>Compliant Solution</h2>
<pre>
String textBlock = """"""
        \"""""" this
        is
        text  block!
        !!!!
      """""";
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://openjdk.java.net/jeps/378"">JEP 378: Text Blocks</a> </li>
  <li> <a href=""https://cr.openjdk.java.net/~jlaskey/Strings/TextBlocksGuide_v9.html"">Programmer’s Guide To Text Blocks</a>, by Jim Laskey and Stuart
  Marks </li>
</ul>",MINOR,READY,False,[],['java14'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>The use of escape sequences is mostly unnecessary in text blocks.</p>\n<h2>Noncompliant Code Example</h2>\n<p><code>\\n</code> can be replaced by simply introducing the newline, <code>\\""\\""\\""</code> it is sufficient to escape only the first qoute.</p>\n<pre>\nString textBlock = """"""\n        \\""\\""\\"" this \\nis\n        text  block!\n        !!!!\n      """""";\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString textBlock = """"""\n        \\"""""" this\n        is\n        text  block!\n        !!!!\n      """""";\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://openjdk.java.net/jeps/378"">JEP 378: Text Blocks</a> </li>\n  <li> <a href=""https://cr.openjdk.java.net/~jlaskey/Strings/TextBlocksGuide_v9.html"">Programmer’s Guide To Text Blocks</a>, by Jim Laskey and Stuart\n  Marks </li>\n</ul>'}]",[],['squid:S5665'],,,,
java:S5785,java,JUnit assertTrue/assertFalse should be simplified to the corresponding dedicated assertion,2023-06-14T03:41:52+0000,"<p>Testing equality or nullness with JUnit’s <code>assertTrue()</code> or <code>assertFalse()</code> should be simplified to the corresponding
dedicated assertion.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Assert.assertTrue(a.equals(b));
Assert.assertTrue(a == b);
Assert.assertTrue(a == null);
Assert.assertTrue(a != null);
Assert.assertFalse(a.equals(b));
</pre>
<h2>Compliant Solution</h2>
<pre>
Assert.assertEquals(a, b);
Assert.assertSame(a, b);
Assert.assertNull(a);
Assert.assertNotNull(a);
Assert.assertNotEquals(a, b);
</pre>","<p>Testing equality or nullness with JUnit’s <code>assertTrue()</code> or <code>assertFalse()</code> should be simplified to the corresponding
dedicated assertion.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Assert.assertTrue(a.equals(b));
Assert.assertTrue(a == b);
Assert.assertTrue(a == null);
Assert.assertTrue(a != null);
Assert.assertFalse(a.equals(b));
</pre>
<h2>Compliant Solution</h2>
<pre>
Assert.assertEquals(a, b);
Assert.assertSame(a, b);
Assert.assertNull(a);
Assert.assertNotNull(a);
Assert.assertNotEquals(a, b);
</pre>",MAJOR,READY,False,[],"['junit', 'tests']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,2min,CONSTANT_ISSUE,2min,False,TEST,False,"[{'key': 'default', 'content': '<p>Testing equality or nullness with JUnit’s <code>assertTrue()</code> or <code>assertFalse()</code> should be simplified to the corresponding\ndedicated assertion.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nAssert.assertTrue(a.equals(b));\nAssert.assertTrue(a == b);\nAssert.assertTrue(a == null);\nAssert.assertTrue(a != null);\nAssert.assertFalse(a.equals(b));\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nAssert.assertEquals(a, b);\nAssert.assertSame(a, b);\nAssert.assertNull(a);\nAssert.assertNotNull(a);\nAssert.assertNotEquals(a, b);\n</pre>'}]",[],['squid:S5785'],,,,
java:S5786,java,JUnit5 test classes and methods should have default package visibility,2023-06-14T03:41:52+0000,"<p>JUnit5 is more tolerant regarding the visibilities of Test classes than JUnit4, which required everything to be <code>public</code>.</p>
<p>In this context, JUnit5 test classes can have any visibility but <code>private</code>, however, it is recommended to use the default package
visibility, which improves readability of code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
import org.junit.jupiter.api.Test;

public class MyClassTest { // Noncompliant - modifier can be removed
  @Test
  protected void test() { // Noncompliant - modifier can be removed
    // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
import org.junit.jupiter.api.Test;

class MyClassTest {
  @Test
  void test() {
    // ...
  }
}
</pre>
<h2>Exceptions</h2>
<p>This rule does not raise an issue about <code>private</code> visibility, because <code>private</code> test methods and classes are systematically
ignored by JUnit5, without a proper warning. It’s not a <code>Code Smell</code> but a <code>Bug</code> handled by the rule <a href='/coding_rules#rule_key=java%3AS5810'>S5810</a> .</p>
<h2>See</h2>
<ul>
  <li> <a href=""https://junit.org/junit5/docs/current/user-guide/#writing-tests-classes-and-methods"">JUnit 5 Test Classes and Methods</a> </li>
</ul>","<p>JUnit5 is more tolerant regarding the visibilities of Test classes than JUnit4, which required everything to be <code>public</code>.</p>
<p>In this context, JUnit5 test classes can have any visibility but <code>private</code>, however, it is recommended to use the default package
visibility, which improves readability of code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
import org.junit.jupiter.api.Test;

public class MyClassTest { // Noncompliant - modifier can be removed
  @Test
  protected void test() { // Noncompliant - modifier can be removed
    // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
import org.junit.jupiter.api.Test;

class MyClassTest {
  @Test
  void test() {
    // ...
  }
}
</pre>
<h2>Exceptions</h2>
<p>This rule does not raise an issue about <code>private</code> visibility, because <code>private</code> test methods and classes are systematically
ignored by JUnit5, without a proper warning. It’s not a <code>Code Smell</code> but a <code>Bug</code> handled by the rule <a href='/coding_rules#rule_key=java%3AS5810'>S5810</a> .</p>
<h2>See</h2>
<ul>
  <li> <a href=""https://junit.org/junit5/docs/current/user-guide/#writing-tests-classes-and-methods"">JUnit 5 Test Classes and Methods</a> </li>
</ul>",INFO,READY,False,[],"['junit', 'tests']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,2min,CONSTANT_ISSUE,2min,False,TEST,False,"[{'key': 'default', 'content': '<p>JUnit5 is more tolerant regarding the visibilities of Test classes than JUnit4, which required everything to be <code>public</code>.</p>\n<p>In this context, JUnit5 test classes can have any visibility but <code>private</code>, however, it is recommended to use the default package\nvisibility, which improves readability of code.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport org.junit.jupiter.api.Test;\n\npublic class MyClassTest { // Noncompliant - modifier can be removed\n  @Test\n  protected void test() { // Noncompliant - modifier can be removed\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport org.junit.jupiter.api.Test;\n\nclass MyClassTest {\n  @Test\n  void test() {\n    // ...\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule does not raise an issue about <code>private</code> visibility, because <code>private</code> test methods and classes are systematically\nignored by JUnit5, without a proper warning. It’s not a <code>Code Smell</code> but a <code>Bug</code> handled by the rule <a href=\'/coding_rules#rule_key=java%3AS5810\'>S5810</a> .</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://junit.org/junit5/docs/current/user-guide/#writing-tests-classes-and-methods"">JUnit 5 Test Classes and Methods</a> </li>\n</ul>'}]",[],['squid:S5786'],,,,
java:S1181,java,Throwable and Error should not be caught,2023-06-14T03:41:52+0000,"<p><code>Throwable</code> is the superclass of all errors and exceptions in Java. <code>Error</code> is the superclass of all errors, which are not
meant to be caught by applications.</p>
<p>Catching either <code>Throwable</code> or <code>Error</code> will also catch <code>OutOfMemoryError</code> and <code>InternalError</code>, from
which an application should not attempt to recover.</p>
<h2>Noncompliant Code Example</h2>
<pre>
try { /* ... */ } catch (Throwable t) { /* ... */ }
try { /* ... */ } catch (Error e) { /* ... */ }
</pre>
<h2>Compliant Solution</h2>
<pre>
try { /* ... */ } catch (RuntimeException e) { /* ... */ }
try { /* ... */ } catch (MyException e) { /* ... */ }
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/396"">MITRE, CWE-396</a> - Declaration of Catch for Generic Exception </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/display/java/ERR08-J.+Do+not+catch+NullPointerException+or+any+of+its+ancestors"">CERT,
  ERR08-J.</a> - Do not catch NullPointerException or any of its ancestors </li>
</ul>","<p><code>Throwable</code> is the superclass of all errors and exceptions in Java. <code>Error</code> is the superclass of all errors, which are not
meant to be caught by applications.</p>
<p>Catching either <code>Throwable</code> or <code>Error</code> will also catch <code>OutOfMemoryError</code> and <code>InternalError</code>, from
which an application should not attempt to recover.</p>
<h2>Noncompliant Code Example</h2>
<pre>
try { /* ... */ } catch (Throwable t) { /* ... */ }
try { /* ... */ } catch (Error e) { /* ... */ }
</pre>
<h2>Compliant Solution</h2>
<pre>
try { /* ... */ } catch (RuntimeException e) { /* ... */ }
try { /* ... */ } catch (MyException e) { /* ... */ }
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/396"">MITRE, CWE-396</a> - Declaration of Catch for Generic Exception </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/display/java/ERR08-J.+Do+not+catch+NullPointerException+or+any+of+its+ancestors"">CERT,
  ERR08-J.</a> - Do not catch NullPointerException or any of its ancestors </li>
</ul>",MAJOR,READY,False,[],"['bad-practice', 'cert', 'cwe', 'error-handling']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,20min,CONSTANT_ISSUE,20min,False,MAIN,False,"[{'key': 'default', 'content': '<p><code>Throwable</code> is the superclass of all errors and exceptions in Java. <code>Error</code> is the superclass of all errors, which are not\nmeant to be caught by applications.</p>\n<p>Catching either <code>Throwable</code> or <code>Error</code> will also catch <code>OutOfMemoryError</code> and <code>InternalError</code>, from\nwhich an application should not attempt to recover.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry { /* ... */ } catch (Throwable t) { /* ... */ }\ntry { /* ... */ } catch (Error e) { /* ... */ }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry { /* ... */ } catch (RuntimeException e) { /* ... */ }\ntry { /* ... */ } catch (MyException e) { /* ... */ }\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/396"">MITRE, CWE-396</a> - Declaration of Catch for Generic Exception </li>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/display/java/ERR08-J.+Do+not+catch+NullPointerException+or+any+of+its+ancestors"">CERT,\n  ERR08-J.</a> - Do not catch NullPointerException or any of its ancestors </li>\n</ul>'}]",[],['squid:S1181'],,,,
java:S1182,java,"Classes that override ""clone"" should be ""Cloneable"" and call ""super.clone()""",2023-06-14T03:41:52+0000,"<p><code>Cloneable</code> is the marker <code>Interface</code> that indicates that <code>clone()</code> may be called on an object. Overriding
<code>clone()</code> without implementing <code>Cloneable</code> can be useful if you want to control how subclasses clone themselves, but otherwise,
it’s probably a mistake.</p>
<p>The usual convention for <code>Object.clone()</code> according to Oracle’s Javadoc is:</p>
<ol>
  <li> <code>x.clone() != x</code> </li>
  <li> <code>x.clone().getClass() == x.getClass()</code> </li>
  <li> <code>x.clone().equals(x)</code> </li>
</ol>
<p>Obtaining the object that will be returned by calling <code>super.clone()</code> helps to satisfy those invariants:</p>
<ol>
  <li> <code>super.clone()</code> returns a new object instance </li>
  <li> <code>super.clone()</code> returns an object of the same type as the one <code>clone()</code> was called on </li>
  <li> <code>Object.clone()</code> performs a shallow copy of the object’s state </li>
</ol>
<h2>Noncompliant Code Example</h2>
<pre>
class BaseClass {  // Noncompliant; should implement Cloneable
  @Override
  public Object clone() throws CloneNotSupportedException {    // Noncompliant; should return the super.clone() instance
    return new BaseClass();
  }
}

class DerivedClass extends BaseClass implements Cloneable {
  /* Does not override clone() */

  public void sayHello() {
    System.out.println(""Hello, world!"");
  }
}

class Application {
  public static void main(String[] args) throws Exception {
    DerivedClass instance = new DerivedClass();
    ((DerivedClass) instance.clone()).sayHello();              // Throws a ClassCastException because invariant #2 is violated
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class BaseClass implements Cloneable {
  @Override
  public Object clone() throws CloneNotSupportedException {    // Compliant
    return super.clone();
  }
}

class DerivedClass extends BaseClass implements Cloneable {
  /* Does not override clone() */

  public void sayHello() {
    System.out.println(""Hello, world!"");
  }
}

class Application {
  public static void main(String[] args) throws Exception {
    DerivedClass instance = new DerivedClass();
    ((DerivedClass) instance.clone()).sayHello();              // Displays ""Hello, world!"" as expected. Invariant #2 is satisfied
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/580"">MITRE, CWE-580</a> - clone() Method Without super.clone() </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/FjZGBQ"">CERT, MET53-J.</a> - Ensure that the clone() method calls super.clone() </li>
</ul>","<p><code>Cloneable</code> is the marker <code>Interface</code> that indicates that <code>clone()</code> may be called on an object. Overriding
<code>clone()</code> without implementing <code>Cloneable</code> can be useful if you want to control how subclasses clone themselves, but otherwise,
it’s probably a mistake.</p>
<p>The usual convention for <code>Object.clone()</code> according to Oracle’s Javadoc is:</p>
<ol>
  <li> <code>x.clone() != x</code> </li>
  <li> <code>x.clone().getClass() == x.getClass()</code> </li>
  <li> <code>x.clone().equals(x)</code> </li>
</ol>
<p>Obtaining the object that will be returned by calling <code>super.clone()</code> helps to satisfy those invariants:</p>
<ol>
  <li> <code>super.clone()</code> returns a new object instance </li>
  <li> <code>super.clone()</code> returns an object of the same type as the one <code>clone()</code> was called on </li>
  <li> <code>Object.clone()</code> performs a shallow copy of the object’s state </li>
</ol>
<h2>Noncompliant Code Example</h2>
<pre>
class BaseClass {  // Noncompliant; should implement Cloneable
  @Override
  public Object clone() throws CloneNotSupportedException {    // Noncompliant; should return the super.clone() instance
    return new BaseClass();
  }
}

class DerivedClass extends BaseClass implements Cloneable {
  /* Does not override clone() */

  public void sayHello() {
    System.out.println(""Hello, world!"");
  }
}

class Application {
  public static void main(String[] args) throws Exception {
    DerivedClass instance = new DerivedClass();
    ((DerivedClass) instance.clone()).sayHello();              // Throws a ClassCastException because invariant #2 is violated
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class BaseClass implements Cloneable {
  @Override
  public Object clone() throws CloneNotSupportedException {    // Compliant
    return super.clone();
  }
}

class DerivedClass extends BaseClass implements Cloneable {
  /* Does not override clone() */

  public void sayHello() {
    System.out.println(""Hello, world!"");
  }
}

class Application {
  public static void main(String[] args) throws Exception {
    DerivedClass instance = new DerivedClass();
    ((DerivedClass) instance.clone()).sayHello();              // Displays ""Hello, world!"" as expected. Invariant #2 is satisfied
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/580"">MITRE, CWE-580</a> - clone() Method Without super.clone() </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/FjZGBQ"">CERT, MET53-J.</a> - Ensure that the clone() method calls super.clone() </li>
</ul>",MINOR,READY,False,[],"['cert', 'convention', 'cwe']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,20min,CONSTANT_ISSUE,20min,False,MAIN,False,"[{'key': 'default', 'content': '<p><code>Cloneable</code> is the marker <code>Interface</code> that indicates that <code>clone()</code> may be called on an object. Overriding\n<code>clone()</code> without implementing <code>Cloneable</code> can be useful if you want to control how subclasses clone themselves, but otherwise,\nit’s probably a mistake.</p>\n<p>The usual convention for <code>Object.clone()</code> according to Oracle’s Javadoc is:</p>\n<ol>\n  <li> <code>x.clone() != x</code> </li>\n  <li> <code>x.clone().getClass() == x.getClass()</code> </li>\n  <li> <code>x.clone().equals(x)</code> </li>\n</ol>\n<p>Obtaining the object that will be returned by calling <code>super.clone()</code> helps to satisfy those invariants:</p>\n<ol>\n  <li> <code>super.clone()</code> returns a new object instance </li>\n  <li> <code>super.clone()</code> returns an object of the same type as the one <code>clone()</code> was called on </li>\n  <li> <code>Object.clone()</code> performs a shallow copy of the object’s state </li>\n</ol>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass BaseClass {  // Noncompliant; should implement Cloneable\n  @Override\n  public Object clone() throws CloneNotSupportedException {    // Noncompliant; should return the super.clone() instance\n    return new BaseClass();\n  }\n}\n\nclass DerivedClass extends BaseClass implements Cloneable {\n  /* Does not override clone() */\n\n  public void sayHello() {\n    System.out.println(""Hello, world!"");\n  }\n}\n\nclass Application {\n  public static void main(String[] args) throws Exception {\n    DerivedClass instance = new DerivedClass();\n    ((DerivedClass) instance.clone()).sayHello();              // Throws a ClassCastException because invariant #2 is violated\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass BaseClass implements Cloneable {\n  @Override\n  public Object clone() throws CloneNotSupportedException {    // Compliant\n    return super.clone();\n  }\n}\n\nclass DerivedClass extends BaseClass implements Cloneable {\n  /* Does not override clone() */\n\n  public void sayHello() {\n    System.out.println(""Hello, world!"");\n  }\n}\n\nclass Application {\n  public static void main(String[] args) throws Exception {\n    DerivedClass instance = new DerivedClass();\n    ((DerivedClass) instance.clone()).sayHello();              // Displays ""Hello, world!"" as expected. Invariant #2 is satisfied\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/580"">MITRE, CWE-580</a> - clone() Method Without super.clone() </li>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/FjZGBQ"">CERT, MET53-J.</a> - Ensure that the clone() method calls super.clone() </li>\n</ul>'}]",[],['squid:S1182'],,,,
java:S1185,java,Overriding methods should do more than simply call the same method in the super class,2023-06-14T03:41:52+0000,"<p>Overriding a method just to call the same method from the super class without performing any other actions is useless and misleading. The only time
this is justified is in <code>final</code> overriding methods, where the effect is to lock in the parent class behavior. This rule ignores such
overrides of <code>equals</code>, <code>hashCode</code> and <code>toString</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void doSomething() {
  super.doSomething();
}

@Override
public boolean isLegal(Action action) {
  return super.isLegal(action);
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@Override
public boolean isLegal(Action action) {         // Compliant - not simply forwarding the call
  return super.isLegal(new Action(/* ... */));
}

@Id
@Override
public int getId() {                            // Compliant - there is annotation different from @Override
  return super.getId();
}
</pre>","<p>Overriding a method just to call the same method from the super class without performing any other actions is useless and misleading. The only time
this is justified is in <code>final</code> overriding methods, where the effect is to lock in the parent class behavior. This rule ignores such
overrides of <code>equals</code>, <code>hashCode</code> and <code>toString</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void doSomething() {
  super.doSomething();
}

@Override
public boolean isLegal(Action action) {
  return super.isLegal(action);
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@Override
public boolean isLegal(Action action) {         // Compliant - not simply forwarding the call
  return super.isLegal(new Action(/* ... */));
}

@Id
@Override
public int getId() {                            // Compliant - there is annotation different from @Override
  return super.getId();
}
</pre>",MINOR,READY,False,[],"['clumsy', 'redundant']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,2min,CONSTANT_ISSUE,2min,False,ALL,False,"[{'key': 'default', 'content': '<p>Overriding a method just to call the same method from the super class without performing any other actions is useless and misleading. The only time\nthis is justified is in <code>final</code> overriding methods, where the effect is to lock in the parent class behavior. This rule ignores such\noverrides of <code>equals</code>, <code>hashCode</code> and <code>toString</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething() {\n  super.doSomething();\n}\n\n@Override\npublic boolean isLegal(Action action) {\n  return super.isLegal(action);\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Override\npublic boolean isLegal(Action action) {         // Compliant - not simply forwarding the call\n  return super.isLegal(new Action(/* ... */));\n}\n\n@Id\n@Override\npublic int getId() {                            // Compliant - there is annotation different from @Override\n  return super.getId();\n}\n</pre>'}]",[],['squid:S1185'],,,,
java:S2390,java,Classes should not access their own subclasses during initialization,2023-06-14T03:41:52+0000,"<p>When a parent class references a member of a subclass during its own initialization, the results might not be what you expect because the child
class might not have been initialized yet. This could create what is known as an ""initialisation cycle"", or even a deadlock in some extreme cases.</p>
<p>To make things worse, these issues are very hard to diagnose so it is highly recommended you avoid creating this kind of dependencies.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Parent {
  static int field1 = Child.method(); // Noncompliant
  static int field2 = 42;

  public static void main(String[] args) {
    System.out.println(Parent.field1); // will display ""0"" instead of ""42""
  }
}

class Child extends Parent {
  static int method() {
    return Parent.field2;
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.securecoding.cert.org/confluence/display/java/DCL00-J.+Prevent+class+initialization+cycles"">CERT, DCL00-J.</a> - Prevent
  class initialization cycles </li>
  <li> Java Language Specifications - <a href=""https://docs.oracle.com/javase/specs/jls/se8/html/jls-12.html#jls-12.4"">Section 12.4: Initialization of
  Classes and Interfaces</a> </li>
</ul>","<p>When a parent class references a member of a subclass during its own initialization, the results might not be what you expect because the child
class might not have been initialized yet. This could create what is known as an ""initialisation cycle"", or even a deadlock in some extreme cases.</p>
<p>To make things worse, these issues are very hard to diagnose so it is highly recommended you avoid creating this kind of dependencies.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Parent {
  static int field1 = Child.method(); // Noncompliant
  static int field2 = 42;

  public static void main(String[] args) {
    System.out.println(Parent.field1); // will display ""0"" instead of ""42""
  }
}

class Child extends Parent {
  static int method() {
    return Parent.field2;
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.securecoding.cert.org/confluence/display/java/DCL00-J.+Prevent+class+initialization+cycles"">CERT, DCL00-J.</a> - Prevent
  class initialization cycles </li>
  <li> Java Language Specifications - <a href=""https://docs.oracle.com/javase/specs/jls/se8/html/jls-12.html#jls-12.4"">Section 12.4: Initialization of
  Classes and Interfaces</a> </li>
</ul>",CRITICAL,READY,False,[],['cert'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,20min,CONSTANT_ISSUE,20min,False,ALL,False,"[{'key': 'default', 'content': '<p>When a parent class references a member of a subclass during its own initialization, the results might not be what you expect because the child\nclass might not have been initialized yet. This could create what is known as an ""initialisation cycle"", or even a deadlock in some extreme cases.</p>\n<p>To make things worse, these issues are very hard to diagnose so it is highly recommended you avoid creating this kind of dependencies.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Parent {\n  static int field1 = Child.method(); // Noncompliant\n  static int field2 = 42;\n\n  public static void main(String[] args) {\n    System.out.println(Parent.field1); // will display ""0"" instead of ""42""\n  }\n}\n\nclass Child extends Parent {\n  static int method() {\n    return Parent.field2;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://www.securecoding.cert.org/confluence/display/java/DCL00-J.+Prevent+class+initialization+cycles"">CERT, DCL00-J.</a> - Prevent\n  class initialization cycles </li>\n  <li> Java Language Specifications - <a href=""https://docs.oracle.com/javase/specs/jls/se8/html/jls-12.html#jls-12.4"">Section 12.4: Initialization of\n  Classes and Interfaces</a> </li>\n</ul>'}]",[],['squid:S2390'],,,,
java:S3008,java,Static non-final field names should comply with a naming convention,2023-06-14T03:41:52+0000,"<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that static non-final field names match a provided regular
expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>
<pre>
public final class MyClass {
   private static String foo_bar;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass {
   private static String fooBar;
}
</pre>","<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that static non-final field names match a provided regular
expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>
<pre>
public final class MyClass {
   private static String foo_bar;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass {
   private static String fooBar;
}
</pre>",MINOR,READY,False,[],['convention'],java,Java,"[{'key': 'format', 'htmlDesc': 'Regular expression used to check the field names against.', 'defaultValue': '^[a-z][a-zA-Z0-9]*$', 'type': 'STRING'}]",CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,2min,CONSTANT_ISSUE,2min,False,ALL,False,"[{'key': 'default', 'content': '<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that static non-final field names match a provided regular\nexpression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>\n<pre>\npublic final class MyClass {\n   private static String foo_bar;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n   private static String fooBar;\n}\n</pre>'}]",[],['squid:S3008'],,,,
java:S3578,java,Test methods should comply with a naming convention,2023-06-14T03:41:52+0000,"<p>Shared naming conventions allow teams to collaborate efficiently. This rule raises an issue when a test method name does not match the provided
regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default value: <code>^test[A-Z][a-zA-Z0-9]*$</code></p>
<pre>
@Test
public void foo() {  // Noncompliant
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@Test
public void testFoo() {
  // ...
}
</pre>","<p>Shared naming conventions allow teams to collaborate efficiently. This rule raises an issue when a test method name does not match the provided
regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default value: <code>^test[A-Z][a-zA-Z0-9]*$</code></p>
<pre>
@Test
public void foo() {  // Noncompliant
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@Test
public void testFoo() {
  // ...
}
</pre>",MINOR,READY,False,[],"['convention', 'tests']",java,Java,"[{'key': 'format', 'htmlDesc': 'Regular expression the test method names are checked against.', 'defaultValue': '^test[A-Z][a-zA-Z0-9]*$', 'type': 'STRING'}]",CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,TEST,False,"[{'key': 'default', 'content': '<p>Shared naming conventions allow teams to collaborate efficiently. This rule raises an issue when a test method name does not match the provided\nregular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default value: <code>^test[A-Z][a-zA-Z0-9]*$</code></p>\n<pre>\n@Test\npublic void foo() {  // Noncompliant\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Test\npublic void testFoo() {\n  // ...\n}\n</pre>'}]",[],['squid:S3578'],,,,
java:S4454,java,"""equals"" method parameters should not be marked ""@Nonnull""",2023-06-14T03:41:52+0000,"<p>By contract, the <code>equals(Object)</code> method, from <code>java.lang.Object</code>, should accept a <code>null</code> argument. Among all the
other cases, the <code>null</code> case is even explicitly detailed in the <code>Object.equals(...)</code> Javadoc, stating <em>""For any non-null
reference value x, x.equals(null) should return false.""</em></p>
<p>Assuming that the argument to <code>equals</code> is always non-null, and enforcing that assumption with an annotation is not only a fundamental
violation of the contract of <code>equals</code>, but it is also likely to cause problems in the future as the use of the class evolves over time.</p>
<p>The rule raises an issue when the <code>equals</code> method is overridden and its parameter annotated with any kind of <code>@Nonnull</code>
annotation.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public boolean equals(@javax.annotation.Nonnull Object obj) { // Noncompliant
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public boolean equals(Object obj) {
  if (obj == null) {
    return false;
  }
  // ...
}
</pre>","<p>By contract, the <code>equals(Object)</code> method, from <code>java.lang.Object</code>, should accept a <code>null</code> argument. Among all the
other cases, the <code>null</code> case is even explicitly detailed in the <code>Object.equals(...)</code> Javadoc, stating <em>""For any non-null
reference value x, x.equals(null) should return false.""</em></p>
<p>Assuming that the argument to <code>equals</code> is always non-null, and enforcing that assumption with an annotation is not only a fundamental
violation of the contract of <code>equals</code>, but it is also likely to cause problems in the future as the use of the class evolves over time.</p>
<p>The rule raises an issue when the <code>equals</code> method is overridden and its parameter annotated with any kind of <code>@Nonnull</code>
annotation.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public boolean equals(@javax.annotation.Nonnull Object obj) { // Noncompliant
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public boolean equals(Object obj) {
  if (obj == null) {
    return false;
  }
  // ...
}
</pre>",CRITICAL,READY,False,[],[],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,3min,CONSTANT_ISSUE,3min,False,MAIN,False,"[{'key': 'default', 'content': '<p>By contract, the <code>equals(Object)</code> method, from <code>java.lang.Object</code>, should accept a <code>null</code> argument. Among all the\nother cases, the <code>null</code> case is even explicitly detailed in the <code>Object.equals(...)</code> Javadoc, stating <em>""For any non-null\nreference value x, x.equals(null) should return false.""</em></p>\n<p>Assuming that the argument to <code>equals</code> is always non-null, and enforcing that assumption with an annotation is not only a fundamental\nviolation of the contract of <code>equals</code>, but it is also likely to cause problems in the future as the use of the class evolves over time.</p>\n<p>The rule raises an issue when the <code>equals</code> method is overridden and its parameter annotated with any kind of <code>@Nonnull</code>\nannotation.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boolean equals(@javax.annotation.Nonnull Object obj) { // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean equals(Object obj) {\n  if (obj == null) {\n    return false;\n  }\n  // ...\n}\n</pre>'}]",[],['squid:S4454'],,,,
java:S5664,java,Whitespace for text block indent should be consistent,2023-06-14T03:41:52+0000,"<p>Either use only spaces or only tabs for the indentation of a text block. Mixing white space will lead to a result with irregular indentation.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String textBlock = """"""
        this is
&lt;tab&gt;text block!
        !!!!
      """""";
</pre>
<h2>Compliant Solution</h2>
<pre>
String textBlock = """"""
        this is
        text block!
        !!!!
      """""";
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://openjdk.java.net/jeps/378"">JEP 378: Text Blocks</a> </li>
  <li> <a href=""https://cr.openjdk.java.net/~jlaskey/Strings/TextBlocksGuide_v9.html"">Programmer’s Guide To Text Blocks</a>, by Jim Laskey and Stuart
  Marks </li>
</ul>","<p>Either use only spaces or only tabs for the indentation of a text block. Mixing white space will lead to a result with irregular indentation.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String textBlock = """"""
        this is
&lt;tab&gt;text block!
        !!!!
      """""";
</pre>
<h2>Compliant Solution</h2>
<pre>
String textBlock = """"""
        this is
        text block!
        !!!!
      """""";
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://openjdk.java.net/jeps/378"">JEP 378: Text Blocks</a> </li>
  <li> <a href=""https://cr.openjdk.java.net/~jlaskey/Strings/TextBlocksGuide_v9.html"">Programmer’s Guide To Text Blocks</a>, by Jim Laskey and Stuart
  Marks </li>
</ul>",MAJOR,READY,False,[],['java14'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>Either use only spaces or only tabs for the indentation of a text block. Mixing white space will lead to a result with irregular indentation.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString textBlock = """"""\n        this is\n&lt;tab&gt;text block!\n        !!!!\n      """""";\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString textBlock = """"""\n        this is\n        text block!\n        !!!!\n      """""";\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://openjdk.java.net/jeps/378"">JEP 378: Text Blocks</a> </li>\n  <li> <a href=""https://cr.openjdk.java.net/~jlaskey/Strings/TextBlocksGuide_v9.html"">Programmer’s Guide To Text Blocks</a>, by Jim Laskey and Stuart\n  Marks </li>\n</ul>'}]",[],['squid:S5664'],,,,
java:S1157,java,Case insensitive string comparisons should be made without intermediate upper or lower casing,2023-06-14T03:41:52+0000,"<p>Using <code>toLowerCase()</code> or <code>toUpperCase()</code> to make case insensitive comparisons is inefficient because it requires the creation
of temporary, intermediate <code>String</code> objects.</p>
<h2>Noncompliant Code Example</h2>
<pre>
boolean result1 = foo.toUpperCase().equals(bar);             // Noncompliant
boolean result2 = foo.equals(bar.toUpperCase());             // Noncompliant
boolean result3 = foo.toLowerCase().equals(bar.LowerCase()); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
boolean result = foo.equalsIgnoreCase(bar);                  // Compliant
</pre>
<h2>Exceptions</h2>
<p>No issue will be raised when a locale is specified because the result could be different from ""equalsIgnoreCase"". (e.g.: using the Turkish
locale)</p>
<pre>
boolean result1 = foo.toUpperCase(locale).equals(bar);             // Compliant
</pre>","<p>Using <code>toLowerCase()</code> or <code>toUpperCase()</code> to make case insensitive comparisons is inefficient because it requires the creation
of temporary, intermediate <code>String</code> objects.</p>
<h2>Noncompliant Code Example</h2>
<pre>
boolean result1 = foo.toUpperCase().equals(bar);             // Noncompliant
boolean result2 = foo.equals(bar.toUpperCase());             // Noncompliant
boolean result3 = foo.toLowerCase().equals(bar.LowerCase()); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
boolean result = foo.equalsIgnoreCase(bar);                  // Compliant
</pre>
<h2>Exceptions</h2>
<p>No issue will be raised when a locale is specified because the result could be different from ""equalsIgnoreCase"". (e.g.: using the Turkish
locale)</p>
<pre>
boolean result1 = foo.toUpperCase(locale).equals(bar);             // Compliant
</pre>",MINOR,READY,False,[],['clumsy'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>Using <code>toLowerCase()</code> or <code>toUpperCase()</code> to make case insensitive comparisons is inefficient because it requires the creation\nof temporary, intermediate <code>String</code> objects.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nboolean result1 = foo.toUpperCase().equals(bar);             // Noncompliant\nboolean result2 = foo.equals(bar.toUpperCase());             // Noncompliant\nboolean result3 = foo.toLowerCase().equals(bar.LowerCase()); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nboolean result = foo.equalsIgnoreCase(bar);                  // Compliant\n</pre>\n<h2>Exceptions</h2>\n<p>No issue will be raised when a locale is specified because the result could be different from ""equalsIgnoreCase"". (e.g.: using the Turkish\nlocale)</p>\n<pre>\nboolean result1 = foo.toUpperCase(locale).equals(bar);             // Compliant\n</pre>'}]",[],['squid:S1157'],,,,
java:S1158,java,"Primitive wrappers should not be instantiated only for ""toString"" or ""compareTo"" calls",2023-06-14T03:41:52+0000,"<p>Creating temporary primitive wrapper objects only for <code>String</code> conversion or the use of the <code>compareTo</code> method is
inefficient.</p>
<p>Instead, the static <code>toString</code> or <code>compare</code> method of the primitive wrapper class should be used.</p>
<h2>Noncompliant Code Example</h2>
<pre>
new Integer(myInteger).toString();   // Noncompliant
Integer.valueOf(myInt).compareTo(0); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
Integer.toString(myInteger);        // Compliant
Integer.compare(myInteger, 0);      // Compliant
</pre>","<p>Creating temporary primitive wrapper objects only for <code>String</code> conversion or the use of the <code>compareTo</code> method is
inefficient.</p>
<p>Instead, the static <code>toString</code> or <code>compare</code> method of the primitive wrapper class should be used.</p>
<h2>Noncompliant Code Example</h2>
<pre>
new Integer(myInteger).toString();   // Noncompliant
Integer.valueOf(myInt).compareTo(0); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
Integer.toString(myInteger);        // Compliant
Integer.compare(myInteger, 0);      // Compliant
</pre>",MINOR,READY,False,[],"['clumsy', 'performance']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>Creating temporary primitive wrapper objects only for <code>String</code> conversion or the use of the <code>compareTo</code> method is\ninefficient.</p>\n<p>Instead, the static <code>toString</code> or <code>compare</code> method of the primitive wrapper class should be used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nnew Integer(myInteger).toString();   // Noncompliant\nInteger.valueOf(myInt).compareTo(0); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nInteger.toString(myInteger);        // Compliant\nInteger.compare(myInteger, 0);      // Compliant\n</pre>'}]",[],['squid:S1158'],,,,
java:S3457,java,Printf-style format strings should be used correctly,2023-06-14T03:41:52+0000,"<p>Because <code>printf</code>-style format strings are interpreted at runtime, rather than validated by the compiler, they can contain errors that
result in the wrong strings being created. This rule statically validates the correlation of <code>printf</code>-style format strings to their
arguments when calling the <code>format(...)</code> methods of <code>java.util.Formatter</code>, <code>java.lang.String</code>,
<code>java.io.PrintStream</code>, <code>MessageFormat</code>, and <code>java.io.PrintWriter</code> classes and the <code>printf(...)</code> methods of
<code>java.io.PrintStream</code> or <code>java.io.PrintWriter</code> classes.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String.format(""First {0} and then {1}"", ""foo"", ""bar"");  //Noncompliant. Looks like there is a confusion with the use of {{java.text.MessageFormat}}, parameters ""foo"" and ""bar"" will be simply ignored here
String.format(""Display %3$d and then %d"", 1, 2, 3);   //Noncompliant; the second argument '2' is unused
String.format(""Too many arguments %d and %d"", 1, 2, 3);  //Noncompliant; the third argument '3' is unused
String.format(""First Line\n"");   //Noncompliant; %n should be used in place of \n to produce the platform-specific line separator
String.format(""Is myObject null ? %b"", myObject);   //Noncompliant; when a non-boolean argument is formatted with %b, it prints true for any nonnull value, and false for null. Even if intended, this is misleading. It's better to directly inject the boolean value (myObject == null in this case)
String.format(""value is "" + value); // Noncompliant
String s = String.format(""string without arguments""); // Noncompliant

MessageFormat.format(""Result '{0}'."", value); // Noncompliant; String contains no format specifiers. (quote are discarding format specifiers)
MessageFormat.format(""Result {0}."", value, value);  // Noncompliant; 2nd argument is not used
MessageFormat.format(""Result {0}."", myObject.toString()); // Noncompliant; no need to call toString() on objects

java.util.Logger logger;
logger.log(java.util.logging.Level.SEVERE, ""Result {0}."", myObject.toString()); // Noncompliant; no need to call toString() on objects
logger.log(java.util.logging.Level.SEVERE, ""Result."", new Exception()); // compliant, parameter is an exception
logger.log(java.util.logging.Level.SEVERE, ""Result '{0}'"", 14); // Noncompliant - String contains no format specifiers.
logger.log(java.util.logging.Level.SEVERE, ""Result "" + param, exception); // Noncompliant; Lambda should be used to differ string concatenation.

org.slf4j.Logger slf4jLog;
org.slf4j.Marker marker;

slf4jLog.debug(marker, ""message {}"");
slf4jLog.debug(marker, ""message"", 1); // Noncompliant - String contains no format specifiers.

org.apache.logging.log4j.Logger log4jLog;
log4jLog.debug(""message"", 1); // Noncompliant - String contains no format specifiers.
</pre>
<h2>Compliant Solution</h2>
<pre>
String.format(""First %s and then %s"", ""foo"", ""bar"");
String.format(""Display %2$d and then %d"", 1, 3);
String.format(""Too many arguments %d %d"", 1, 2);
String.format(""First Line%n"");
String.format(""Is myObject null ? %b"", myObject == null);
String.format(""value is %d"", value);
String s = ""string without arguments"";

MessageFormat.format(""Result {0}."", value);
MessageFormat.format(""Result '{0}'  =  {0}"", value);
MessageFormat.format(""Result {0}."", myObject);

java.util.Logger logger;
logger.log(java.util.logging.Level.SEVERE, ""Result {0}."", myObject);
logger.log(java.util.logging.Level.SEVERE, ""Result {0}'"", 14);
logger.log(java.util.logging.Level.SEVERE, exception, () -&gt; ""Result "" + param);

org.slf4j.Logger slf4jLog;
org.slf4j.Marker marker;

slf4jLog.debug(marker, ""message {}"");
slf4jLog.debug(marker, ""message {}"", 1);

org.apache.logging.log4j.Logger log4jLog;
log4jLog.debug(""message {}"", 1);
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/J9YxBQ"">CERT, FIO47-C.</a> - Use valid format strings </li>
</ul>","<p>Because <code>printf</code>-style format strings are interpreted at runtime, rather than validated by the compiler, they can contain errors that
result in the wrong strings being created. This rule statically validates the correlation of <code>printf</code>-style format strings to their
arguments when calling the <code>format(...)</code> methods of <code>java.util.Formatter</code>, <code>java.lang.String</code>,
<code>java.io.PrintStream</code>, <code>MessageFormat</code>, and <code>java.io.PrintWriter</code> classes and the <code>printf(...)</code> methods of
<code>java.io.PrintStream</code> or <code>java.io.PrintWriter</code> classes.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String.format(""First {0} and then {1}"", ""foo"", ""bar"");  //Noncompliant. Looks like there is a confusion with the use of {{java.text.MessageFormat}}, parameters ""foo"" and ""bar"" will be simply ignored here
String.format(""Display %3$d and then %d"", 1, 2, 3);   //Noncompliant; the second argument '2' is unused
String.format(""Too many arguments %d and %d"", 1, 2, 3);  //Noncompliant; the third argument '3' is unused
String.format(""First Line\n"");   //Noncompliant; %n should be used in place of \n to produce the platform-specific line separator
String.format(""Is myObject null ? %b"", myObject);   //Noncompliant; when a non-boolean argument is formatted with %b, it prints true for any nonnull value, and false for null. Even if intended, this is misleading. It's better to directly inject the boolean value (myObject == null in this case)
String.format(""value is "" + value); // Noncompliant
String s = String.format(""string without arguments""); // Noncompliant

MessageFormat.format(""Result '{0}'."", value); // Noncompliant; String contains no format specifiers. (quote are discarding format specifiers)
MessageFormat.format(""Result {0}."", value, value);  // Noncompliant; 2nd argument is not used
MessageFormat.format(""Result {0}."", myObject.toString()); // Noncompliant; no need to call toString() on objects

java.util.Logger logger;
logger.log(java.util.logging.Level.SEVERE, ""Result {0}."", myObject.toString()); // Noncompliant; no need to call toString() on objects
logger.log(java.util.logging.Level.SEVERE, ""Result."", new Exception()); // compliant, parameter is an exception
logger.log(java.util.logging.Level.SEVERE, ""Result '{0}'"", 14); // Noncompliant - String contains no format specifiers.
logger.log(java.util.logging.Level.SEVERE, ""Result "" + param, exception); // Noncompliant; Lambda should be used to differ string concatenation.

org.slf4j.Logger slf4jLog;
org.slf4j.Marker marker;

slf4jLog.debug(marker, ""message {}"");
slf4jLog.debug(marker, ""message"", 1); // Noncompliant - String contains no format specifiers.

org.apache.logging.log4j.Logger log4jLog;
log4jLog.debug(""message"", 1); // Noncompliant - String contains no format specifiers.
</pre>
<h2>Compliant Solution</h2>
<pre>
String.format(""First %s and then %s"", ""foo"", ""bar"");
String.format(""Display %2$d and then %d"", 1, 3);
String.format(""Too many arguments %d %d"", 1, 2);
String.format(""First Line%n"");
String.format(""Is myObject null ? %b"", myObject == null);
String.format(""value is %d"", value);
String s = ""string without arguments"";

MessageFormat.format(""Result {0}."", value);
MessageFormat.format(""Result '{0}'  =  {0}"", value);
MessageFormat.format(""Result {0}."", myObject);

java.util.Logger logger;
logger.log(java.util.logging.Level.SEVERE, ""Result {0}."", myObject);
logger.log(java.util.logging.Level.SEVERE, ""Result {0}'"", 14);
logger.log(java.util.logging.Level.SEVERE, exception, () -&gt; ""Result "" + param);

org.slf4j.Logger slf4jLog;
org.slf4j.Marker marker;

slf4jLog.debug(marker, ""message {}"");
slf4jLog.debug(marker, ""message {}"", 1);

org.apache.logging.log4j.Logger log4jLog;
log4jLog.debug(""message {}"", 1);
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/J9YxBQ"">CERT, FIO47-C.</a> - Use valid format strings </li>
</ul>",MAJOR,READY,False,[],"['cert', 'confusing']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,10min,CONSTANT_ISSUE,10min,False,ALL,False,"[{'key': 'default', 'content': '<p>Because <code>printf</code>-style format strings are interpreted at runtime, rather than validated by the compiler, they can contain errors that\nresult in the wrong strings being created. This rule statically validates the correlation of <code>printf</code>-style format strings to their\narguments when calling the <code>format(...)</code> methods of <code>java.util.Formatter</code>, <code>java.lang.String</code>,\n<code>java.io.PrintStream</code>, <code>MessageFormat</code>, and <code>java.io.PrintWriter</code> classes and the <code>printf(...)</code> methods of\n<code>java.io.PrintStream</code> or <code>java.io.PrintWriter</code> classes.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString.format(""First {0} and then {1}"", ""foo"", ""bar"");  //Noncompliant. Looks like there is a confusion with the use of {{java.text.MessageFormat}}, parameters ""foo"" and ""bar"" will be simply ignored here\nString.format(""Display %3$d and then %d"", 1, 2, 3);   //Noncompliant; the second argument \'2\' is unused\nString.format(""Too many arguments %d and %d"", 1, 2, 3);  //Noncompliant; the third argument \'3\' is unused\nString.format(""First Line\\n"");   //Noncompliant; %n should be used in place of \\n to produce the platform-specific line separator\nString.format(""Is myObject null ? %b"", myObject);   //Noncompliant; when a non-boolean argument is formatted with %b, it prints true for any nonnull value, and false for null. Even if intended, this is misleading. It\'s better to directly inject the boolean value (myObject == null in this case)\nString.format(""value is "" + value); // Noncompliant\nString s = String.format(""string without arguments""); // Noncompliant\n\nMessageFormat.format(""Result \'{0}\'."", value); // Noncompliant; String contains no format specifiers. (quote are discarding format specifiers)\nMessageFormat.format(""Result {0}."", value, value);  // Noncompliant; 2nd argument is not used\nMessageFormat.format(""Result {0}."", myObject.toString()); // Noncompliant; no need to call toString() on objects\n\njava.util.Logger logger;\nlogger.log(java.util.logging.Level.SEVERE, ""Result {0}."", myObject.toString()); // Noncompliant; no need to call toString() on objects\nlogger.log(java.util.logging.Level.SEVERE, ""Result."", new Exception()); // compliant, parameter is an exception\nlogger.log(java.util.logging.Level.SEVERE, ""Result \'{0}\'"", 14); // Noncompliant - String contains no format specifiers.\nlogger.log(java.util.logging.Level.SEVERE, ""Result "" + param, exception); // Noncompliant; Lambda should be used to differ string concatenation.\n\norg.slf4j.Logger slf4jLog;\norg.slf4j.Marker marker;\n\nslf4jLog.debug(marker, ""message {}"");\nslf4jLog.debug(marker, ""message"", 1); // Noncompliant - String contains no format specifiers.\n\norg.apache.logging.log4j.Logger log4jLog;\nlog4jLog.debug(""message"", 1); // Noncompliant - String contains no format specifiers.\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString.format(""First %s and then %s"", ""foo"", ""bar"");\nString.format(""Display %2$d and then %d"", 1, 3);\nString.format(""Too many arguments %d %d"", 1, 2);\nString.format(""First Line%n"");\nString.format(""Is myObject null ? %b"", myObject == null);\nString.format(""value is %d"", value);\nString s = ""string without arguments"";\n\nMessageFormat.format(""Result {0}."", value);\nMessageFormat.format(""Result \'{0}\'  =  {0}"", value);\nMessageFormat.format(""Result {0}."", myObject);\n\njava.util.Logger logger;\nlogger.log(java.util.logging.Level.SEVERE, ""Result {0}."", myObject);\nlogger.log(java.util.logging.Level.SEVERE, ""Result {0}\'"", 14);\nlogger.log(java.util.logging.Level.SEVERE, exception, () -&gt; ""Result "" + param);\n\norg.slf4j.Logger slf4jLog;\norg.slf4j.Marker marker;\n\nslf4jLog.debug(marker, ""message {}"");\nslf4jLog.debug(marker, ""message {}"", 1);\n\norg.apache.logging.log4j.Logger log4jLog;\nlog4jLog.debug(""message {}"", 1);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/J9YxBQ"">CERT, FIO47-C.</a> - Use valid format strings </li>\n</ul>'}]",[],['squid:S3457'],,,,
java:S3577,java,Test classes should comply with a naming convention,2023-06-14T03:41:52+0000,"<p>Shared naming conventions allow teams to collaborate efficiently. This rule raises an issue when a test class name does not match the provided
regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default value: <code>^((Test|IT)[a-zA-Z0-9_]+|[A-Z][a-zA-Z0-9_]*(Test|Tests|TestCase|IT|ITCase))$</code></p>
<pre>
class Foo {  // Noncompliant
  @Test
  void check() {  }
}

class Bar {  // Noncompliant
  @Nested
  class PositiveCase {
    @Test
    void check() {  }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class FooTest {
  @Test
  void check() {  }
}

class BarIT {
  @Nested
  class PositiveCase {
    @Test
    void check() {  }
  }
}
</pre>","<p>Shared naming conventions allow teams to collaborate efficiently. This rule raises an issue when a test class name does not match the provided
regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default value: <code>^((Test|IT)[a-zA-Z0-9_]+|[A-Z][a-zA-Z0-9_]*(Test|Tests|TestCase|IT|ITCase))$</code></p>
<pre>
class Foo {  // Noncompliant
  @Test
  void check() {  }
}

class Bar {  // Noncompliant
  @Nested
  class PositiveCase {
    @Test
    void check() {  }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class FooTest {
  @Test
  void check() {  }
}

class BarIT {
  @Nested
  class PositiveCase {
    @Test
    void check() {  }
  }
}
</pre>",MINOR,READY,False,[],"['convention', 'tests']",java,Java,"[{'key': 'format', 'htmlDesc': 'Regular expression against which test class names are checked.', 'defaultValue': '^((Test|IT)[a-zA-Z0-9_]+|[A-Z][a-zA-Z0-9_]*(Test|Tests|TestCase|IT|ITCase))$', 'type': 'STRING'}]",CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,TEST,False,"[{'key': 'default', 'content': '<p>Shared naming conventions allow teams to collaborate efficiently. This rule raises an issue when a test class name does not match the provided\nregular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default value: <code>^((Test|IT)[a-zA-Z0-9_]+|[A-Z][a-zA-Z0-9_]*(Test|Tests|TestCase|IT|ITCase))$</code></p>\n<pre>\nclass Foo {  // Noncompliant\n  @Test\n  void check() {  }\n}\n\nclass Bar {  // Noncompliant\n  @Nested\n  class PositiveCase {\n    @Test\n    void check() {  }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass FooTest {\n  @Test\n  void check() {  }\n}\n\nclass BarIT {\n  @Nested\n  class PositiveCase {\n    @Test\n    void check() {  }\n  }\n}\n</pre>'}]",[],['squid:S3577'],,,,
java:S1150,java,Enumeration should not be implemented,2023-06-14T03:41:52+0000,"<p>From the official Oracle Javadoc:</p>
<blockquote>
  <p>NOTE: The functionality of this Enumeration interface is duplicated by the Iterator interface. In addition, Iterator adds an optional remove
  operation, and has shorter method names. New implementations should consider using Iterator in preference to Enumeration.</p>
</blockquote>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass implements Enumeration {  // Non-Compliant
  /* ... */
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass implements Iterator {     // Compliant
  /* ... */
}
</pre>","<p>From the official Oracle Javadoc:</p>
<blockquote>
  <p>NOTE: The functionality of this Enumeration interface is duplicated by the Iterator interface. In addition, Iterator adds an optional remove
  operation, and has shorter method names. New implementations should consider using Iterator in preference to Enumeration.</p>
</blockquote>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass implements Enumeration {  // Non-Compliant
  /* ... */
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass implements Iterator {     // Compliant
  /* ... */
}
</pre>",MAJOR,READY,False,[],['obsolete'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,30min,CONSTANT_ISSUE,30min,False,MAIN,False,"[{'key': 'default', 'content': '<p>From the official Oracle Javadoc:</p>\n<blockquote>\n  <p>NOTE: The functionality of this Enumeration interface is duplicated by the Iterator interface. In addition, Iterator adds an optional remove\n  operation, and has shorter method names. New implementations should consider using Iterator in preference to Enumeration.</p>\n</blockquote>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass implements Enumeration {  // Non-Compliant\n  /* ... */\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass implements Iterator {     // Compliant\n  /* ... */\n}\n</pre>'}]",[],['squid:S1150'],,,,
java:S1151,java,"""switch case"" clauses should not have too many lines of code",2023-06-14T03:41:52+0000,"<p>The <code>switch</code> statement should be used only to clearly define some new branches in the control flow. As soon as a <code>case</code>
clause contains too many statements this highly decreases the readability of the overall control flow statement. In such case, the content of the
<code>case</code> clause should be extracted into a dedicated method.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold of 5:</p>
<pre>
switch (myVariable) {
  case 0: // Noncompliant: 6 lines till next case
    methodCall1("""");
    methodCall2("""");
    methodCall3("""");
    methodCall4("""");
    break;
  case 1:
  ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch (myVariable) {
  case 0:
    doSomething()
    break;
  case 1:
  ...
}
...
private void doSomething(){
    methodCall1("""");
    methodCall2("""");
    methodCall3("""");
    methodCall4("""");
}
</pre>","<p>The <code>switch</code> statement should be used only to clearly define some new branches in the control flow. As soon as a <code>case</code>
clause contains too many statements this highly decreases the readability of the overall control flow statement. In such case, the content of the
<code>case</code> clause should be extracted into a dedicated method.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold of 5:</p>
<pre>
switch (myVariable) {
  case 0: // Noncompliant: 6 lines till next case
    methodCall1("""");
    methodCall2("""");
    methodCall3("""");
    methodCall4("""");
    break;
  case 1:
  ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch (myVariable) {
  case 0:
    doSomething()
    break;
  case 1:
  ...
}
...
private void doSomething(){
    methodCall1("""");
    methodCall2("""");
    methodCall3("""");
    methodCall4("""");
}
</pre>",MAJOR,READY,False,[],['brain-overload'],java,Java,"[{'key': 'max', 'htmlDesc': 'Maximum number of lines', 'defaultValue': '5', 'type': 'INTEGER'}]",CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,MAIN,False,"[{'key': 'default', 'content': '<p>The <code>switch</code> statement should be used only to clearly define some new branches in the control flow. As soon as a <code>case</code>\nclause contains too many statements this highly decreases the readability of the overall control flow statement. In such case, the content of the\n<code>case</code> clause should be extracted into a dedicated method.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 5:</p>\n<pre>\nswitch (myVariable) {\n  case 0: // Noncompliant: 6 lines till next case\n    methodCall1("""");\n    methodCall2("""");\n    methodCall3("""");\n    methodCall4("""");\n    break;\n  case 1:\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (myVariable) {\n  case 0:\n    doSomething()\n    break;\n  case 1:\n  ...\n}\n...\nprivate void doSomething(){\n    methodCall1("""");\n    methodCall2("""");\n    methodCall3("""");\n    methodCall4("""");\n}\n</pre>'}]",[],['squid:S1151'],,,,
java:S1153,java,String.valueOf() should not be appended to a String,2023-06-14T03:41:52+0000,"<p>Appending <code>String.valueOf()</code> to a <code>String</code> decreases the code readability.</p>
<p>The argument passed to <code>String.valueOf()</code> should be directly appended instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void display(int i){
  System.out.println(""Output is "" + String.valueOf(i));    // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void display(int i){
  System.out.println(""Output is "" + i);                    // Compliant
}
</pre>","<p>Appending <code>String.valueOf()</code> to a <code>String</code> decreases the code readability.</p>
<p>The argument passed to <code>String.valueOf()</code> should be directly appended instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void display(int i){
  System.out.println(""Output is "" + String.valueOf(i));    // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void display(int i){
  System.out.println(""Output is "" + i);                    // Compliant
}
</pre>",MINOR,READY,False,[],['clumsy'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>Appending <code>String.valueOf()</code> to a <code>String</code> decreases the code readability.</p>\n<p>The argument passed to <code>String.valueOf()</code> should be directly appended instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void display(int i){\n  System.out.println(""Output is "" + String.valueOf(i));    // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void display(int i){\n  System.out.println(""Output is "" + i);                    // Compliant\n}\n</pre>'}]",[],['squid:S1153'],,,,
java:S1155,java,Collection.isEmpty() should be used to test for emptiness,2023-06-14T03:41:52+0000,"<p>Using <code>Collection.size()</code> to test for emptiness works, but using <code>Collection.isEmpty()</code> makes the code more readable and can
be more performant. The time complexity of any <code>isEmpty()</code> method implementation should be <code>O(1)</code> whereas some implementations
of <code>size()</code> can be <code>O(n)</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (myCollection.size() == 0) {  // Noncompliant
  /* ... */
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (myCollection.isEmpty()) {
  /* ... */
}
</pre>","<p>Using <code>Collection.size()</code> to test for emptiness works, but using <code>Collection.isEmpty()</code> makes the code more readable and can
be more performant. The time complexity of any <code>isEmpty()</code> method implementation should be <code>O(1)</code> whereas some implementations
of <code>size()</code> can be <code>O(n)</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (myCollection.size() == 0) {  // Noncompliant
  /* ... */
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (myCollection.isEmpty()) {
  /* ... */
}
</pre>",MINOR,READY,False,[],['clumsy'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,2min,CONSTANT_ISSUE,2min,False,ALL,False,"[{'key': 'default', 'content': '<p>Using <code>Collection.size()</code> to test for emptiness works, but using <code>Collection.isEmpty()</code> makes the code more readable and can\nbe more performant. The time complexity of any <code>isEmpty()</code> method implementation should be <code>O(1)</code> whereas some implementations\nof <code>size()</code> can be <code>O(n)</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (myCollection.size() == 0) {  // Noncompliant\n  /* ... */\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (myCollection.isEmpty()) {\n  /* ... */\n}\n</pre>'}]",[],['squid:S1155'],,,,
java:S2129,java,"Constructors should not be used to instantiate ""String"", ""BigInteger"", ""BigDecimal"" and primitive-wrapper classes",2023-06-14T03:41:52+0000,"<p>Constructors for <code>String</code>, <code>BigInteger</code>, <code>BigDecimal</code> and the objects used to wrap primitives should never be
used. Doing so is less clear and uses more memory than simply using the desired value in the case of strings, and using <code>valueOf</code> for
everything else.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String empty = new String(); // Noncompliant; yields essentially """", so just use that.
String nonempty = new String(""Hello world""); // Noncompliant
Double myDouble = new Double(1.1); // Noncompliant; use valueOf
Integer integer = new Integer(1); // Noncompliant
Boolean bool = new Boolean(true); // Noncompliant
BigInteger bigInteger1 = new BigInteger(""3""); // Noncompliant
BigInteger bigInteger2 = new BigInteger(""9223372036854775807""); // Noncompliant
BigInteger bigInteger3 = new BigInteger(""111222333444555666777888999""); // Compliant, greater than Long.MAX_VALUE
</pre>
<h2>Compliant Solution</h2>
<pre>
String empty = """";
String nonempty = ""Hello world"";
Double myDouble = Double.valueOf(1.1);
Integer integer = Integer.valueOf(1);
Boolean bool = Boolean.valueOf(true);
BigInteger bigInteger1 = BigInteger.valueOf(3);
BigInteger bigInteger2 = BigInteger.valueOf(9223372036854775807L);
BigInteger bigInteger3 = new BigInteger(""111222333444555666777888999"");
</pre>
<h2>Exceptions</h2>
<p><code>BigDecimal</code> constructor with <code>double</code> argument is ignored as using <code>valueOf</code> instead might change resulting
value. See <a href='/coding_rules#rule_key=java%3AS2111'>S2111</a> .</p>","<p>Constructors for <code>String</code>, <code>BigInteger</code>, <code>BigDecimal</code> and the objects used to wrap primitives should never be
used. Doing so is less clear and uses more memory than simply using the desired value in the case of strings, and using <code>valueOf</code> for
everything else.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String empty = new String(); // Noncompliant; yields essentially """", so just use that.
String nonempty = new String(""Hello world""); // Noncompliant
Double myDouble = new Double(1.1); // Noncompliant; use valueOf
Integer integer = new Integer(1); // Noncompliant
Boolean bool = new Boolean(true); // Noncompliant
BigInteger bigInteger1 = new BigInteger(""3""); // Noncompliant
BigInteger bigInteger2 = new BigInteger(""9223372036854775807""); // Noncompliant
BigInteger bigInteger3 = new BigInteger(""111222333444555666777888999""); // Compliant, greater than Long.MAX_VALUE
</pre>
<h2>Compliant Solution</h2>
<pre>
String empty = """";
String nonempty = ""Hello world"";
Double myDouble = Double.valueOf(1.1);
Integer integer = Integer.valueOf(1);
Boolean bool = Boolean.valueOf(true);
BigInteger bigInteger1 = BigInteger.valueOf(3);
BigInteger bigInteger2 = BigInteger.valueOf(9223372036854775807L);
BigInteger bigInteger3 = new BigInteger(""111222333444555666777888999"");
</pre>
<h2>Exceptions</h2>
<p><code>BigDecimal</code> constructor with <code>double</code> argument is ignored as using <code>valueOf</code> instead might change resulting
value. See <a href='/coding_rules#rule_key=java%3AS2111'>S2111</a> .</p>",MAJOR,READY,False,[],['performance'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>Constructors for <code>String</code>, <code>BigInteger</code>, <code>BigDecimal</code> and the objects used to wrap primitives should never be\nused. Doing so is less clear and uses more memory than simply using the desired value in the case of strings, and using <code>valueOf</code> for\neverything else.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString empty = new String(); // Noncompliant; yields essentially """", so just use that.\nString nonempty = new String(""Hello world""); // Noncompliant\nDouble myDouble = new Double(1.1); // Noncompliant; use valueOf\nInteger integer = new Integer(1); // Noncompliant\nBoolean bool = new Boolean(true); // Noncompliant\nBigInteger bigInteger1 = new BigInteger(""3""); // Noncompliant\nBigInteger bigInteger2 = new BigInteger(""9223372036854775807""); // Noncompliant\nBigInteger bigInteger3 = new BigInteger(""111222333444555666777888999""); // Compliant, greater than Long.MAX_VALUE\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString empty = """";\nString nonempty = ""Hello world"";\nDouble myDouble = Double.valueOf(1.1);\nInteger integer = Integer.valueOf(1);\nBoolean bool = Boolean.valueOf(true);\nBigInteger bigInteger1 = BigInteger.valueOf(3);\nBigInteger bigInteger2 = BigInteger.valueOf(9223372036854775807L);\nBigInteger bigInteger3 = new BigInteger(""111222333444555666777888999"");\n</pre>\n<h2>Exceptions</h2>\n<p><code>BigDecimal</code> constructor with <code>double</code> argument is ignored as using <code>valueOf</code> instead might change resulting\nvalue. See <a href=\'/coding_rules#rule_key=java%3AS2111\'>S2111</a> .</p>'}]",[],['squid:S2129'],,,,
java:S4425,java,"""Integer.toHexString"" should not be used to build hexadecimal strings",2023-06-14T03:41:52+0000,"<p>Using <code>Integer.toHexString</code> is a common mistake when converting sequences of bytes into hexadecimal string representations. The problem
is that the method trims leading zeroes, which can lead to wrong conversions. For instance a two bytes value of <code>0x4508</code> would be converted
into <code>45</code> and <code>8</code> which once concatenated would give <code>0x458</code>.</p>
<p>This is particularly damaging when converting hash-codes and could lead to a security vulnerability.</p>
<p>This rule raises an issue when <code>Integer.toHexString</code> is used in any kind of string concatenations.</p>
<h2>Noncompliant Code Example</h2>
<pre>
MessageDigest md = MessageDigest.getInstance(""SHA-256"");
byte[] bytes = md.digest(password.getBytes(""UTF-8""));

StringBuilder sb = new StringBuilder();
for (byte b : bytes) {
    sb.append(Integer.toHexString( b &amp; 0xFF )); // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
MessageDigest md = MessageDigest.getInstance(""SHA-256"");
byte[] bytes = md.digest(password.getBytes(""UTF-8""));

StringBuilder sb = new StringBuilder();
for (byte b : bytes) {
    sb.append(String.format(""%02X"", b));
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/704"">MITRE, CWE-704</a> - Incorrect Type Conversion or Cast </li>
  <li> Derived from FindSecBugs rule <a href=""https://find-sec-bugs.github.io/bugs.htm#BAD_HEXA_CONVERSION"">BAD_HEXA_CONVERSION</a> </li>
</ul>","<p>Using <code>Integer.toHexString</code> is a common mistake when converting sequences of bytes into hexadecimal string representations. The problem
is that the method trims leading zeroes, which can lead to wrong conversions. For instance a two bytes value of <code>0x4508</code> would be converted
into <code>45</code> and <code>8</code> which once concatenated would give <code>0x458</code>.</p>
<p>This is particularly damaging when converting hash-codes and could lead to a security vulnerability.</p>
<p>This rule raises an issue when <code>Integer.toHexString</code> is used in any kind of string concatenations.</p>
<h2>Noncompliant Code Example</h2>
<pre>
MessageDigest md = MessageDigest.getInstance(""SHA-256"");
byte[] bytes = md.digest(password.getBytes(""UTF-8""));

StringBuilder sb = new StringBuilder();
for (byte b : bytes) {
    sb.append(Integer.toHexString( b &amp; 0xFF )); // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
MessageDigest md = MessageDigest.getInstance(""SHA-256"");
byte[] bytes = md.digest(password.getBytes(""UTF-8""));

StringBuilder sb = new StringBuilder();
for (byte b : bytes) {
    sb.append(String.format(""%02X"", b));
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/704"">MITRE, CWE-704</a> - Incorrect Type Conversion or Cast </li>
  <li> Derived from FindSecBugs rule <a href=""https://find-sec-bugs.github.io/bugs.htm#BAD_HEXA_CONVERSION"">BAD_HEXA_CONVERSION</a> </li>
</ul>",MAJOR,READY,False,[],['cwe'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,2min,CONSTANT_ISSUE,2min,False,ALL,False,"[{'key': 'default', 'content': '<p>Using <code>Integer.toHexString</code> is a common mistake when converting sequences of bytes into hexadecimal string representations. The problem\nis that the method trims leading zeroes, which can lead to wrong conversions. For instance a two bytes value of <code>0x4508</code> would be converted\ninto <code>45</code> and <code>8</code> which once concatenated would give <code>0x458</code>.</p>\n<p>This is particularly damaging when converting hash-codes and could lead to a security vulnerability.</p>\n<p>This rule raises an issue when <code>Integer.toHexString</code> is used in any kind of string concatenations.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nMessageDigest md = MessageDigest.getInstance(""SHA-256"");\nbyte[] bytes = md.digest(password.getBytes(""UTF-8""));\n\nStringBuilder sb = new StringBuilder();\nfor (byte b : bytes) {\n    sb.append(Integer.toHexString( b &amp; 0xFF )); // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nMessageDigest md = MessageDigest.getInstance(""SHA-256"");\nbyte[] bytes = md.digest(password.getBytes(""UTF-8""));\n\nStringBuilder sb = new StringBuilder();\nfor (byte b : bytes) {\n    sb.append(String.format(""%02X"", b));\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/704"">MITRE, CWE-704</a> - Incorrect Type Conversion or Cast </li>\n  <li> Derived from FindSecBugs rule <a href=""https://find-sec-bugs.github.io/bugs.htm#BAD_HEXA_CONVERSION"">BAD_HEXA_CONVERSION</a> </li>\n</ul>'}]",[],['squid:S4425'],,,,
java:S5993,java,"Constructors of an ""abstract"" class should not be declared ""public""",2023-06-14T03:41:52+0000,"<p>Abstract classes should not have public constructors. Constructors of abstract classes can only be called in constructors of their subclasses. So
there is no point in making them public. The <code>protected</code> modifier should be enough.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public abstract class AbstractClass1 {
    public AbstractClass1 () { // Noncompliant, has public modifier
        // do something here
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public abstract class AbstractClass2 {
    protected AbstractClass2 () {
        // do something here
    }
}
</pre>","<p>Abstract classes should not have public constructors. Constructors of abstract classes can only be called in constructors of their subclasses. So
there is no point in making them public. The <code>protected</code> modifier should be enough.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public abstract class AbstractClass1 {
    public AbstractClass1 () { // Noncompliant, has public modifier
        // do something here
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public abstract class AbstractClass2 {
    protected AbstractClass2 () {
        // do something here
    }
}
</pre>",MAJOR,READY,False,[],['design'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,2min,CONSTANT_ISSUE,2min,False,MAIN,False,"[{'key': 'default', 'content': '<p>Abstract classes should not have public constructors. Constructors of abstract classes can only be called in constructors of their subclasses. So\nthere is no point in making them public. The <code>protected</code> modifier should be enough.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic abstract class AbstractClass1 {\n    public AbstractClass1 () { // Noncompliant, has public modifier\n        // do something here\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic abstract class AbstractClass2 {\n    protected AbstractClass2 () {\n        // do something here\n    }\n}\n</pre>'}]",[],['squid:S5993'],,,,
java:S923,java,Functions should not be defined with a variable number of arguments,2023-06-14T03:41:52+0000,"<p>As stated per effective java :</p>
<blockquote>
  <p>Varargs methods are a convenient way to define methods that require a variable number of arguments, but they should not be overused. They can
  produce confusing results if used inappropriately.</p>
</blockquote>
<h2>Noncompliant Code Example</h2>
<pre>
void fun ( String... strings )	// Noncompliant
{
  // ...
}
</pre>","<p>As stated per effective java :</p>
<blockquote>
  <p>Varargs methods are a convenient way to define methods that require a variable number of arguments, but they should not be overused. They can
  produce confusing results if used inappropriately.</p>
</blockquote>
<h2>Noncompliant Code Example</h2>
<pre>
void fun ( String... strings )	// Noncompliant
{
  // ...
}
</pre>",INFO,READY,False,[],"['cert', 'pitfall']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,1min,CONSTANT_ISSUE,1min,False,ALL,False,"[{'key': 'default', 'content': '<p>As stated per effective java :</p>\n<blockquote>\n  <p>Varargs methods are a convenient way to define methods that require a variable number of arguments, but they should not be overused. They can\n  produce confusing results if used inappropriately.</p>\n</blockquote>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid fun ( String... strings )\t// Noncompliant\n{\n  // ...\n}\n</pre>'}]",[],['squid:S923'],,,,
java:S1168,java,Empty arrays and collections should be returned instead of null,2023-06-14T03:41:52+0000,"<p>Returning <code>null</code> instead of an actual array, collection or map forces callers of the method to explicitly test for nullity, making them
more complex and less readable.</p>
<p>Moreover, in many cases, <code>null</code> is used as a synonym for empty.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public static List&lt;Result&gt; getAllResults() {
  return null;                             // Noncompliant
}

public static Result[] getResults() {
  return null;                             // Noncompliant
}

public static Map&lt;String, Object&gt; getValues() {
  return null;                             // Noncompliant
}

public static void main(String[] args) {
  Result[] results = getResults();
  if (results != null) {                   // Nullity test required to prevent NPE
    for (Result result: results) {
      /* ... */
    }
  }

  List&lt;Result&gt; allResults = getAllResults();
  if (allResults != null) {                // Nullity test required to prevent NPE
    for (Result result: allResults) {
      /* ... */
    }
  }

  Map&lt;String, Object&gt; values = getValues();
  if (values != null) {                   // Nullity test required to prevent NPE
    values.forEach((k, v) -&gt; doSomething(k, v));
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public static List&lt;Result&gt; getAllResults() {
  return Collections.emptyList();          // Compliant
}

public static Result[] getResults() {
  return new Result[0];                    // Compliant
}

public static Map&lt;String, Object&gt; getValues() {
  return Collections.emptyMap();           // Compliant
}

public static void main(String[] args) {
  for (Result result: getAllResults()) {
    /* ... */
  }

  for (Result result: getResults()) {
    /* ... */
  }

  getValues().forEach((k, v) -&gt; doSomething(k, v));
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/aNYxBQ"">CERT, MSC19-C.</a> - For functions that return an array, prefer returning an empty array
  over a null value </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/JzZGBQ"">CERT, MET55-J.</a> - Return an empty array or collection instead of a null value for
  methods that return an array or collection </li>
</ul>","<p>Returning <code>null</code> instead of an actual array, collection or map forces callers of the method to explicitly test for nullity, making them
more complex and less readable.</p>
<p>Moreover, in many cases, <code>null</code> is used as a synonym for empty.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public static List&lt;Result&gt; getAllResults() {
  return null;                             // Noncompliant
}

public static Result[] getResults() {
  return null;                             // Noncompliant
}

public static Map&lt;String, Object&gt; getValues() {
  return null;                             // Noncompliant
}

public static void main(String[] args) {
  Result[] results = getResults();
  if (results != null) {                   // Nullity test required to prevent NPE
    for (Result result: results) {
      /* ... */
    }
  }

  List&lt;Result&gt; allResults = getAllResults();
  if (allResults != null) {                // Nullity test required to prevent NPE
    for (Result result: allResults) {
      /* ... */
    }
  }

  Map&lt;String, Object&gt; values = getValues();
  if (values != null) {                   // Nullity test required to prevent NPE
    values.forEach((k, v) -&gt; doSomething(k, v));
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public static List&lt;Result&gt; getAllResults() {
  return Collections.emptyList();          // Compliant
}

public static Result[] getResults() {
  return new Result[0];                    // Compliant
}

public static Map&lt;String, Object&gt; getValues() {
  return Collections.emptyMap();           // Compliant
}

public static void main(String[] args) {
  for (Result result: getAllResults()) {
    /* ... */
  }

  for (Result result: getResults()) {
    /* ... */
  }

  getValues().forEach((k, v) -&gt; doSomething(k, v));
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/aNYxBQ"">CERT, MSC19-C.</a> - For functions that return an array, prefer returning an empty array
  over a null value </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/JzZGBQ"">CERT, MET55-J.</a> - Return an empty array or collection instead of a null value for
  methods that return an array or collection </li>
</ul>",MAJOR,READY,False,[],['cert'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,30min,CONSTANT_ISSUE,30min,False,MAIN,False,"[{'key': 'default', 'content': '<p>Returning <code>null</code> instead of an actual array, collection or map forces callers of the method to explicitly test for nullity, making them\nmore complex and less readable.</p>\n<p>Moreover, in many cases, <code>null</code> is used as a synonym for empty.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic static List&lt;Result&gt; getAllResults() {\n  return null;                             // Noncompliant\n}\n\npublic static Result[] getResults() {\n  return null;                             // Noncompliant\n}\n\npublic static Map&lt;String, Object&gt; getValues() {\n  return null;                             // Noncompliant\n}\n\npublic static void main(String[] args) {\n  Result[] results = getResults();\n  if (results != null) {                   // Nullity test required to prevent NPE\n    for (Result result: results) {\n      /* ... */\n    }\n  }\n\n  List&lt;Result&gt; allResults = getAllResults();\n  if (allResults != null) {                // Nullity test required to prevent NPE\n    for (Result result: allResults) {\n      /* ... */\n    }\n  }\n\n  Map&lt;String, Object&gt; values = getValues();\n  if (values != null) {                   // Nullity test required to prevent NPE\n    values.forEach((k, v) -&gt; doSomething(k, v));\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static List&lt;Result&gt; getAllResults() {\n  return Collections.emptyList();          // Compliant\n}\n\npublic static Result[] getResults() {\n  return new Result[0];                    // Compliant\n}\n\npublic static Map&lt;String, Object&gt; getValues() {\n  return Collections.emptyMap();           // Compliant\n}\n\npublic static void main(String[] args) {\n  for (Result result: getAllResults()) {\n    /* ... */\n  }\n\n  for (Result result: getResults()) {\n    /* ... */\n  }\n\n  getValues().forEach((k, v) -&gt; doSomething(k, v));\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/aNYxBQ"">CERT, MSC19-C.</a> - For functions that return an array, prefer returning an empty array\n  over a null value </li>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/JzZGBQ"">CERT, MET55-J.</a> - Return an empty array or collection instead of a null value for\n  methods that return an array or collection </li>\n</ul>'}]",[],['squid:S1168'],,,,
java:S1166,java,Exception handlers should preserve the original exceptions,2023-06-14T03:41:52+0000,"<p>When handling a caught exception, the original exception’s message and stack trace should be logged or passed forward.</p>
<h2>Noncompliant Code Example</h2>
<pre>
try {
  /* ... */
} catch (Exception e) {   // Noncompliant - exception is lost
  LOGGER.info(""context"");
}

try {
  /* ... */
} catch (Exception e) {  // Noncompliant - exception is lost (only message is preserved)
  LOGGER.info(e.getMessage());
}

try {
  /* ... */
} catch (Exception e) {  // Noncompliant - original exception is lost
  throw new RuntimeException(""context"");
}
</pre>
<h2>Compliant Solution</h2>
<pre>
try {
  /* ... */
} catch (Exception e) {
  LOGGER.info(e);  // exception is logged
}

try {
  /* ... */
} catch (Exception e) {
  throw new RuntimeException(e);   // exception stack trace is propagated
}

try {
  /* ... */
} catch (RuntimeException e) {
  doSomething();
  throw e;  // original exception passed forward
} catch (Exception e) {
  throw new RuntimeException(e);  // Conversion into unchecked exception is also allowed
}
</pre>
<h2>Exceptions</h2>
<p><code>InterruptedException</code>, <code>NumberFormatException</code>, <code>DateTimeParseException</code>, <code>ParseException</code> and
<code>MalformedURLException</code> exceptions are arguably used to indicate nonexceptional outcomes. Similarly, handling
<code>NoSuchMethodException</code> is often required when dealing with the Java reflection API.</p>
<p>Because they are part of Java, developers have no choice but to deal with them. This rule does not verify that those particular exceptions are
correctly handled.</p>
<pre>
int myInteger;
try {
  myInteger = Integer.parseInt(myString);
} catch (NumberFormatException e) {
  // It is perfectly acceptable to not handle ""e"" here
  myInteger = 0;
}
</pre>
<p>Furthermore, no issue will be raised if the exception message is logged with additional information, as it shows that the developer added some
context to the error message.</p>
<pre>
try {
  /* ... */
} catch (Exception e) {
  String message = ""Exception raised while authenticating user: "" + e.getMessage();
  LOGGER.warn(message); // Compliant - exception message logged with some contextual information
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/"">OWASP Top 10 2021 Category A9</a> - Security Logging and
  Monitoring Failures </li>
  <li> <a href=""https://owasp.org/www-project-top-ten/2017/A10_2017-Insufficient_Logging%2526Monitoring"">OWASP Top 10 2017 Category A10</a> -
  Insufficient Logging &amp; Monitoring </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/xDdGBQ"">CERT, ERR00-J.</a> - Do not suppress or ignore checked exceptions </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/778"">MITRE, CWE-778</a> - Insufficient Logging </li>
</ul>","<p>When handling a caught exception, the original exception’s message and stack trace should be logged or passed forward.</p>
<h2>Noncompliant Code Example</h2>
<pre>
try {
  /* ... */
} catch (Exception e) {   // Noncompliant - exception is lost
  LOGGER.info(""context"");
}

try {
  /* ... */
} catch (Exception e) {  // Noncompliant - exception is lost (only message is preserved)
  LOGGER.info(e.getMessage());
}

try {
  /* ... */
} catch (Exception e) {  // Noncompliant - original exception is lost
  throw new RuntimeException(""context"");
}
</pre>
<h2>Compliant Solution</h2>
<pre>
try {
  /* ... */
} catch (Exception e) {
  LOGGER.info(e);  // exception is logged
}

try {
  /* ... */
} catch (Exception e) {
  throw new RuntimeException(e);   // exception stack trace is propagated
}

try {
  /* ... */
} catch (RuntimeException e) {
  doSomething();
  throw e;  // original exception passed forward
} catch (Exception e) {
  throw new RuntimeException(e);  // Conversion into unchecked exception is also allowed
}
</pre>
<h2>Exceptions</h2>
<p><code>InterruptedException</code>, <code>NumberFormatException</code>, <code>DateTimeParseException</code>, <code>ParseException</code> and
<code>MalformedURLException</code> exceptions are arguably used to indicate nonexceptional outcomes. Similarly, handling
<code>NoSuchMethodException</code> is often required when dealing with the Java reflection API.</p>
<p>Because they are part of Java, developers have no choice but to deal with them. This rule does not verify that those particular exceptions are
correctly handled.</p>
<pre>
int myInteger;
try {
  myInteger = Integer.parseInt(myString);
} catch (NumberFormatException e) {
  // It is perfectly acceptable to not handle ""e"" here
  myInteger = 0;
}
</pre>
<p>Furthermore, no issue will be raised if the exception message is logged with additional information, as it shows that the developer added some
context to the error message.</p>
<pre>
try {
  /* ... */
} catch (Exception e) {
  String message = ""Exception raised while authenticating user: "" + e.getMessage();
  LOGGER.warn(message); // Compliant - exception message logged with some contextual information
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/"">OWASP Top 10 2021 Category A9</a> - Security Logging and
  Monitoring Failures </li>
  <li> <a href=""https://owasp.org/www-project-top-ten/2017/A10_2017-Insufficient_Logging%2526Monitoring"">OWASP Top 10 2017 Category A10</a> -
  Insufficient Logging &amp; Monitoring </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/xDdGBQ"">CERT, ERR00-J.</a> - Do not suppress or ignore checked exceptions </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/778"">MITRE, CWE-778</a> - Insufficient Logging </li>
</ul>",MAJOR,READY,False,[],"['cert', 'cwe', 'error-handling', 'owasp-a10', 'suspicious']",java,Java,"[{'key': 'exceptions', 'htmlDesc': ""List of exceptions which should not be checked. Use a simple dash ('-') character to check all exceptions."", 'defaultValue': 'java.lang.InterruptedException, java.lang.NumberFormatException, java.lang.NoSuchMethodException, java.text.ParseException, java.net.MalformedURLException, java.time.format.DateTimeParseException', 'type': 'STRING'}]",CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,10min,CONSTANT_ISSUE,10min,False,MAIN,False,"[{'key': 'default', 'content': '<p>When handling a caught exception, the original exception’s message and stack trace should be logged or passed forward.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry {\n  /* ... */\n} catch (Exception e) {   // Noncompliant - exception is lost\n  LOGGER.info(""context"");\n}\n\ntry {\n  /* ... */\n} catch (Exception e) {  // Noncompliant - exception is lost (only message is preserved)\n  LOGGER.info(e.getMessage());\n}\n\ntry {\n  /* ... */\n} catch (Exception e) {  // Noncompliant - original exception is lost\n  throw new RuntimeException(""context"");\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry {\n  /* ... */\n} catch (Exception e) {\n  LOGGER.info(e);  // exception is logged\n}\n\ntry {\n  /* ... */\n} catch (Exception e) {\n  throw new RuntimeException(e);   // exception stack trace is propagated\n}\n\ntry {\n  /* ... */\n} catch (RuntimeException e) {\n  doSomething();\n  throw e;  // original exception passed forward\n} catch (Exception e) {\n  throw new RuntimeException(e);  // Conversion into unchecked exception is also allowed\n}\n</pre>\n<h2>Exceptions</h2>\n<p><code>InterruptedException</code>, <code>NumberFormatException</code>, <code>DateTimeParseException</code>, <code>ParseException</code> and\n<code>MalformedURLException</code> exceptions are arguably used to indicate nonexceptional outcomes. Similarly, handling\n<code>NoSuchMethodException</code> is often required when dealing with the Java reflection API.</p>\n<p>Because they are part of Java, developers have no choice but to deal with them. This rule does not verify that those particular exceptions are\ncorrectly handled.</p>\n<pre>\nint myInteger;\ntry {\n  myInteger = Integer.parseInt(myString);\n} catch (NumberFormatException e) {\n  // It is perfectly acceptable to not handle ""e"" here\n  myInteger = 0;\n}\n</pre>\n<p>Furthermore, no issue will be raised if the exception message is logged with additional information, as it shows that the developer added some\ncontext to the error message.</p>\n<pre>\ntry {\n  /* ... */\n} catch (Exception e) {\n  String message = ""Exception raised while authenticating user: "" + e.getMessage();\n  LOGGER.warn(message); // Compliant - exception message logged with some contextual information\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/"">OWASP Top 10 2021 Category A9</a> - Security Logging and\n  Monitoring Failures </li>\n  <li> <a href=""https://owasp.org/www-project-top-ten/2017/A10_2017-Insufficient_Logging%2526Monitoring"">OWASP Top 10 2017 Category A10</a> -\n  Insufficient Logging &amp; Monitoring </li>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/xDdGBQ"">CERT, ERR00-J.</a> - Do not suppress or ignore checked exceptions </li>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/778"">MITRE, CWE-778</a> - Insufficient Logging </li>\n</ul>'}]",[],['squid:S1166'],,,,
java:S2133,java,"Objects should not be created only to ""getClass""",2023-06-14T03:41:52+0000,"<p>Creating an object for the sole purpose of calling <code>getClass</code> on it is a waste of memory and cycles. Instead, simply use the class'
<code>.class</code> property.</p>
<h2>Noncompliant Code Example</h2>
<pre>
MyObject myOb = new MyObject();  // Noncompliant
Class c = myOb.getClass();
</pre>
<h2>Compliant Solution</h2>
<pre>
Class c = MyObject.class;
</pre>","<p>Creating an object for the sole purpose of calling <code>getClass</code> on it is a waste of memory and cycles. Instead, simply use the class'
<code>.class</code> property.</p>
<h2>Noncompliant Code Example</h2>
<pre>
MyObject myOb = new MyObject();  // Noncompliant
Class c = myOb.getClass();
</pre>
<h2>Compliant Solution</h2>
<pre>
Class c = MyObject.class;
</pre>",MAJOR,READY,False,[],['performance'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': ""<p>Creating an object for the sole purpose of calling <code>getClass</code> on it is a waste of memory and cycles. Instead, simply use the class'\n<code>.class</code> property.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nMyObject myOb = new MyObject();  // Noncompliant\nClass c = myOb.getClass();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nClass c = MyObject.class;\n</pre>""}]",[],['squid:S2133'],,,,
java:S1162,java,Checked exceptions should not be thrown,2023-06-14T03:41:52+0000,"<p>The purpose of checked exceptions is to ensure that errors will be dealt with, either by propagating them or by handling them, but some believe
that checked exceptions negatively impact the readability of source code, by spreading this error handling/propagation logic everywhere.</p>
<p>This rule verifies that no method throws a new checked exception.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void myMethod1() throws CheckedException {
  ...
  throw new CheckedException(message);   // Noncompliant
  ...
  throw new IllegalArgumentException(message); // Compliant; IllegalArgumentException is unchecked
}

public void myMethod2() throws CheckedException {  // Compliant; propagation allowed
  myMethod1();
}
</pre>","<p>The purpose of checked exceptions is to ensure that errors will be dealt with, either by propagating them or by handling them, but some believe
that checked exceptions negatively impact the readability of source code, by spreading this error handling/propagation logic everywhere.</p>
<p>This rule verifies that no method throws a new checked exception.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void myMethod1() throws CheckedException {
  ...
  throw new CheckedException(message);   // Noncompliant
  ...
  throw new IllegalArgumentException(message); // Compliant; IllegalArgumentException is unchecked
}

public void myMethod2() throws CheckedException {  // Compliant; propagation allowed
  myMethod1();
}
</pre>",MAJOR,READY,False,[],['error-handling'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,1h,CONSTANT_ISSUE,1h,False,MAIN,False,"[{'key': 'default', 'content': '<p>The purpose of checked exceptions is to ensure that errors will be dealt with, either by propagating them or by handling them, but some believe\nthat checked exceptions negatively impact the readability of source code, by spreading this error handling/propagation logic everywhere.</p>\n<p>This rule verifies that no method throws a new checked exception.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void myMethod1() throws CheckedException {\n  ...\n  throw new CheckedException(message);   // Noncompliant\n  ...\n  throw new IllegalArgumentException(message); // Compliant; IllegalArgumentException is unchecked\n}\n\npublic void myMethod2() throws CheckedException {  // Compliant; propagation allowed\n  myMethod1();\n}\n</pre>'}]",[],['squid:S1162'],,,,
java:S1163,java,Exceptions should not be thrown in finally blocks,2023-06-14T03:41:52+0000,"<p>Throwing an exception from within a finally block will mask any exception which was previously thrown in the <code>try</code> or <code>catch</code>
block, and the masked’s exception message and stack trace will be lost.</p>
<h2>Noncompliant Code Example</h2>
<pre>
try {
  /* some work which end up throwing an exception */
  throw new IllegalArgumentException();
} finally {
  /* clean up */
  throw new RuntimeException();       // Noncompliant; masks the IllegalArgumentException
}
</pre>
<h2>Compliant Solution</h2>
<pre>
try {
  /* some work which end up throwing an exception */
  throw new IllegalArgumentException();
} finally {
  /* clean up */
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/FTZGBQ"">CERT, ERR05-J.</a> - Do not let checked exceptions escape from a finally block </li>
</ul>","<p>Throwing an exception from within a finally block will mask any exception which was previously thrown in the <code>try</code> or <code>catch</code>
block, and the masked’s exception message and stack trace will be lost.</p>
<h2>Noncompliant Code Example</h2>
<pre>
try {
  /* some work which end up throwing an exception */
  throw new IllegalArgumentException();
} finally {
  /* clean up */
  throw new RuntimeException();       // Noncompliant; masks the IllegalArgumentException
}
</pre>
<h2>Compliant Solution</h2>
<pre>
try {
  /* some work which end up throwing an exception */
  throw new IllegalArgumentException();
} finally {
  /* clean up */
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/FTZGBQ"">CERT, ERR05-J.</a> - Do not let checked exceptions escape from a finally block </li>
</ul>",CRITICAL,READY,False,[],"['cert', 'error-handling', 'suspicious']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,30min,CONSTANT_ISSUE,30min,False,MAIN,False,"[{'key': 'default', 'content': '<p>Throwing an exception from within a finally block will mask any exception which was previously thrown in the <code>try</code> or <code>catch</code>\nblock, and the masked’s exception message and stack trace will be lost.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry {\n  /* some work which end up throwing an exception */\n  throw new IllegalArgumentException();\n} finally {\n  /* clean up */\n  throw new RuntimeException();       // Noncompliant; masks the IllegalArgumentException\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry {\n  /* some work which end up throwing an exception */\n  throw new IllegalArgumentException();\n} finally {\n  /* clean up */\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/FTZGBQ"">CERT, ERR05-J.</a> - Do not let checked exceptions escape from a finally block </li>\n</ul>'}]",[],['squid:S1163'],,,,
java:S1165,java,Exception classes should be immutable,2023-06-14T03:41:52+0000,"<p>Exceptions are meant to represent the application’s state at the point at which an error occurred.</p>
<p>Making all fields in an <code>Exception</code> class <code>final</code> ensures that this state:</p>
<ul>
  <li> Will be fully defined at the same time the <code>Exception</code> is instantiated. </li>
  <li> Won’t be updated or corrupted by a questionable error handler. </li>
</ul>
<p>This will enable developers to quickly understand what went wrong.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyException extends Exception {

  private int status;                               // Noncompliant

  public MyException(String message) {
    super(message);
  }

  public int getStatus() {
    return status;
  }

  public void setStatus(int status) {
    this.status = status;
  }

}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyException extends Exception {

  private final int status;

  public MyException(String message, int status) {
    super(message);
    this.status = status;
  }

  public int getStatus() {
    return status;
  }

}
</pre>","<p>Exceptions are meant to represent the application’s state at the point at which an error occurred.</p>
<p>Making all fields in an <code>Exception</code> class <code>final</code> ensures that this state:</p>
<ul>
  <li> Will be fully defined at the same time the <code>Exception</code> is instantiated. </li>
  <li> Won’t be updated or corrupted by a questionable error handler. </li>
</ul>
<p>This will enable developers to quickly understand what went wrong.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyException extends Exception {

  private int status;                               // Noncompliant

  public MyException(String message) {
    super(message);
  }

  public int getStatus() {
    return status;
  }

  public void setStatus(int status) {
    this.status = status;
  }

}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyException extends Exception {

  private final int status;

  public MyException(String message, int status) {
    super(message);
    this.status = status;
  }

  public int getStatus() {
    return status;
  }

}
</pre>",MINOR,READY,False,[],['error-handling'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,15min,CONSTANT_ISSUE,15min,False,ALL,False,"[{'key': 'default', 'content': '<p>Exceptions are meant to represent the application’s state at the point at which an error occurred.</p>\n<p>Making all fields in an <code>Exception</code> class <code>final</code> ensures that this state:</p>\n<ul>\n  <li> Will be fully defined at the same time the <code>Exception</code> is instantiated. </li>\n  <li> Won’t be updated or corrupted by a questionable error handler. </li>\n</ul>\n<p>This will enable developers to quickly understand what went wrong.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyException extends Exception {\n\n  private int status;                               // Noncompliant\n\n  public MyException(String message) {\n    super(message);\n  }\n\n  public int getStatus() {\n    return status;\n  }\n\n  public void setStatus(int status) {\n    this.status = status;\n  }\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyException extends Exception {\n\n  private final int status;\n\n  public MyException(String message, int status) {\n    super(message);\n    this.status = status;\n  }\n\n  public int getStatus() {\n    return status;\n  }\n\n}\n</pre>'}]",[],['squid:S1165'],,,,
java:S2131,java,"Primitives should not be boxed just for ""String"" conversion",2023-06-14T03:41:52+0000,"<p>""Boxing"" is the process of putting a primitive value into a primitive-wrapper object. When that’s done purely to use the wrapper class'
<code>toString</code> method, it’s a waste of memory and cycles because those methods are <code>static</code>, and can therefore be used without a
class instance. Similarly, using the <code>static</code> method <code>valueOf</code> in the primitive-wrapper classes with a non-<code>String</code>
argument should be avoided.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int myInt = 4;
String myIntString = (new Integer(myInt)).toString(); // Noncompliant; creates &amp; discards an Integer object
myIntString = Integer.valueOf(myInt).toString(); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
int myInt = 4;
String myIntString = Integer.toString(myInt);
</pre>
<h2>Deprecated</h2>
<p>This rule is deprecated; use <a href='/coding_rules#rule_key=java%3AS1158'>S1158</a> instead.</p>","<p>""Boxing"" is the process of putting a primitive value into a primitive-wrapper object. When that’s done purely to use the wrapper class'
<code>toString</code> method, it’s a waste of memory and cycles because those methods are <code>static</code>, and can therefore be used without a
class instance. Similarly, using the <code>static</code> method <code>valueOf</code> in the primitive-wrapper classes with a non-<code>String</code>
argument should be avoided.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int myInt = 4;
String myIntString = (new Integer(myInt)).toString(); // Noncompliant; creates &amp; discards an Integer object
myIntString = Integer.valueOf(myInt).toString(); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
int myInt = 4;
String myIntString = Integer.toString(myInt);
</pre>
<h2>Deprecated</h2>
<p>This rule is deprecated; use <a href='/coding_rules#rule_key=java%3AS1158'>S1158</a> instead.</p>",MAJOR,DEPRECATED,False,[],[],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>""Boxing"" is the process of putting a primitive value into a primitive-wrapper object. When that’s done purely to use the wrapper class\'\n<code>toString</code> method, it’s a waste of memory and cycles because those methods are <code>static</code>, and can therefore be used without a\nclass instance. Similarly, using the <code>static</code> method <code>valueOf</code> in the primitive-wrapper classes with a non-<code>String</code>\nargument should be avoided.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint myInt = 4;\nString myIntString = (new Integer(myInt)).toString(); // Noncompliant; creates &amp; discards an Integer object\nmyIntString = Integer.valueOf(myInt).toString(); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint myInt = 4;\nString myIntString = Integer.toString(myInt);\n</pre>\n<h2>Deprecated</h2>\n<p>This rule is deprecated; use <a href=\'/coding_rules#rule_key=java%3AS1158\'>S1158</a> instead.</p>'}]",[],['squid:S2131'],,,,
java:S2139,java,Exceptions should be either logged or rethrown but not both,2023-06-14T03:41:52+0000,"<p>In applications where the accepted practice is to log an <code>Exception</code> and then rethrow it, you end up with miles-long logs that contain
multiple instances of the same exception. In multi-threaded applications debugging this type of log can be particularly hellish because messages from
other threads will be interwoven with the repetitions of the logged-and-thrown <code>Exception</code>. Instead, exceptions should be either logged or
rethrown, not both.</p>
<h2>Noncompliant Code Example</h2>
<pre>
catch (SQLException e) {
  ...
  LOGGER.log(Level.ERROR,  contextInfo, e);
  throw new MySQLException(contextInfo, e);
}
</pre>
<h2>Compliant Solution</h2>
<pre>
catch (SQLException e) {
  ...
  throw new MySQLException(contextInfo, e);
}
</pre>
<p>or</p>
<pre>
catch (SQLException e) {
  ...
  LOGGER.log(Level.ERROR,  contextInfo, e);
  // handle exception...
}
</pre>","<p>In applications where the accepted practice is to log an <code>Exception</code> and then rethrow it, you end up with miles-long logs that contain
multiple instances of the same exception. In multi-threaded applications debugging this type of log can be particularly hellish because messages from
other threads will be interwoven with the repetitions of the logged-and-thrown <code>Exception</code>. Instead, exceptions should be either logged or
rethrown, not both.</p>
<h2>Noncompliant Code Example</h2>
<pre>
catch (SQLException e) {
  ...
  LOGGER.log(Level.ERROR,  contextInfo, e);
  throw new MySQLException(contextInfo, e);
}
</pre>
<h2>Compliant Solution</h2>
<pre>
catch (SQLException e) {
  ...
  throw new MySQLException(contextInfo, e);
}
</pre>
<p>or</p>
<pre>
catch (SQLException e) {
  ...
  LOGGER.log(Level.ERROR,  contextInfo, e);
  // handle exception...
}
</pre>",MAJOR,READY,False,[],"['clumsy', 'error-handling']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,15min,CONSTANT_ISSUE,15min,False,MAIN,False,"[{'key': 'default', 'content': '<p>In applications where the accepted practice is to log an <code>Exception</code> and then rethrow it, you end up with miles-long logs that contain\nmultiple instances of the same exception. In multi-threaded applications debugging this type of log can be particularly hellish because messages from\nother threads will be interwoven with the repetitions of the logged-and-thrown <code>Exception</code>. Instead, exceptions should be either logged or\nrethrown, not both.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ncatch (SQLException e) {\n  ...\n  LOGGER.log(Level.ERROR,  contextInfo, e);\n  throw new MySQLException(contextInfo, e);\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ncatch (SQLException e) {\n  ...\n  throw new MySQLException(contextInfo, e);\n}\n</pre>\n<p>or</p>\n<pre>\ncatch (SQLException e) {\n  ...\n  LOGGER.log(Level.ERROR,  contextInfo, e);\n  // handle exception...\n}\n</pre>'}]",[],['squid:S2139'],,,,
java:S2253,java,Track uses of disallowed methods,2023-06-14T03:41:52+0000,"<p>This rule allows banning certain methods.</p>
<h2>Noncompliant Code Example</h2>
<p>Given parameters:</p>
<ul>
  <li> className:java.lang.String </li>
  <li> methodName: replace </li>
  <li> argumentTypes: java.lang.CharSequence, java.lang.CharSequence </li>
</ul>
<pre>
String name;
name.replace(""A"",""a"");  // Noncompliant
</pre>","<p>This rule allows banning certain methods.</p>
<h2>Noncompliant Code Example</h2>
<p>Given parameters:</p>
<ul>
  <li> className:java.lang.String </li>
  <li> methodName: replace </li>
  <li> argumentTypes: java.lang.CharSequence, java.lang.CharSequence </li>
</ul>
<pre>
String name;
name.replace(""A"",""a"");  // Noncompliant
</pre>",MAJOR,READY,True,[],[],java,Java,"[{'key': 'methodName', 'htmlDesc': 'Name of the forbidden method', 'type': 'STRING'}, {'key': 'className', 'htmlDesc': 'Name of the class whose method is forbidden', 'type': 'STRING'}, {'key': 'argumentTypes', 'htmlDesc': 'Comma-delimited list of argument types, E.G. java.lang.String, int[], int', 'type': 'STRING'}, {'key': 'allOverloads', 'htmlDesc': 'Set to true to flag all overloads regardless of parameter type', 'defaultValue': 'false', 'type': 'BOOLEAN'}]",CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,0min,CONSTANT_ISSUE,0min,False,MAIN,False,"[{'key': 'default', 'content': '<p>This rule allows banning certain methods.</p>\n<h2>Noncompliant Code Example</h2>\n<p>Given parameters:</p>\n<ul>\n  <li> className:java.lang.String </li>\n  <li> methodName: replace </li>\n  <li> argumentTypes: java.lang.CharSequence, java.lang.CharSequence </li>\n</ul>\n<pre>\nString name;\nname.replace(""A"",""a"");  // Noncompliant\n</pre>'}]",[],['squid:S2253'],,,,
java:S4551,java,"Enum values should be compared with ""==""",2023-06-14T03:41:52+0000,"<p>Testing equality of an enum value with <code>equals</code> is perfectly valid because an enum is an Object and every Java developer knows ""==""
should not be used to compare the content of an Object. At the same time, using ""=="" on enums:</p>
<ul>
  <li> provides the same expected comparison (content) as <code>equals</code> </li>
  <li> is more null-safe than equals() </li>
  <li> provides compile-time (static) checking rather than runtime checking </li>
</ul>
<p>For these reasons, use of ""=="" should be preferred to <code>equals</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public enum Fruit {
   APPLE, BANANA, GRAPE
}

public enum Cake {
  LEMON_TART, CHEESE_CAKE
}

public boolean isFruitGrape(Fruit candidateFruit) {
  return candidateFruit.equals(Fruit.GRAPE); // Noncompliant; this will raise an NPE if candidateFruit is NULL
}

public boolean isFruitGrape(Cake candidateFruit) {
  return candidateFruit.equals(Fruit.GRAPE); // Noncompliant; always returns false
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public boolean isFruitGrape(Fruit candidateFruit) {
  return candidateFruit == Fruit.GRAPE; // Compliant; there is only one instance of Fruit.GRAPE - if candidateFruit is a GRAPE it will have the same reference as Fruit.GRAPE
}

public boolean isFruitGrape(Cake candidateFruit) {
  return candidateFruit == Fruit.GRAPE; // Compliant; compilation time failure
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.javaworld.com/article/2074292/core-java/use-----or-----to-compare-java-enums.html"">Use == (or !=) to Compare Java
  Enums</a> </li>
</ul>","<p>Testing equality of an enum value with <code>equals</code> is perfectly valid because an enum is an Object and every Java developer knows ""==""
should not be used to compare the content of an Object. At the same time, using ""=="" on enums:</p>
<ul>
  <li> provides the same expected comparison (content) as <code>equals</code> </li>
  <li> is more null-safe than equals() </li>
  <li> provides compile-time (static) checking rather than runtime checking </li>
</ul>
<p>For these reasons, use of ""=="" should be preferred to <code>equals</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public enum Fruit {
   APPLE, BANANA, GRAPE
}

public enum Cake {
  LEMON_TART, CHEESE_CAKE
}

public boolean isFruitGrape(Fruit candidateFruit) {
  return candidateFruit.equals(Fruit.GRAPE); // Noncompliant; this will raise an NPE if candidateFruit is NULL
}

public boolean isFruitGrape(Cake candidateFruit) {
  return candidateFruit.equals(Fruit.GRAPE); // Noncompliant; always returns false
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public boolean isFruitGrape(Fruit candidateFruit) {
  return candidateFruit == Fruit.GRAPE; // Compliant; there is only one instance of Fruit.GRAPE - if candidateFruit is a GRAPE it will have the same reference as Fruit.GRAPE
}

public boolean isFruitGrape(Cake candidateFruit) {
  return candidateFruit == Fruit.GRAPE; // Compliant; compilation time failure
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.javaworld.com/article/2074292/core-java/use-----or-----to-compare-java-enums.html"">Use == (or !=) to Compare Java
  Enums</a> </li>
</ul>",MAJOR,READY,False,[],[],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>Testing equality of an enum value with <code>equals</code> is perfectly valid because an enum is an Object and every Java developer knows ""==""\nshould not be used to compare the content of an Object. At the same time, using ""=="" on enums:</p>\n<ul>\n  <li> provides the same expected comparison (content) as <code>equals</code> </li>\n  <li> is more null-safe than equals() </li>\n  <li> provides compile-time (static) checking rather than runtime checking </li>\n</ul>\n<p>For these reasons, use of ""=="" should be preferred to <code>equals</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic enum Fruit {\n   APPLE, BANANA, GRAPE\n}\n\npublic enum Cake {\n  LEMON_TART, CHEESE_CAKE\n}\n\npublic boolean isFruitGrape(Fruit candidateFruit) {\n  return candidateFruit.equals(Fruit.GRAPE); // Noncompliant; this will raise an NPE if candidateFruit is NULL\n}\n\npublic boolean isFruitGrape(Cake candidateFruit) {\n  return candidateFruit.equals(Fruit.GRAPE); // Noncompliant; always returns false\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean isFruitGrape(Fruit candidateFruit) {\n  return candidateFruit == Fruit.GRAPE; // Compliant; there is only one instance of Fruit.GRAPE - if candidateFruit is a GRAPE it will have the same reference as Fruit.GRAPE\n}\n\npublic boolean isFruitGrape(Cake candidateFruit) {\n  return candidateFruit == Fruit.GRAPE; // Compliant; compilation time failure\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://www.javaworld.com/article/2074292/core-java/use-----or-----to-compare-java-enums.html"">Use == (or !=) to Compare Java\n  Enums</a> </li>\n</ul>'}]",[],['squid:S4551'],,,,
java:S818,java,Literal suffixes should be upper case,2023-06-14T03:41:52+0000,"<p>Using upper case literal suffixes removes the potential ambiguity between ""1"" (digit 1) and ""l"" (letter el) for declaring literals.</p>
<h2>Noncompliant Code Example</h2>
<pre>
long long1 = 1l; // Noncompliant
float float1 = 1.0f; // Noncompliant
double double1 = 1.0d; // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
long long1 = 1L;
float float1 = 1.0F;
double double1 = 1.0D;
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/cdYxBQ"">CERT DCL16-C.</a> - Use ""L,"" not ""l,"" to indicate a long value </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/7DZGBQ"">CERT, DCL50-J.</a> - Use visually distinct identifiers </li>
</ul>","<p>Using upper case literal suffixes removes the potential ambiguity between ""1"" (digit 1) and ""l"" (letter el) for declaring literals.</p>
<h2>Noncompliant Code Example</h2>
<pre>
long long1 = 1l; // Noncompliant
float float1 = 1.0f; // Noncompliant
double double1 = 1.0d; // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
long long1 = 1L;
float float1 = 1.0F;
double double1 = 1.0D;
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/cdYxBQ"">CERT DCL16-C.</a> - Use ""L,"" not ""l,"" to indicate a long value </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/7DZGBQ"">CERT, DCL50-J.</a> - Use visually distinct identifiers </li>
</ul>",MINOR,READY,False,[],"['cert', 'convention', 'pitfall']",java,Java,"[{'key': 'checkOnlyLong', 'htmlDesc': 'Set to &quot;true&quot; to ignore &quot;float&quot; and &quot;double&quot; declarations.', 'defaultValue': 'false', 'type': 'BOOLEAN'}]",CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,2min,CONSTANT_ISSUE,2min,False,ALL,False,"[{'key': 'default', 'content': '<p>Using upper case literal suffixes removes the potential ambiguity between ""1"" (digit 1) and ""l"" (letter el) for declaring literals.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlong long1 = 1l; // Noncompliant\nfloat float1 = 1.0f; // Noncompliant\ndouble double1 = 1.0d; // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlong long1 = 1L;\nfloat float1 = 1.0F;\ndouble double1 = 1.0D;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/cdYxBQ"">CERT DCL16-C.</a> - Use ""L,"" not ""l,"" to indicate a long value </li>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/7DZGBQ"">CERT, DCL50-J.</a> - Use visually distinct identifiers </li>\n</ul>'}]",[],['squid:S818'],,,,
java:S1160,java,Public methods should throw at most one checked exception,2023-06-14T03:41:52+0000,"<p>Using checked exceptions forces method callers to deal with errors, either by propagating them or by handling them. Throwing exceptions makes them
fully part of the API of the method.</p>
<p>But to keep the complexity for callers reasonable, methods should not throw more than one kind of checked exception.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void delete() throws IOException, SQLException {      // Noncompliant
  /* ... */
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void delete() throws SomeApplicationLevelException {
  /* ... */
}
</pre>
<h2>Exceptions</h2>
<p>Overriding methods are not checked by this rule and are allowed to throw several checked exceptions.</p>","<p>Using checked exceptions forces method callers to deal with errors, either by propagating them or by handling them. Throwing exceptions makes them
fully part of the API of the method.</p>
<p>But to keep the complexity for callers reasonable, methods should not throw more than one kind of checked exception.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void delete() throws IOException, SQLException {      // Noncompliant
  /* ... */
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void delete() throws SomeApplicationLevelException {
  /* ... */
}
</pre>
<h2>Exceptions</h2>
<p>Overriding methods are not checked by this rule and are allowed to throw several checked exceptions.</p>",MAJOR,READY,False,[],['error-handling'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,20min,CONSTANT_ISSUE,20min,False,MAIN,False,"[{'key': 'default', 'content': '<p>Using checked exceptions forces method callers to deal with errors, either by propagating them or by handling them. Throwing exceptions makes them\nfully part of the API of the method.</p>\n<p>But to keep the complexity for callers reasonable, methods should not throw more than one kind of checked exception.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void delete() throws IOException, SQLException {      // Noncompliant\n  /* ... */\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void delete() throws SomeApplicationLevelException {\n  /* ... */\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Overriding methods are not checked by this rule and are allowed to throw several checked exceptions.</p>'}]",[],['squid:S1160'],,,,
java:S1161,java,"""@Override"" should be used on overriding and implementing methods",2023-06-14T03:41:52+0000,"<p>Using the <code>@Override</code> annotation is useful for two reasons :</p>
<ul>
  <li> It elicits a warning from the compiler if the annotated method doesn’t actually override anything, as in the case of a misspelling. </li>
  <li> It improves the readability of the source code by making it obvious that methods are overridden. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
class ParentClass {
  public boolean doSomething(){...}
}
class FirstChildClass extends ParentClass {
  public boolean doSomething(){...}  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class ParentClass {
  public boolean doSomething(){...}
}
class FirstChildClass extends ParentClass {
  @Override
  public boolean doSomething(){...}  // Compliant
}
</pre>
<h2>Exceptions</h2>
<p>This rule is relaxed when overriding a method from the <code>Object</code> class like <code>toString()</code>, <code>hashCode()</code>, …​</p>","<p>Using the <code>@Override</code> annotation is useful for two reasons :</p>
<ul>
  <li> It elicits a warning from the compiler if the annotated method doesn’t actually override anything, as in the case of a misspelling. </li>
  <li> It improves the readability of the source code by making it obvious that methods are overridden. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
class ParentClass {
  public boolean doSomething(){...}
}
class FirstChildClass extends ParentClass {
  public boolean doSomething(){...}  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class ParentClass {
  public boolean doSomething(){...}
}
class FirstChildClass extends ParentClass {
  @Override
  public boolean doSomething(){...}  // Compliant
}
</pre>
<h2>Exceptions</h2>
<p>This rule is relaxed when overriding a method from the <code>Object</code> class like <code>toString()</code>, <code>hashCode()</code>, …​</p>",MAJOR,READY,False,[],['bad-practice'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>Using the <code>@Override</code> annotation is useful for two reasons :</p>\n<ul>\n  <li> It elicits a warning from the compiler if the annotated method doesn’t actually override anything, as in the case of a misspelling. </li>\n  <li> It improves the readability of the source code by making it obvious that methods are overridden. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass ParentClass {\n  public boolean doSomething(){...}\n}\nclass FirstChildClass extends ParentClass {\n  public boolean doSomething(){...}  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass ParentClass {\n  public boolean doSomething(){...}\n}\nclass FirstChildClass extends ParentClass {\n  @Override\n  public boolean doSomething(){...}  // Compliant\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule is relaxed when overriding a method from the <code>Object</code> class like <code>toString()</code>, <code>hashCode()</code>, …\u200b</p>'}]",[],['squid:S1161'],,,,
java:S1774,java,The ternary operator should not be used,2023-06-14T03:41:52+0000,"<p>While the ternary operator is pleasingly compact, its use can make code more difficult to read. It should therefore be avoided in favor of the more
verbose <code>if</code>/<code>else</code> structure.</p>
<h2>Noncompliant Code Example</h2>
<pre>
System.out.println(i&gt;10?""yes"":""no"");
</pre>
<h2>Compliant Solution</h2>
<pre>
if (i &gt; 10) {
  System.out.println((""yes"");
} else {
  System.out.println(""no"");
}
</pre>","<p>While the ternary operator is pleasingly compact, its use can make code more difficult to read. It should therefore be avoided in favor of the more
verbose <code>if</code>/<code>else</code> structure.</p>
<h2>Noncompliant Code Example</h2>
<pre>
System.out.println(i&gt;10?""yes"":""no"");
</pre>
<h2>Compliant Solution</h2>
<pre>
if (i &gt; 10) {
  System.out.println((""yes"");
} else {
  System.out.println(""no"");
}
</pre>",MAJOR,READY,False,[],['brain-overload'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>While the ternary operator is pleasingly compact, its use can make code more difficult to read. It should therefore be avoided in favor of the more\nverbose <code>if</code>/<code>else</code> structure.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSystem.out.println(i&gt;10?""yes"":""no"");\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (i &gt; 10) {\n  System.out.println((""yes"");\n} else {\n  System.out.println(""no"");\n}\n</pre>'}]",[],['squid:S1774'],,,,
java:S2130,java,"Parsing should be used to convert ""Strings"" to primitives",2023-06-14T03:41:52+0000,"<p>Rather than creating a boxed primitive from a <code>String</code> to extract the primitive value, use the relevant <code>parse</code> method
instead. It will be clearer and more efficient.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String myNum = ""12.2"";

float f = (new Float(myNum)).floatValue();  // Noncompliant; creates &amp; discards a Float
</pre>
<h2>Compliant Solution</h2>
<pre>
String myNum = ""12.2"";

float f = Float.parseFloat(myNum);
</pre>","<p>Rather than creating a boxed primitive from a <code>String</code> to extract the primitive value, use the relevant <code>parse</code> method
instead. It will be clearer and more efficient.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String myNum = ""12.2"";

float f = (new Float(myNum)).floatValue();  // Noncompliant; creates &amp; discards a Float
</pre>
<h2>Compliant Solution</h2>
<pre>
String myNum = ""12.2"";

float f = Float.parseFloat(myNum);
</pre>",MINOR,READY,False,[],['performance'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>Rather than creating a boxed primitive from a <code>String</code> to extract the primitive value, use the relevant <code>parse</code> method\ninstead. It will be clearer and more efficient.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString myNum = ""12.2"";\n\nfloat f = (new Float(myNum)).floatValue();  // Noncompliant; creates &amp; discards a Float\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString myNum = ""12.2"";\n\nfloat f = Float.parseFloat(myNum);\n</pre>'}]",[],['squid:S2130'],,,,
java:S2250,java,Collection methods with O(n) performance should be used carefully,2023-06-14T03:41:52+0000,"<p>The time complexity of method calls on collections is not always obvious. For instance, for most collections the <code>size()</code> method takes
constant time, but the time required to execute <code>ConcurrentLinkedQueue.size()</code> is O(n), i.e. directly proportional to the number of
elements in the collection. When the collection is large, this could therefore be an expensive operation.</p>
<p>This rule raises an issue when the following O(n) methods are called outside of constructors on class fields:</p>
<ul>
  <li> <code>ArrayList</code>
    <ul>
      <li> <code>contains</code> </li>
      <li> <code>remove</code> </li>
    </ul>  </li>
  <li> <code>LinkedList</code>
    <ul>
      <li> <code>get</code> </li>
      <li> <code>contains</code> </li>
    </ul>  </li>
  <li> <code>ConcurrentLinkedQueue</code>
    <ul>
      <li> <code>size</code> </li>
      <li> <code>contains</code> </li>
    </ul>  </li>
  <li> <code>ConcurrentLinkedDeque</code>
    <ul>
      <li> <code>size</code> </li>
      <li> <code>contains</code> </li>
    </ul>  </li>
  <li> <code>CopyOnWriteArrayList</code>
    <ul>
      <li> <code>add</code> </li>
      <li> <code>contains</code> </li>
      <li> <code>remove</code> </li>
    </ul>  </li>
  <li> <code>CopyOnWriteArraySet</code>
    <ul>
      <li> <code>add</code> </li>
      <li> <code>contains</code> </li>
      <li> <code>remove</code> </li>
    </ul>  </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
ConcurrentLinkedQueue queue = new ConcurrentLinkedQueue();
//...
log.info(""Queue contains "" + queue.size() + "" elements"");  // Noncompliant
</pre>","<p>The time complexity of method calls on collections is not always obvious. For instance, for most collections the <code>size()</code> method takes
constant time, but the time required to execute <code>ConcurrentLinkedQueue.size()</code> is O(n), i.e. directly proportional to the number of
elements in the collection. When the collection is large, this could therefore be an expensive operation.</p>
<p>This rule raises an issue when the following O(n) methods are called outside of constructors on class fields:</p>
<ul>
  <li> <code>ArrayList</code>
    <ul>
      <li> <code>contains</code> </li>
      <li> <code>remove</code> </li>
    </ul>  </li>
  <li> <code>LinkedList</code>
    <ul>
      <li> <code>get</code> </li>
      <li> <code>contains</code> </li>
    </ul>  </li>
  <li> <code>ConcurrentLinkedQueue</code>
    <ul>
      <li> <code>size</code> </li>
      <li> <code>contains</code> </li>
    </ul>  </li>
  <li> <code>ConcurrentLinkedDeque</code>
    <ul>
      <li> <code>size</code> </li>
      <li> <code>contains</code> </li>
    </ul>  </li>
  <li> <code>CopyOnWriteArrayList</code>
    <ul>
      <li> <code>add</code> </li>
      <li> <code>contains</code> </li>
      <li> <code>remove</code> </li>
    </ul>  </li>
  <li> <code>CopyOnWriteArraySet</code>
    <ul>
      <li> <code>add</code> </li>
      <li> <code>contains</code> </li>
      <li> <code>remove</code> </li>
    </ul>  </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
ConcurrentLinkedQueue queue = new ConcurrentLinkedQueue();
//...
log.info(""Queue contains "" + queue.size() + "" elements"");  // Noncompliant
</pre>",MINOR,READY,False,[],['performance'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,15min,CONSTANT_ISSUE,15min,False,MAIN,False,"[{'key': 'default', 'content': '<p>The time complexity of method calls on collections is not always obvious. For instance, for most collections the <code>size()</code> method takes\nconstant time, but the time required to execute <code>ConcurrentLinkedQueue.size()</code> is O(n), i.e. directly proportional to the number of\nelements in the collection. When the collection is large, this could therefore be an expensive operation.</p>\n<p>This rule raises an issue when the following O(n) methods are called outside of constructors on class fields:</p>\n<ul>\n  <li> <code>ArrayList</code>\n    <ul>\n      <li> <code>contains</code> </li>\n      <li> <code>remove</code> </li>\n    </ul>  </li>\n  <li> <code>LinkedList</code>\n    <ul>\n      <li> <code>get</code> </li>\n      <li> <code>contains</code> </li>\n    </ul>  </li>\n  <li> <code>ConcurrentLinkedQueue</code>\n    <ul>\n      <li> <code>size</code> </li>\n      <li> <code>contains</code> </li>\n    </ul>  </li>\n  <li> <code>ConcurrentLinkedDeque</code>\n    <ul>\n      <li> <code>size</code> </li>\n      <li> <code>contains</code> </li>\n    </ul>  </li>\n  <li> <code>CopyOnWriteArrayList</code>\n    <ul>\n      <li> <code>add</code> </li>\n      <li> <code>contains</code> </li>\n      <li> <code>remove</code> </li>\n    </ul>  </li>\n  <li> <code>CopyOnWriteArraySet</code>\n    <ul>\n      <li> <code>add</code> </li>\n      <li> <code>contains</code> </li>\n      <li> <code>remove</code> </li>\n    </ul>  </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nConcurrentLinkedQueue queue = new ConcurrentLinkedQueue();\n//...\nlog.info(""Queue contains "" + queue.size() + "" elements"");  // Noncompliant\n</pre>'}]",[],['squid:S2250'],,,,
java:S2629,java,"""Preconditions"" and logging arguments should not require evaluation",2023-06-14T03:41:52+0000,"<p>Passing message arguments that require further evaluation into a Guava <code>com.google.common.base.Preconditions</code> check can result in a
performance penalty. That’s because whether or not they’re needed, each argument must be resolved before the method is actually called.</p>
<p>Similarly, passing concatenated strings into a logging method can also incur a needless performance hit because the concatenation will be performed
every time the method is called, whether or not the log level is low enough to show the message.</p>
<p>Instead, you should structure your code to pass static or pre-computed values into <code>Preconditions</code> conditions check and logging
calls.</p>
<p>Specifically, the built-in string formatting should be used instead of string concatenation, and if the message is the result of a method call,
then <code>Preconditions</code> should be skipped altogether, and the relevant exception should be conditionally thrown instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
logger.log(Level.DEBUG, ""Something went wrong: "" + message);  // Noncompliant; string concatenation performed even when log level too high to show DEBUG messages

logger.fine(""An exception occurred with message: "" + message); // Noncompliant

LOG.error(""Unable to open file "" + csvPath, e);  // Noncompliant

Preconditions.checkState(a &gt; 0, ""Arg must be positive, but got "" + a);  // Noncompliant. String concatenation performed even when a &gt; 0

Preconditions.checkState(condition, formatMessage());  // Noncompliant. formatMessage() invoked regardless of condition

Preconditions.checkState(condition, ""message: %s"", formatMessage());  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
logger.log(Level.SEVERE, ""Something went wrong: {0} "", message);  // String formatting only applied if needed

logger.fine(""An exception occurred with message: {}"", message);  // SLF4J, Log4j

logger.log(Level.SEVERE, () -&gt; ""Something went wrong: "" + message); // since Java 8, we can use Supplier , which will be evaluated lazily

LOG.error(""Unable to open file {0}"", csvPath, e);

if (LOG.isDebugEnabled()) {
  LOG.debug(""Unable to open file "" + csvPath, e);  // this is compliant, because it will not evaluate if log level is above debug.
}

Preconditions.checkState(arg &gt; 0, ""Arg must be positive, but got %d"", a);  // String formatting only applied if needed

if (!condition) {
  throw new IllegalStateException(formatMessage());  // formatMessage() only invoked conditionally
}

if (!condition) {
  throw new IllegalStateException(""message: "" + formatMessage());
}
</pre>
<h2>Exceptions</h2>
<p><code>catch</code> blocks are ignored, because the performance penalty is unimportant on exceptional paths (catch block should not be a part of
standard program flow). Getters are ignored as well as methods called on annotations which can be considered as getters. This rule accounts for
explicit test-level testing with SLF4J methods <code>isXXXEnabled</code> and ignores the bodies of such <code>if</code> statements.</p>","<p>Passing message arguments that require further evaluation into a Guava <code>com.google.common.base.Preconditions</code> check can result in a
performance penalty. That’s because whether or not they’re needed, each argument must be resolved before the method is actually called.</p>
<p>Similarly, passing concatenated strings into a logging method can also incur a needless performance hit because the concatenation will be performed
every time the method is called, whether or not the log level is low enough to show the message.</p>
<p>Instead, you should structure your code to pass static or pre-computed values into <code>Preconditions</code> conditions check and logging
calls.</p>
<p>Specifically, the built-in string formatting should be used instead of string concatenation, and if the message is the result of a method call,
then <code>Preconditions</code> should be skipped altogether, and the relevant exception should be conditionally thrown instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
logger.log(Level.DEBUG, ""Something went wrong: "" + message);  // Noncompliant; string concatenation performed even when log level too high to show DEBUG messages

logger.fine(""An exception occurred with message: "" + message); // Noncompliant

LOG.error(""Unable to open file "" + csvPath, e);  // Noncompliant

Preconditions.checkState(a &gt; 0, ""Arg must be positive, but got "" + a);  // Noncompliant. String concatenation performed even when a &gt; 0

Preconditions.checkState(condition, formatMessage());  // Noncompliant. formatMessage() invoked regardless of condition

Preconditions.checkState(condition, ""message: %s"", formatMessage());  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
logger.log(Level.SEVERE, ""Something went wrong: {0} "", message);  // String formatting only applied if needed

logger.fine(""An exception occurred with message: {}"", message);  // SLF4J, Log4j

logger.log(Level.SEVERE, () -&gt; ""Something went wrong: "" + message); // since Java 8, we can use Supplier , which will be evaluated lazily

LOG.error(""Unable to open file {0}"", csvPath, e);

if (LOG.isDebugEnabled()) {
  LOG.debug(""Unable to open file "" + csvPath, e);  // this is compliant, because it will not evaluate if log level is above debug.
}

Preconditions.checkState(arg &gt; 0, ""Arg must be positive, but got %d"", a);  // String formatting only applied if needed

if (!condition) {
  throw new IllegalStateException(formatMessage());  // formatMessage() only invoked conditionally
}

if (!condition) {
  throw new IllegalStateException(""message: "" + formatMessage());
}
</pre>
<h2>Exceptions</h2>
<p><code>catch</code> blocks are ignored, because the performance penalty is unimportant on exceptional paths (catch block should not be a part of
standard program flow). Getters are ignored as well as methods called on annotations which can be considered as getters. This rule accounts for
explicit test-level testing with SLF4J methods <code>isXXXEnabled</code> and ignores the bodies of such <code>if</code> statements.</p>",MAJOR,READY,False,[],['performance'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,MAIN,False,"[{'key': 'default', 'content': '<p>Passing message arguments that require further evaluation into a Guava <code>com.google.common.base.Preconditions</code> check can result in a\nperformance penalty. That’s because whether or not they’re needed, each argument must be resolved before the method is actually called.</p>\n<p>Similarly, passing concatenated strings into a logging method can also incur a needless performance hit because the concatenation will be performed\nevery time the method is called, whether or not the log level is low enough to show the message.</p>\n<p>Instead, you should structure your code to pass static or pre-computed values into <code>Preconditions</code> conditions check and logging\ncalls.</p>\n<p>Specifically, the built-in string formatting should be used instead of string concatenation, and if the message is the result of a method call,\nthen <code>Preconditions</code> should be skipped altogether, and the relevant exception should be conditionally thrown instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlogger.log(Level.DEBUG, ""Something went wrong: "" + message);  // Noncompliant; string concatenation performed even when log level too high to show DEBUG messages\n\nlogger.fine(""An exception occurred with message: "" + message); // Noncompliant\n\nLOG.error(""Unable to open file "" + csvPath, e);  // Noncompliant\n\nPreconditions.checkState(a &gt; 0, ""Arg must be positive, but got "" + a);  // Noncompliant. String concatenation performed even when a &gt; 0\n\nPreconditions.checkState(condition, formatMessage());  // Noncompliant. formatMessage() invoked regardless of condition\n\nPreconditions.checkState(condition, ""message: %s"", formatMessage());  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlogger.log(Level.SEVERE, ""Something went wrong: {0} "", message);  // String formatting only applied if needed\n\nlogger.fine(""An exception occurred with message: {}"", message);  // SLF4J, Log4j\n\nlogger.log(Level.SEVERE, () -&gt; ""Something went wrong: "" + message); // since Java 8, we can use Supplier , which will be evaluated lazily\n\nLOG.error(""Unable to open file {0}"", csvPath, e);\n\nif (LOG.isDebugEnabled()) {\n  LOG.debug(""Unable to open file "" + csvPath, e);  // this is compliant, because it will not evaluate if log level is above debug.\n}\n\nPreconditions.checkState(arg &gt; 0, ""Arg must be positive, but got %d"", a);  // String formatting only applied if needed\n\nif (!condition) {\n  throw new IllegalStateException(formatMessage());  // formatMessage() only invoked conditionally\n}\n\nif (!condition) {\n  throw new IllegalStateException(""message: "" + formatMessage());\n}\n</pre>\n<h2>Exceptions</h2>\n<p><code>catch</code> blocks are ignored, because the performance penalty is unimportant on exceptional paths (catch block should not be a part of\nstandard program flow). Getters are ignored as well as methods called on annotations which can be considered as getters. This rule accounts for\nexplicit test-level testing with SLF4J methods <code>isXXXEnabled</code> and ignores the bodies of such <code>if</code> statements.</p>'}]",[],['squid:S2629'],,,,
java:S2864,java,"""entrySet()"" should be iterated when both the key and value are needed",2023-06-14T03:41:52+0000,"<p>When only the keys from a map are needed in a loop, iterating the <code>keySet</code> makes sense. But when both the key and the value are needed,
it’s more efficient to iterate the <code>entrySet</code>, which will give access to both the key and value, instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void doSomethingWithMap(Map&lt;String,Object&gt; map) {
  for (String key : map.keySet()) {  // Noncompliant; for each key the value is retrieved
    Object value = map.get(key);
    // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void doSomethingWithMap(Map&lt;String,Object&gt; map) {
  for (Map.Entry&lt;String,Object&gt; entry : map.entrySet()) {
    String key = entry.getKey();
    Object value = entry.getValue();
    // ...
  }
}
</pre>","<p>When only the keys from a map are needed in a loop, iterating the <code>keySet</code> makes sense. But when both the key and the value are needed,
it’s more efficient to iterate the <code>entrySet</code>, which will give access to both the key and value, instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void doSomethingWithMap(Map&lt;String,Object&gt; map) {
  for (String key : map.keySet()) {  // Noncompliant; for each key the value is retrieved
    Object value = map.get(key);
    // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void doSomethingWithMap(Map&lt;String,Object&gt; map) {
  for (Map.Entry&lt;String,Object&gt; entry : map.entrySet()) {
    String key = entry.getKey();
    Object value = entry.getValue();
    // ...
  }
}
</pre>",MAJOR,READY,False,[],['performance'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>When only the keys from a map are needed in a loop, iterating the <code>keySet</code> makes sense. But when both the key and the value are needed,\nit’s more efficient to iterate the <code>entrySet</code>, which will give access to both the key and value, instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomethingWithMap(Map&lt;String,Object&gt; map) {\n  for (String key : map.keySet()) {  // Noncompliant; for each key the value is retrieved\n    Object value = map.get(key);\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomethingWithMap(Map&lt;String,Object&gt; map) {\n  for (Map.Entry&lt;String,Object&gt; entry : map.entrySet()) {\n    String key = entry.getKey();\n    Object value = entry.getValue();\n    // ...\n  }\n}\n</pre>'}]",[],['squid:S2864'],,,,
java:S1301,java,"""switch"" statements should have at least 3 ""case"" clauses",2023-06-14T03:41:52+0000,"<p><code>switch</code> statements are useful when there are many different cases depending on the value of the same expression.</p>
<p>For just one or two cases however, the code will be more readable with <code>if</code> statements.</p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (variable) {
  case 0:
    doSomething();
    break;
  default:
    doSomethingElse();
    break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (variable == 0) {
  doSomething();
} else {
  doSomethingElse();
}
</pre>","<p><code>switch</code> statements are useful when there are many different cases depending on the value of the same expression.</p>
<p>For just one or two cases however, the code will be more readable with <code>if</code> statements.</p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (variable) {
  case 0:
    doSomething();
    break;
  default:
    doSomethingElse();
    break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (variable == 0) {
  doSomething();
} else {
  doSomethingElse();
}
</pre>",MINOR,READY,False,[],['bad-practice'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p><code>switch</code> statements are useful when there are many different cases depending on the value of the same expression.</p>\n<p>For just one or two cases however, the code will be more readable with <code>if</code> statements.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (variable) {\n  case 0:\n    doSomething();\n    break;\n  default:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (variable == 0) {\n  doSomething();\n} else {\n  doSomethingElse();\n}\n</pre>'}]",[],['squid:S1301'],,,,
java:S1309,java,"Track uses of ""@SuppressWarnings"" annotations",2023-06-14T03:41:52+0000,"<p>This rule allows you to track the usage of the <code>@SuppressWarnings</code> mechanism.</p>
<h2>Noncompliant Code Example</h2>
<p>With a parameter value of ""unused"" :</p>
<pre>
@SuppressWarnings(""unused"")
@SuppressWarnings(""unchecked"")  // Noncompliant
</pre>","<p>This rule allows you to track the usage of the <code>@SuppressWarnings</code> mechanism.</p>
<h2>Noncompliant Code Example</h2>
<p>With a parameter value of ""unused"" :</p>
<pre>
@SuppressWarnings(""unused"")
@SuppressWarnings(""unchecked"")  // Noncompliant
</pre>",INFO,READY,False,[],[],java,Java,"[{'key': 'listOfWarnings', 'htmlDesc': 'Comma separated list of warnings that can be suppressed (example: unchecked, cast, boxing). An empty list means that no warning can be suppressed.', 'type': 'STRING'}]",CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,10min,CONSTANT_ISSUE,10min,False,ALL,False,"[{'key': 'default', 'content': '<p>This rule allows you to track the usage of the <code>@SuppressWarnings</code> mechanism.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With a parameter value of ""unused"" :</p>\n<pre>\n@SuppressWarnings(""unused"")\n@SuppressWarnings(""unchecked"")  // Noncompliant\n</pre>'}]",[],['squid:S1309'],,,,
java:S1541,java,Methods should not be too complex,2023-06-14T03:41:52+0000,"<p>The cyclomatic complexity of methods should not exceed a defined threshold.</p>
<p>Complex code can perform poorly and will in any case be difficult to understand and therefore to maintain.</p>
<h2>Exceptions</h2>
<p>While having a large number of fields in a class may indicate that it should be split, this rule nonetheless ignores high complexity in
<code>equals</code> and <code>hashCode</code> methods.</p>","<p>The cyclomatic complexity of methods should not exceed a defined threshold.</p>
<p>Complex code can perform poorly and will in any case be difficult to understand and therefore to maintain.</p>
<h2>Exceptions</h2>
<p>While having a large number of fields in a class may indicate that it should be split, this rule nonetheless ignores high complexity in
<code>equals</code> and <code>hashCode</code> methods.</p>",CRITICAL,READY,False,[],['brain-overload'],java,Java,"[{'key': 'Threshold', 'htmlDesc': 'The maximum authorized complexity.', 'defaultValue': '10', 'type': 'INTEGER'}]",LINEAR_OFFSET,LINEAR_OFFSET,CODE_SMELL,LINEAR_OFFSET,10min,LINEAR_OFFSET,10min,False,MAIN,False,"[{'key': 'default', 'content': '<p>The cyclomatic complexity of methods should not exceed a defined threshold.</p>\n<p>Complex code can perform poorly and will in any case be difficult to understand and therefore to maintain.</p>\n<h2>Exceptions</h2>\n<p>While having a large number of fields in a class may indicate that it should be split, this rule nonetheless ignores high complexity in\n<code>equals</code> and <code>hashCode</code> methods.</p>'}]",[],['squid:MethodCyclomaticComplexity'],1min,1min,per complexity point above the threshold,
java:S1659,java,Multiple variables should not be declared on the same line,2023-06-14T03:41:52+0000,"<p>Declaring multiple variables on one line is difficult to read.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class MyClass {

  private int a, b;

  public void method(){
    int c; int d;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass {

  private int a;
  private int b;

  public void method(){
    int c;
    int d;
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/YTZGBQ"">CERT, DCL52-J.</a> - Do not declare more than one variable per declaration </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/EtcxBQ"">CERT, DCL04-C.</a> - Do not declare more than one variable per declaration </li>
</ul>","<p>Declaring multiple variables on one line is difficult to read.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class MyClass {

  private int a, b;

  public void method(){
    int c; int d;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass {

  private int a;
  private int b;

  public void method(){
    int c;
    int d;
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/YTZGBQ"">CERT, DCL52-J.</a> - Do not declare more than one variable per declaration </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/EtcxBQ"">CERT, DCL04-C.</a> - Do not declare more than one variable per declaration </li>
</ul>",MINOR,READY,False,[],"['cert', 'convention']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,2min,CONSTANT_ISSUE,2min,False,ALL,False,"[{'key': 'default', 'content': '<p>Declaring multiple variables on one line is difficult to read.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass {\n\n  private int a, b;\n\n  public void method(){\n    int c; int d;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n\n  private int a;\n  private int b;\n\n  public void method(){\n    int c;\n    int d;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/YTZGBQ"">CERT, DCL52-J.</a> - Do not declare more than one variable per declaration </li>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/EtcxBQ"">CERT, DCL04-C.</a> - Do not declare more than one variable per declaration </li>\n</ul>'}]",[],['squid:S1659'],,,,
java:S2638,java,Method overrides should not change contracts,2023-06-14T03:41:52+0000,"<p>Because a subclass instance may be cast to and treated as an instance of the superclass, overriding methods should uphold the aspects of the
superclass contract that relate to the Liskov Substitution Principle. Specifically, if the parameters or return type of the superclass method are
marked with any of the following: <code>@Nullable</code>, <code>@CheckForNull</code>, <code>@NotNull</code>, <code>@NonNull</code>, and
<code>@Nonnull</code>, then subclass parameters are not allowed to tighten the contract, and return values are not allowed to loosen it.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Fruit {

  private Season ripe;
  private String color;

  public void setRipe(@Nullable Season ripe) {
    this.ripe = ripe;
  }

  public @NotNull Integer getProtein() {
    return 12;
  }
}

public class Raspberry extends Fruit {

  public void setRipe(@NotNull Season ripe) {  // Noncompliant
    this.ripe = ripe;
  }

  public @Nullable Integer getProtein() {  // Noncompliant
    return null;
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://en.wikipedia.org/wiki/Liskov_substitution_principle"">Wikipedia - Liskov substitution principle</a> </li>
</ul>","<p>Because a subclass instance may be cast to and treated as an instance of the superclass, overriding methods should uphold the aspects of the
superclass contract that relate to the Liskov Substitution Principle. Specifically, if the parameters or return type of the superclass method are
marked with any of the following: <code>@Nullable</code>, <code>@CheckForNull</code>, <code>@NotNull</code>, <code>@NonNull</code>, and
<code>@Nonnull</code>, then subclass parameters are not allowed to tighten the contract, and return values are not allowed to loosen it.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Fruit {

  private Season ripe;
  private String color;

  public void setRipe(@Nullable Season ripe) {
    this.ripe = ripe;
  }

  public @NotNull Integer getProtein() {
    return 12;
  }
}

public class Raspberry extends Fruit {

  public void setRipe(@NotNull Season ripe) {  // Noncompliant
    this.ripe = ripe;
  }

  public @Nullable Integer getProtein() {  // Noncompliant
    return null;
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://en.wikipedia.org/wiki/Liskov_substitution_principle"">Wikipedia - Liskov substitution principle</a> </li>
</ul>",CRITICAL,READY,False,[],['suspicious'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,15min,CONSTANT_ISSUE,15min,False,MAIN,False,"[{'key': 'default', 'content': '<p>Because a subclass instance may be cast to and treated as an instance of the superclass, overriding methods should uphold the aspects of the\nsuperclass contract that relate to the Liskov Substitution Principle. Specifically, if the parameters or return type of the superclass method are\nmarked with any of the following: <code>@Nullable</code>, <code>@CheckForNull</code>, <code>@NotNull</code>, <code>@NonNull</code>, and\n<code>@Nonnull</code>, then subclass parameters are not allowed to tighten the contract, and return values are not allowed to loosen it.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit {\n\n  private Season ripe;\n  private String color;\n\n  public void setRipe(@Nullable Season ripe) {\n    this.ripe = ripe;\n  }\n\n  public @NotNull Integer getProtein() {\n    return 12;\n  }\n}\n\npublic class Raspberry extends Fruit {\n\n  public void setRipe(@NotNull Season ripe) {  // Noncompliant\n    this.ripe = ripe;\n  }\n\n  public @Nullable Integer getProtein() {  // Noncompliant\n    return null;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://en.wikipedia.org/wiki/Liskov_substitution_principle"">Wikipedia - Liskov substitution principle</a> </li>\n</ul>'}]",[],['squid:S2638'],,,,
java:S3725,java,"Java 8's ""Files.exists"" should not be used",2023-06-14T03:41:52+0000,"<p>The <code>Files.exists</code> method has noticeably poor performance in JDK 8, and can slow an application significantly when used to check files
that don’t actually exist.</p>
<p>The same goes for <code>Files.notExists</code>, <code>Files.isDirectory</code> and <code>Files.isRegularFile</code> from <code>java.nio.file</code>
package.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project’s <code>sonar.java.source</code> is not 8.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Path myPath;
if(java.nio.file.Files.exists(myPath)) {  // Noncompliant
 // do something
}
</pre>
<h2>Compliant Solution</h2>
<pre>
Path myPath;
if(myPath.toFile().exists())) {
 // do something
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://bugs.openjdk.java.net/browse/JDK-8153414"">https://bugs.openjdk.java.net/browse/JDK-8153414</a> </li>
  <li> <a href=""https://bugs.openjdk.java.net/browse/JDK-8154077"">https://bugs.openjdk.java.net/browse/JDK-8154077</a> </li>
</ul>","<p>The <code>Files.exists</code> method has noticeably poor performance in JDK 8, and can slow an application significantly when used to check files
that don’t actually exist.</p>
<p>The same goes for <code>Files.notExists</code>, <code>Files.isDirectory</code> and <code>Files.isRegularFile</code> from <code>java.nio.file</code>
package.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project’s <code>sonar.java.source</code> is not 8.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Path myPath;
if(java.nio.file.Files.exists(myPath)) {  // Noncompliant
 // do something
}
</pre>
<h2>Compliant Solution</h2>
<pre>
Path myPath;
if(myPath.toFile().exists())) {
 // do something
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://bugs.openjdk.java.net/browse/JDK-8153414"">https://bugs.openjdk.java.net/browse/JDK-8153414</a> </li>
  <li> <a href=""https://bugs.openjdk.java.net/browse/JDK-8154077"">https://bugs.openjdk.java.net/browse/JDK-8154077</a> </li>
</ul>",MAJOR,READY,False,[],"['java8', 'performance']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>The <code>Files.exists</code> method has noticeably poor performance in JDK 8, and can slow an application significantly when used to check files\nthat don’t actually exist.</p>\n<p>The same goes for <code>Files.notExists</code>, <code>Files.isDirectory</code> and <code>Files.isRegularFile</code> from <code>java.nio.file</code>\npackage.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project’s <code>sonar.java.source</code> is not 8.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nPath myPath;\nif(java.nio.file.Files.exists(myPath)) {  // Noncompliant\n // do something\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nPath myPath;\nif(myPath.toFile().exists())) {\n // do something\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://bugs.openjdk.java.net/browse/JDK-8153414"">https://bugs.openjdk.java.net/browse/JDK-8153414</a> </li>\n  <li> <a href=""https://bugs.openjdk.java.net/browse/JDK-8154077"">https://bugs.openjdk.java.net/browse/JDK-8154077</a> </li>\n</ul>'}]",[],['squid:S3725'],,,,
java:S4925,java,"""Class.forName()"" should not load JDBC 4.0+ drivers",2023-06-14T03:41:52+0000,"<p>In the past, it was required to load a JDBC driver before creating a <code>java.sql.Connection</code>. Nowadays, when using JDBC 4.0 drivers, this
is no longer required and <code>Class.forName()</code> can be safely removed because JDBC 4.0 (JDK 6) drivers available in the classpath are
automatically loaded.</p>
<p>This rule raises an issue when <code>Class.forName()</code> is used with one of the following values:</p>
<ul>
  <li> <code>com.mysql.jdbc.Driver</code> </li>
  <li> <code>oracle.jdbc.driver.OracleDriver</code> </li>
  <li> <code>com.ibm.db2.jdbc.app.DB2Driver</code> </li>
  <li> <code>com.ibm.db2.jdbc.net.DB2Driver</code> </li>
  <li> <code>com.sybase.jdbc.SybDriver</code> </li>
  <li> <code>com.sybase.jdbc2.jdbc.SybDriver</code> </li>
  <li> <code>com.teradata.jdbc.TeraDriver</code> </li>
  <li> <code>com.microsoft.sqlserver.jdbc.SQLServerDriver</code> </li>
  <li> <code>org.postgresql.Driver</code> </li>
  <li> <code>sun.jdbc.odbc.JdbcOdbcDriver</code> </li>
  <li> <code>org.hsqldb.jdbc.JDBCDriver</code> </li>
  <li> <code>org.h2.Driver</code> </li>
  <li> <code>org.firebirdsql.jdbc.FBDriver</code> </li>
  <li> <code>net.sourceforge.jtds.jdbc.Driver</code> </li>
  <li> <code>com.ibm.db2.jcc.DB2Driver</code> </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class Demo {
  private static final String DRIVER_CLASS_NAME = ""org.postgresql.Driver"";
  private final Connection connection;

  public Demo(String serverURI) throws SQLException, ClassNotFoundException {
    Class.forName(DRIVER_CLASS_NAME); // Noncompliant; no longer required to load the JDBC Driver using Class.forName()
    connection = DriverManager.getConnection(serverURI);
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class Demo {
    private final Connection connection;

    public Demo(String serverURI) throws SQLException {
        connection = DriverManager.getConnection(serverURI);
    }
}
</pre>","<p>In the past, it was required to load a JDBC driver before creating a <code>java.sql.Connection</code>. Nowadays, when using JDBC 4.0 drivers, this
is no longer required and <code>Class.forName()</code> can be safely removed because JDBC 4.0 (JDK 6) drivers available in the classpath are
automatically loaded.</p>
<p>This rule raises an issue when <code>Class.forName()</code> is used with one of the following values:</p>
<ul>
  <li> <code>com.mysql.jdbc.Driver</code> </li>
  <li> <code>oracle.jdbc.driver.OracleDriver</code> </li>
  <li> <code>com.ibm.db2.jdbc.app.DB2Driver</code> </li>
  <li> <code>com.ibm.db2.jdbc.net.DB2Driver</code> </li>
  <li> <code>com.sybase.jdbc.SybDriver</code> </li>
  <li> <code>com.sybase.jdbc2.jdbc.SybDriver</code> </li>
  <li> <code>com.teradata.jdbc.TeraDriver</code> </li>
  <li> <code>com.microsoft.sqlserver.jdbc.SQLServerDriver</code> </li>
  <li> <code>org.postgresql.Driver</code> </li>
  <li> <code>sun.jdbc.odbc.JdbcOdbcDriver</code> </li>
  <li> <code>org.hsqldb.jdbc.JDBCDriver</code> </li>
  <li> <code>org.h2.Driver</code> </li>
  <li> <code>org.firebirdsql.jdbc.FBDriver</code> </li>
  <li> <code>net.sourceforge.jtds.jdbc.Driver</code> </li>
  <li> <code>com.ibm.db2.jcc.DB2Driver</code> </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class Demo {
  private static final String DRIVER_CLASS_NAME = ""org.postgresql.Driver"";
  private final Connection connection;

  public Demo(String serverURI) throws SQLException, ClassNotFoundException {
    Class.forName(DRIVER_CLASS_NAME); // Noncompliant; no longer required to load the JDBC Driver using Class.forName()
    connection = DriverManager.getConnection(serverURI);
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class Demo {
    private final Connection connection;

    public Demo(String serverURI) throws SQLException {
        connection = DriverManager.getConnection(serverURI);
    }
}
</pre>",MAJOR,READY,False,[],['obsolete'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,MAIN,False,"[{'key': 'default', 'content': '<p>In the past, it was required to load a JDBC driver before creating a <code>java.sql.Connection</code>. Nowadays, when using JDBC 4.0 drivers, this\nis no longer required and <code>Class.forName()</code> can be safely removed because JDBC 4.0 (JDK 6) drivers available in the classpath are\nautomatically loaded.</p>\n<p>This rule raises an issue when <code>Class.forName()</code> is used with one of the following values:</p>\n<ul>\n  <li> <code>com.mysql.jdbc.Driver</code> </li>\n  <li> <code>oracle.jdbc.driver.OracleDriver</code> </li>\n  <li> <code>com.ibm.db2.jdbc.app.DB2Driver</code> </li>\n  <li> <code>com.ibm.db2.jdbc.net.DB2Driver</code> </li>\n  <li> <code>com.sybase.jdbc.SybDriver</code> </li>\n  <li> <code>com.sybase.jdbc2.jdbc.SybDriver</code> </li>\n  <li> <code>com.teradata.jdbc.TeraDriver</code> </li>\n  <li> <code>com.microsoft.sqlserver.jdbc.SQLServerDriver</code> </li>\n  <li> <code>org.postgresql.Driver</code> </li>\n  <li> <code>sun.jdbc.odbc.JdbcOdbcDriver</code> </li>\n  <li> <code>org.hsqldb.jdbc.JDBCDriver</code> </li>\n  <li> <code>org.h2.Driver</code> </li>\n  <li> <code>org.firebirdsql.jdbc.FBDriver</code> </li>\n  <li> <code>net.sourceforge.jtds.jdbc.Driver</code> </li>\n  <li> <code>com.ibm.db2.jcc.DB2Driver</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\n\npublic class Demo {\n  private static final String DRIVER_CLASS_NAME = ""org.postgresql.Driver"";\n  private final Connection connection;\n\n  public Demo(String serverURI) throws SQLException, ClassNotFoundException {\n    Class.forName(DRIVER_CLASS_NAME); // Noncompliant; no longer required to load the JDBC Driver using Class.forName()\n    connection = DriverManager.getConnection(serverURI);\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\n\npublic class Demo {\n    private final Connection connection;\n\n    public Demo(String serverURI) throws SQLException {\n        connection = DriverManager.getConnection(serverURI);\n    }\n}\n</pre>'}]",[],['squid:S4925'],,,,
java:S4926,java,"""serialVersionUID"" should not be declared blindly",2023-06-14T03:41:52+0000,"<p>Providing a <code>serialVersionUID</code> field on <code>Serializable</code> classes is strongly recommended by the <code>Serializable</code>
documentation but blindly following that recommendation can be harmful.</p>
<p><code>serialVersionUID</code> value is stored with the serialized data and this field is verified when deserializing the data to ensure that the
code reading the data is compatible with the serialized data. In case of failure, it means the serialized data and the code are not in sync and this
fine because you know what’s wrong.</p>
<p>When the <code>serialVersionUID</code> is generated by an IDE or blindly hard-coded, there is a high probability that one will forget to update the
<code>serialVersionUID</code> value when the <code>Serializable</code> class is later enriched with additional fields. As a consequence, old
serialized data will incorrectly be considered compatible with the newer version of the code creating situations which are hard to debug.</p>
<p>Therefore, defining <code>serialVersionUID</code> should be done with care. This rule raises an issue on each <code>serialVersionUID</code> field
declared on classes implementing <code>Serializable</code> to be sure the presence and the value of the <code>serialVersionUID</code> field is
challenged and validated by the team.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo implements Serializable {
  private static final long serialVersionUID = 1;
}

public class BarException extends RuntimeException {
  private static final long serialVersionUID = 8582433437601788991L;
}
</pre>
<h2>See</h2>
<ul>
  <li> Vojtech Ruzicka’s Programming Blog: <a href=""https://www.vojtechruzicka.com/explicitly-declare-serialversionuid/"">Should I explicitly declare
  serialVersionUID?</a> </li>
</ul>","<p>Providing a <code>serialVersionUID</code> field on <code>Serializable</code> classes is strongly recommended by the <code>Serializable</code>
documentation but blindly following that recommendation can be harmful.</p>
<p><code>serialVersionUID</code> value is stored with the serialized data and this field is verified when deserializing the data to ensure that the
code reading the data is compatible with the serialized data. In case of failure, it means the serialized data and the code are not in sync and this
fine because you know what’s wrong.</p>
<p>When the <code>serialVersionUID</code> is generated by an IDE or blindly hard-coded, there is a high probability that one will forget to update the
<code>serialVersionUID</code> value when the <code>Serializable</code> class is later enriched with additional fields. As a consequence, old
serialized data will incorrectly be considered compatible with the newer version of the code creating situations which are hard to debug.</p>
<p>Therefore, defining <code>serialVersionUID</code> should be done with care. This rule raises an issue on each <code>serialVersionUID</code> field
declared on classes implementing <code>Serializable</code> to be sure the presence and the value of the <code>serialVersionUID</code> field is
challenged and validated by the team.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo implements Serializable {
  private static final long serialVersionUID = 1;
}

public class BarException extends RuntimeException {
  private static final long serialVersionUID = 8582433437601788991L;
}
</pre>
<h2>See</h2>
<ul>
  <li> Vojtech Ruzicka’s Programming Blog: <a href=""https://www.vojtechruzicka.com/explicitly-declare-serialversionuid/"">Should I explicitly declare
  serialVersionUID?</a> </li>
</ul>",MINOR,READY,False,[],"['pitfall', 'serialization']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,10min,CONSTANT_ISSUE,10min,False,MAIN,False,"[{'key': 'default', 'content': '<p>Providing a <code>serialVersionUID</code> field on <code>Serializable</code> classes is strongly recommended by the <code>Serializable</code>\ndocumentation but blindly following that recommendation can be harmful.</p>\n<p><code>serialVersionUID</code> value is stored with the serialized data and this field is verified when deserializing the data to ensure that the\ncode reading the data is compatible with the serialized data. In case of failure, it means the serialized data and the code are not in sync and this\nfine because you know what’s wrong.</p>\n<p>When the <code>serialVersionUID</code> is generated by an IDE or blindly hard-coded, there is a high probability that one will forget to update the\n<code>serialVersionUID</code> value when the <code>Serializable</code> class is later enriched with additional fields. As a consequence, old\nserialized data will incorrectly be considered compatible with the newer version of the code creating situations which are hard to debug.</p>\n<p>Therefore, defining <code>serialVersionUID</code> should be done with care. This rule raises an issue on each <code>serialVersionUID</code> field\ndeclared on classes implementing <code>Serializable</code> to be sure the presence and the value of the <code>serialVersionUID</code> field is\nchallenged and validated by the team.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo implements Serializable {\n  private static final long serialVersionUID = 1;\n}\n\npublic class BarException extends RuntimeException {\n  private static final long serialVersionUID = 8582433437601788991L;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> Vojtech Ruzicka’s Programming Blog: <a href=""https://www.vojtechruzicka.com/explicitly-declare-serialversionuid/"">Should I explicitly declare\n  serialVersionUID?</a> </li>\n</ul>'}]",[],['squid:S4926'],,,,
java:S4929,java,"""read(byte[],int,int)"" should be overridden",2023-06-14T03:41:52+0000,"<p>When directly subclassing <code>java.io.InputStream</code> or <code>java.io.FilterInputStream</code>, the only requirement is that you implement
the method <code>read()</code>. However most uses for such streams don’t read a single byte at a time and the default implementation for
<code>read(byte[],int,int)</code> will call <code>read(int)</code> for every single byte in the array which can create a lot of overhead and is
utterly inefficient. It is therefore strongly recommended that subclasses provide an efficient implementation of
<code>read(byte[],int,int)</code>.</p>
<p>This rule raises an issue when a direct subclass of <code>java.io.InputStream</code> or <code>java.io.FilterInputStream</code> doesn’t provide an
override of <code>read(byte[],int,int)</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyInputStream extends java.io.InputStream {
  private FileInputStream fin;

  public MyInputStream(File file) throws IOException {
    fin = new FileInputStream(file);
  }

  @Override
  public int read() throws IOException {
    return fin.read();
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyInputStream extends java.io.InputStream {
  private FileInputStream fin;

  public MyInputStream(File file) throws IOException {
    fin = new FileInputStream(file);
  }

  @Override
  public int read() throws IOException {
    return fin.read();
  }

  @Override
  public int read(byte[] b, int off, int len) throws IOException {
    return fin.read(b, off, len);
  }
}
</pre>
<h2>Exceptions</h2>
<p>This rule doesn’t raise an issue when the class is declared <code>abstract</code>.</p>","<p>When directly subclassing <code>java.io.InputStream</code> or <code>java.io.FilterInputStream</code>, the only requirement is that you implement
the method <code>read()</code>. However most uses for such streams don’t read a single byte at a time and the default implementation for
<code>read(byte[],int,int)</code> will call <code>read(int)</code> for every single byte in the array which can create a lot of overhead and is
utterly inefficient. It is therefore strongly recommended that subclasses provide an efficient implementation of
<code>read(byte[],int,int)</code>.</p>
<p>This rule raises an issue when a direct subclass of <code>java.io.InputStream</code> or <code>java.io.FilterInputStream</code> doesn’t provide an
override of <code>read(byte[],int,int)</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyInputStream extends java.io.InputStream {
  private FileInputStream fin;

  public MyInputStream(File file) throws IOException {
    fin = new FileInputStream(file);
  }

  @Override
  public int read() throws IOException {
    return fin.read();
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyInputStream extends java.io.InputStream {
  private FileInputStream fin;

  public MyInputStream(File file) throws IOException {
    fin = new FileInputStream(file);
  }

  @Override
  public int read() throws IOException {
    return fin.read();
  }

  @Override
  public int read(byte[] b, int off, int len) throws IOException {
    return fin.read(b, off, len);
  }
}
</pre>
<h2>Exceptions</h2>
<p>This rule doesn’t raise an issue when the class is declared <code>abstract</code>.</p>",MINOR,READY,False,[],['performance'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,30min,CONSTANT_ISSUE,30min,False,MAIN,False,"[{'key': 'default', 'content': '<p>When directly subclassing <code>java.io.InputStream</code> or <code>java.io.FilterInputStream</code>, the only requirement is that you implement\nthe method <code>read()</code>. However most uses for such streams don’t read a single byte at a time and the default implementation for\n<code>read(byte[],int,int)</code> will call <code>read(int)</code> for every single byte in the array which can create a lot of overhead and is\nutterly inefficient. It is therefore strongly recommended that subclasses provide an efficient implementation of\n<code>read(byte[],int,int)</code>.</p>\n<p>This rule raises an issue when a direct subclass of <code>java.io.InputStream</code> or <code>java.io.FilterInputStream</code> doesn’t provide an\noverride of <code>read(byte[],int,int)</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyInputStream extends java.io.InputStream {\n  private FileInputStream fin;\n\n  public MyInputStream(File file) throws IOException {\n    fin = new FileInputStream(file);\n  }\n\n  @Override\n  public int read() throws IOException {\n    return fin.read();\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyInputStream extends java.io.InputStream {\n  private FileInputStream fin;\n\n  public MyInputStream(File file) throws IOException {\n    fin = new FileInputStream(file);\n  }\n\n  @Override\n  public int read() throws IOException {\n    return fin.read();\n  }\n\n  @Override\n  public int read(byte[] b, int off, int len) throws IOException {\n    return fin.read(b, off, len);\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule doesn’t raise an issue when the class is declared <code>abstract</code>.</p>'}]",[],['squid:S4929'],,,,
java:S1643,java,Strings should not be concatenated using '+' in a loop,2023-06-14T03:41:52+0000,"<p>Strings are immutable objects, so concatenation doesn’t simply add the new String to the end of the existing string. Instead, in each loop
iteration, the first String is converted to an intermediate object type, the second string is appended, and then the intermediate object is converted
back to a String. Further, performance of these intermediate operations degrades as the String gets longer. Therefore, the use of StringBuilder is
preferred.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String str = """";
for (int i = 0; i &lt; arrayOfStrings.length ; ++i) {
  str = str + arrayOfStrings[i];
}
</pre>
<h2>Compliant Solution</h2>
<pre>
StringBuilder bld = new StringBuilder();
  for (int i = 0; i &lt; arrayOfStrings.length; ++i) {
    bld.append(arrayOfStrings[i]);
  }
  String str = bld.toString();
</pre>","<p>Strings are immutable objects, so concatenation doesn’t simply add the new String to the end of the existing string. Instead, in each loop
iteration, the first String is converted to an intermediate object type, the second string is appended, and then the intermediate object is converted
back to a String. Further, performance of these intermediate operations degrades as the String gets longer. Therefore, the use of StringBuilder is
preferred.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String str = """";
for (int i = 0; i &lt; arrayOfStrings.length ; ++i) {
  str = str + arrayOfStrings[i];
}
</pre>
<h2>Compliant Solution</h2>
<pre>
StringBuilder bld = new StringBuilder();
  for (int i = 0; i &lt; arrayOfStrings.length; ++i) {
    bld.append(arrayOfStrings[i]);
  }
  String str = bld.toString();
</pre>",MINOR,READY,False,[],['performance'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,10min,CONSTANT_ISSUE,10min,False,MAIN,False,"[{'key': 'default', 'content': '<p>Strings are immutable objects, so concatenation doesn’t simply add the new String to the end of the existing string. Instead, in each loop\niteration, the first String is converted to an intermediate object type, the second string is appended, and then the intermediate object is converted\nback to a String. Further, performance of these intermediate operations degrades as the String gets longer. Therefore, the use of StringBuilder is\npreferred.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString str = """";\nfor (int i = 0; i &lt; arrayOfStrings.length ; ++i) {\n  str = str + arrayOfStrings[i];\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nStringBuilder bld = new StringBuilder();\n  for (int i = 0; i &lt; arrayOfStrings.length; ++i) {\n    bld.append(arrayOfStrings[i]);\n  }\n  String str = bld.toString();\n</pre>'}]",[],['squid:S1643'],,,,
java:S1871,java,Two branches in a conditional structure should not have exactly the same implementation,2023-06-14T03:41:52+0000,"<p>Having two <code>cases</code> in a <code>switch</code> statement or two branches in an <code>if</code> chain with the same implementation is at
best duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an <code>if</code> chain they should
be combined, or for a <code>switch</code>, one should fall through to the other.</p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (i) {
  case 1:
    doFirstThing();
    doSomething();
    break;
  case 2:
    doSomethingDifferent();
    break;
  case 3:  // Noncompliant; duplicates case 1's implementation
    doFirstThing();
    doSomething();
    break;
  default:
    doTheRest();
}

if (a &gt;= 0 &amp;&amp; a &lt; 10) {
  doFirstThing();
  doTheThing();
}
else if (a &gt;= 10 &amp;&amp; a &lt; 20) {
  doTheOtherThing();
}
else if (a &gt;= 20 &amp;&amp; a &lt; 50) {
  doFirstThing();
  doTheThing();  // Noncompliant; duplicates first condition
}
else {
  doTheRest();
}
</pre>
<h2>Exceptions</h2>
<p>Blocks in an <code>if</code> chain that contain a single line of code are ignored, as are blocks in a <code>switch</code> statement that contain a
single line of code with or without a following <code>break</code>.</p>
<pre>
if (a == 1) {
  doSomething();  //no issue, usually this is done on purpose to increase the readability
} else if (a == 2) {
  doSomethingElse();
} else {
  doSomething();
}
</pre>
<p>But this exception does not apply to <code>if</code> chains without <code>else</code>-s, or to <code>switch</code>-es without default clauses when
all branches have the same single line of code. In case of <code>if</code> chains with <code>else</code>-s, or of <code>switch</code>-es with default
clauses, rule <a href='/coding_rules#rule_key=java%3AS3923'>S3923</a> raises a bug.</p>
<pre>
if (a == 1) {
  doSomething();  //Noncompliant, this might have been done on purpose but probably not
} else if (a == 2) {
  doSomething();
}
</pre>","<p>Having two <code>cases</code> in a <code>switch</code> statement or two branches in an <code>if</code> chain with the same implementation is at
best duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an <code>if</code> chain they should
be combined, or for a <code>switch</code>, one should fall through to the other.</p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (i) {
  case 1:
    doFirstThing();
    doSomething();
    break;
  case 2:
    doSomethingDifferent();
    break;
  case 3:  // Noncompliant; duplicates case 1's implementation
    doFirstThing();
    doSomething();
    break;
  default:
    doTheRest();
}

if (a &gt;= 0 &amp;&amp; a &lt; 10) {
  doFirstThing();
  doTheThing();
}
else if (a &gt;= 10 &amp;&amp; a &lt; 20) {
  doTheOtherThing();
}
else if (a &gt;= 20 &amp;&amp; a &lt; 50) {
  doFirstThing();
  doTheThing();  // Noncompliant; duplicates first condition
}
else {
  doTheRest();
}
</pre>
<h2>Exceptions</h2>
<p>Blocks in an <code>if</code> chain that contain a single line of code are ignored, as are blocks in a <code>switch</code> statement that contain a
single line of code with or without a following <code>break</code>.</p>
<pre>
if (a == 1) {
  doSomething();  //no issue, usually this is done on purpose to increase the readability
} else if (a == 2) {
  doSomethingElse();
} else {
  doSomething();
}
</pre>
<p>But this exception does not apply to <code>if</code> chains without <code>else</code>-s, or to <code>switch</code>-es without default clauses when
all branches have the same single line of code. In case of <code>if</code> chains with <code>else</code>-s, or of <code>switch</code>-es with default
clauses, rule <a href='/coding_rules#rule_key=java%3AS3923'>S3923</a> raises a bug.</p>
<pre>
if (a == 1) {
  doSomething();  //Noncompliant, this might have been done on purpose but probably not
} else if (a == 2) {
  doSomething();
}
</pre>",MAJOR,READY,False,[],"['design', 'suspicious']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,10min,CONSTANT_ISSUE,10min,False,MAIN,False,"[{'key': 'default', 'content': ""<p>Having two <code>cases</code> in a <code>switch</code> statement or two branches in an <code>if</code> chain with the same implementation is at\nbest duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an <code>if</code> chain they should\nbe combined, or for a <code>switch</code>, one should fall through to the other.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (i) {\n  case 1:\n    doFirstThing();\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  case 3:  // Noncompliant; duplicates case 1's implementation\n    doFirstThing();\n    doSomething();\n    break;\n  default:\n    doTheRest();\n}\n\nif (a &gt;= 0 &amp;&amp; a &lt; 10) {\n  doFirstThing();\n  doTheThing();\n}\nelse if (a &gt;= 10 &amp;&amp; a &lt; 20) {\n  doTheOtherThing();\n}\nelse if (a &gt;= 20 &amp;&amp; a &lt; 50) {\n  doFirstThing();\n  doTheThing();  // Noncompliant; duplicates first condition\n}\nelse {\n  doTheRest();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Blocks in an <code>if</code> chain that contain a single line of code are ignored, as are blocks in a <code>switch</code> statement that contain a\nsingle line of code with or without a following <code>break</code>.</p>\n<pre>\nif (a == 1) {\n  doSomething();  //no issue, usually this is done on purpose to increase the readability\n} else if (a == 2) {\n  doSomethingElse();\n} else {\n  doSomething();\n}\n</pre>\n<p>But this exception does not apply to <code>if</code> chains without <code>else</code>-s, or to <code>switch</code>-es without default clauses when\nall branches have the same single line of code. In case of <code>if</code> chains with <code>else</code>-s, or of <code>switch</code>-es with default\nclauses, rule <a href='/coding_rules#rule_key=java%3AS3923'>S3923</a> raises a bug.</p>\n<pre>\nif (a == 1) {\n  doSomething();  //Noncompliant, this might have been done on purpose but probably not\n} else if (a == 2) {\n  doSomething();\n}\n</pre>""}]",[],['squid:S1871'],,,,
java:S1874,java,"""@Deprecated"" code should not be used",2023-06-14T03:41:52+0000,"<p>Once deprecated, classes, and interfaces, and their members should be avoided, rather than used, inherited or extended. Deprecation is a warning
that the class or interface has been superseded, and will eventually be removed. The deprecation period allows you to make a smooth transition away
from the aging, soon-to-be-retired technology.</p>
<h2>Noncompliant Code Example</h2>
<pre>
/**
 * @deprecated  As of release 1.3, replaced by {@link #Fee}
 */
@Deprecated
public class Fum { ... }

public class Foo {
  /**
   * @deprecated  As of release 1.7, replaced by {@link #doTheThingBetter()}
   */
  @Deprecated
  public void doTheThing() { ... }

  public void doTheThingBetter() { ... }
}

public class Bar extends Foo {
  public void doTheThing() { ... } // Noncompliant; don't override a deprecated method or explicitly mark it as @Deprecated
}

public class Bar extends Fum {  // Noncompliant; Fum is deprecated

  public void myMethod() {
    Foo foo = new Foo();  // okay; the class isn't deprecated
    foo.doTheThing();  // Noncompliant; doTheThing method is deprecated
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/477"">MITRE, CWE-477</a> - Use of Obsolete Functions </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/6TdGBQ"">CERT, MET02-J.</a> - Do not use deprecated or obsolete classes or methods </li>
</ul>","<p>Once deprecated, classes, and interfaces, and their members should be avoided, rather than used, inherited or extended. Deprecation is a warning
that the class or interface has been superseded, and will eventually be removed. The deprecation period allows you to make a smooth transition away
from the aging, soon-to-be-retired technology.</p>
<h2>Noncompliant Code Example</h2>
<pre>
/**
 * @deprecated  As of release 1.3, replaced by {@link #Fee}
 */
@Deprecated
public class Fum { ... }

public class Foo {
  /**
   * @deprecated  As of release 1.7, replaced by {@link #doTheThingBetter()}
   */
  @Deprecated
  public void doTheThing() { ... }

  public void doTheThingBetter() { ... }
}

public class Bar extends Foo {
  public void doTheThing() { ... } // Noncompliant; don't override a deprecated method or explicitly mark it as @Deprecated
}

public class Bar extends Fum {  // Noncompliant; Fum is deprecated

  public void myMethod() {
    Foo foo = new Foo();  // okay; the class isn't deprecated
    foo.doTheThing();  // Noncompliant; doTheThing method is deprecated
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/477"">MITRE, CWE-477</a> - Use of Obsolete Functions </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/6TdGBQ"">CERT, MET02-J.</a> - Do not use deprecated or obsolete classes or methods </li>
</ul>",MINOR,READY,False,[],"['cert', 'cwe', 'obsolete']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,15min,CONSTANT_ISSUE,15min,False,MAIN,False,"[{'key': 'default', 'content': '<p>Once deprecated, classes, and interfaces, and their members should be avoided, rather than used, inherited or extended. Deprecation is a warning\nthat the class or interface has been superseded, and will eventually be removed. The deprecation period allows you to make a smooth transition away\nfrom the aging, soon-to-be-retired technology.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n/**\n * @deprecated  As of release 1.3, replaced by {@link #Fee}\n */\n@Deprecated\npublic class Fum { ... }\n\npublic class Foo {\n  /**\n   * @deprecated  As of release 1.7, replaced by {@link #doTheThingBetter()}\n   */\n  @Deprecated\n  public void doTheThing() { ... }\n\n  public void doTheThingBetter() { ... }\n}\n\npublic class Bar extends Foo {\n  public void doTheThing() { ... } // Noncompliant; don\'t override a deprecated method or explicitly mark it as @Deprecated\n}\n\npublic class Bar extends Fum {  // Noncompliant; Fum is deprecated\n\n  public void myMethod() {\n    Foo foo = new Foo();  // okay; the class isn\'t deprecated\n    foo.doTheThing();  // Noncompliant; doTheThing method is deprecated\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/477"">MITRE, CWE-477</a> - Use of Obsolete Functions </li>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/6TdGBQ"">CERT, MET02-J.</a> - Do not use deprecated or obsolete classes or methods </li>\n</ul>'}]",[],['squid:CallToDeprecatedMethod'],,,,
java:S1994,java,"""for"" loop increment clauses should modify the loops' counters",2023-06-14T03:41:52+0000,"<p>It can be extremely confusing when a <code>for</code> loop’s counter is incremented outside of its increment clause. In such cases, the increment
should be moved to the loop’s increment clause if at all possible.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (i = 0; i &lt; 10; j++) { // Noncompliant
  // ...
  i++;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for (i = 0; i &lt; 10; i++, j++) {
  // ...
}
</pre>
<p>Or</p>
<pre>
for (i = 0; i &lt; 10; i++) {
  // ...
  j++;
}
</pre>","<p>It can be extremely confusing when a <code>for</code> loop’s counter is incremented outside of its increment clause. In such cases, the increment
should be moved to the loop’s increment clause if at all possible.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (i = 0; i &lt; 10; j++) { // Noncompliant
  // ...
  i++;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for (i = 0; i &lt; 10; i++, j++) {
  // ...
}
</pre>
<p>Or</p>
<pre>
for (i = 0; i &lt; 10; i++) {
  // ...
  j++;
}
</pre>",CRITICAL,READY,False,[],['confusing'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,20min,CONSTANT_ISSUE,20min,False,ALL,False,"[{'key': 'default', 'content': '<p>It can be extremely confusing when a <code>for</code> loop’s counter is incremented outside of its increment clause. In such cases, the increment\nshould be moved to the loop’s increment clause if at all possible.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (i = 0; i &lt; 10; j++) { // Noncompliant\n  // ...\n  i++;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor (i = 0; i &lt; 10; i++, j++) {\n  // ...\n}\n</pre>\n<p>Or</p>\n<pre>\nfor (i = 0; i &lt; 10; i++) {\n  // ...\n  j++;\n}\n</pre>'}]",[],['squid:S1994'],,,,
java:S1996,java,Files should contain only one top-level class or interface each,2023-06-14T03:41:52+0000,"<p>A file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain. This
is doubly true for a file with multiple top-level classes and interfaces. It is strongly advised to divide the file into one top-level class or
interface per file.</p>","<p>A file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain. This
is doubly true for a file with multiple top-level classes and interfaces. It is strongly advised to divide the file into one top-level class or
interface per file.</p>",MAJOR,READY,False,[],['brain-overload'],java,Java,[],LINEAR,LINEAR,CODE_SMELL,LINEAR,,LINEAR,,False,ALL,False,"[{'key': 'default', 'content': '<p>A file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain. This\nis doubly true for a file with multiple top-level classes and interfaces. It is strongly advised to divide the file into one top-level class or\ninterface per file.</p>'}]",[],['squid:S1996'],10min,10min,per extra type,
java:S3937,java,Number patterns should be regular,2023-06-14T03:41:52+0000,"<p>The use of punctuation characters to separate subgroups in a number can make the number more readable. For instance consider 1,000,000,000 versus
1000000000. But when the grouping is irregular, such as 1,000,00,000; it indicates an error.</p>
<p>This rule raises an issue when underscores (<code>_</code>) are used to break a number into irregular subgroups.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int thousand = 100_0
int tenThousand = 100_00;
int million = 1_000_00_000;
</pre>
<h2>Compliant Solution</h2>
<pre>
int thousand = 1000;
int tenThousand = 10_000;
int tenThousandWithout = 10000;
int duos = 1_00_00;
int million = 100_000_000;
</pre>
<h2>Exceptions</h2>
<p>No issue will be raised on binary numbers (starting with <code>0b</code> or <code>0B</code>). Binary number bits are often grouped corresponding to
certain meanings, resulting in irregular bit group sizes.</p>
<pre>
int configValue1 = 0b00_000_10_1; // Compliant
int configValue2 = 0B00_000_10_1; // Compliant
</pre>","<p>The use of punctuation characters to separate subgroups in a number can make the number more readable. For instance consider 1,000,000,000 versus
1000000000. But when the grouping is irregular, such as 1,000,00,000; it indicates an error.</p>
<p>This rule raises an issue when underscores (<code>_</code>) are used to break a number into irregular subgroups.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int thousand = 100_0
int tenThousand = 100_00;
int million = 1_000_00_000;
</pre>
<h2>Compliant Solution</h2>
<pre>
int thousand = 1000;
int tenThousand = 10_000;
int tenThousandWithout = 10000;
int duos = 1_00_00;
int million = 100_000_000;
</pre>
<h2>Exceptions</h2>
<p>No issue will be raised on binary numbers (starting with <code>0b</code> or <code>0B</code>). Binary number bits are often grouped corresponding to
certain meanings, resulting in irregular bit group sizes.</p>
<pre>
int configValue1 = 0b00_000_10_1; // Compliant
int configValue2 = 0B00_000_10_1; // Compliant
</pre>",CRITICAL,READY,False,[],['suspicious'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,10min,CONSTANT_ISSUE,10min,False,ALL,False,"[{'key': 'default', 'content': '<p>The use of punctuation characters to separate subgroups in a number can make the number more readable. For instance consider 1,000,000,000 versus\n1000000000. But when the grouping is irregular, such as 1,000,00,000; it indicates an error.</p>\n<p>This rule raises an issue when underscores (<code>_</code>) are used to break a number into irregular subgroups.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint thousand = 100_0\nint tenThousand = 100_00;\nint million = 1_000_00_000;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint thousand = 1000;\nint tenThousand = 10_000;\nint tenThousandWithout = 10000;\nint duos = 1_00_00;\nint million = 100_000_000;\n</pre>\n<h2>Exceptions</h2>\n<p>No issue will be raised on binary numbers (starting with <code>0b</code> or <code>0B</code>). Binary number bits are often grouped corresponding to\ncertain meanings, resulting in irregular bit group sizes.</p>\n<pre>\nint configValue1 = 0b00_000_10_1; // Compliant\nint configValue2 = 0B00_000_10_1; // Compliant\n</pre>'}]",[],['squid:S3937'],,,,
java:S1640,java,Maps with keys that are enum values should be replaced with EnumMap,2023-06-14T03:41:52+0000,"<p>When all the keys of a Map are values from the same enum, the <code>Map</code> can be replaced with an <code>EnumMap</code>, which can be much more
efficient than other sets because the underlying data structure is a simple array.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass {

  public enum COLOR {
    RED, GREEN, BLUE, ORANGE;
  }

  public void mapMood() {
    Map&lt;COLOR, String&gt; moodMap = new HashMap&lt;COLOR, String&gt; ();
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass {

  public enum COLOR {
    RED, GREEN, BLUE, ORANGE;
  }

  public void mapMood() {
    EnumMap&lt;COLOR, String&gt; moodMap = new EnumMap&lt;&gt; (COLOR.class);
  }
}
</pre>","<p>When all the keys of a Map are values from the same enum, the <code>Map</code> can be replaced with an <code>EnumMap</code>, which can be much more
efficient than other sets because the underlying data structure is a simple array.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass {

  public enum COLOR {
    RED, GREEN, BLUE, ORANGE;
  }

  public void mapMood() {
    Map&lt;COLOR, String&gt; moodMap = new HashMap&lt;COLOR, String&gt; ();
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass {

  public enum COLOR {
    RED, GREEN, BLUE, ORANGE;
  }

  public void mapMood() {
    EnumMap&lt;COLOR, String&gt; moodMap = new EnumMap&lt;&gt; (COLOR.class);
  }
}
</pre>",MINOR,READY,False,[],['performance'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>When all the keys of a Map are values from the same enum, the <code>Map</code> can be replaced with an <code>EnumMap</code>, which can be much more\nefficient than other sets because the underlying data structure is a simple array.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  public enum COLOR {\n    RED, GREEN, BLUE, ORANGE;\n  }\n\n  public void mapMood() {\n    Map&lt;COLOR, String&gt; moodMap = new HashMap&lt;COLOR, String&gt; ();\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n\n  public enum COLOR {\n    RED, GREEN, BLUE, ORANGE;\n  }\n\n  public void mapMood() {\n    EnumMap&lt;COLOR, String&gt; moodMap = new EnumMap&lt;&gt; (COLOR.class);\n  }\n}\n</pre>'}]",[],['squid:S1640'],,,,
java:S1641,java,Sets with elements that are enum values should be replaced with EnumSet,2023-06-14T03:41:52+0000,"<p>When all the elements in a Set are values from the same enum, the Set can be replaced with an EnumSet, which can be much more efficient than other
sets because the underlying data structure is a simple bitmap.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass {

  public enum COLOR {
    RED, GREEN, BLUE, ORANGE;
  }

  public void doSomething() {
    Set&lt;COLOR&gt; warm = new HashSet&lt;COLOR&gt;();
    warm.add(COLOR.RED);
    warm.add(COLOR.ORANGE);
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass {

  public enum COLOR {
    RED, GREEN, BLUE, ORANGE;
  }

  public void doSomething() {
    Set&lt;COLOR&gt; warm = EnumSet.of(COLOR.RED, COLOR.ORANGE);
  }
}
</pre>","<p>When all the elements in a Set are values from the same enum, the Set can be replaced with an EnumSet, which can be much more efficient than other
sets because the underlying data structure is a simple bitmap.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass {

  public enum COLOR {
    RED, GREEN, BLUE, ORANGE;
  }

  public void doSomething() {
    Set&lt;COLOR&gt; warm = new HashSet&lt;COLOR&gt;();
    warm.add(COLOR.RED);
    warm.add(COLOR.ORANGE);
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass {

  public enum COLOR {
    RED, GREEN, BLUE, ORANGE;
  }

  public void doSomething() {
    Set&lt;COLOR&gt; warm = EnumSet.of(COLOR.RED, COLOR.ORANGE);
  }
}
</pre>",MINOR,READY,False,[],['performance'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>When all the elements in a Set are values from the same enum, the Set can be replaced with an EnumSet, which can be much more efficient than other\nsets because the underlying data structure is a simple bitmap.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  public enum COLOR {\n    RED, GREEN, BLUE, ORANGE;\n  }\n\n  public void doSomething() {\n    Set&lt;COLOR&gt; warm = new HashSet&lt;COLOR&gt;();\n    warm.add(COLOR.RED);\n    warm.add(COLOR.ORANGE);\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n\n  public enum COLOR {\n    RED, GREEN, BLUE, ORANGE;\n  }\n\n  public void doSomething() {\n    Set&lt;COLOR&gt; warm = EnumSet.of(COLOR.RED, COLOR.ORANGE);\n  }\n}\n</pre>'}]",[],['squid:S1641'],,,,
java:S1698,java,"""=="" and ""!="" should not be used when ""equals"" is overridden",2023-06-14T03:41:52+0000,"<p>It is equivalent to use the equality <code>==</code> operator and the <code>equals</code> method to compare two objects if the <code>equals</code>
method inherited from <code>Object</code> has not been overridden. In this case both checks compare the object references.</p>
<p>But as soon as <code>equals</code> is overridden, two objects not having the same reference but having the same value can be equal. This rule spots
suspicious uses of <code>==</code> and <code>!=</code> operators on objects whose <code>equals</code> methods are overridden.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String firstName = getFirstName(); // String overrides equals
String lastName = getLastName();

if (firstName == lastName) { ... }; // Non-compliant; false even if the strings have the same value
</pre>
<h2>Compliant Solution</h2>
<pre>
String firstName = getFirstName();
String lastName = getLastName();

if (firstName != null &amp;&amp; firstName.equals(lastName)) { ... };
</pre>
<h2>Exceptions</h2>
<p>Comparing two instances of the <code>Class</code> object will not raise an issue:</p>
<pre>
Class c;
if(c == Integer.class) { // No issue raised
}
</pre>
<p>Comparing <code>Enum</code> will not raise an issue:</p>
<pre>
public enum Fruit {
   APPLE, BANANA, GRAPE
}
public boolean isFruitGrape(Fruit candidateFruit) {
  return candidateFruit == Fruit.GRAPE; // it's recommended to activate S4551 to enforce comparison of Enums using ==
}
</pre>
<p>Comparing with <code>final</code> reference will not raise an issue:</p>
<pre>
private static final Type DEFAULT = new Type();

void foo(Type other) {
  if (other == DEFAULT) { // Compliant
  //...
  }
}
</pre>
<p>Comparing with <code>this</code> will not raise an issue:</p>
<pre>
  public boolean equals(Object other) {
    if (this == other) {  // Compliant
      return false;
    }
 }
</pre>
<p>Comparing with <code>java.lang.String</code> and boxed types <code>java.lang.Integer</code>, …​ will not raise an issue.</p>
<h2>See</h2>
<ul>
  <li> <a href='/coding_rules#rule_key=java%3AS4973'>S4973</a> - Strings and Boxed types should be compared using ""equals()"" </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/595"">MITRE, CWE-595</a> - Comparison of Object References Instead of Object Contents </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/597"">MITRE, CWE-597</a> - Use of Wrong Operator in String Comparison </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/UjdGBQ"">CERT, EXP03-J.</a> - Do not use the equality operators when comparing values of boxed
  primitives </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/yDdGBQ"">CERT, EXP50-J.</a> - Do not confuse abstract object equality with reference equality
  </li>
</ul>","<p>It is equivalent to use the equality <code>==</code> operator and the <code>equals</code> method to compare two objects if the <code>equals</code>
method inherited from <code>Object</code> has not been overridden. In this case both checks compare the object references.</p>
<p>But as soon as <code>equals</code> is overridden, two objects not having the same reference but having the same value can be equal. This rule spots
suspicious uses of <code>==</code> and <code>!=</code> operators on objects whose <code>equals</code> methods are overridden.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String firstName = getFirstName(); // String overrides equals
String lastName = getLastName();

if (firstName == lastName) { ... }; // Non-compliant; false even if the strings have the same value
</pre>
<h2>Compliant Solution</h2>
<pre>
String firstName = getFirstName();
String lastName = getLastName();

if (firstName != null &amp;&amp; firstName.equals(lastName)) { ... };
</pre>
<h2>Exceptions</h2>
<p>Comparing two instances of the <code>Class</code> object will not raise an issue:</p>
<pre>
Class c;
if(c == Integer.class) { // No issue raised
}
</pre>
<p>Comparing <code>Enum</code> will not raise an issue:</p>
<pre>
public enum Fruit {
   APPLE, BANANA, GRAPE
}
public boolean isFruitGrape(Fruit candidateFruit) {
  return candidateFruit == Fruit.GRAPE; // it's recommended to activate S4551 to enforce comparison of Enums using ==
}
</pre>
<p>Comparing with <code>final</code> reference will not raise an issue:</p>
<pre>
private static final Type DEFAULT = new Type();

void foo(Type other) {
  if (other == DEFAULT) { // Compliant
  //...
  }
}
</pre>
<p>Comparing with <code>this</code> will not raise an issue:</p>
<pre>
  public boolean equals(Object other) {
    if (this == other) {  // Compliant
      return false;
    }
 }
</pre>
<p>Comparing with <code>java.lang.String</code> and boxed types <code>java.lang.Integer</code>, …​ will not raise an issue.</p>
<h2>See</h2>
<ul>
  <li> <a href='/coding_rules#rule_key=java%3AS4973'>S4973</a> - Strings and Boxed types should be compared using ""equals()"" </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/595"">MITRE, CWE-595</a> - Comparison of Object References Instead of Object Contents </li>
  <li> <a href=""https://cwe.mitre.org/data/definitions/597"">MITRE, CWE-597</a> - Use of Wrong Operator in String Comparison </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/UjdGBQ"">CERT, EXP03-J.</a> - Do not use the equality operators when comparing values of boxed
  primitives </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/yDdGBQ"">CERT, EXP50-J.</a> - Do not confuse abstract object equality with reference equality
  </li>
</ul>",MINOR,READY,False,[],"['cert', 'cwe', 'suspicious']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,2min,CONSTANT_ISSUE,2min,False,MAIN,False,"[{'key': 'default', 'content': '<p>It is equivalent to use the equality <code>==</code> operator and the <code>equals</code> method to compare two objects if the <code>equals</code>\nmethod inherited from <code>Object</code> has not been overridden. In this case both checks compare the object references.</p>\n<p>But as soon as <code>equals</code> is overridden, two objects not having the same reference but having the same value can be equal. This rule spots\nsuspicious uses of <code>==</code> and <code>!=</code> operators on objects whose <code>equals</code> methods are overridden.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString firstName = getFirstName(); // String overrides equals\nString lastName = getLastName();\n\nif (firstName == lastName) { ... }; // Non-compliant; false even if the strings have the same value\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString firstName = getFirstName();\nString lastName = getLastName();\n\nif (firstName != null &amp;&amp; firstName.equals(lastName)) { ... };\n</pre>\n<h2>Exceptions</h2>\n<p>Comparing two instances of the <code>Class</code> object will not raise an issue:</p>\n<pre>\nClass c;\nif(c == Integer.class) { // No issue raised\n}\n</pre>\n<p>Comparing <code>Enum</code> will not raise an issue:</p>\n<pre>\npublic enum Fruit {\n   APPLE, BANANA, GRAPE\n}\npublic boolean isFruitGrape(Fruit candidateFruit) {\n  return candidateFruit == Fruit.GRAPE; // it\'s recommended to activate S4551 to enforce comparison of Enums using ==\n}\n</pre>\n<p>Comparing with <code>final</code> reference will not raise an issue:</p>\n<pre>\nprivate static final Type DEFAULT = new Type();\n\nvoid foo(Type other) {\n  if (other == DEFAULT) { // Compliant\n  //...\n  }\n}\n</pre>\n<p>Comparing with <code>this</code> will not raise an issue:</p>\n<pre>\n  public boolean equals(Object other) {\n    if (this == other) {  // Compliant\n      return false;\n    }\n }\n</pre>\n<p>Comparing with <code>java.lang.String</code> and boxed types <code>java.lang.Integer</code>, …\u200b will not raise an issue.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\'/coding_rules#rule_key=java%3AS4973\'>S4973</a> - Strings and Boxed types should be compared using ""equals()"" </li>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/595"">MITRE, CWE-595</a> - Comparison of Object References Instead of Object Contents </li>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/597"">MITRE, CWE-597</a> - Use of Wrong Operator in String Comparison </li>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/UjdGBQ"">CERT, EXP03-J.</a> - Do not use the equality operators when comparing values of boxed\n  primitives </li>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/yDdGBQ"">CERT, EXP50-J.</a> - Do not confuse abstract object equality with reference equality\n  </li>\n</ul>'}]",[],['squid:S1698'],,,,
java:S2737,java,"""catch"" clauses should do more than rethrow",2023-06-14T03:41:52+0000,"<p>A <code>catch</code> clause that only rethrows the caught exception has the same effect as omitting the <code>catch</code> altogether and letting
it bubble up automatically, but with more code and the additional detriment of leaving maintainers scratching their heads.</p>
<p>Such clauses should either be eliminated or populated with the appropriate logic.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public String readFile(File f) {
  StringBuilder sb = new StringBuilder();
  try {
    FileReader fileReader = new FileReader(fileName);
    BufferedReader bufferedReader = new BufferedReader(fileReader);

    while((line = bufferedReader.readLine()) != null) {
      //...
  }
  catch (IOException e) {  // Noncompliant
    throw e;
  }
  return sb.toString();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public String readFile(File f) {
  StringBuilder sb = new StringBuilder();
  try {
    FileReader fileReader = new FileReader(fileName);
    BufferedReader bufferedReader = new BufferedReader(fileReader);

    while((line = bufferedReader.readLine()) != null) {
      //...
  }
  catch (IOException e) {
    logger.LogError(e);
    throw e;
  }
  return sb.toString();
}
</pre>
<p>or</p>
<pre>
public String readFile(File f) throws IOException {
  StringBuilder sb = new StringBuilder();
  FileReader fileReader = new FileReader(fileName);
  BufferedReader bufferedReader = new BufferedReader(fileReader);

  while((line = bufferedReader.readLine()) != null) {
    //...

  return sb.toString();
}
</pre>","<p>A <code>catch</code> clause that only rethrows the caught exception has the same effect as omitting the <code>catch</code> altogether and letting
it bubble up automatically, but with more code and the additional detriment of leaving maintainers scratching their heads.</p>
<p>Such clauses should either be eliminated or populated with the appropriate logic.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public String readFile(File f) {
  StringBuilder sb = new StringBuilder();
  try {
    FileReader fileReader = new FileReader(fileName);
    BufferedReader bufferedReader = new BufferedReader(fileReader);

    while((line = bufferedReader.readLine()) != null) {
      //...
  }
  catch (IOException e) {  // Noncompliant
    throw e;
  }
  return sb.toString();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public String readFile(File f) {
  StringBuilder sb = new StringBuilder();
  try {
    FileReader fileReader = new FileReader(fileName);
    BufferedReader bufferedReader = new BufferedReader(fileReader);

    while((line = bufferedReader.readLine()) != null) {
      //...
  }
  catch (IOException e) {
    logger.LogError(e);
    throw e;
  }
  return sb.toString();
}
</pre>
<p>or</p>
<pre>
public String readFile(File f) throws IOException {
  StringBuilder sb = new StringBuilder();
  FileReader fileReader = new FileReader(fileName);
  BufferedReader bufferedReader = new BufferedReader(fileReader);

  while((line = bufferedReader.readLine()) != null) {
    //...

  return sb.toString();
}
</pre>",MINOR,READY,False,[],"['clumsy', 'error-handling', 'finding', 'unused']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,MAIN,False,"[{'key': 'default', 'content': '<p>A <code>catch</code> clause that only rethrows the caught exception has the same effect as omitting the <code>catch</code> altogether and letting\nit bubble up automatically, but with more code and the additional detriment of leaving maintainers scratching their heads.</p>\n<p>Such clauses should either be eliminated or populated with the appropriate logic.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic String readFile(File f) {\n  StringBuilder sb = new StringBuilder();\n  try {\n    FileReader fileReader = new FileReader(fileName);\n    BufferedReader bufferedReader = new BufferedReader(fileReader);\n\n    while((line = bufferedReader.readLine()) != null) {\n      //...\n  }\n  catch (IOException e) {  // Noncompliant\n    throw e;\n  }\n  return sb.toString();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic String readFile(File f) {\n  StringBuilder sb = new StringBuilder();\n  try {\n    FileReader fileReader = new FileReader(fileName);\n    BufferedReader bufferedReader = new BufferedReader(fileReader);\n\n    while((line = bufferedReader.readLine()) != null) {\n      //...\n  }\n  catch (IOException e) {\n    logger.LogError(e);\n    throw e;\n  }\n  return sb.toString();\n}\n</pre>\n<p>or</p>\n<pre>\npublic String readFile(File f) throws IOException {\n  StringBuilder sb = new StringBuilder();\n  FileReader fileReader = new FileReader(fileName);\n  BufferedReader bufferedReader = new BufferedReader(fileReader);\n\n  while((line = bufferedReader.readLine()) != null) {\n    //...\n\n  return sb.toString();\n}\n</pre>'}]",[],['squid:S2737'],,,,
java:S2970,java,Assertions should be complete,2023-06-14T03:41:52+0000,"<p>It is very easy to write incomplete assertions when using some test frameworks. This rule enforces complete assertions in the following cases:</p>
<ul>
  <li> Fest: <code>assertThat</code> is not followed by an assertion invocation </li>
  <li> AssertJ: <code>assertThat</code> is not followed by an assertion invocation </li>
  <li> Mockito: <code>verify</code> is not followed by a method invocation </li>
  <li> Truth: <code>assertXXX</code> is not followed by an assertion invocation </li>
</ul>
<p>In such cases, what is intended to be a test doesn’t actually verify anything</p>
<h2>Noncompliant Code Example</h2>
<pre>
// Fest
boolean result = performAction();
// let's now check that result value is true
assertThat(result); // Noncompliant; nothing is actually checked, the test passes whether ""result"" is true or false

// Mockito
List mockedList = Mockito.mock(List.class);
mockedList.add(""one"");
mockedList.clear();
// let's check that ""add"" and ""clear"" methods are actually called
Mockito.verify(mockedList); // Noncompliant; nothing is checked here, oups no call is chained to verify()
</pre>
<h2>Compliant Solution</h2>
<pre>
// Fest
boolean result = performAction();
// let's now check that result value is true
assertThat(result).isTrue();

// Mockito
List mockedList = Mockito.mock(List.class);
mockedList.add(""one"");
mockedList.clear();
// let's check that ""add"" and ""clear"" methods are actually called
Mockito.verify(mockedList).add(""one"");
Mockito.verify(mockedList).clear();
</pre>
<h2>Exceptions</h2>
<p>Variable assignments and return statements are skipped to allow helper methods.</p>
<pre>
private BooleanAssert check(String filename, String key) {
  String fileContent = readFileContent(filename);
  performReplacements(fileContent);
  return assertThat(fileContent.contains(key)); // No issue is raised here
}

@Test
public void test() {
  check(""foo.txt"", ""key1"").isTrue();
  check(""bar.txt"", ""key2"").isTrue();
}
</pre>","<p>It is very easy to write incomplete assertions when using some test frameworks. This rule enforces complete assertions in the following cases:</p>
<ul>
  <li> Fest: <code>assertThat</code> is not followed by an assertion invocation </li>
  <li> AssertJ: <code>assertThat</code> is not followed by an assertion invocation </li>
  <li> Mockito: <code>verify</code> is not followed by a method invocation </li>
  <li> Truth: <code>assertXXX</code> is not followed by an assertion invocation </li>
</ul>
<p>In such cases, what is intended to be a test doesn’t actually verify anything</p>
<h2>Noncompliant Code Example</h2>
<pre>
// Fest
boolean result = performAction();
// let's now check that result value is true
assertThat(result); // Noncompliant; nothing is actually checked, the test passes whether ""result"" is true or false

// Mockito
List mockedList = Mockito.mock(List.class);
mockedList.add(""one"");
mockedList.clear();
// let's check that ""add"" and ""clear"" methods are actually called
Mockito.verify(mockedList); // Noncompliant; nothing is checked here, oups no call is chained to verify()
</pre>
<h2>Compliant Solution</h2>
<pre>
// Fest
boolean result = performAction();
// let's now check that result value is true
assertThat(result).isTrue();

// Mockito
List mockedList = Mockito.mock(List.class);
mockedList.add(""one"");
mockedList.clear();
// let's check that ""add"" and ""clear"" methods are actually called
Mockito.verify(mockedList).add(""one"");
Mockito.verify(mockedList).clear();
</pre>
<h2>Exceptions</h2>
<p>Variable assignments and return statements are skipped to allow helper methods.</p>
<pre>
private BooleanAssert check(String filename, String key) {
  String fileContent = readFileContent(filename);
  performReplacements(fileContent);
  return assertThat(fileContent.contains(key)); // No issue is raised here
}

@Test
public void test() {
  check(""foo.txt"", ""key1"").isTrue();
  check(""bar.txt"", ""key2"").isTrue();
}
</pre>",BLOCKER,READY,False,[],"['assertj', 'mockito', 'tests']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,TEST,False,"[{'key': 'default', 'content': '<p>It is very easy to write incomplete assertions when using some test frameworks. This rule enforces complete assertions in the following cases:</p>\n<ul>\n  <li> Fest: <code>assertThat</code> is not followed by an assertion invocation </li>\n  <li> AssertJ: <code>assertThat</code> is not followed by an assertion invocation </li>\n  <li> Mockito: <code>verify</code> is not followed by a method invocation </li>\n  <li> Truth: <code>assertXXX</code> is not followed by an assertion invocation </li>\n</ul>\n<p>In such cases, what is intended to be a test doesn’t actually verify anything</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n// Fest\nboolean result = performAction();\n// let\'s now check that result value is true\nassertThat(result); // Noncompliant; nothing is actually checked, the test passes whether ""result"" is true or false\n\n// Mockito\nList mockedList = Mockito.mock(List.class);\nmockedList.add(""one"");\nmockedList.clear();\n// let\'s check that ""add"" and ""clear"" methods are actually called\nMockito.verify(mockedList); // Noncompliant; nothing is checked here, oups no call is chained to verify()\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n// Fest\nboolean result = performAction();\n// let\'s now check that result value is true\nassertThat(result).isTrue();\n\n// Mockito\nList mockedList = Mockito.mock(List.class);\nmockedList.add(""one"");\nmockedList.clear();\n// let\'s check that ""add"" and ""clear"" methods are actually called\nMockito.verify(mockedList).add(""one"");\nMockito.verify(mockedList).clear();\n</pre>\n<h2>Exceptions</h2>\n<p>Variable assignments and return statements are skipped to allow helper methods.</p>\n<pre>\nprivate BooleanAssert check(String filename, String key) {\n  String fileContent = readFileContent(filename);\n  performReplacements(fileContent);\n  return assertThat(fileContent.contains(key)); // No issue is raised here\n}\n\n@Test\npublic void test() {\n  check(""foo.txt"", ""key1"").isTrue();\n  check(""bar.txt"", ""key2"").isTrue();\n}\n</pre>'}]",[],['squid:S2970'],,,,
java:S2972,java,Inner classes should not have too many lines of code,2023-06-14T03:41:52+0000,"<p>Inner classes should be short and sweet, to manage complexity in the overall file. An inner class that has grown longer than a certain threshold
should probably be externalized to its own file.</p>","<p>Inner classes should be short and sweet, to manage complexity in the overall file. An inner class that has grown longer than a certain threshold
should probably be externalized to its own file.</p>",MAJOR,READY,False,[],['brain-overload'],java,Java,"[{'key': 'Max', 'htmlDesc': 'The maximum number of lines allowed', 'defaultValue': '25', 'type': 'INTEGER'}]",CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,20min,CONSTANT_ISSUE,20min,False,ALL,False,"[{'key': 'default', 'content': '<p>Inner classes should be short and sweet, to manage complexity in the overall file. An inner class that has grown longer than a certain threshold\nshould probably be externalized to its own file.</p>'}]",[],['squid:S2972'],,,,
java:S2973,java,Escaped Unicode characters should not be used,2023-06-14T03:41:52+0000,"<p>The use of Unicode escape sequences should be reserved for characters that would otherwise be ambiguous, such as unprintable characters.</p>
<p>This rule ignores sequences composed entirely of Unicode characters, but otherwise raises an issue for each Unicode character that represents a
printable character.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String prefix = ""n\u00E9e""; // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
String prefix = ""née"";
</pre>","<p>The use of Unicode escape sequences should be reserved for characters that would otherwise be ambiguous, such as unprintable characters.</p>
<p>This rule ignores sequences composed entirely of Unicode characters, but otherwise raises an issue for each Unicode character that represents a
printable character.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String prefix = ""n\u00E9e""; // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
String prefix = ""née"";
</pre>",MAJOR,READY,False,[],['confusing'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>The use of Unicode escape sequences should be reserved for characters that would otherwise be ambiguous, such as unprintable characters.</p>\n<p>This rule ignores sequences composed entirely of Unicode characters, but otherwise raises an issue for each Unicode character that represents a\nprintable character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString prefix = ""n\\u00E9e""; // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString prefix = ""née"";\n</pre>'}]",[],['squid:S2973'],,,,
java:S2974,java,"Classes without ""public"" constructors should be ""final""",2023-06-14T03:41:52+0000,"<p>Classes with only <code>private</code> constructors should be marked <code>final</code> to prevent any mistaken extension attempts.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class PrivateConstructorClass {  // Noncompliant
  private PrivateConstructorClass() {
    // ...
  }

  public static int magic(){
    return 42;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public final class PrivateConstructorClass {  // Compliant
  private PrivateConstructorClass() {
    // ...
  }

  public static int magic(){
    return 42;
  }
}
</pre>","<p>Classes with only <code>private</code> constructors should be marked <code>final</code> to prevent any mistaken extension attempts.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class PrivateConstructorClass {  // Noncompliant
  private PrivateConstructorClass() {
    // ...
  }

  public static int magic(){
    return 42;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public final class PrivateConstructorClass {  // Compliant
  private PrivateConstructorClass() {
    // ...
  }

  public static int magic(){
    return 42;
  }
}
</pre>",MINOR,READY,False,[],['design'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,MAIN,False,"[{'key': 'default', 'content': '<p>Classes with only <code>private</code> constructors should be marked <code>final</code> to prevent any mistaken extension attempts.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class PrivateConstructorClass {  // Noncompliant\n  private PrivateConstructorClass() {\n    // ...\n  }\n\n  public static int magic(){\n    return 42;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic final class PrivateConstructorClass {  // Compliant\n  private PrivateConstructorClass() {\n    // ...\n  }\n\n  public static int magic(){\n    return 42;\n  }\n}\n</pre>'}]",[],['squid:S2974'],,,,
java:S2975,java,"""clone"" should not be overridden",2023-06-14T03:41:52+0000,"<p>Many consider <code>clone</code> and <code>Cloneable</code> broken in Java, largely because the rules for overriding <code>clone</code> are tricky
and difficult to get right, according to Joshua Bloch:</p>
<blockquote>
  <p>Object’s clone method is very tricky. It’s based on field copies, and it’s ""extra-linguistic."" It creates an object without calling a
  constructor. There are no guarantees that it preserves the invariants established by the constructors. There have been lots of bugs over the years,
  both in and outside Sun, stemming from the fact that if you just call super.clone repeatedly up the chain until you have cloned an object, you have
  a shallow copy of the object. The clone generally shares state with the object being cloned. If that state is mutable, you don’t have two
  independent objects. If you modify one, the other changes as well. And all of a sudden, you get random behavior.</p>
</blockquote>
<p>A copy constructor or copy factory should be used instead.</p>
<p>This rule raises an issue when <code>clone</code> is overridden, whether or not <code>Cloneable</code> is implemented.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass {
  // ...

  public Object clone() { // Noncompliant
    //...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass {
  // ...

  MyClass (MyClass source) {
    //...
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.artima.com/intv/bloch13.html"">Copy Constructor versus Cloning</a> </li>
</ul>
<h3>See Also</h3>
<ul>
  <li> <a href='/coding_rules#rule_key=java%3AS2157'>S2157</a> - ""Cloneables"" should implement ""clone"" </li>
  <li> <a href='/coding_rules#rule_key=java%3AS1182'>S1182</a> - Classes that override ""clone"" should be ""Cloneable"" and call ""super.clone()"" </li>
</ul>","<p>Many consider <code>clone</code> and <code>Cloneable</code> broken in Java, largely because the rules for overriding <code>clone</code> are tricky
and difficult to get right, according to Joshua Bloch:</p>
<blockquote>
  <p>Object’s clone method is very tricky. It’s based on field copies, and it’s ""extra-linguistic."" It creates an object without calling a
  constructor. There are no guarantees that it preserves the invariants established by the constructors. There have been lots of bugs over the years,
  both in and outside Sun, stemming from the fact that if you just call super.clone repeatedly up the chain until you have cloned an object, you have
  a shallow copy of the object. The clone generally shares state with the object being cloned. If that state is mutable, you don’t have two
  independent objects. If you modify one, the other changes as well. And all of a sudden, you get random behavior.</p>
</blockquote>
<p>A copy constructor or copy factory should be used instead.</p>
<p>This rule raises an issue when <code>clone</code> is overridden, whether or not <code>Cloneable</code> is implemented.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass {
  // ...

  public Object clone() { // Noncompliant
    //...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass {
  // ...

  MyClass (MyClass source) {
    //...
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.artima.com/intv/bloch13.html"">Copy Constructor versus Cloning</a> </li>
</ul>
<h3>See Also</h3>
<ul>
  <li> <a href='/coding_rules#rule_key=java%3AS2157'>S2157</a> - ""Cloneables"" should implement ""clone"" </li>
  <li> <a href='/coding_rules#rule_key=java%3AS1182'>S1182</a> - Classes that override ""clone"" should be ""Cloneable"" and call ""super.clone()"" </li>
</ul>",BLOCKER,READY,False,[],['suspicious'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,30min,CONSTANT_ISSUE,30min,False,MAIN,False,"[{'key': 'default', 'content': '<p>Many consider <code>clone</code> and <code>Cloneable</code> broken in Java, largely because the rules for overriding <code>clone</code> are tricky\nand difficult to get right, according to Joshua Bloch:</p>\n<blockquote>\n  <p>Object’s clone method is very tricky. It’s based on field copies, and it’s ""extra-linguistic."" It creates an object without calling a\n  constructor. There are no guarantees that it preserves the invariants established by the constructors. There have been lots of bugs over the years,\n  both in and outside Sun, stemming from the fact that if you just call super.clone repeatedly up the chain until you have cloned an object, you have\n  a shallow copy of the object. The clone generally shares state with the object being cloned. If that state is mutable, you don’t have two\n  independent objects. If you modify one, the other changes as well. And all of a sudden, you get random behavior.</p>\n</blockquote>\n<p>A copy constructor or copy factory should be used instead.</p>\n<p>This rule raises an issue when <code>clone</code> is overridden, whether or not <code>Cloneable</code> is implemented.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  // ...\n\n  public Object clone() { // Noncompliant\n    //...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  // ...\n\n  MyClass (MyClass source) {\n    //...\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://www.artima.com/intv/bloch13.html"">Copy Constructor versus Cloning</a> </li>\n</ul>\n<h3>See Also</h3>\n<ul>\n  <li> <a href=\'/coding_rules#rule_key=java%3AS2157\'>S2157</a> - ""Cloneables"" should implement ""clone"" </li>\n  <li> <a href=\'/coding_rules#rule_key=java%3AS1182\'>S1182</a> - Classes that override ""clone"" should be ""Cloneable"" and call ""super.clone()"" </li>\n</ul>'}]",[],['squid:S2975'],,,,
java:S3824,java,"""Map.get"" and value test should be replaced with single method call",2023-06-14T03:41:52+0000,"<p>It’s a common pattern to test the result of a <code>java.util.Map.get()</code> against <code>null</code> or calling
<code>java.util.Map.containsKey()</code> before proceeding with adding or changing the value in the map. However the <code>java.util.Map</code> API
offers a significantly better alternative in the form of the <code>computeIfPresent()</code> and <code>computeIfAbsent()</code> methods. Using these
instead leads to cleaner and more readable code.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project’s <code>sonar.java.source</code> is not 8.</p>
<h2>Noncompliant Code Example</h2>
<pre>
V value = map.get(key);
if (value == null) {  // Noncompliant
  value = V.createFor(key);
  if (value != null) {
    map.put(key, value);
  }
}
if (!map.containsKey(key)) {  // Noncompliant
  value = V.createFor(key);
  if (value != null) {
    map.put(key, value);
  }
}
return value;
</pre>
<h2>Compliant Solution</h2>
<pre>
return map.computeIfAbsent(key, k -&gt; V.createFor(k));
</pre>
<h2>Exceptions</h2>
<p>This rule will not raise an issue when trying to add <code>null</code> to a map, because <code>computeIfAbsent</code> will not add the entry if the
value returned by the function is <code>null</code>.</p>
<h2>See Also</h2>
<ul>
  <li> <a href='/coding_rules#rule_key=java%3AS6104'>S6104</a> - Map ""computeIfAbsent()"" and ""computeIfPresent()"" should not be used to add ""null"" values. </li>
</ul>","<p>It’s a common pattern to test the result of a <code>java.util.Map.get()</code> against <code>null</code> or calling
<code>java.util.Map.containsKey()</code> before proceeding with adding or changing the value in the map. However the <code>java.util.Map</code> API
offers a significantly better alternative in the form of the <code>computeIfPresent()</code> and <code>computeIfAbsent()</code> methods. Using these
instead leads to cleaner and more readable code.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project’s <code>sonar.java.source</code> is not 8.</p>
<h2>Noncompliant Code Example</h2>
<pre>
V value = map.get(key);
if (value == null) {  // Noncompliant
  value = V.createFor(key);
  if (value != null) {
    map.put(key, value);
  }
}
if (!map.containsKey(key)) {  // Noncompliant
  value = V.createFor(key);
  if (value != null) {
    map.put(key, value);
  }
}
return value;
</pre>
<h2>Compliant Solution</h2>
<pre>
return map.computeIfAbsent(key, k -&gt; V.createFor(k));
</pre>
<h2>Exceptions</h2>
<p>This rule will not raise an issue when trying to add <code>null</code> to a map, because <code>computeIfAbsent</code> will not add the entry if the
value returned by the function is <code>null</code>.</p>
<h2>See Also</h2>
<ul>
  <li> <a href='/coding_rules#rule_key=java%3AS6104'>S6104</a> - Map ""computeIfAbsent()"" and ""computeIfPresent()"" should not be used to add ""null"" values. </li>
</ul>",MAJOR,READY,False,[],['java8'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,10min,CONSTANT_ISSUE,10min,False,ALL,False,"[{'key': 'default', 'content': '<p>It’s a common pattern to test the result of a <code>java.util.Map.get()</code> against <code>null</code> or calling\n<code>java.util.Map.containsKey()</code> before proceeding with adding or changing the value in the map. However the <code>java.util.Map</code> API\noffers a significantly better alternative in the form of the <code>computeIfPresent()</code> and <code>computeIfAbsent()</code> methods. Using these\ninstead leads to cleaner and more readable code.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project’s <code>sonar.java.source</code> is not 8.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nV value = map.get(key);\nif (value == null) {  // Noncompliant\n  value = V.createFor(key);\n  if (value != null) {\n    map.put(key, value);\n  }\n}\nif (!map.containsKey(key)) {  // Noncompliant\n  value = V.createFor(key);\n  if (value != null) {\n    map.put(key, value);\n  }\n}\nreturn value;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nreturn map.computeIfAbsent(key, k -&gt; V.createFor(k));\n</pre>\n<h2>Exceptions</h2>\n<p>This rule will not raise an issue when trying to add <code>null</code> to a map, because <code>computeIfAbsent</code> will not add the entry if the\nvalue returned by the function is <code>null</code>.</p>\n<h2>See Also</h2>\n<ul>\n  <li> <a href=\'/coding_rules#rule_key=java%3AS6104\'>S6104</a> - Map ""computeIfAbsent()"" and ""computeIfPresent()"" should not be used to add ""null"" values. </li>\n</ul>'}]",[],['squid:S3824'],,,,
java:S1213,java,The members of an interface or class declaration should appear in a pre-defined order,2023-06-14T03:41:52+0000,"<p>According to the Java Code Conventions as defined by Oracle, the members of a class or interface declaration should appear in the following order
in the source files:</p>
<ul>
  <li> Class variables </li>
  <li> Instance variables </li>
  <li> Constructors </li>
  <li> Methods </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo{
   private int field = 0;
   public boolean isTrue() {...}
   public Foo() {...}                         // Noncompliant, constructor defined after methods
   public static final int OPEN = 4;  //Noncompliant, variable defined after constructors and methods
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Foo{
   public static final int OPEN = 4;
   private int field = 0;
   public Foo() {...}
   public boolean isTrue() {...}
}
</pre>","<p>According to the Java Code Conventions as defined by Oracle, the members of a class or interface declaration should appear in the following order
in the source files:</p>
<ul>
  <li> Class variables </li>
  <li> Instance variables </li>
  <li> Constructors </li>
  <li> Methods </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo{
   private int field = 0;
   public boolean isTrue() {...}
   public Foo() {...}                         // Noncompliant, constructor defined after methods
   public static final int OPEN = 4;  //Noncompliant, variable defined after constructors and methods
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Foo{
   public static final int OPEN = 4;
   private int field = 0;
   public Foo() {...}
   public boolean isTrue() {...}
}
</pre>",MINOR,READY,False,[],['convention'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>According to the Java Code Conventions as defined by Oracle, the members of a class or interface declaration should appear in the following order\nin the source files:</p>\n<ul>\n  <li> Class variables </li>\n  <li> Instance variables </li>\n  <li> Constructors </li>\n  <li> Methods </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo{\n   private int field = 0;\n   public boolean isTrue() {...}\n   public Foo() {...}                         // Noncompliant, constructor defined after methods\n   public static final int OPEN = 4;  //Noncompliant, variable defined after constructors and methods\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo{\n   public static final int OPEN = 4;\n   private int field = 0;\n   public Foo() {...}\n   public boolean isTrue() {...}\n}\n</pre>'}]",[],['squid:S1213'],,,,
java:S1214,java,Constants should not be defined in interfaces,2023-06-14T03:41:52+0000,"<p>According to Joshua Bloch, author of ""Effective Java"":</p>
<blockquote>
  <p>The constant interface pattern is a poor use of interfaces.</p>
  <p>That a class uses some constants internally is an implementation detail.</p>
  <p>Implementing a constant interface causes this implementation detail to leak into the class’s exported API. It is of no consequence to the users
  of a class that the class implements a constant interface. In fact, it may even confuse them. Worse, it represents a commitment: if in a future
  release the class is modified so that it no longer needs to use the constants, it still must implement the interface to ensure binary compatibility.
  If a nonfinal class implements a constant interface,</p>
  <p>all of its subclasses will have their namespaces polluted by the constants in the interface.</p>
</blockquote>
<p>This rule raises an issue when an interface consists solely of fields, without any other members.</p>
<h2>Noncompliant Code Example</h2>
<pre>
interface Status {                      // Noncompliant
   int OPEN = 1;
   int CLOSED = 2;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public enum Status {                    // Compliant
  OPEN,
  CLOSED;
}
</pre>
<p>or</p>
<pre>
public final class Status {             // Compliant
   public static final int OPEN = 1;
   public static final int CLOSED = 2;
}
</pre>","<p>According to Joshua Bloch, author of ""Effective Java"":</p>
<blockquote>
  <p>The constant interface pattern is a poor use of interfaces.</p>
  <p>That a class uses some constants internally is an implementation detail.</p>
  <p>Implementing a constant interface causes this implementation detail to leak into the class’s exported API. It is of no consequence to the users
  of a class that the class implements a constant interface. In fact, it may even confuse them. Worse, it represents a commitment: if in a future
  release the class is modified so that it no longer needs to use the constants, it still must implement the interface to ensure binary compatibility.
  If a nonfinal class implements a constant interface,</p>
  <p>all of its subclasses will have their namespaces polluted by the constants in the interface.</p>
</blockquote>
<p>This rule raises an issue when an interface consists solely of fields, without any other members.</p>
<h2>Noncompliant Code Example</h2>
<pre>
interface Status {                      // Noncompliant
   int OPEN = 1;
   int CLOSED = 2;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public enum Status {                    // Compliant
  OPEN,
  CLOSED;
}
</pre>
<p>or</p>
<pre>
public final class Status {             // Compliant
   public static final int OPEN = 1;
   public static final int CLOSED = 2;
}
</pre>",CRITICAL,READY,False,[],['bad-practice'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,10min,CONSTANT_ISSUE,10min,False,ALL,False,"[{'key': 'default', 'content': '<p>According to Joshua Bloch, author of ""Effective Java"":</p>\n<blockquote>\n  <p>The constant interface pattern is a poor use of interfaces.</p>\n  <p>That a class uses some constants internally is an implementation detail.</p>\n  <p>Implementing a constant interface causes this implementation detail to leak into the class’s exported API. It is of no consequence to the users\n  of a class that the class implements a constant interface. In fact, it may even confuse them. Worse, it represents a commitment: if in a future\n  release the class is modified so that it no longer needs to use the constants, it still must implement the interface to ensure binary compatibility.\n  If a nonfinal class implements a constant interface,</p>\n  <p>all of its subclasses will have their namespaces polluted by the constants in the interface.</p>\n</blockquote>\n<p>This rule raises an issue when an interface consists solely of fields, without any other members.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ninterface Status {                      // Noncompliant\n   int OPEN = 1;\n   int CLOSED = 2;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic enum Status {                    // Compliant\n  OPEN,\n  CLOSED;\n}\n</pre>\n<p>or</p>\n<pre>\npublic final class Status {             // Compliant\n   public static final int OPEN = 1;\n   public static final int CLOSED = 2;\n}\n</pre>'}]",[],['squid:S1214'],,,,
java:S1695,java,"""NullPointerException"" should not be explicitly thrown",2023-06-14T03:41:52+0000,"<p>A <code>NullPointerException</code> should indicate that a <code>null</code> value was unexpectedly encountered. Good programming practice dictates
that code is structured to avoid NPE’s.</p>
<p>Explicitly throwing <code>NullPointerException</code> forces a method’s callers to explicitly catch it, rather than coding to avoid it. Further, it
makes it difficult to distinguish between the unexpectedly-encountered <code>null</code> value and the condition which causes the method to purposely
throw an NPE.</p>
<p>If an NPE is being thrown to indicate that a parameter to the method should not have been null, use the <code>@NotNull</code> annotation
instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void doSomething (String aString) throws NullPointerException {
     throw new NullPointerException();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void doSomething (@NotNull String aString) {
}
</pre>","<p>A <code>NullPointerException</code> should indicate that a <code>null</code> value was unexpectedly encountered. Good programming practice dictates
that code is structured to avoid NPE’s.</p>
<p>Explicitly throwing <code>NullPointerException</code> forces a method’s callers to explicitly catch it, rather than coding to avoid it. Further, it
makes it difficult to distinguish between the unexpectedly-encountered <code>null</code> value and the condition which causes the method to purposely
throw an NPE.</p>
<p>If an NPE is being thrown to indicate that a parameter to the method should not have been null, use the <code>@NotNull</code> annotation
instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void doSomething (String aString) throws NullPointerException {
     throw new NullPointerException();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void doSomething (@NotNull String aString) {
}
</pre>",MAJOR,READY,False,[],"['error-handling', 'pitfall']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,10min,CONSTANT_ISSUE,10min,False,MAIN,False,"[{'key': 'default', 'content': '<p>A <code>NullPointerException</code> should indicate that a <code>null</code> value was unexpectedly encountered. Good programming practice dictates\nthat code is structured to avoid NPE’s.</p>\n<p>Explicitly throwing <code>NullPointerException</code> forces a method’s callers to explicitly catch it, rather than coding to avoid it. Further, it\nmakes it difficult to distinguish between the unexpectedly-encountered <code>null</code> value and the condition which causes the method to purposely\nthrow an NPE.</p>\n<p>If an NPE is being thrown to indicate that a parameter to the method should not have been null, use the <code>@NotNull</code> annotation\ninstead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething (String aString) throws NullPointerException {\n     throw new NullPointerException();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething (@NotNull String aString) {\n}\n</pre>'}]",[],['squid:S1695'],,,,
java:S1696,java,"""NullPointerException"" should not be caught",2023-06-14T03:41:52+0000,"<p><code>NullPointerException</code> should be avoided, not caught. Any situation in which <code>NullPointerException</code> is explicitly caught can
easily be converted to a <code>null</code> test, and any behavior being carried out in the catch block can easily be moved to the ""is null"" branch of
the conditional.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public int lengthPlus(String str) {
  int len = 2;
  try {
    len += str.length();
  }
  catch (NullPointerException e) {
    log.info(""argument was null"");
  }
  return len;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public int lengthPlus(String str) {
  int len = 2;

  if (str != null) {
    len += str.length();
  }
  else {
    log.info(""argument was null"");
  }
  return len;
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/395"">MITRE, CWE-395</a> - Use of NullPointerException Catch to Detect NULL Pointer Dereference
  </li>
  <li> <a href=""https://tinyurl.com/y6r4amg3"">CERT, ERR08-J.</a> - Do not catch NullPointerException or any of its ancestors </li>
</ul>","<p><code>NullPointerException</code> should be avoided, not caught. Any situation in which <code>NullPointerException</code> is explicitly caught can
easily be converted to a <code>null</code> test, and any behavior being carried out in the catch block can easily be moved to the ""is null"" branch of
the conditional.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public int lengthPlus(String str) {
  int len = 2;
  try {
    len += str.length();
  }
  catch (NullPointerException e) {
    log.info(""argument was null"");
  }
  return len;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public int lengthPlus(String str) {
  int len = 2;

  if (str != null) {
    len += str.length();
  }
  else {
    log.info(""argument was null"");
  }
  return len;
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/395"">MITRE, CWE-395</a> - Use of NullPointerException Catch to Detect NULL Pointer Dereference
  </li>
  <li> <a href=""https://tinyurl.com/y6r4amg3"">CERT, ERR08-J.</a> - Do not catch NullPointerException or any of its ancestors </li>
</ul>",MAJOR,READY,False,[],"['cert', 'cwe', 'error-handling']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,MAIN,False,"[{'key': 'default', 'content': '<p><code>NullPointerException</code> should be avoided, not caught. Any situation in which <code>NullPointerException</code> is explicitly caught can\neasily be converted to a <code>null</code> test, and any behavior being carried out in the catch block can easily be moved to the ""is null"" branch of\nthe conditional.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int lengthPlus(String str) {\n  int len = 2;\n  try {\n    len += str.length();\n  }\n  catch (NullPointerException e) {\n    log.info(""argument was null"");\n  }\n  return len;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int lengthPlus(String str) {\n  int len = 2;\n\n  if (str != null) {\n    len += str.length();\n  }\n  else {\n    log.info(""argument was null"");\n  }\n  return len;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/395"">MITRE, CWE-395</a> - Use of NullPointerException Catch to Detect NULL Pointer Dereference\n  </li>\n  <li> <a href=""https://tinyurl.com/y6r4amg3"">CERT, ERR08-J.</a> - Do not catch NullPointerException or any of its ancestors </li>\n</ul>'}]",[],['squid:S1696'],,,,
java:S2301,java,Public methods should not contain selector arguments,2023-06-14T03:41:52+0000,"<p>A selector argument is a <code>boolean</code> argument that’s used to determine which of two paths to take through a method. Specifying such a
parameter may seem innocuous, particularly if it’s well named.</p>
<p>Unfortunately, the maintainers of the code calling the method won’t see the parameter name, only its value. They’ll be forced either to guess at
the meaning or to take extra time to look the method up.</p>
<p>Instead, separate methods should be written.</p>
<p>This rule finds methods with a <code>boolean</code> that’s used to determine which path to take through the method.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public String tempt(String name, boolean ofAge) {
  if (ofAge) {
    offerLiquor(name);
  } else {
    offerCandy(name);
  }
}

// ...
public void corrupt() {
  tempt(""Joe"", false); // does this mean not to temp Joe?
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void temptAdult(String name) {
  offerLiquor(name);
}

public void temptChild(String name) {
    offerCandy(name);
}

// ...
public void corrupt() {
  age &lt; legalAge ? temptChild(""Joe"") : temptAdult(""Joe"");
}
</pre>","<p>A selector argument is a <code>boolean</code> argument that’s used to determine which of two paths to take through a method. Specifying such a
parameter may seem innocuous, particularly if it’s well named.</p>
<p>Unfortunately, the maintainers of the code calling the method won’t see the parameter name, only its value. They’ll be forced either to guess at
the meaning or to take extra time to look the method up.</p>
<p>Instead, separate methods should be written.</p>
<p>This rule finds methods with a <code>boolean</code> that’s used to determine which path to take through the method.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public String tempt(String name, boolean ofAge) {
  if (ofAge) {
    offerLiquor(name);
  } else {
    offerCandy(name);
  }
}

// ...
public void corrupt() {
  tempt(""Joe"", false); // does this mean not to temp Joe?
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void temptAdult(String name) {
  offerLiquor(name);
}

public void temptChild(String name) {
    offerCandy(name);
}

// ...
public void corrupt() {
  age &lt; legalAge ? temptChild(""Joe"") : temptAdult(""Joe"");
}
</pre>",MAJOR,READY,False,[],['design'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,15min,CONSTANT_ISSUE,15min,False,MAIN,False,"[{'key': 'default', 'content': '<p>A selector argument is a <code>boolean</code> argument that’s used to determine which of two paths to take through a method. Specifying such a\nparameter may seem innocuous, particularly if it’s well named.</p>\n<p>Unfortunately, the maintainers of the code calling the method won’t see the parameter name, only its value. They’ll be forced either to guess at\nthe meaning or to take extra time to look the method up.</p>\n<p>Instead, separate methods should be written.</p>\n<p>This rule finds methods with a <code>boolean</code> that’s used to determine which path to take through the method.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic String tempt(String name, boolean ofAge) {\n  if (ofAge) {\n    offerLiquor(name);\n  } else {\n    offerCandy(name);\n  }\n}\n\n// ...\npublic void corrupt() {\n  tempt(""Joe"", false); // does this mean not to temp Joe?\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void temptAdult(String name) {\n  offerLiquor(name);\n}\n\npublic void temptChild(String name) {\n    offerCandy(name);\n}\n\n// ...\npublic void corrupt() {\n  age &lt; legalAge ? temptChild(""Joe"") : temptAdult(""Joe"");\n}\n</pre>'}]",[],['squid:S2301'],,,,
java:S2786,java,"Nested ""enum""s should not be declared static",2023-06-14T03:41:52+0000,"<p>According to <a href=""http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.9"">the Java Language Specification-8.9</a>:</p>
<blockquote>
  <p>Nested enum types are implicitly <code>static</code>.</p>
</blockquote>
<p>So there’s no need to declare them <code>static</code> explicitly.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Flower {
  static enum Color { // Noncompliant; static is redundant here
    RED, YELLOW, BLUE, ORANGE
  }

  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Flower {
  enum Color { // Compliant
    RED, YELLOW, BLUE, ORANGE
  }

  // ...
}
</pre>","<p>According to <a href=""http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.9"">the Java Language Specification-8.9</a>:</p>
<blockquote>
  <p>Nested enum types are implicitly <code>static</code>.</p>
</blockquote>
<p>So there’s no need to declare them <code>static</code> explicitly.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Flower {
  static enum Color { // Noncompliant; static is redundant here
    RED, YELLOW, BLUE, ORANGE
  }

  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Flower {
  enum Color { // Compliant
    RED, YELLOW, BLUE, ORANGE
  }

  // ...
}
</pre>",MINOR,READY,False,[],['clumsy'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,2min,CONSTANT_ISSUE,2min,False,ALL,False,"[{'key': 'default', 'content': '<p>According to <a href=""http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.9"">the Java Language Specification-8.9</a>:</p>\n<blockquote>\n  <p>Nested enum types are implicitly <code>static</code>.</p>\n</blockquote>\n<p>So there’s no need to declare them <code>static</code> explicitly.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Flower {\n  static enum Color { // Noncompliant; static is redundant here\n    RED, YELLOW, BLUE, ORANGE\n  }\n\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Flower {\n  enum Color { // Compliant\n    RED, YELLOW, BLUE, ORANGE\n  }\n\n  // ...\n}\n</pre>'}]",[],['squid:S2786'],,,,
java:S3631,java,"""Arrays.stream"" should be used for primitive arrays",2023-06-14T03:41:52+0000,"<p>For arrays of objects, <code>Arrays.asList(T ... a).stream()</code> and <code>Arrays.stream(array)</code> are basically equivalent in terms of
performance. However, for arrays of primitives, using <code>Arrays.asList</code> will force the construction of a list of boxed types, and then use
<em>that</em> list as a stream. On the other hand, <code>Arrays.stream</code> uses the appropriate primitive stream type (<code>IntStream</code>,
<code>LongStream</code>, <code>DoubleStream</code>) when applicable, with much better performance.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Arrays.asList(""a1"", ""a2"", ""b1"", ""c2"", ""c1"").stream()
    .filter(...)
    .forEach(...);

Arrays.asList(1, 2, 3, 4).stream() // Noncompliant
    .filter(...)
    .forEach(...);
</pre>
<h2>Compliant Solution</h2>
<pre>
Arrays.asList(""a1"", ""a2"", ""b1"", ""c2"", ""c1"").stream()
    .filter(...)
    .forEach(...);

int[] intArray = new int[]{1, 2, 3, 4};
Arrays.stream(intArray)
    .filter(...)
    .forEach(...);
</pre>","<p>For arrays of objects, <code>Arrays.asList(T ... a).stream()</code> and <code>Arrays.stream(array)</code> are basically equivalent in terms of
performance. However, for arrays of primitives, using <code>Arrays.asList</code> will force the construction of a list of boxed types, and then use
<em>that</em> list as a stream. On the other hand, <code>Arrays.stream</code> uses the appropriate primitive stream type (<code>IntStream</code>,
<code>LongStream</code>, <code>DoubleStream</code>) when applicable, with much better performance.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Arrays.asList(""a1"", ""a2"", ""b1"", ""c2"", ""c1"").stream()
    .filter(...)
    .forEach(...);

Arrays.asList(1, 2, 3, 4).stream() // Noncompliant
    .filter(...)
    .forEach(...);
</pre>
<h2>Compliant Solution</h2>
<pre>
Arrays.asList(""a1"", ""a2"", ""b1"", ""c2"", ""c1"").stream()
    .filter(...)
    .forEach(...);

int[] intArray = new int[]{1, 2, 3, 4};
Arrays.stream(intArray)
    .filter(...)
    .forEach(...);
</pre>",MAJOR,READY,False,[],['performance'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>For arrays of objects, <code>Arrays.asList(T ... a).stream()</code> and <code>Arrays.stream(array)</code> are basically equivalent in terms of\nperformance. However, for arrays of primitives, using <code>Arrays.asList</code> will force the construction of a list of boxed types, and then use\n<em>that</em> list as a stream. On the other hand, <code>Arrays.stream</code> uses the appropriate primitive stream type (<code>IntStream</code>,\n<code>LongStream</code>, <code>DoubleStream</code>) when applicable, with much better performance.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nArrays.asList(""a1"", ""a2"", ""b1"", ""c2"", ""c1"").stream()\n    .filter(...)\n    .forEach(...);\n\nArrays.asList(1, 2, 3, 4).stream() // Noncompliant\n    .filter(...)\n    .forEach(...);\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nArrays.asList(""a1"", ""a2"", ""b1"", ""c2"", ""c1"").stream()\n    .filter(...)\n    .forEach(...);\n\nint[] intArray = new int[]{1, 2, 3, 4};\nArrays.stream(intArray)\n    .filter(...)\n    .forEach(...);\n</pre>'}]",[],['squid:S3631'],,,,
java:S1210,java,"""equals(Object obj)"" should be overridden along with the ""compareTo(T obj)"" method",2023-06-14T03:41:52+0000,"<p>According to the Java <code>Comparable.compareTo(T o)</code> documentation:</p>
<blockquote>
  <p>It is strongly recommended, but not strictly required that <code>(x.compareTo(y)==0) == (x.equals(y))</code>.</p>
  <p>Generally speaking, any class that implements the Comparable interface and violates this condition should clearly indicate this fact.</p>
  <p>The recommended language is ""Note: this class has a natural ordering that is inconsistent with equals.""</p>
</blockquote>
<p>If this rule is violated, weird and unpredictable failures can occur.</p>
<p>For example, in Java 5 the <code>PriorityQueue.remove()</code> method relied on <code>compareTo()</code>, but since Java 6 it has relied on
<code>equals()</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo implements Comparable&lt;Foo&gt; {
  @Override
  public int compareTo(Foo foo) { /* ... */ }      // Noncompliant as the equals(Object obj) method is not overridden
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Foo implements Comparable&lt;Foo&gt; {
  @Override
  public int compareTo(Foo foo) { /* ... */ }      // Compliant

  @Override
  public boolean equals(Object obj) { /* ... */ }
}
</pre>","<p>According to the Java <code>Comparable.compareTo(T o)</code> documentation:</p>
<blockquote>
  <p>It is strongly recommended, but not strictly required that <code>(x.compareTo(y)==0) == (x.equals(y))</code>.</p>
  <p>Generally speaking, any class that implements the Comparable interface and violates this condition should clearly indicate this fact.</p>
  <p>The recommended language is ""Note: this class has a natural ordering that is inconsistent with equals.""</p>
</blockquote>
<p>If this rule is violated, weird and unpredictable failures can occur.</p>
<p>For example, in Java 5 the <code>PriorityQueue.remove()</code> method relied on <code>compareTo()</code>, but since Java 6 it has relied on
<code>equals()</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo implements Comparable&lt;Foo&gt; {
  @Override
  public int compareTo(Foo foo) { /* ... */ }      // Noncompliant as the equals(Object obj) method is not overridden
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Foo implements Comparable&lt;Foo&gt; {
  @Override
  public int compareTo(Foo foo) { /* ... */ }      // Compliant

  @Override
  public boolean equals(Object obj) { /* ... */ }
}
</pre>",MINOR,READY,False,[],[],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,15min,CONSTANT_ISSUE,15min,False,MAIN,False,"[{'key': 'default', 'content': '<p>According to the Java <code>Comparable.compareTo(T o)</code> documentation:</p>\n<blockquote>\n  <p>It is strongly recommended, but not strictly required that <code>(x.compareTo(y)==0) == (x.equals(y))</code>.</p>\n  <p>Generally speaking, any class that implements the Comparable interface and violates this condition should clearly indicate this fact.</p>\n  <p>The recommended language is ""Note: this class has a natural ordering that is inconsistent with equals.""</p>\n</blockquote>\n<p>If this rule is violated, weird and unpredictable failures can occur.</p>\n<p>For example, in Java 5 the <code>PriorityQueue.remove()</code> method relied on <code>compareTo()</code>, but since Java 6 it has relied on\n<code>equals()</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo implements Comparable&lt;Foo&gt; {\n  @Override\n  public int compareTo(Foo foo) { /* ... */ }      // Noncompliant as the equals(Object obj) method is not overridden\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo implements Comparable&lt;Foo&gt; {\n  @Override\n  public int compareTo(Foo foo) { /* ... */ }      // Compliant\n\n  @Override\n  public boolean equals(Object obj) { /* ... */ }\n}\n</pre>'}]",[],['squid:S1210'],,,,
java:S1452,java,Generic wildcard types should not be used in return types,2023-06-14T03:41:52+0000,"<p>It is highly recommended <strong>not</strong> to use wildcard types as return types. Because the type inference rules are fairly complex it is
unlikely the user of that API will know how to use it correctly.</p>
<p>Let’s take the example of method returning a ""List&lt;? extends Animal&gt;"". Is it possible on this list to add a Dog, a Cat, …​ we simply don’t
know. And neither does the compiler, which is why it will not allow such a direct use. The use of wildcard types should be limited to method
parameters.</p>
<p>This rule raises an issue when a method returns a wildcard type.</p>
<h2>Noncompliant Code Example</h2>
<pre>
List&lt;? extends Animal&gt; getAnimals(){...}
</pre>
<h2>Compliant Solution</h2>
<pre>
List&lt;Animal&gt; getAnimals(){...}
</pre>
<p>or</p>
<pre>
List&lt;Dog&gt; getAnimals(){...}
</pre>","<p>It is highly recommended <strong>not</strong> to use wildcard types as return types. Because the type inference rules are fairly complex it is
unlikely the user of that API will know how to use it correctly.</p>
<p>Let’s take the example of method returning a ""List&lt;? extends Animal&gt;"". Is it possible on this list to add a Dog, a Cat, …​ we simply don’t
know. And neither does the compiler, which is why it will not allow such a direct use. The use of wildcard types should be limited to method
parameters.</p>
<p>This rule raises an issue when a method returns a wildcard type.</p>
<h2>Noncompliant Code Example</h2>
<pre>
List&lt;? extends Animal&gt; getAnimals(){...}
</pre>
<h2>Compliant Solution</h2>
<pre>
List&lt;Animal&gt; getAnimals(){...}
</pre>
<p>or</p>
<pre>
List&lt;Dog&gt; getAnimals(){...}
</pre>",CRITICAL,READY,False,[],['pitfall'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,20min,CONSTANT_ISSUE,20min,False,ALL,False,"[{'key': 'default', 'content': '<p>It is highly recommended <strong>not</strong> to use wildcard types as return types. Because the type inference rules are fairly complex it is\nunlikely the user of that API will know how to use it correctly.</p>\n<p>Let’s take the example of method returning a ""List&lt;? extends Animal&gt;"". Is it possible on this list to add a Dog, a Cat, …\u200b we simply don’t\nknow. And neither does the compiler, which is why it will not allow such a direct use. The use of wildcard types should be limited to method\nparameters.</p>\n<p>This rule raises an issue when a method returns a wildcard type.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;? extends Animal&gt; getAnimals(){...}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nList&lt;Animal&gt; getAnimals(){...}\n</pre>\n<p>or</p>\n<pre>\nList&lt;Dog&gt; getAnimals(){...}\n</pre>'}]",[],['squid:S1452'],,,,
java:S1219,java,"""switch"" statements should not contain non-case labels",2023-06-14T03:41:52+0000,"<p>Even if it is legal, mixing case and non-case labels in the body of a switch statement is very confusing and can even be the result of a typing
error.</p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (day) {
  case MONDAY:
  case TUESDAY:
  WEDNESDAY:   // Noncompliant; syntactically correct, but behavior is not what's expected
    doSomething();
    break;
  ...
}

switch (day) {
  case MONDAY:
    break;
  case TUESDAY:
    foo:for(int i = 0 ; i &lt; X ; i++) {  // Noncompliant; the code is correct and behaves as expected but is barely readable
         /* ... */
        break foo;  // this break statement doesn't relate to the nesting case TUESDAY
         /* ... */
    }
    break;
    /* ... */
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch (day) {
  case MONDAY:
  case TUESDAY:
  case WEDNESDAY:
    doSomething();
    break;
  ...
}

switch (day) {
  case MONDAY:
    break;
  case TUESDAY:
    compute(args); // put the content of the labelled ""for"" statement in a dedicated method
    break;

    /* ... */
}
</pre>","<p>Even if it is legal, mixing case and non-case labels in the body of a switch statement is very confusing and can even be the result of a typing
error.</p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (day) {
  case MONDAY:
  case TUESDAY:
  WEDNESDAY:   // Noncompliant; syntactically correct, but behavior is not what's expected
    doSomething();
    break;
  ...
}

switch (day) {
  case MONDAY:
    break;
  case TUESDAY:
    foo:for(int i = 0 ; i &lt; X ; i++) {  // Noncompliant; the code is correct and behaves as expected but is barely readable
         /* ... */
        break foo;  // this break statement doesn't relate to the nesting case TUESDAY
         /* ... */
    }
    break;
    /* ... */
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch (day) {
  case MONDAY:
  case TUESDAY:
  case WEDNESDAY:
    doSomething();
    break;
  ...
}

switch (day) {
  case MONDAY:
    break;
  case TUESDAY:
    compute(args); // put the content of the labelled ""for"" statement in a dedicated method
    break;

    /* ... */
}
</pre>",BLOCKER,READY,False,[],['suspicious'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,10min,CONSTANT_ISSUE,10min,False,ALL,False,"[{'key': 'default', 'content': '<p>Even if it is legal, mixing case and non-case labels in the body of a switch statement is very confusing and can even be the result of a typing\nerror.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  WEDNESDAY:   // Noncompliant; syntactically correct, but behavior is not what\'s expected\n    doSomething();\n    break;\n  ...\n}\n\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    foo:for(int i = 0 ; i &lt; X ; i++) {  // Noncompliant; the code is correct and behaves as expected but is barely readable\n         /* ... */\n        break foo;  // this break statement doesn\'t relate to the nesting case TUESDAY\n         /* ... */\n    }\n    break;\n    /* ... */\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  case WEDNESDAY:\n    doSomething();\n    break;\n  ...\n}\n\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    compute(args); // put the content of the labelled ""for"" statement in a dedicated method\n    break;\n\n    /* ... */\n}\n</pre>'}]",[],['squid:S1219'],,,,
java:S1450,java,Private fields only used as local variables in methods should become local variables,2023-06-14T03:41:52+0000,"<p>When the value of a private field is always assigned to in a class' methods before being read, then it is not being used to store class
information. Therefore, it should become a local variable in the relevant methods to prevent any misunderstanding.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo {
  private int a;
  private int b;

  public void doSomething(int y) {
    a = y + 5;
    ...
    if(a == 0) {
      ...
    }
    ...
  }

  public void doSomethingElse(int y) {
    b = y + 3;
    ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Foo {

  public void doSomething(int y) {
    int a = y + 5;
    ...
    if(a == 0) {
      ...
    }
  }

  public void doSomethingElse(int y) {
    int b = y + 3;
    ...
  }
}
</pre>
<h2>Exceptions</h2>
<p>This rule doesn’t raise any issue on annotated field.</p>","<p>When the value of a private field is always assigned to in a class' methods before being read, then it is not being used to store class
information. Therefore, it should become a local variable in the relevant methods to prevent any misunderstanding.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo {
  private int a;
  private int b;

  public void doSomething(int y) {
    a = y + 5;
    ...
    if(a == 0) {
      ...
    }
    ...
  }

  public void doSomethingElse(int y) {
    b = y + 3;
    ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Foo {

  public void doSomething(int y) {
    int a = y + 5;
    ...
    if(a == 0) {
      ...
    }
  }

  public void doSomethingElse(int y) {
    int b = y + 3;
    ...
  }
}
</pre>
<h2>Exceptions</h2>
<p>This rule doesn’t raise any issue on annotated field.</p>",MINOR,READY,False,[],['pitfall'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,MAIN,False,"[{'key': 'default', 'content': ""<p>When the value of a private field is always assigned to in a class' methods before being read, then it is not being used to store class\ninformation. Therefore, it should become a local variable in the relevant methods to prevent any misunderstanding.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n  private int a;\n  private int b;\n\n  public void doSomething(int y) {\n    a = y + 5;\n    ...\n    if(a == 0) {\n      ...\n    }\n    ...\n  }\n\n  public void doSomethingElse(int y) {\n    b = y + 3;\n    ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n\n  public void doSomething(int y) {\n    int a = y + 5;\n    ...\n    if(a == 0) {\n      ...\n    }\n  }\n\n  public void doSomethingElse(int y) {\n    int b = y + 3;\n    ...\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule doesn’t raise any issue on annotated field.</p>""}]",[],['squid:S1450'],,,,
java:S1451,java,Track lack of copyright and license headers,2023-06-14T03:41:52+0000,"<p>Each source file should start with a header stating file ownership and the license which must be used to distribute the application.</p>
<p>This rule must be fed with the header text that is expected at the beginning of every file.</p>
<h2>Compliant Solution</h2>
<pre>
/*
 * SonarQube, open source software quality management tool.
 * Copyright (C) 2008-2013 SonarSource
 * mailto:contact AT sonarsource DOT com
 *
 * SonarQube is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * SonarQube is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
</pre>","<p>Each source file should start with a header stating file ownership and the license which must be used to distribute the application.</p>
<p>This rule must be fed with the header text that is expected at the beginning of every file.</p>
<h2>Compliant Solution</h2>
<pre>
/*
 * SonarQube, open source software quality management tool.
 * Copyright (C) 2008-2013 SonarSource
 * mailto:contact AT sonarsource DOT com
 *
 * SonarQube is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * SonarQube is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
</pre>",BLOCKER,READY,False,[],[],java,Java,"[{'key': 'headerFormat', 'htmlDesc': 'Expected copyright and license header', 'type': 'TEXT'}, {'key': 'isRegularExpression', 'htmlDesc': 'Whether the headerFormat is a regular expression', 'defaultValue': 'false', 'type': 'BOOLEAN'}]",CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>Each source file should start with a header stating file ownership and the license which must be used to distribute the application.</p>\n<p>This rule must be fed with the header text that is expected at the beginning of every file.</p>\n<h2>Compliant Solution</h2>\n<pre>\n/*\n * SonarQube, open source software quality management tool.\n * Copyright (C) 2008-2013 SonarSource\n * mailto:contact AT sonarsource DOT com\n *\n * SonarQube is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * SonarQube is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n</pre>'}]",[],['squid:S1451'],,,,
java:S1694,java,An abstract class should have both abstract and concrete methods,2023-06-14T03:41:52+0000,"<p>The purpose of an abstract class is to provide some heritable behaviors while also defining methods which must be implemented by sub-classes.</p>
<p>A class with no abstract methods that was made abstract purely to prevent instantiation should be converted to a concrete class (i.e. remove the
<code>abstract</code> keyword) with a private constructor.</p>
<p>A class with only abstract methods and no inheritable behavior should be converted to an interface.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public abstract class Animal {  // Noncompliant; should be an interface
  abstract void move();
  abstract void feed();
}

public abstract class Color {  // Noncompliant; should be concrete with a private constructor
  private int red = 0;
  private int green = 0;
  private int blue = 0;

  public int getRed() {
    return red;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public interface Animal {
  void move();
  void feed();
}

public class Color {
  private int red = 0;
  private int green = 0;
  private int blue = 0;

  private Color () {}

  public int getRed() {
    return red;
  }
}

public abstract class Lamp {

  private boolean switchLamp=false;

  public abstract void glow();

  public void flipSwitch() {
    switchLamp = !switchLamp;
    if (switchLamp) {
      glow();
    }
  }
}
</pre>","<p>The purpose of an abstract class is to provide some heritable behaviors while also defining methods which must be implemented by sub-classes.</p>
<p>A class with no abstract methods that was made abstract purely to prevent instantiation should be converted to a concrete class (i.e. remove the
<code>abstract</code> keyword) with a private constructor.</p>
<p>A class with only abstract methods and no inheritable behavior should be converted to an interface.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public abstract class Animal {  // Noncompliant; should be an interface
  abstract void move();
  abstract void feed();
}

public abstract class Color {  // Noncompliant; should be concrete with a private constructor
  private int red = 0;
  private int green = 0;
  private int blue = 0;

  public int getRed() {
    return red;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public interface Animal {
  void move();
  void feed();
}

public class Color {
  private int red = 0;
  private int green = 0;
  private int blue = 0;

  private Color () {}

  public int getRed() {
    return red;
  }
}

public abstract class Lamp {

  private boolean switchLamp=false;

  public abstract void glow();

  public void flipSwitch() {
    switchLamp = !switchLamp;
    if (switchLamp) {
      glow();
    }
  }
}
</pre>",MINOR,READY,False,[],['convention'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,MAIN,False,"[{'key': 'default', 'content': '<p>The purpose of an abstract class is to provide some heritable behaviors while also defining methods which must be implemented by sub-classes.</p>\n<p>A class with no abstract methods that was made abstract purely to prevent instantiation should be converted to a concrete class (i.e. remove the\n<code>abstract</code> keyword) with a private constructor.</p>\n<p>A class with only abstract methods and no inheritable behavior should be converted to an interface.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic abstract class Animal {  // Noncompliant; should be an interface\n  abstract void move();\n  abstract void feed();\n}\n\npublic abstract class Color {  // Noncompliant; should be concrete with a private constructor\n  private int red = 0;\n  private int green = 0;\n  private int blue = 0;\n\n  public int getRed() {\n    return red;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic interface Animal {\n  void move();\n  void feed();\n}\n\npublic class Color {\n  private int red = 0;\n  private int green = 0;\n  private int blue = 0;\n\n  private Color () {}\n\n  public int getRed() {\n    return red;\n  }\n}\n\npublic abstract class Lamp {\n\n  private boolean switchLamp=false;\n\n  public abstract void glow();\n\n  public void flipSwitch() {\n    switchLamp = !switchLamp;\n    if (switchLamp) {\n      glow();\n    }\n  }\n}\n</pre>'}]",[],['squid:S1694'],,,,
java:S2308,java,"""deleteOnExit"" should not be used",2023-06-14T03:41:52+0000,"<p>Use of <code>File.deleteOnExit()</code> is not recommended for the following reasons:</p>
<ul>
  <li> The deletion occurs only in the case of a normal JVM shutdown but not when the JVM crashes or is killed. </li>
  <li> For each file handler, the memory associated with the handler is released only at the end of the process. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
File file = new File(""file.txt"");
file.deleteOnExit();  // Noncompliant
</pre>","<p>Use of <code>File.deleteOnExit()</code> is not recommended for the following reasons:</p>
<ul>
  <li> The deletion occurs only in the case of a normal JVM shutdown but not when the JVM crashes or is killed. </li>
  <li> For each file handler, the memory associated with the handler is released only at the end of the process. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
File file = new File(""file.txt"");
file.deleteOnExit();  // Noncompliant
</pre>",MAJOR,READY,False,[],['performance'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,30min,CONSTANT_ISSUE,30min,False,MAIN,False,"[{'key': 'default', 'content': '<p>Use of <code>File.deleteOnExit()</code> is not recommended for the following reasons:</p>\n<ul>\n  <li> The deletion occurs only in the case of a normal JVM shutdown but not when the JVM crashes or is killed. </li>\n  <li> For each file handler, the memory associated with the handler is released only at the end of the process. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nFile file = new File(""file.txt"");\nfile.deleteOnExit();  // Noncompliant\n</pre>'}]",[],['squid:CallToFileDeleteOnExitMethod'],,,,
java:S2309,java,Files should not be empty,2023-06-14T03:41:52+0000,"<p>Files with no lines of code clutter a project and should be removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
//package org.foo;
//
//public class Bar {}
</pre>","<p>Files with no lines of code clutter a project and should be removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
//package org.foo;
//
//public class Bar {}
</pre>",MINOR,READY,False,[],['unused'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>Files with no lines of code clutter a project and should be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n//package org.foo;\n//\n//public class Bar {}\n</pre>'}]",[],['squid:EmptyFile'],,,,
java:S3516,java,Methods returns should not be invariant,2023-06-14T03:41:52+0000,"<p>When a method is designed to return an invariant value, it may be poor design, but it shouldn’t adversely affect the outcome of your program.
However, when it happens on all paths through the logic, it is surely a bug.</p>
<p>This rule raises an issue when a method contains several <code>return</code> statements that all return the same value.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int foo(int a) {
  int b = 12;
  if (a == 1) {
    return b;
  }
  return b;  // Noncompliant
}
</pre>","<p>When a method is designed to return an invariant value, it may be poor design, but it shouldn’t adversely affect the outcome of your program.
However, when it happens on all paths through the logic, it is surely a bug.</p>
<p>This rule raises an issue when a method contains several <code>return</code> statements that all return the same value.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int foo(int a) {
  int b = 12;
  if (a == 1) {
    return b;
  }
  return b;  // Noncompliant
}
</pre>",BLOCKER,READY,False,[],[],java,Java,[],LINEAR,LINEAR,CODE_SMELL,LINEAR,,LINEAR,,False,MAIN,False,"[{'key': 'default', 'content': '<p>When a method is designed to return an invariant value, it may be poor design, but it shouldn’t adversely affect the outcome of your program.\nHowever, when it happens on all paths through the logic, it is surely a bug.</p>\n<p>This rule raises an issue when a method contains several <code>return</code> statements that all return the same value.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint foo(int a) {\n  int b = 12;\n  if (a == 1) {\n    return b;\n  }\n  return b;  // Noncompliant\n}\n</pre>'}]",[],['squid:S3516'],2min,2min,Per number of return statements,
java:S3751,java,"""@RequestMapping"" methods should not be ""private""",2023-06-14T03:41:52+0000,"<p>A method with a <code>@RequestMapping</code> annotation part of a class annotated with <code>@Controller</code> (directly or indirectly through a
meta annotation - <code>@RestController</code> from Spring Boot is a good example) will be called to handle matching web requests. That will happen
even if the method is <code>private</code>, because Spring invokes such methods via reflection, without checking visibility.</p>
<p>So marking a sensitive method <code>private</code> may seem like a good way to control how such code is called. Unfortunately, not all Spring
frameworks ignore visibility in this way. For instance, if you’ve tried to control web access to your sensitive, <code>private</code>,
<code>@RequestMapping</code> method by marking it <code>@Secured</code> …​ it will still be called, whether or not the user is authorized to access
it. That’s because AOP proxies are not applied to private methods.</p>
<p>In addition to <code>@RequestMapping</code>, this rule also considers the annotations introduced in Spring Framework 4.3: <code>@GetMapping</code>,
<code>@PostMapping</code>, <code>@PutMapping</code>, <code>@DeleteMapping</code>, <code>@PatchMapping</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@RequestMapping(""/greet"", method = GET)
private String greet(String greetee) {  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
@RequestMapping(""/greet"", method = GET)
public String greet(String greetee) {
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration"">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
</ul>","<p>A method with a <code>@RequestMapping</code> annotation part of a class annotated with <code>@Controller</code> (directly or indirectly through a
meta annotation - <code>@RestController</code> from Spring Boot is a good example) will be called to handle matching web requests. That will happen
even if the method is <code>private</code>, because Spring invokes such methods via reflection, without checking visibility.</p>
<p>So marking a sensitive method <code>private</code> may seem like a good way to control how such code is called. Unfortunately, not all Spring
frameworks ignore visibility in this way. For instance, if you’ve tried to control web access to your sensitive, <code>private</code>,
<code>@RequestMapping</code> method by marking it <code>@Secured</code> …​ it will still be called, whether or not the user is authorized to access
it. That’s because AOP proxies are not applied to private methods.</p>
<p>In addition to <code>@RequestMapping</code>, this rule also considers the annotations introduced in Spring Framework 4.3: <code>@GetMapping</code>,
<code>@PostMapping</code>, <code>@PutMapping</code>, <code>@DeleteMapping</code>, <code>@PatchMapping</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@RequestMapping(""/greet"", method = GET)
private String greet(String greetee) {  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
@RequestMapping(""/greet"", method = GET)
public String greet(String greetee) {
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration"">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
</ul>",MAJOR,READY,False,[],"['owasp-a6', 'spring']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,2min,CONSTANT_ISSUE,2min,False,MAIN,False,"[{'key': 'default', 'content': '<p>A method with a <code>@RequestMapping</code> annotation part of a class annotated with <code>@Controller</code> (directly or indirectly through a\nmeta annotation - <code>@RestController</code> from Spring Boot is a good example) will be called to handle matching web requests. That will happen\neven if the method is <code>private</code>, because Spring invokes such methods via reflection, without checking visibility.</p>\n<p>So marking a sensitive method <code>private</code> may seem like a good way to control how such code is called. Unfortunately, not all Spring\nframeworks ignore visibility in this way. For instance, if you’ve tried to control web access to your sensitive, <code>private</code>,\n<code>@RequestMapping</code> method by marking it <code>@Secured</code> …\u200b it will still be called, whether or not the user is authorized to access\nit. That’s because AOP proxies are not applied to private methods.</p>\n<p>In addition to <code>@RequestMapping</code>, this rule also considers the annotations introduced in Spring Framework 4.3: <code>@GetMapping</code>,\n<code>@PostMapping</code>, <code>@PutMapping</code>, <code>@DeleteMapping</code>, <code>@PatchMapping</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@RequestMapping(""/greet"", method = GET)\nprivate String greet(String greetee) {  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@RequestMapping(""/greet"", method = GET)\npublic String greet(String greetee) {\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration"">OWASP Top 10 2017 Category A6</a> - Security\n  Misconfiguration </li>\n</ul>'}]",[],['squid:S3751'],,,,
java:S4604,java,"""@EnableAutoConfiguration"" should be fine-tuned",2023-06-14T03:41:52+0000,"<p>""@EnableAutoConfiguration"" is a convenient feature to configure the Spring Application Context by attempting to guess the beans that you are likely
to need. The drawback is that it may load and configure beans the application will never use and therefore consume more CPU and RAM than really
required. <code>@EnableAutoConfiguration</code> should be configured to exclude all the beans not required by the application. Alternatively, use the
<code>@Import</code> annotation instead of <code>@EnableAutoConfiguration</code>, to explicitly import the useful AutoConfiguration classes.</p>
<p>This rule applies for <code>@SpringBootApplication</code> as well.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@SpringBootApplication
public class MyApplication {
...
}
</pre>
<pre>
@Configuration
@EnableAutoConfiguration
public class MyApplication {
...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@SpringBootApplication(exclude = {
  MultipartAutoConfiguration.class,
  JmxAutoConfiguration.class,
})
public class MyApplication {
...
}
</pre>
<pre>
@Configuration
@EnableAutoConfiguration(exclude = {
  MultipartAutoConfiguration.class,
  JmxAutoConfiguration.class,
})
public class MyApplication {
...
}
</pre>
<pre>
@Configuration
@Import({
        DispatcherServletAutoConfiguration.class,
        EmbeddedServletContainerAutoConfiguration.class,
        ErrorMvcAutoConfiguration.class,
        HttpEncodingAutoConfiguration.class,
        HttpMessageConvertersAutoConfiguration.class,
        JacksonAutoConfiguration.class,
        ServerPropertiesAutoConfiguration.class,
        PropertyPlaceholderAutoConfiguration.class,
        ThymeleafAutoConfiguration.class,
        WebMvcAutoConfiguration.class
})
public class MyApplication {
...
}
</pre>
<h2>Deprecated</h2>
<p>This rule is deprecated, and will eventually be removed.</p>","<p>""@EnableAutoConfiguration"" is a convenient feature to configure the Spring Application Context by attempting to guess the beans that you are likely
to need. The drawback is that it may load and configure beans the application will never use and therefore consume more CPU and RAM than really
required. <code>@EnableAutoConfiguration</code> should be configured to exclude all the beans not required by the application. Alternatively, use the
<code>@Import</code> annotation instead of <code>@EnableAutoConfiguration</code>, to explicitly import the useful AutoConfiguration classes.</p>
<p>This rule applies for <code>@SpringBootApplication</code> as well.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@SpringBootApplication
public class MyApplication {
...
}
</pre>
<pre>
@Configuration
@EnableAutoConfiguration
public class MyApplication {
...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@SpringBootApplication(exclude = {
  MultipartAutoConfiguration.class,
  JmxAutoConfiguration.class,
})
public class MyApplication {
...
}
</pre>
<pre>
@Configuration
@EnableAutoConfiguration(exclude = {
  MultipartAutoConfiguration.class,
  JmxAutoConfiguration.class,
})
public class MyApplication {
...
}
</pre>
<pre>
@Configuration
@Import({
        DispatcherServletAutoConfiguration.class,
        EmbeddedServletContainerAutoConfiguration.class,
        ErrorMvcAutoConfiguration.class,
        HttpEncodingAutoConfiguration.class,
        HttpMessageConvertersAutoConfiguration.class,
        JacksonAutoConfiguration.class,
        ServerPropertiesAutoConfiguration.class,
        PropertyPlaceholderAutoConfiguration.class,
        ThymeleafAutoConfiguration.class,
        WebMvcAutoConfiguration.class
})
public class MyApplication {
...
}
</pre>
<h2>Deprecated</h2>
<p>This rule is deprecated, and will eventually be removed.</p>",MAJOR,DEPRECATED,False,[],[],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,30min,CONSTANT_ISSUE,30min,False,MAIN,False,"[{'key': 'default', 'content': '<p>""@EnableAutoConfiguration"" is a convenient feature to configure the Spring Application Context by attempting to guess the beans that you are likely\nto need. The drawback is that it may load and configure beans the application will never use and therefore consume more CPU and RAM than really\nrequired. <code>@EnableAutoConfiguration</code> should be configured to exclude all the beans not required by the application. Alternatively, use the\n<code>@Import</code> annotation instead of <code>@EnableAutoConfiguration</code>, to explicitly import the useful AutoConfiguration classes.</p>\n<p>This rule applies for <code>@SpringBootApplication</code> as well.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@SpringBootApplication\npublic class MyApplication {\n...\n}\n</pre>\n<pre>\n@Configuration\n@EnableAutoConfiguration\npublic class MyApplication {\n...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@SpringBootApplication(exclude = {\n  MultipartAutoConfiguration.class,\n  JmxAutoConfiguration.class,\n})\npublic class MyApplication {\n...\n}\n</pre>\n<pre>\n@Configuration\n@EnableAutoConfiguration(exclude = {\n  MultipartAutoConfiguration.class,\n  JmxAutoConfiguration.class,\n})\npublic class MyApplication {\n...\n}\n</pre>\n<pre>\n@Configuration\n@Import({\n        DispatcherServletAutoConfiguration.class,\n        EmbeddedServletContainerAutoConfiguration.class,\n        ErrorMvcAutoConfiguration.class,\n        HttpEncodingAutoConfiguration.class,\n        HttpMessageConvertersAutoConfiguration.class,\n        JacksonAutoConfiguration.class,\n        ServerPropertiesAutoConfiguration.class,\n        PropertyPlaceholderAutoConfiguration.class,\n        ThymeleafAutoConfiguration.class,\n        WebMvcAutoConfiguration.class\n})\npublic class MyApplication {\n...\n}\n</pre>\n<h2>Deprecated</h2>\n<p>This rule is deprecated, and will eventually be removed.</p>'}]",[],['squid:S4604'],,,,
java:S4605,java,"Spring beans should be considered by ""@ComponentScan""",2023-06-14T03:41:52+0000,"<p>Spring beans belonging to packages that are not included in a <code>@ComponentScan</code> configuration will not be accessible in the Spring
Application Context. Therefore, it’s likely to be a configuration mistake that will be detected by this rule.</p>
<p><strong>Note:</strong> the <code>@ComponentScan</code> is implicit in the <code>@SpringBootApplication</code> annotation, case in which Spring Boot
will auto scan for components in the package containing the Spring Boot main class and its sub-packages.</p>
<h2>Noncompliant Code Example</h2>
<pre>
package com.mycompany.app;

@Configuration
@ComponentScan(""com.mycompany.app.beans"")
public class Application {
...
}

package com.mycompany.app.web;

@Controller
public class MyController { // Noncompliant; MyController belong to ""com.mycompany.app.web"" while the ComponentScan is looking for beans in ""com.mycompany.app.beans"" package
...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
package com.mycompany.app;

@Configuration
@ComponentScan({""com.mycompany.app.beans"",""com.mycompany.app.web""})
or
@ComponentScan(""com.mycompany.app"")
or
@ComponentScan
public class Application {
...
}

package com.mycompany.app.web;

@Controller
public class MyController { // ""com.mycompany.app.web"" is referenced by a @ComponentScan annotated class
...
}
</pre>","<p>Spring beans belonging to packages that are not included in a <code>@ComponentScan</code> configuration will not be accessible in the Spring
Application Context. Therefore, it’s likely to be a configuration mistake that will be detected by this rule.</p>
<p><strong>Note:</strong> the <code>@ComponentScan</code> is implicit in the <code>@SpringBootApplication</code> annotation, case in which Spring Boot
will auto scan for components in the package containing the Spring Boot main class and its sub-packages.</p>
<h2>Noncompliant Code Example</h2>
<pre>
package com.mycompany.app;

@Configuration
@ComponentScan(""com.mycompany.app.beans"")
public class Application {
...
}

package com.mycompany.app.web;

@Controller
public class MyController { // Noncompliant; MyController belong to ""com.mycompany.app.web"" while the ComponentScan is looking for beans in ""com.mycompany.app.beans"" package
...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
package com.mycompany.app;

@Configuration
@ComponentScan({""com.mycompany.app.beans"",""com.mycompany.app.web""})
or
@ComponentScan(""com.mycompany.app"")
or
@ComponentScan
public class Application {
...
}

package com.mycompany.app.web;

@Controller
public class MyController { // ""com.mycompany.app.web"" is referenced by a @ComponentScan annotated class
...
}
</pre>",CRITICAL,READY,False,[],"['pitfall', 'spring']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,MAIN,False,"[{'key': 'default', 'content': '<p>Spring beans belonging to packages that are not included in a <code>@ComponentScan</code> configuration will not be accessible in the Spring\nApplication Context. Therefore, it’s likely to be a configuration mistake that will be detected by this rule.</p>\n<p><strong>Note:</strong> the <code>@ComponentScan</code> is implicit in the <code>@SpringBootApplication</code> annotation, case in which Spring Boot\nwill auto scan for components in the package containing the Spring Boot main class and its sub-packages.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npackage com.mycompany.app;\n\n@Configuration\n@ComponentScan(""com.mycompany.app.beans"")\npublic class Application {\n...\n}\n\npackage com.mycompany.app.web;\n\n@Controller\npublic class MyController { // Noncompliant; MyController belong to ""com.mycompany.app.web"" while the ComponentScan is looking for beans in ""com.mycompany.app.beans"" package\n...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npackage com.mycompany.app;\n\n@Configuration\n@ComponentScan({""com.mycompany.app.beans"",""com.mycompany.app.web""})\nor\n@ComponentScan(""com.mycompany.app"")\nor\n@ComponentScan\npublic class Application {\n...\n}\n\npackage com.mycompany.app.web;\n\n@Controller\npublic class MyController { // ""com.mycompany.app.web"" is referenced by a @ComponentScan annotated class\n...\n}\n</pre>'}]",[],['squid:S4605'],,,,
java:S4968,java,"The upper bound of type variables and wildcards should not be ""final""",2023-06-14T03:41:52+0000,"<p>When a type variable or a wildcard declares an upper bound that is <code>final</code>, the parametrization is not generic at all because it accepts
one and only one type at runtime: the one that is <code>final</code>. Instead of using <code>Generics</code>, it’s simpler to directly use the
concrete <code>final</code> class.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public static &lt;T extends String&gt; T getMyString() { // Noncompliant; String is a ""final"" class and so can't be extended
 [...]
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public static String getMyString() { // Compliant
  [...]
}
</pre>","<p>When a type variable or a wildcard declares an upper bound that is <code>final</code>, the parametrization is not generic at all because it accepts
one and only one type at runtime: the one that is <code>final</code>. Instead of using <code>Generics</code>, it’s simpler to directly use the
concrete <code>final</code> class.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public static &lt;T extends String&gt; T getMyString() { // Noncompliant; String is a ""final"" class and so can't be extended
 [...]
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public static String getMyString() { // Compliant
  [...]
}
</pre>",MINOR,READY,False,[],[],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>When a type variable or a wildcard declares an upper bound that is <code>final</code>, the parametrization is not generic at all because it accepts\none and only one type at runtime: the one that is <code>final</code>. Instead of using <code>Generics</code>, it’s simpler to directly use the\nconcrete <code>final</code> class.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic static &lt;T extends String&gt; T getMyString() { // Noncompliant; String is a ""final"" class and so can\'t be extended\n [...]\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static String getMyString() { // Compliant\n  [...]\n}\n</pre>'}]",[],['squid:S4968'],,,,
java:S1104,java,Class variable fields should not have public accessibility,2023-06-14T03:41:52+0000,"<p>Public class variable fields do not respect the encapsulation principle and has three main disadvantages:</p>
<ul>
  <li> Additional behavior such as validation cannot be added. </li>
  <li> The internal representation is exposed, and cannot be changed afterwards. </li>
  <li> Member values are subject to change from anywhere in the code and may not meet the programmer’s assumptions. </li>
</ul>
<p>By using private attributes and accessor methods (set and get), unauthorized modifications are prevented.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass {

  public static final int SOME_CONSTANT = 0;     // Compliant - constants are not checked

  public String firstName;                       // Noncompliant

}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass {

  public static final int SOME_CONSTANT = 0;     // Compliant - constants are not checked

  private String firstName;                      // Compliant

  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }

}
</pre>
<h2>Exceptions</h2>
<p>Because they are not modifiable, this rule ignores <code>public final</code> fields. Also, annotated fields, whatever the annotation(s) will be
ignored, as annotations are often used by injection frameworks, which in exchange require having public fields.</p>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/493"">MITRE, CWE-493</a> - Critical Public Variable Without Final Modifier </li>
</ul>","<p>Public class variable fields do not respect the encapsulation principle and has three main disadvantages:</p>
<ul>
  <li> Additional behavior such as validation cannot be added. </li>
  <li> The internal representation is exposed, and cannot be changed afterwards. </li>
  <li> Member values are subject to change from anywhere in the code and may not meet the programmer’s assumptions. </li>
</ul>
<p>By using private attributes and accessor methods (set and get), unauthorized modifications are prevented.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass {

  public static final int SOME_CONSTANT = 0;     // Compliant - constants are not checked

  public String firstName;                       // Noncompliant

}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass {

  public static final int SOME_CONSTANT = 0;     // Compliant - constants are not checked

  private String firstName;                      // Compliant

  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }

}
</pre>
<h2>Exceptions</h2>
<p>Because they are not modifiable, this rule ignores <code>public final</code> fields. Also, annotated fields, whatever the annotation(s) will be
ignored, as annotations are often used by injection frameworks, which in exchange require having public fields.</p>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/493"">MITRE, CWE-493</a> - Critical Public Variable Without Final Modifier </li>
</ul>",MINOR,READY,False,[],['cwe'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,10min,CONSTANT_ISSUE,10min,False,MAIN,False,"[{'key': 'default', 'content': '<p>Public class variable fields do not respect the encapsulation principle and has three main disadvantages:</p>\n<ul>\n  <li> Additional behavior such as validation cannot be added. </li>\n  <li> The internal representation is exposed, and cannot be changed afterwards. </li>\n  <li> Member values are subject to change from anywhere in the code and may not meet the programmer’s assumptions. </li>\n</ul>\n<p>By using private attributes and accessor methods (set and get), unauthorized modifications are prevented.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  public static final int SOME_CONSTANT = 0;     // Compliant - constants are not checked\n\n  public String firstName;                       // Noncompliant\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n\n  public static final int SOME_CONSTANT = 0;     // Compliant - constants are not checked\n\n  private String firstName;                      // Compliant\n\n  public String getFirstName() {\n    return firstName;\n  }\n\n  public void setFirstName(String firstName) {\n    this.firstName = firstName;\n  }\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Because they are not modifiable, this rule ignores <code>public final</code> fields. Also, annotated fields, whatever the annotation(s) will be\nignored, as annotations are often used by injection frameworks, which in exchange require having public fields.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/493"">MITRE, CWE-493</a> - Critical Public Variable Without Final Modifier </li>\n</ul>'}]",[],['squid:ClassVariableVisibilityCheck'],,,,
java:S1109,java,A close curly brace should be located at the beginning of a line,2023-06-14T03:41:52+0000,"<p>Shared coding conventions make it possible for a team to efficiently collaborate. This rule makes it mandatory to place a close curly brace at the
beginning of a line.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if(condition) {
  doSomething();}
</pre>
<h2>Compliant Solution</h2>
<pre>
if(condition) {
  doSomething();
}
</pre>
<h2>Exceptions</h2>
<p>When blocks are inlined (open and close curly braces on the same line), no issue is triggered.</p>
<pre>
if(condition) {doSomething();}
</pre>","<p>Shared coding conventions make it possible for a team to efficiently collaborate. This rule makes it mandatory to place a close curly brace at the
beginning of a line.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if(condition) {
  doSomething();}
</pre>
<h2>Compliant Solution</h2>
<pre>
if(condition) {
  doSomething();
}
</pre>
<h2>Exceptions</h2>
<p>When blocks are inlined (open and close curly braces on the same line), no issue is triggered.</p>
<pre>
if(condition) {doSomething();}
</pre>",MINOR,READY,False,[],['convention'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,1min,CONSTANT_ISSUE,1min,False,ALL,False,"[{'key': 'default', 'content': '<p>Shared coding conventions make it possible for a team to efficiently collaborate. This rule makes it mandatory to place a close curly brace at the\nbeginning of a line.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(condition) {\n  doSomething();}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif(condition) {\n  doSomething();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>When blocks are inlined (open and close curly braces on the same line), no issue is triggered.</p>\n<pre>\nif(condition) {doSomething();}\n</pre>'}]",[],['squid:RightCurlyBraceStartLineCheck'],,,,
java:S1215,java,Execution of the Garbage Collector should be triggered only by the JVM,2023-06-14T03:41:52+0000,"<p>Calling <code>System.gc()</code> or <code>Runtime.getRuntime().gc()</code> is a bad idea for a simple reason: there is no way to know exactly what
will be done under the hood by the JVM because the behavior will depend on its vendor, version and options:</p>
<ul>
  <li> Will the whole application be frozen during the call? </li>
  <li> Is the <code>-XX:DisableExplicitGC</code> option activated? </li>
  <li> Will the JVM simply ignore the call? </li>
  <li> …​ </li>
</ul>
<p>Like for <code>System.gc()</code>, there is no reason to manually call <code>runFinalization()</code> to force the call of finalization methods of
any objects pending finalization.</p>
<p>An application relying on these unpredictable methods is also unpredictable and therefore broken. The task of running the garbage collector and
calling <code>finalize()</code> methods should be left exclusively to the JVM.</p>","<p>Calling <code>System.gc()</code> or <code>Runtime.getRuntime().gc()</code> is a bad idea for a simple reason: there is no way to know exactly what
will be done under the hood by the JVM because the behavior will depend on its vendor, version and options:</p>
<ul>
  <li> Will the whole application be frozen during the call? </li>
  <li> Is the <code>-XX:DisableExplicitGC</code> option activated? </li>
  <li> Will the JVM simply ignore the call? </li>
  <li> …​ </li>
</ul>
<p>Like for <code>System.gc()</code>, there is no reason to manually call <code>runFinalization()</code> to force the call of finalization methods of
any objects pending finalization.</p>
<p>An application relying on these unpredictable methods is also unpredictable and therefore broken. The task of running the garbage collector and
calling <code>finalize()</code> methods should be left exclusively to the JVM.</p>",CRITICAL,READY,False,[],"['bad-practice', 'unpredictable']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,30min,CONSTANT_ISSUE,30min,False,ALL,False,"[{'key': 'default', 'content': '<p>Calling <code>System.gc()</code> or <code>Runtime.getRuntime().gc()</code> is a bad idea for a simple reason: there is no way to know exactly what\nwill be done under the hood by the JVM because the behavior will depend on its vendor, version and options:</p>\n<ul>\n  <li> Will the whole application be frozen during the call? </li>\n  <li> Is the <code>-XX:DisableExplicitGC</code> option activated? </li>\n  <li> Will the JVM simply ignore the call? </li>\n  <li> …\u200b </li>\n</ul>\n<p>Like for <code>System.gc()</code>, there is no reason to manually call <code>runFinalization()</code> to force the call of finalization methods of\nany objects pending finalization.</p>\n<p>An application relying on these unpredictable methods is also unpredictable and therefore broken. The task of running the garbage collector and\ncalling <code>finalize()</code> methods should be left exclusively to the JVM.</p>'}]",[],['squid:S1215'],,,,
java:S1220,java,The default unnamed package should not be used,2023-06-14T03:41:52+0000,"<p>According to the Java Language Specification:</p>
<blockquote>
  <p>Unnamed packages are provided by the Java platform principally for convenience when developing small or temporary applications or when just
  beginning development.</p>
</blockquote>
<p>To enforce this best practice, classes located in default package can no longer be accessed from named ones since Java 1.4.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass { /* ... */ }
</pre>
<h2>Compliant Solution</h2>
<pre>
package org.example;

public class MyClass{ /* ... */ }
</pre>","<p>According to the Java Language Specification:</p>
<blockquote>
  <p>Unnamed packages are provided by the Java platform principally for convenience when developing small or temporary applications or when just
  beginning development.</p>
</blockquote>
<p>To enforce this best practice, classes located in default package can no longer be accessed from named ones since Java 1.4.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass { /* ... */ }
</pre>
<h2>Compliant Solution</h2>
<pre>
package org.example;

public class MyClass{ /* ... */ }
</pre>",MINOR,READY,False,[],['convention'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,10min,CONSTANT_ISSUE,10min,False,ALL,False,"[{'key': 'default', 'content': '<p>According to the Java Language Specification:</p>\n<blockquote>\n  <p>Unnamed packages are provided by the Java platform principally for convenience when developing small or temporary applications or when just\n  beginning development.</p>\n</blockquote>\n<p>To enforce this best practice, classes located in default package can no longer be accessed from named ones since Java 1.4.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass { /* ... */ }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npackage org.example;\n\npublic class MyClass{ /* ... */ }\n</pre>'}]",[],['squid:S1220'],,,,
java:S1223,java,Non-constructor methods should not have the same name as the enclosing class,2023-06-14T03:41:52+0000,"<p>Having a class and some of its methods sharing the same name is misleading, and leaves others to wonder whether it was done that way on purpose, or
was the methods supposed to be a constructor.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo {
   public Foo() {...}
   public void Foo(String label) {...}  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Foo {
   public Foo() {...}
   public void foo(String label) {...}  // Compliant
}
</pre>","<p>Having a class and some of its methods sharing the same name is misleading, and leaves others to wonder whether it was done that way on purpose, or
was the methods supposed to be a constructor.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo {
   public Foo() {...}
   public void Foo(String label) {...}  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Foo {
   public Foo() {...}
   public void foo(String label) {...}  // Compliant
}
</pre>",MAJOR,READY,False,[],['pitfall'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>Having a class and some of its methods sharing the same name is misleading, and leaves others to wonder whether it was done that way on purpose, or\nwas the methods supposed to be a constructor.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n   public Foo() {...}\n   public void Foo(String label) {...}  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n   public Foo() {...}\n   public void foo(String label) {...}  // Compliant\n}\n</pre>'}]",[],['squid:S1223'],,,,
java:S1699,java,Constructors should only call non-overridable methods,2023-06-14T03:41:52+0000,"<p>Calling an overridable method from a constructor could result in failures or strange behaviors when instantiating a subclass which overrides the
method.</p>
<p>For example:</p>
<ul>
  <li> The subclass class constructor starts by contract by calling the parent class constructor. </li>
  <li> The parent class constructor calls the method, which has been overridden in the child class. </li>
  <li> If the behavior of the child class method depends on fields that are initialized in the child class constructor, unexpected behavior (like a
  <code>NullPointerException</code>) can result, because the fields aren’t initialized yet. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
public class Parent {

  public Parent () {
    doSomething();  // Noncompliant
  }

  public void doSomething () {  // not final; can be overridden
    ...
  }
}

public class Child extends Parent {

  private String foo;

  public Child(String foo) {
    super(); // leads to call doSomething() in Parent constructor which triggers a NullPointerException as foo has not yet been initialized
    this.foo = foo;
  }

  public void doSomething () {
    System.out.println(this.foo.length());
  }

}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/8zZGBQ"">CERT, MET05-J.</a> - Ensure that constructors do not call overridable methods </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/6ns-BQ"">CERT, OOP50-CPP.</a> - Do not invoke virtual functions from constructors or destructors
  </li>
</ul>","<p>Calling an overridable method from a constructor could result in failures or strange behaviors when instantiating a subclass which overrides the
method.</p>
<p>For example:</p>
<ul>
  <li> The subclass class constructor starts by contract by calling the parent class constructor. </li>
  <li> The parent class constructor calls the method, which has been overridden in the child class. </li>
  <li> If the behavior of the child class method depends on fields that are initialized in the child class constructor, unexpected behavior (like a
  <code>NullPointerException</code>) can result, because the fields aren’t initialized yet. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
public class Parent {

  public Parent () {
    doSomething();  // Noncompliant
  }

  public void doSomething () {  // not final; can be overridden
    ...
  }
}

public class Child extends Parent {

  private String foo;

  public Child(String foo) {
    super(); // leads to call doSomething() in Parent constructor which triggers a NullPointerException as foo has not yet been initialized
    this.foo = foo;
  }

  public void doSomething () {
    System.out.println(this.foo.length());
  }

}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/8zZGBQ"">CERT, MET05-J.</a> - Ensure that constructors do not call overridable methods </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/6ns-BQ"">CERT, OOP50-CPP.</a> - Do not invoke virtual functions from constructors or destructors
  </li>
</ul>",CRITICAL,READY,False,[],"['cert', 'pitfall']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,10min,CONSTANT_ISSUE,10min,False,MAIN,False,"[{'key': 'default', 'content': '<p>Calling an overridable method from a constructor could result in failures or strange behaviors when instantiating a subclass which overrides the\nmethod.</p>\n<p>For example:</p>\n<ul>\n  <li> The subclass class constructor starts by contract by calling the parent class constructor. </li>\n  <li> The parent class constructor calls the method, which has been overridden in the child class. </li>\n  <li> If the behavior of the child class method depends on fields that are initialized in the child class constructor, unexpected behavior (like a\n  <code>NullPointerException</code>) can result, because the fields aren’t initialized yet. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Parent {\n\n  public Parent () {\n    doSomething();  // Noncompliant\n  }\n\n  public void doSomething () {  // not final; can be overridden\n    ...\n  }\n}\n\npublic class Child extends Parent {\n\n  private String foo;\n\n  public Child(String foo) {\n    super(); // leads to call doSomething() in Parent constructor which triggers a NullPointerException as foo has not yet been initialized\n    this.foo = foo;\n  }\n\n  public void doSomething () {\n    System.out.println(this.foo.length());\n  }\n\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/8zZGBQ"">CERT, MET05-J.</a> - Ensure that constructors do not call overridable methods </li>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/6ns-BQ"">CERT, OOP50-CPP.</a> - Do not invoke virtual functions from constructors or destructors\n  </li>\n</ul>'}]",[],['squid:S1699'],,,,
java:S2675,java,"""readObject"" should not be ""synchronized""",2023-06-14T03:41:52+0000,"<p>A <code>readObject</code> method is written when a <code>Serializable</code> object needs special handling to be rehydrated from file. It should be
the case that the object being created by <code>readObject</code> is only visible to the thread that invoked the method, and the
<code>synchronized</code> keyword is not needed, and using <code>synchronized</code> anyway is just confusing. If this is not the case, the method
should be refactored to make it the case.</p>
<h2>Noncompliant Code Example</h2>
<pre>
private synchronized void readObject(java.io.ObjectInputStream in)
     throws IOException, ClassNotFoundException { // Noncompliant
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
private void readObject(java.io.ObjectInputStream in)
     throws IOException, ClassNotFoundException { // Compliant
  //...
}
</pre>","<p>A <code>readObject</code> method is written when a <code>Serializable</code> object needs special handling to be rehydrated from file. It should be
the case that the object being created by <code>readObject</code> is only visible to the thread that invoked the method, and the
<code>synchronized</code> keyword is not needed, and using <code>synchronized</code> anyway is just confusing. If this is not the case, the method
should be refactored to make it the case.</p>
<h2>Noncompliant Code Example</h2>
<pre>
private synchronized void readObject(java.io.ObjectInputStream in)
     throws IOException, ClassNotFoundException { // Noncompliant
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
private void readObject(java.io.ObjectInputStream in)
     throws IOException, ClassNotFoundException { // Compliant
  //...
}
</pre>",MAJOR,READY,False,[],['confusing'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,2min,CONSTANT_ISSUE,2min,False,ALL,False,"[{'key': 'default', 'content': '<p>A <code>readObject</code> method is written when a <code>Serializable</code> object needs special handling to be rehydrated from file. It should be\nthe case that the object being created by <code>readObject</code> is only visible to the thread that invoked the method, and the\n<code>synchronized</code> keyword is not needed, and using <code>synchronized</code> anyway is just confusing. If this is not the case, the method\nshould be refactored to make it the case.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate synchronized void readObject(java.io.ObjectInputStream in)\n     throws IOException, ClassNotFoundException { // Noncompliant\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate void readObject(java.io.ObjectInputStream in)\n     throws IOException, ClassNotFoundException { // Compliant\n  //...\n}\n</pre>'}]",[],['squid:S2675'],,,,
java:S3400,java,Methods should not return constants,2023-06-14T03:41:52+0000,"<p>There’s no point in forcing the overhead of a method call for a method that always returns the same constant value. Even worse, the fact that a
method call must be made will likely mislead developers who call the method thinking that something more is done. Declare a constant instead.</p>
<p>This rule raises an issue if on methods that contain only one statement: the <code>return</code> of a constant value.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int getBestNumber() {
  return 12;  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
static final int BEST_NUMBER = 12;
</pre>
<h2>Exceptions</h2>
<p>The following types of method are ignored:</p>
<ul>
  <li> methods that override a method. </li>
  <li> methods that are not final (not having the <code>final</code>, <code>private</code> or <code>static</code> modifier and not in a record or a
  final class). </li>
  <li> methods with annotations, such as <code>@Override</code> or Spring’s <code>@RequestMapping</code>. </li>
</ul>","<p>There’s no point in forcing the overhead of a method call for a method that always returns the same constant value. Even worse, the fact that a
method call must be made will likely mislead developers who call the method thinking that something more is done. Declare a constant instead.</p>
<p>This rule raises an issue if on methods that contain only one statement: the <code>return</code> of a constant value.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int getBestNumber() {
  return 12;  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
static final int BEST_NUMBER = 12;
</pre>
<h2>Exceptions</h2>
<p>The following types of method are ignored:</p>
<ul>
  <li> methods that override a method. </li>
  <li> methods that are not final (not having the <code>final</code>, <code>private</code> or <code>static</code> modifier and not in a record or a
  final class). </li>
  <li> methods with annotations, such as <code>@Override</code> or Spring’s <code>@RequestMapping</code>. </li>
</ul>",MINOR,READY,False,[],['confusing'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,MAIN,False,"[{'key': 'default', 'content': '<p>There’s no point in forcing the overhead of a method call for a method that always returns the same constant value. Even worse, the fact that a\nmethod call must be made will likely mislead developers who call the method thinking that something more is done. Declare a constant instead.</p>\n<p>This rule raises an issue if on methods that contain only one statement: the <code>return</code> of a constant value.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint getBestNumber() {\n  return 12;  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nstatic final int BEST_NUMBER = 12;\n</pre>\n<h2>Exceptions</h2>\n<p>The following types of method are ignored:</p>\n<ul>\n  <li> methods that override a method. </li>\n  <li> methods that are not final (not having the <code>final</code>, <code>private</code> or <code>static</code> modifier and not in a record or a\n  final class). </li>\n  <li> methods with annotations, such as <code>@Override</code> or Spring’s <code>@RequestMapping</code>. </li>\n</ul>'}]",[],['squid:S3400'],,,,
java:S3878,java,Arrays should not be created for varargs parameters,2023-06-14T03:41:52+0000,"<p>There’s no point in creating an array solely for the purpose of passing it as a varargs (<code>...</code>) argument; varargs <em>is</em> an array.
Simply pass the elements directly. They will be consolidated into an array automatically. Incidentally passing an array where <code>Object ...</code>
is expected makes the intent ambiguous: Is the array supposed to be one object or a collection of objects?</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void callTheThing() {
  //...
  doTheThing(new String[] { ""s1"", ""s2""});  // Noncompliant: unnecessary
  doTheThing(new String[12]);  // Compliant
  doTheOtherThing(new String[8]);  // Noncompliant: ambiguous
  // ...
}

public void doTheThing (String ... args) {
  // ...
}

public void doTheOtherThing(Object ... args) {
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void callTheThing() {
  //...
  doTheThing(""s1"", ""s2"");
  doTheThing(new String[12]);
  doTheOtherThing((Object[]) new String[8]);
   // ...
}

public void doTheThing (String ... args) {
  // ...
}

public void doTheOtherThing(Object ... args) {
  // ...
}
</pre>","<p>There’s no point in creating an array solely for the purpose of passing it as a varargs (<code>...</code>) argument; varargs <em>is</em> an array.
Simply pass the elements directly. They will be consolidated into an array automatically. Incidentally passing an array where <code>Object ...</code>
is expected makes the intent ambiguous: Is the array supposed to be one object or a collection of objects?</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void callTheThing() {
  //...
  doTheThing(new String[] { ""s1"", ""s2""});  // Noncompliant: unnecessary
  doTheThing(new String[12]);  // Compliant
  doTheOtherThing(new String[8]);  // Noncompliant: ambiguous
  // ...
}

public void doTheThing (String ... args) {
  // ...
}

public void doTheOtherThing(Object ... args) {
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void callTheThing() {
  //...
  doTheThing(""s1"", ""s2"");
  doTheThing(new String[12]);
  doTheOtherThing((Object[]) new String[8]);
   // ...
}

public void doTheThing (String ... args) {
  // ...
}

public void doTheOtherThing(Object ... args) {
  // ...
}
</pre>",MINOR,READY,False,[],['clumsy'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,2min,CONSTANT_ISSUE,2min,False,ALL,False,"[{'key': 'default', 'content': '<p>There’s no point in creating an array solely for the purpose of passing it as a varargs (<code>...</code>) argument; varargs <em>is</em> an array.\nSimply pass the elements directly. They will be consolidated into an array automatically. Incidentally passing an array where <code>Object ...</code>\nis expected makes the intent ambiguous: Is the array supposed to be one object or a collection of objects?</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void callTheThing() {\n  //...\n  doTheThing(new String[] { ""s1"", ""s2""});  // Noncompliant: unnecessary\n  doTheThing(new String[12]);  // Compliant\n  doTheOtherThing(new String[8]);  // Noncompliant: ambiguous\n  // ...\n}\n\npublic void doTheThing (String ... args) {\n  // ...\n}\n\npublic void doTheOtherThing(Object ... args) {\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void callTheThing() {\n  //...\n  doTheThing(""s1"", ""s2"");\n  doTheThing(new String[12]);\n  doTheOtherThing((Object[]) new String[8]);\n   // ...\n}\n\npublic void doTheThing (String ... args) {\n  // ...\n}\n\npublic void doTheOtherThing(Object ... args) {\n  // ...\n}\n</pre>'}]",[],['squid:S3878'],,,,
java:S4970,java,Derived exceptions should not hide their parents' catch blocks,2023-06-14T03:41:52+0000,"<p>The <code>catch</code> block of a checked exception ""E"" may be hidden because the corresponding <code>try</code> block only throws exceptions
derived from E.</p>
<p>These derived exceptions are handled in dedicated <code>catch</code> blocks prior to the <code>catch</code> block of the base exception E.</p>
<p>The <code>catch</code> block of E is unreachable and should be considered dead code. It should be removed, or the entire try-catch structure should
be refactored.</p>
<p>It is also possible that a single exception type in a multi-catch block may be hidden while the catch block itself is still reachable. In that case
it is enough to only remove the hidden exception type or to replace it with another type.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class HiddenCatchBlock {

  public static class CustomException extends Exception {
  }

  public static class CustomDerivedException extends CustomException {
  }

  public static void main(String[] args) {
    try {
      throwCustomDerivedException();
    } catch(CustomDerivedException e) {
      // ...
    } catch(CustomException e) { // Noncompliant; this code is unreachable
      // ...
    }
  }

  private static void throwCustomDerivedException() throws CustomDerivedException {
    throw new CustomDerivedException();
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class HiddenCatchBlock {

  public static class CustomException extends Exception {
  }

  public static class CustomDerivedException extends CustomException {
  }

  public static void main(String[] args) {
    try {
      throwCustomDerivedException();
    } catch(CustomDerivedException e) { // Compliant; try-catch block is ""catching"" only the Exception that can be thrown in the ""try""
      //...
    }
  }
}
</pre>","<p>The <code>catch</code> block of a checked exception ""E"" may be hidden because the corresponding <code>try</code> block only throws exceptions
derived from E.</p>
<p>These derived exceptions are handled in dedicated <code>catch</code> blocks prior to the <code>catch</code> block of the base exception E.</p>
<p>The <code>catch</code> block of E is unreachable and should be considered dead code. It should be removed, or the entire try-catch structure should
be refactored.</p>
<p>It is also possible that a single exception type in a multi-catch block may be hidden while the catch block itself is still reachable. In that case
it is enough to only remove the hidden exception type or to replace it with another type.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class HiddenCatchBlock {

  public static class CustomException extends Exception {
  }

  public static class CustomDerivedException extends CustomException {
  }

  public static void main(String[] args) {
    try {
      throwCustomDerivedException();
    } catch(CustomDerivedException e) {
      // ...
    } catch(CustomException e) { // Noncompliant; this code is unreachable
      // ...
    }
  }

  private static void throwCustomDerivedException() throws CustomDerivedException {
    throw new CustomDerivedException();
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class HiddenCatchBlock {

  public static class CustomException extends Exception {
  }

  public static class CustomDerivedException extends CustomException {
  }

  public static void main(String[] args) {
    try {
      throwCustomDerivedException();
    } catch(CustomDerivedException e) { // Compliant; try-catch block is ""catching"" only the Exception that can be thrown in the ""try""
      //...
    }
  }
}
</pre>",CRITICAL,READY,False,[],[],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>The <code>catch</code> block of a checked exception ""E"" may be hidden because the corresponding <code>try</code> block only throws exceptions\nderived from E.</p>\n<p>These derived exceptions are handled in dedicated <code>catch</code> blocks prior to the <code>catch</code> block of the base exception E.</p>\n<p>The <code>catch</code> block of E is unreachable and should be considered dead code. It should be removed, or the entire try-catch structure should\nbe refactored.</p>\n<p>It is also possible that a single exception type in a multi-catch block may be hidden while the catch block itself is still reachable. In that case\nit is enough to only remove the hidden exception type or to replace it with another type.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class HiddenCatchBlock {\n\n  public static class CustomException extends Exception {\n  }\n\n  public static class CustomDerivedException extends CustomException {\n  }\n\n  public static void main(String[] args) {\n    try {\n      throwCustomDerivedException();\n    } catch(CustomDerivedException e) {\n      // ...\n    } catch(CustomException e) { // Noncompliant; this code is unreachable\n      // ...\n    }\n  }\n\n  private static void throwCustomDerivedException() throws CustomDerivedException {\n    throw new CustomDerivedException();\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class HiddenCatchBlock {\n\n  public static class CustomException extends Exception {\n  }\n\n  public static class CustomDerivedException extends CustomException {\n  }\n\n  public static void main(String[] args) {\n    try {\n      throwCustomDerivedException();\n    } catch(CustomDerivedException e) { // Compliant; try-catch block is ""catching"" only the Exception that can be thrown in the ""try""\n      //...\n    }\n  }\n}\n</pre>'}]",[],['squid:S4970'],,,,
java:S1105,java,An open curly brace should be located at the end of a line,2023-06-14T03:41:52+0000,"<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when an open curly brace is not placed at the end of a
line of code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if(condition)
{
  doSomething();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if(condition) {
  doSomething();
}
</pre>
<h2>Exceptions</h2>
<p>When blocks are inlined (left and right curly braces on the same line), no issue is triggered.</p>
<pre>
if(condition) {doSomething();}
</pre>","<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when an open curly brace is not placed at the end of a
line of code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if(condition)
{
  doSomething();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if(condition) {
  doSomething();
}
</pre>
<h2>Exceptions</h2>
<p>When blocks are inlined (left and right curly braces on the same line), no issue is triggered.</p>
<pre>
if(condition) {doSomething();}
</pre>",MINOR,READY,False,[],['convention'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,1min,CONSTANT_ISSUE,1min,False,ALL,False,"[{'key': 'default', 'content': '<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when an open curly brace is not placed at the end of a\nline of code.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(condition)\n{\n  doSomething();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif(condition) {\n  doSomething();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>When blocks are inlined (left and right curly braces on the same line), no issue is triggered.</p>\n<pre>\nif(condition) {doSomething();}\n</pre>'}]",[],['squid:LeftCurlyBraceEndLineCheck'],,,,
java:S1106,java,An open curly brace should be located at the beginning of a line,2023-06-14T03:41:52+0000,"<p>Shared coding conventions make it possible to collaborate efficiently. This rule makes it mandatory to place the open curly brace at the beginning
of a line.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void myMethod {  // Noncompliant
  if(something) {  // Noncompliant
    executeTask();
  } else {  // Noncompliant
    doSomethingElse();
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void myMethod
{
  if(something)
  {
    executeTask();
  } else
  {
    doSomethingElse();
  }
}
</pre>","<p>Shared coding conventions make it possible to collaborate efficiently. This rule makes it mandatory to place the open curly brace at the beginning
of a line.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void myMethod {  // Noncompliant
  if(something) {  // Noncompliant
    executeTask();
  } else {  // Noncompliant
    doSomethingElse();
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void myMethod
{
  if(something)
  {
    executeTask();
  } else
  {
    doSomethingElse();
  }
}
</pre>",MINOR,READY,False,[],['convention'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,1min,CONSTANT_ISSUE,1min,False,ALL,False,"[{'key': 'default', 'content': '<p>Shared coding conventions make it possible to collaborate efficiently. This rule makes it mandatory to place the open curly brace at the beginning\nof a line.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void myMethod {  // Noncompliant\n  if(something) {  // Noncompliant\n    executeTask();\n  } else {  // Noncompliant\n    doSomethingElse();\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void myMethod\n{\n  if(something)\n  {\n    executeTask();\n  } else\n  {\n    doSomethingElse();\n  }\n}\n</pre>'}]",[],['squid:LeftCurlyBraceStartLineCheck'],,,,
java:S1107,java,"Close curly brace and the next ""else"", ""catch"" and ""finally"" keywords should be located on the same line",2023-06-14T03:41:52+0000,"<p>Shared coding conventions make it possible for a team to collaborate efficiently.</p>
<p>This rule makes it mandatory to place closing curly braces on the same line as the next <code>else</code>, <code>catch</code> or
<code>finally</code> keywords.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void myMethod() {
  if(something) {
    executeTask();
  } else if (somethingElse) {
    doSomethingElse();
  }
  else {                               // Noncompliant
     generateError();
  }

  try {
    generateOrder();
  } catch (Exception e) {
    log(e);
  }
  finally {                            // Noncompliant
    closeConnection();
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void myMethod() {
  if(something) {
    executeTask();
  } else if (somethingElse) {
    doSomethingElse();
  } else {
     generateError();
  }

  try {
    generateOrder();
  } catch (Exception e) {
    log(e);
  } finally {
    closeConnection();
  }
}
</pre>","<p>Shared coding conventions make it possible for a team to collaborate efficiently.</p>
<p>This rule makes it mandatory to place closing curly braces on the same line as the next <code>else</code>, <code>catch</code> or
<code>finally</code> keywords.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void myMethod() {
  if(something) {
    executeTask();
  } else if (somethingElse) {
    doSomethingElse();
  }
  else {                               // Noncompliant
     generateError();
  }

  try {
    generateOrder();
  } catch (Exception e) {
    log(e);
  }
  finally {                            // Noncompliant
    closeConnection();
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void myMethod() {
  if(something) {
    executeTask();
  } else if (somethingElse) {
    doSomethingElse();
  } else {
     generateError();
  }

  try {
    generateOrder();
  } catch (Exception e) {
    log(e);
  } finally {
    closeConnection();
  }
}
</pre>",MINOR,READY,False,[],['convention'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,1min,CONSTANT_ISSUE,1min,False,ALL,False,"[{'key': 'default', 'content': '<p>Shared coding conventions make it possible for a team to collaborate efficiently.</p>\n<p>This rule makes it mandatory to place closing curly braces on the same line as the next <code>else</code>, <code>catch</code> or\n<code>finally</code> keywords.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void myMethod() {\n  if(something) {\n    executeTask();\n  } else if (somethingElse) {\n    doSomethingElse();\n  }\n  else {                               // Noncompliant\n     generateError();\n  }\n\n  try {\n    generateOrder();\n  } catch (Exception e) {\n    log(e);\n  }\n  finally {                            // Noncompliant\n    closeConnection();\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void myMethod() {\n  if(something) {\n    executeTask();\n  } else if (somethingElse) {\n    doSomethingElse();\n  } else {\n     generateError();\n  }\n\n  try {\n    generateOrder();\n  } catch (Exception e) {\n    log(e);\n  } finally {\n    closeConnection();\n  }\n}\n</pre>'}]",[],['squid:RightCurlyBraceSameLineAsNextBlockCheck'],,,,
java:S1108,java,"Close curly brace and the next ""else"", ""catch"" and ""finally"" keywords should be on two different lines",2023-06-14T03:41:52+0000,"<p>Shared coding conventions make it possible for a team to collaborate efficiently.</p>
<p>This rule makes it mandatory to place a closing curly brace and the next <code>else</code>, <code>catch</code> or <code>finally</code> keyword on
two different lines.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void myMethod() {
  if(something) {
    executeTask();
  } else if (somethingElse) {          // Noncompliant
    doSomethingElse();
  }
  else {                               // Compliant
     generateError();
  }

  try {
    generateOrder();
  } catch (Exception e) {
    log(e);
  }
  finally {
    closeConnection();
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void myMethod() {
  if(something) {
    executeTask();
  }
  else if (somethingElse) {
    doSomethingElse();
  }
  else {
     generateError();
  }

  try {
    generateOrder();
  }
  catch (Exception e) {
    log(e);
  }
  finally {
    closeConnection();
  }
}
</pre>","<p>Shared coding conventions make it possible for a team to collaborate efficiently.</p>
<p>This rule makes it mandatory to place a closing curly brace and the next <code>else</code>, <code>catch</code> or <code>finally</code> keyword on
two different lines.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void myMethod() {
  if(something) {
    executeTask();
  } else if (somethingElse) {          // Noncompliant
    doSomethingElse();
  }
  else {                               // Compliant
     generateError();
  }

  try {
    generateOrder();
  } catch (Exception e) {
    log(e);
  }
  finally {
    closeConnection();
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void myMethod() {
  if(something) {
    executeTask();
  }
  else if (somethingElse) {
    doSomethingElse();
  }
  else {
     generateError();
  }

  try {
    generateOrder();
  }
  catch (Exception e) {
    log(e);
  }
  finally {
    closeConnection();
  }
}
</pre>",MINOR,READY,False,[],['convention'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,1min,CONSTANT_ISSUE,1min,False,ALL,False,"[{'key': 'default', 'content': '<p>Shared coding conventions make it possible for a team to collaborate efficiently.</p>\n<p>This rule makes it mandatory to place a closing curly brace and the next <code>else</code>, <code>catch</code> or <code>finally</code> keyword on\ntwo different lines.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void myMethod() {\n  if(something) {\n    executeTask();\n  } else if (somethingElse) {          // Noncompliant\n    doSomethingElse();\n  }\n  else {                               // Compliant\n     generateError();\n  }\n\n  try {\n    generateOrder();\n  } catch (Exception e) {\n    log(e);\n  }\n  finally {\n    closeConnection();\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void myMethod() {\n  if(something) {\n    executeTask();\n  }\n  else if (somethingElse) {\n    doSomethingElse();\n  }\n  else {\n     generateError();\n  }\n\n  try {\n    generateOrder();\n  }\n  catch (Exception e) {\n    log(e);\n  }\n  finally {\n    closeConnection();\n  }\n}\n</pre>'}]",[],['squid:RightCurlyBraceDifferentLineAsNextBlockCheck'],,,,
java:S1228,java,Packages should have a javadoc file 'package-info.java',2023-06-14T03:41:52+0000,"<p>Each package in a Java project should include a <code>package-info.java</code> file. The purpose of this file is to document the Java package using
javadoc and declare package annotations.</p>
<h2>Compliant Solution</h2>
<pre>
/**
* This package has non null parameters and is documented.
**/
@ParametersAreNonnullByDefault
package org.foo.bar;
</pre>","<p>Each package in a Java project should include a <code>package-info.java</code> file. The purpose of this file is to document the Java package using
javadoc and declare package annotations.</p>
<h2>Compliant Solution</h2>
<pre>
/**
* This package has non null parameters and is documented.
**/
@ParametersAreNonnullByDefault
package org.foo.bar;
</pre>",MINOR,READY,False,[],['convention'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,20min,CONSTANT_ISSUE,20min,False,MAIN,False,"[{'key': 'default', 'content': '<p>Each package in a Java project should include a <code>package-info.java</code> file. The purpose of this file is to document the Java package using\njavadoc and declare package annotations.</p>\n<h2>Compliant Solution</h2>\n<pre>\n/**\n* This package has non null parameters and is documented.\n**/\n@ParametersAreNonnullByDefault\npackage org.foo.bar;\n</pre>'}]",[],['squid:S1228'],,,,
java:S1312,java,"Loggers should be ""private static final"" and should share a naming convention",2023-06-14T03:41:52+0000,"<p>Regardless of the logging framework in use (logback, log4j, commons-logging, java.util.logging, …​), loggers should be:</p>
<ul>
  <li> <code>private</code>: never be accessible outside of its parent class. If another class needs to log something, it should instantiate its own
  logger. </li>
  <li> <code>static</code>: not be dependent on an instance of a class (an object). When logging something, contextual information can of course be
  provided in the messages but the logger should be created at class level to prevent creating a logger along with each object. </li>
  <li> <code>final</code>: be created once and only once per class. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<p>With a default regular expression of <code>LOG(?:GER)?</code>:</p>
<pre>
public Logger logger = LoggerFactory.getLogger(Foo.class);  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
private static final Logger LOGGER = LoggerFactory.getLogger(Foo.class);
</pre>
<h2>Exceptions</h2>
<p>Variables of type <code>org.apache.maven.plugin.logging.Log</code> are ignored.</p>","<p>Regardless of the logging framework in use (logback, log4j, commons-logging, java.util.logging, …​), loggers should be:</p>
<ul>
  <li> <code>private</code>: never be accessible outside of its parent class. If another class needs to log something, it should instantiate its own
  logger. </li>
  <li> <code>static</code>: not be dependent on an instance of a class (an object). When logging something, contextual information can of course be
  provided in the messages but the logger should be created at class level to prevent creating a logger along with each object. </li>
  <li> <code>final</code>: be created once and only once per class. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<p>With a default regular expression of <code>LOG(?:GER)?</code>:</p>
<pre>
public Logger logger = LoggerFactory.getLogger(Foo.class);  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
private static final Logger LOGGER = LoggerFactory.getLogger(Foo.class);
</pre>
<h2>Exceptions</h2>
<p>Variables of type <code>org.apache.maven.plugin.logging.Log</code> are ignored.</p>",MINOR,READY,False,[],['convention'],java,Java,"[{'key': 'format', 'htmlDesc': 'Regular expression used to check the logger names against.', 'defaultValue': 'LOG(?:GER)?', 'type': 'STRING'}]",CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,MAIN,False,"[{'key': 'default', 'content': '<p>Regardless of the logging framework in use (logback, log4j, commons-logging, java.util.logging, …\u200b), loggers should be:</p>\n<ul>\n  <li> <code>private</code>: never be accessible outside of its parent class. If another class needs to log something, it should instantiate its own\n  logger. </li>\n  <li> <code>static</code>: not be dependent on an instance of a class (an object). When logging something, contextual information can of course be\n  provided in the messages but the logger should be created at class level to prevent creating a logger along with each object. </li>\n  <li> <code>final</code>: be created once and only once per class. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<p>With a default regular expression of <code>LOG(?:GER)?</code>:</p>\n<pre>\npublic Logger logger = LoggerFactory.getLogger(Foo.class);  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate static final Logger LOGGER = LoggerFactory.getLogger(Foo.class);\n</pre>\n<h2>Exceptions</h2>\n<p>Variables of type <code>org.apache.maven.plugin.logging.Log</code> are ignored.</p>'}]",[],['squid:S1312'],,,,
java:S2437,java,Silly bit operations should not be performed,2023-06-14T03:41:52+0000,"<p>Certain bit operations are just silly and should not be performed because their results are predictable.</p>
<p>Specifically, using <code>&amp; -1</code> with any value will always result in the original value, as will <code>anyValue ^ 0</code> and
<code>anyValue | 0</code>.</p>","<p>Certain bit operations are just silly and should not be performed because their results are predictable.</p>
<p>Specifically, using <code>&amp; -1</code> with any value will always result in the original value, as will <code>anyValue ^ 0</code> and
<code>anyValue | 0</code>.</p>",BLOCKER,READY,False,[],['suspicious'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>Certain bit operations are just silly and should not be performed because their results are predictable.</p>\n<p>Specifically, using <code>&amp; -1</code> with any value will always result in the original value, as will <code>anyValue ^ 0</code> and\n<code>anyValue | 0</code>.</p>'}]",[],['squid:S2437'],,,,
java:S2438,java,"""Threads"" should not be used where ""Runnables"" are expected",2023-06-14T03:41:52+0000,"<p>While it is technically correct to use a <code>Thread</code> where a <code>Runnable</code> is called for, the semantics of the two objects are
different, and mixing them is a bad practice that will likely lead to headaches in the future.</p>
<p>The crux of the issue is that <code>Thread</code> is a larger concept than <code>Runnable</code>. A <code>Runnable</code> is an object whose
running should be managed. A <code>Thread</code> expects to manage the running of itself or other <code>Runnables</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
	public static void main(String[] args) {
		Thread r =new Thread() {
			int p;
			@Override
			public void run() {
				while(true)
					System.out.println(""a"");
			}
		};
		new Thread(r).start();  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
	public static void main(String[] args) {
		Runnable r =new Runnable() {
			int p;
			@Override
			public void run() {
				while(true)
					System.out.println(""a"");
			}
		};
		new Thread(r).start();
</pre>","<p>While it is technically correct to use a <code>Thread</code> where a <code>Runnable</code> is called for, the semantics of the two objects are
different, and mixing them is a bad practice that will likely lead to headaches in the future.</p>
<p>The crux of the issue is that <code>Thread</code> is a larger concept than <code>Runnable</code>. A <code>Runnable</code> is an object whose
running should be managed. A <code>Thread</code> expects to manage the running of itself or other <code>Runnables</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
	public static void main(String[] args) {
		Thread r =new Thread() {
			int p;
			@Override
			public void run() {
				while(true)
					System.out.println(""a"");
			}
		};
		new Thread(r).start();  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
	public static void main(String[] args) {
		Runnable r =new Runnable() {
			int p;
			@Override
			public void run() {
				while(true)
					System.out.println(""a"");
			}
		};
		new Thread(r).start();
</pre>",MAJOR,READY,False,[],"['multi-threading', 'pitfall']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,15min,CONSTANT_ISSUE,15min,False,ALL,False,"[{'key': 'default', 'content': '<p>While it is technically correct to use a <code>Thread</code> where a <code>Runnable</code> is called for, the semantics of the two objects are\ndifferent, and mixing them is a bad practice that will likely lead to headaches in the future.</p>\n<p>The crux of the issue is that <code>Thread</code> is a larger concept than <code>Runnable</code>. A <code>Runnable</code> is an object whose\nrunning should be managed. A <code>Thread</code> expects to manage the running of itself or other <code>Runnables</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n\tpublic static void main(String[] args) {\n\t\tThread r =new Thread() {\n\t\t\tint p;\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\twhile(true)\n\t\t\t\t\tSystem.out.println(""a"");\n\t\t\t}\n\t\t};\n\t\tnew Thread(r).start();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n\tpublic static void main(String[] args) {\n\t\tRunnable r =new Runnable() {\n\t\t\tint p;\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\twhile(true)\n\t\t\t\t\tSystem.out.println(""a"");\n\t\t\t}\n\t\t};\n\t\tnew Thread(r).start();\n</pre>'}]",[],['squid:S2438'],,,,
java:S4738,java,Java features should be preferred to Guava,2023-06-14T03:41:52+0000,"<p>Some Guava features were really useful for Java 7 application because Guava was bringing APIs missing in the JDK. Java 8 fixed some of these
limitations. When migrating an application to Java 8 or even when starting a new one, it’s recommended to prefer Java 8 APIs over Guava ones to ease
its maintenance: developers don’t need to learn how to use two APIs and can stick to the standard one.</p>
<p>Java 9 brought even more useful methods to the standard Java library and if Java version is equal to or higher than 9, these standard methods
should be used.</p>
<p>This rule raises an issue when the following Guava APIs are used:</p>
<table>
  <colgroup>
    <col style=""width: 50%;"">
    <col style=""width: 50%;"">
  </colgroup>
  <thead>
    <tr>
      <th>Guava API</th>
      <th>Java 8 API</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><p>com.google.common.io.BaseEncoding#base64()</p></td>
      <td><p>java.util.Base64</p></td>
    </tr>
    <tr>
      <td><p>com.google.common.io.BaseEncoding#base64Url()</p></td>
      <td><p>java.util.Base64</p></td>
    </tr>
    <tr>
      <td><p>com.google.common.base.Joiner.on()</p></td>
      <td><p>java.lang.String#join() or java.util.stream.Collectors#joining()</p></td>
    </tr>
    <tr>
      <td><p>com.google.common.base.Optional#of()</p></td>
      <td><p>java.util.Optional#of()</p></td>
    </tr>
    <tr>
      <td><p>com.google.common.base.Optional#absent()</p></td>
      <td><p>java.util.Optional#empty()</p></td>
    </tr>
    <tr>
      <td><p>com.google.common.base.Optional#fromNullable()</p></td>
      <td><p>java.util.Optional#ofNullable()</p></td>
    </tr>
    <tr>
      <td><p>com.google.common.base.Optional</p></td>
      <td><p>java.util.Optional</p></td>
    </tr>
    <tr>
      <td><p>com.google.common.base.Predicate</p></td>
      <td><p>java.util.function.Predicate</p></td>
    </tr>
    <tr>
      <td><p>com.google.common.base.Function</p></td>
      <td><p>java.util.function.Function</p></td>
    </tr>
    <tr>
      <td><p>com.google.common.base.Supplier</p></td>
      <td><p>java.util.function.Supplier</p></td>
    </tr>
    <tr>
      <td><p>com.google.common.io.Files.createTempDir</p></td>
      <td><p>java.nio.file.Files.createTempDirectory</p></td>
    </tr>
  </tbody>
</table>
<table>
  <colgroup>
    <col style=""width: 50%;"">
    <col style=""width: 50%;"">
  </colgroup>
  <thead>
    <tr>
      <th>Guava API</th>
      <th>Java 9 API</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><p>com.google.common.collect.ImmutableSet#of()</p></td>
      <td><p>java.util.Set#of()</p></td>
    </tr>
    <tr>
      <td><p>com.google.common.collect.ImmutableList#of()</p></td>
      <td><p>java.util.List#of()</p></td>
    </tr>
    <tr>
      <td><p>com.google.common.collect.ImmutableMap#of()</p></td>
      <td><p>java.util.Map#of() or java.util.Map#ofEntries()</p></td>
    </tr>
  </tbody>
</table>","<p>Some Guava features were really useful for Java 7 application because Guava was bringing APIs missing in the JDK. Java 8 fixed some of these
limitations. When migrating an application to Java 8 or even when starting a new one, it’s recommended to prefer Java 8 APIs over Guava ones to ease
its maintenance: developers don’t need to learn how to use two APIs and can stick to the standard one.</p>
<p>Java 9 brought even more useful methods to the standard Java library and if Java version is equal to or higher than 9, these standard methods
should be used.</p>
<p>This rule raises an issue when the following Guava APIs are used:</p>
<table>
  <colgroup>
    <col style=""width: 50%;"">
    <col style=""width: 50%;"">
  </colgroup>
  <thead>
    <tr>
      <th>Guava API</th>
      <th>Java 8 API</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><p>com.google.common.io.BaseEncoding#base64()</p></td>
      <td><p>java.util.Base64</p></td>
    </tr>
    <tr>
      <td><p>com.google.common.io.BaseEncoding#base64Url()</p></td>
      <td><p>java.util.Base64</p></td>
    </tr>
    <tr>
      <td><p>com.google.common.base.Joiner.on()</p></td>
      <td><p>java.lang.String#join() or java.util.stream.Collectors#joining()</p></td>
    </tr>
    <tr>
      <td><p>com.google.common.base.Optional#of()</p></td>
      <td><p>java.util.Optional#of()</p></td>
    </tr>
    <tr>
      <td><p>com.google.common.base.Optional#absent()</p></td>
      <td><p>java.util.Optional#empty()</p></td>
    </tr>
    <tr>
      <td><p>com.google.common.base.Optional#fromNullable()</p></td>
      <td><p>java.util.Optional#ofNullable()</p></td>
    </tr>
    <tr>
      <td><p>com.google.common.base.Optional</p></td>
      <td><p>java.util.Optional</p></td>
    </tr>
    <tr>
      <td><p>com.google.common.base.Predicate</p></td>
      <td><p>java.util.function.Predicate</p></td>
    </tr>
    <tr>
      <td><p>com.google.common.base.Function</p></td>
      <td><p>java.util.function.Function</p></td>
    </tr>
    <tr>
      <td><p>com.google.common.base.Supplier</p></td>
      <td><p>java.util.function.Supplier</p></td>
    </tr>
    <tr>
      <td><p>com.google.common.io.Files.createTempDir</p></td>
      <td><p>java.nio.file.Files.createTempDirectory</p></td>
    </tr>
  </tbody>
</table>
<table>
  <colgroup>
    <col style=""width: 50%;"">
    <col style=""width: 50%;"">
  </colgroup>
  <thead>
    <tr>
      <th>Guava API</th>
      <th>Java 9 API</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><p>com.google.common.collect.ImmutableSet#of()</p></td>
      <td><p>java.util.Set#of()</p></td>
    </tr>
    <tr>
      <td><p>com.google.common.collect.ImmutableList#of()</p></td>
      <td><p>java.util.List#of()</p></td>
    </tr>
    <tr>
      <td><p>com.google.common.collect.ImmutableMap#of()</p></td>
      <td><p>java.util.Map#of() or java.util.Map#ofEntries()</p></td>
    </tr>
  </tbody>
</table>",MAJOR,READY,False,[],"['java8', 'java9']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,10min,CONSTANT_ISSUE,10min,False,MAIN,False,"[{'key': 'default', 'content': '<p>Some Guava features were really useful for Java 7 application because Guava was bringing APIs missing in the JDK. Java 8 fixed some of these\nlimitations. When migrating an application to Java 8 or even when starting a new one, it’s recommended to prefer Java 8 APIs over Guava ones to ease\nits maintenance: developers don’t need to learn how to use two APIs and can stick to the standard one.</p>\n<p>Java 9 brought even more useful methods to the standard Java library and if Java version is equal to or higher than 9, these standard methods\nshould be used.</p>\n<p>This rule raises an issue when the following Guava APIs are used:</p>\n<table>\n  <colgroup>\n    <col style=""width: 50%;"">\n    <col style=""width: 50%;"">\n  </colgroup>\n  <thead>\n    <tr>\n      <th>Guava API</th>\n      <th>Java 8 API</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><p>com.google.common.io.BaseEncoding#base64()</p></td>\n      <td><p>java.util.Base64</p></td>\n    </tr>\n    <tr>\n      <td><p>com.google.common.io.BaseEncoding#base64Url()</p></td>\n      <td><p>java.util.Base64</p></td>\n    </tr>\n    <tr>\n      <td><p>com.google.common.base.Joiner.on()</p></td>\n      <td><p>java.lang.String#join() or java.util.stream.Collectors#joining()</p></td>\n    </tr>\n    <tr>\n      <td><p>com.google.common.base.Optional#of()</p></td>\n      <td><p>java.util.Optional#of()</p></td>\n    </tr>\n    <tr>\n      <td><p>com.google.common.base.Optional#absent()</p></td>\n      <td><p>java.util.Optional#empty()</p></td>\n    </tr>\n    <tr>\n      <td><p>com.google.common.base.Optional#fromNullable()</p></td>\n      <td><p>java.util.Optional#ofNullable()</p></td>\n    </tr>\n    <tr>\n      <td><p>com.google.common.base.Optional</p></td>\n      <td><p>java.util.Optional</p></td>\n    </tr>\n    <tr>\n      <td><p>com.google.common.base.Predicate</p></td>\n      <td><p>java.util.function.Predicate</p></td>\n    </tr>\n    <tr>\n      <td><p>com.google.common.base.Function</p></td>\n      <td><p>java.util.function.Function</p></td>\n    </tr>\n    <tr>\n      <td><p>com.google.common.base.Supplier</p></td>\n      <td><p>java.util.function.Supplier</p></td>\n    </tr>\n    <tr>\n      <td><p>com.google.common.io.Files.createTempDir</p></td>\n      <td><p>java.nio.file.Files.createTempDirectory</p></td>\n    </tr>\n  </tbody>\n</table>\n<table>\n  <colgroup>\n    <col style=""width: 50%;"">\n    <col style=""width: 50%;"">\n  </colgroup>\n  <thead>\n    <tr>\n      <th>Guava API</th>\n      <th>Java 9 API</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><p>com.google.common.collect.ImmutableSet#of()</p></td>\n      <td><p>java.util.Set#of()</p></td>\n    </tr>\n    <tr>\n      <td><p>com.google.common.collect.ImmutableList#of()</p></td>\n      <td><p>java.util.List#of()</p></td>\n    </tr>\n    <tr>\n      <td><p>com.google.common.collect.ImmutableMap#of()</p></td>\n      <td><p>java.util.Map#of() or java.util.Map#ofEntries()</p></td>\n    </tr>\n  </tbody>\n</table>'}]",[],['squid:S4738'],,,,
java:S4977,java,Type parameters should not shadow other type parameters,2023-06-14T03:41:52+0000,"<p>Shadowing makes it impossible to use the type parameter from the outer scope. Also, it can be confusing to distinguish which type parameter is
being used.</p>
<p>This rule raises an issue when a type parameter from an inner scope uses the same name as one in an outer scope.</p>
<h2>Noncompliant Code Example</h2>
<pre>
 public class TypeParameterHidesAnotherType&lt;T&gt; {

    public class Inner&lt;T&gt; { // Noncompliant
      //...
    }

    private &lt;T&gt; T method() { // Noncompliant
      return null;
    }

  }
</pre>
<h2>Compliant Solution</h2>
<pre>
public class NoTypeParameterHiding&lt;T&gt; {

    public class Inner&lt;S&gt; { // Compliant
      List&lt;S&gt; listOfS;
    }

    private &lt;V&gt; V method() { // Compliant
      return null;
    }

  }
</pre>","<p>Shadowing makes it impossible to use the type parameter from the outer scope. Also, it can be confusing to distinguish which type parameter is
being used.</p>
<p>This rule raises an issue when a type parameter from an inner scope uses the same name as one in an outer scope.</p>
<h2>Noncompliant Code Example</h2>
<pre>
 public class TypeParameterHidesAnotherType&lt;T&gt; {

    public class Inner&lt;T&gt; { // Noncompliant
      //...
    }

    private &lt;T&gt; T method() { // Noncompliant
      return null;
    }

  }
</pre>
<h2>Compliant Solution</h2>
<pre>
public class NoTypeParameterHiding&lt;T&gt; {

    public class Inner&lt;S&gt; { // Compliant
      List&lt;S&gt; listOfS;
    }

    private &lt;V&gt; V method() { // Compliant
      return null;
    }

  }
</pre>",MINOR,READY,False,[],[],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>Shadowing makes it impossible to use the type parameter from the outer scope. Also, it can be confusing to distinguish which type parameter is\nbeing used.</p>\n<p>This rule raises an issue when a type parameter from an inner scope uses the same name as one in an outer scope.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n public class TypeParameterHidesAnotherType&lt;T&gt; {\n\n    public class Inner&lt;T&gt; { // Noncompliant\n      //...\n    }\n\n    private &lt;T&gt; T method() { // Noncompliant\n      return null;\n    }\n\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class NoTypeParameterHiding&lt;T&gt; {\n\n    public class Inner&lt;S&gt; { // Compliant\n      List&lt;S&gt; listOfS;\n    }\n\n    private &lt;V&gt; V method() { // Compliant\n      return null;\n    }\n\n  }\n</pre>'}]",[],['squid:S4977'],,,,
java:S5826,java,Methods setUp() and tearDown() should be correctly annotated starting with JUnit4,2023-06-14T03:41:52+0000,"<p>The <code>setUp()</code> and <code>tearDown()</code> methods (initially introduced with JUnit3 to execute a block of code before and after each
test) need to be correctly annotated with the equivalent annotation in order to preserve the same behavior when migrating from JUnit3 to JUnit4 or
JUnit5.</p>
<p>This rule consequently raise issues on <code>setUp()</code> and <code>tearDown()</code> methods which are not annotated in test classes.</p>
<h2>Noncompliant Code Example</h2>
<ul>
  <li> JUnit4: </li>
</ul>
<pre>
public void setUp() { ... } // Noncompliant; should be annotated with @Before
public void tearDown() { ... }  // Noncompliant; should be annotated with @After
</pre>
<ul>
  <li> JUnit5: </li>
</ul>
<pre>
public void setUp() { ... } // Noncompliant; should be annotated with @BeforeEach
public void tearDown() { ... }  // Noncompliant; should be annotated with @AfterEach
</pre>
<h2>Compliant Solution</h2>
<ul>
  <li> JUnit4: </li>
</ul>
<pre>
@Before
public void setUp() { ... }

@After
public void tearDown() { ... }
</pre>
<ul>
  <li> JUnit5: </li>
</ul>
<pre>
@BeforeEach
void setUp() { ... }

@AfterEach
void tearDown() { ... }
</pre>","<p>The <code>setUp()</code> and <code>tearDown()</code> methods (initially introduced with JUnit3 to execute a block of code before and after each
test) need to be correctly annotated with the equivalent annotation in order to preserve the same behavior when migrating from JUnit3 to JUnit4 or
JUnit5.</p>
<p>This rule consequently raise issues on <code>setUp()</code> and <code>tearDown()</code> methods which are not annotated in test classes.</p>
<h2>Noncompliant Code Example</h2>
<ul>
  <li> JUnit4: </li>
</ul>
<pre>
public void setUp() { ... } // Noncompliant; should be annotated with @Before
public void tearDown() { ... }  // Noncompliant; should be annotated with @After
</pre>
<ul>
  <li> JUnit5: </li>
</ul>
<pre>
public void setUp() { ... } // Noncompliant; should be annotated with @BeforeEach
public void tearDown() { ... }  // Noncompliant; should be annotated with @AfterEach
</pre>
<h2>Compliant Solution</h2>
<ul>
  <li> JUnit4: </li>
</ul>
<pre>
@Before
public void setUp() { ... }

@After
public void tearDown() { ... }
</pre>
<ul>
  <li> JUnit5: </li>
</ul>
<pre>
@BeforeEach
void setUp() { ... }

@AfterEach
void tearDown() { ... }
</pre>",CRITICAL,READY,False,[],"['junit', 'tests']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,2min,CONSTANT_ISSUE,2min,False,ALL,False,"[{'key': 'default', 'content': '<p>The <code>setUp()</code> and <code>tearDown()</code> methods (initially introduced with JUnit3 to execute a block of code before and after each\ntest) need to be correctly annotated with the equivalent annotation in order to preserve the same behavior when migrating from JUnit3 to JUnit4 or\nJUnit5.</p>\n<p>This rule consequently raise issues on <code>setUp()</code> and <code>tearDown()</code> methods which are not annotated in test classes.</p>\n<h2>Noncompliant Code Example</h2>\n<ul>\n  <li> JUnit4: </li>\n</ul>\n<pre>\npublic void setUp() { ... } // Noncompliant; should be annotated with @Before\npublic void tearDown() { ... }  // Noncompliant; should be annotated with @After\n</pre>\n<ul>\n  <li> JUnit5: </li>\n</ul>\n<pre>\npublic void setUp() { ... } // Noncompliant; should be annotated with @BeforeEach\npublic void tearDown() { ... }  // Noncompliant; should be annotated with @AfterEach\n</pre>\n<h2>Compliant Solution</h2>\n<ul>\n  <li> JUnit4: </li>\n</ul>\n<pre>\n@Before\npublic void setUp() { ... }\n\n@After\npublic void tearDown() { ... }\n</pre>\n<ul>\n  <li> JUnit5: </li>\n</ul>\n<pre>\n@BeforeEach\nvoid setUp() { ... }\n\n@AfterEach\nvoid tearDown() { ... }\n</pre>'}]",[],['squid:S5826'],,,,
java:S1310,java,"Track uses of ""NOPMD"" suppression comments",2023-06-14T03:41:52+0000,"<p>This rule allows you to track the use of the PMD suppression comment mechanism.</p>
<h2>Noncompliant Code Example</h2>
<pre>
// NOPMD
</pre>","<p>This rule allows you to track the use of the PMD suppression comment mechanism.</p>
<h2>Noncompliant Code Example</h2>
<pre>
// NOPMD
</pre>",MINOR,READY,False,[],['bad-practice'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,10min,CONSTANT_ISSUE,10min,False,ALL,False,"[{'key': 'default', 'content': '<p>This rule allows you to track the use of the PMD suppression comment mechanism.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n// NOPMD\n</pre>'}]",[],['squid:S1310'],,,,
java:S1314,java,Octal values should not be used,2023-06-14T03:41:52+0000,"<p>Integer literals starting with a zero are octal rather than decimal values. While using octal values is fully supported, most developers do not
have experience with them. They may not recognize octal values as such, mistaking them instead for decimal values.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int myNumber = 010; // Noncompliant. myNumber will hold 8, not 10 - was this really expected?
</pre>
<h2>Compliant Solution</h2>
<pre>
int myNumber = 8;
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/atYxBQ"">CERT, DCL18-C.</a> - Do not begin integer constants with 0 when specifying a decimal
  value </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/7DZGBQ"">CERT, DCL50-J.</a> - Use visually distinct identifiers </li>
</ul>","<p>Integer literals starting with a zero are octal rather than decimal values. While using octal values is fully supported, most developers do not
have experience with them. They may not recognize octal values as such, mistaking them instead for decimal values.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int myNumber = 010; // Noncompliant. myNumber will hold 8, not 10 - was this really expected?
</pre>
<h2>Compliant Solution</h2>
<pre>
int myNumber = 8;
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/atYxBQ"">CERT, DCL18-C.</a> - Do not begin integer constants with 0 when specifying a decimal
  value </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/7DZGBQ"">CERT, DCL50-J.</a> - Use visually distinct identifiers </li>
</ul>",BLOCKER,READY,False,[],"['cert', 'pitfall']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>Integer literals starting with a zero are octal rather than decimal values. While using octal values is fully supported, most developers do not\nhave experience with them. They may not recognize octal values as such, mistaking them instead for decimal values.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint myNumber = 010; // Noncompliant. myNumber will hold 8, not 10 - was this really expected?\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint myNumber = 8;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/atYxBQ"">CERT, DCL18-C.</a> - Do not begin integer constants with 0 when specifying a decimal\n  value </li>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/7DZGBQ"">CERT, DCL50-J.</a> - Use visually distinct identifiers </li>\n</ul>'}]",[],['squid:S1314'],,,,
java:S1315,java,"Track uses of ""CHECKSTYLE:OFF"" suppression comments",2023-06-14T03:41:52+0000,"<p>This rule allows you to track the use of the Checkstyle suppression comment mechanism.</p>
<h2>Noncompliant Code Example</h2>
<pre>
// CHECKSTYLE:OFF
</pre>","<p>This rule allows you to track the use of the Checkstyle suppression comment mechanism.</p>
<h2>Noncompliant Code Example</h2>
<pre>
// CHECKSTYLE:OFF
</pre>",MINOR,READY,False,[],['bad-practice'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>This rule allows you to track the use of the Checkstyle suppression comment mechanism.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n// CHECKSTYLE:OFF\n</pre>'}]",[],['squid:S1315'],,,,
java:S1319,java,"Declarations should use Java collection interfaces such as ""List"" rather than specific implementation classes such as ""LinkedList""",2023-06-14T03:41:52+0000,"<p>The purpose of the Java Collections API is to provide a well defined hierarchy of interfaces in order to hide implementation details.</p>
<p>Implementing classes must be used to instantiate new collections, but the result of an instantiation should ideally be stored in a variable whose
type is a Java Collection interface.</p>
<p>This rule raises an issue when an implementation class:</p>
<ul>
  <li> is returned from a <code>public</code> method. </li>
  <li> is accepted as an argument to a <code>public</code> method. </li>
  <li> is exposed as a <code>public</code> member. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
public class Employees {
  private HashSet&lt;Employee&gt; employees = new HashSet&lt;Employee&gt;();  // Noncompliant - ""employees"" should have type ""Set"" rather than ""HashSet""

  public HashSet&lt;Employee&gt; getEmployees() {                       // Noncompliant
    return employees;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Employees {
  private Set&lt;Employee&gt; employees = new HashSet&lt;Employee&gt;();      // Compliant

  public Set&lt;Employee&gt; getEmployees() {                           // Compliant
    return employees;
  }
}
</pre>","<p>The purpose of the Java Collections API is to provide a well defined hierarchy of interfaces in order to hide implementation details.</p>
<p>Implementing classes must be used to instantiate new collections, but the result of an instantiation should ideally be stored in a variable whose
type is a Java Collection interface.</p>
<p>This rule raises an issue when an implementation class:</p>
<ul>
  <li> is returned from a <code>public</code> method. </li>
  <li> is accepted as an argument to a <code>public</code> method. </li>
  <li> is exposed as a <code>public</code> member. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
public class Employees {
  private HashSet&lt;Employee&gt; employees = new HashSet&lt;Employee&gt;();  // Noncompliant - ""employees"" should have type ""Set"" rather than ""HashSet""

  public HashSet&lt;Employee&gt; getEmployees() {                       // Noncompliant
    return employees;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Employees {
  private Set&lt;Employee&gt; employees = new HashSet&lt;Employee&gt;();      // Compliant

  public Set&lt;Employee&gt; getEmployees() {                           // Compliant
    return employees;
  }
}
</pre>",MINOR,READY,False,[],['bad-practice'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,10min,CONSTANT_ISSUE,10min,False,MAIN,False,"[{'key': 'default', 'content': '<p>The purpose of the Java Collections API is to provide a well defined hierarchy of interfaces in order to hide implementation details.</p>\n<p>Implementing classes must be used to instantiate new collections, but the result of an instantiation should ideally be stored in a variable whose\ntype is a Java Collection interface.</p>\n<p>This rule raises an issue when an implementation class:</p>\n<ul>\n  <li> is returned from a <code>public</code> method. </li>\n  <li> is accepted as an argument to a <code>public</code> method. </li>\n  <li> is exposed as a <code>public</code> member. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Employees {\n  private HashSet&lt;Employee&gt; employees = new HashSet&lt;Employee&gt;();  // Noncompliant - ""employees"" should have type ""Set"" rather than ""HashSet""\n\n  public HashSet&lt;Employee&gt; getEmployees() {                       // Noncompliant\n    return employees;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Employees {\n  private Set&lt;Employee&gt; employees = new HashSet&lt;Employee&gt;();      // Compliant\n\n  public Set&lt;Employee&gt; getEmployees() {                           // Compliant\n    return employees;\n  }\n}\n</pre>'}]",[],['squid:S1319'],,,,
java:S1444,java,"""public static"" fields should be constant",2023-06-14T03:41:52+0000,"<p>There is no good reason to declare a field ""public"" and ""static"" without also declaring it ""final"". Most of the time this is a kludge to share a
state among several objects. But with this approach, any object can do whatever it wants with the shared state, such as setting it to
<code>null</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Greeter {
  public static Foo foo = new Foo();
  ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Greeter {
  public static final Foo FOO = new Foo();
  ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/500"">MITRE, CWE-500</a> - Public Static Field Not Marked Final </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/WjdGBQ"">CERT OBJ10-J.</a> - Do not use public static nonfinal fields </li>
</ul>","<p>There is no good reason to declare a field ""public"" and ""static"" without also declaring it ""final"". Most of the time this is a kludge to share a
state among several objects. But with this approach, any object can do whatever it wants with the shared state, such as setting it to
<code>null</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Greeter {
  public static Foo foo = new Foo();
  ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Greeter {
  public static final Foo FOO = new Foo();
  ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/500"">MITRE, CWE-500</a> - Public Static Field Not Marked Final </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/WjdGBQ"">CERT OBJ10-J.</a> - Do not use public static nonfinal fields </li>
</ul>",MINOR,READY,False,[],"['cert', 'cwe']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,20min,CONSTANT_ISSUE,20min,False,MAIN,False,"[{'key': 'default', 'content': '<p>There is no good reason to declare a field ""public"" and ""static"" without also declaring it ""final"". Most of the time this is a kludge to share a\nstate among several objects. But with this approach, any object can do whatever it wants with the shared state, such as setting it to\n<code>null</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Greeter {\n  public static Foo foo = new Foo();\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Greeter {\n  public static final Foo FOO = new Foo();\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/500"">MITRE, CWE-500</a> - Public Static Field Not Marked Final </li>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/WjdGBQ"">CERT OBJ10-J.</a> - Do not use public static nonfinal fields </li>\n</ul>'}]",[],['squid:S1444'],,,,
java:S3864,java,"""Stream.peek"" should be used with caution",2023-06-14T03:41:52+0000,"<p>According to its JavaDocs, the intermediate Stream operation <code>java.util.Stream.peek()</code> “exists mainly to support debugging”
purposes.</p>
<p>A key difference with other intermediate Stream operations is that the Stream implementation is free to skip calls to <code>peek()</code> for
optimization purpose. This can lead to <code>peek()</code> being unexpectedly called only for some or none of the elements in the Stream.</p>
<p>As a consequence, relying on <code>peek()</code> without careful consideration can lead to error-prone code.</p>
<p>This rule raises an issue for each use of peek() to be sure that it is challenged and validated by the team to be meant for production
debugging/logging purposes.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Stream.of(""one"", ""two"", ""three"", ""four"")
         .filter(e -&gt; e.length() &gt; 3)
         .peek(e -&gt; System.out.println(""Filtered value: "" + e)); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
Stream.of(""one"", ""two"", ""three"", ""four"")
         .filter(e -&gt; e.length() &gt; 3)
         .foreach(e -&gt; System.out.println(""Filtered value: "" + e));
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#peek-java.util.function.Consumer-"">Java 8 API Documentation</a>
  </li>
  <li> 4comprehension: <a href=""https://4comprehension.com/idiomatic-peeking/"">Idiomatic Peeking with Java Stream API</a> </li>
  <li> Data Geekery: <a href=""https://blog.jooq.org/2014/06/13/java-8-friday-10-subtle-mistakes-when-using-the-streams-api/"">10 Subtle Mistakes When
  Using the Streams API</a> </li>
</ul>","<p>According to its JavaDocs, the intermediate Stream operation <code>java.util.Stream.peek()</code> “exists mainly to support debugging”
purposes.</p>
<p>A key difference with other intermediate Stream operations is that the Stream implementation is free to skip calls to <code>peek()</code> for
optimization purpose. This can lead to <code>peek()</code> being unexpectedly called only for some or none of the elements in the Stream.</p>
<p>As a consequence, relying on <code>peek()</code> without careful consideration can lead to error-prone code.</p>
<p>This rule raises an issue for each use of peek() to be sure that it is challenged and validated by the team to be meant for production
debugging/logging purposes.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Stream.of(""one"", ""two"", ""three"", ""four"")
         .filter(e -&gt; e.length() &gt; 3)
         .peek(e -&gt; System.out.println(""Filtered value: "" + e)); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
Stream.of(""one"", ""two"", ""three"", ""four"")
         .filter(e -&gt; e.length() &gt; 3)
         .foreach(e -&gt; System.out.println(""Filtered value: "" + e));
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#peek-java.util.function.Consumer-"">Java 8 API Documentation</a>
  </li>
  <li> 4comprehension: <a href=""https://4comprehension.com/idiomatic-peeking/"">Idiomatic Peeking with Java Stream API</a> </li>
  <li> Data Geekery: <a href=""https://blog.jooq.org/2014/06/13/java-8-friday-10-subtle-mistakes-when-using-the-streams-api/"">10 Subtle Mistakes When
  Using the Streams API</a> </li>
</ul>",MAJOR,READY,False,[],"['java8', 'pitfall']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>According to its JavaDocs, the intermediate Stream operation <code>java.util.Stream.peek()</code> “exists mainly to support debugging”\npurposes.</p>\n<p>A key difference with other intermediate Stream operations is that the Stream implementation is free to skip calls to <code>peek()</code> for\noptimization purpose. This can lead to <code>peek()</code> being unexpectedly called only for some or none of the elements in the Stream.</p>\n<p>As a consequence, relying on <code>peek()</code> without careful consideration can lead to error-prone code.</p>\n<p>This rule raises an issue for each use of peek() to be sure that it is challenged and validated by the team to be meant for production\ndebugging/logging purposes.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nStream.of(""one"", ""two"", ""three"", ""four"")\n         .filter(e -&gt; e.length() &gt; 3)\n         .peek(e -&gt; System.out.println(""Filtered value: "" + e)); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nStream.of(""one"", ""two"", ""three"", ""four"")\n         .filter(e -&gt; e.length() &gt; 3)\n         .foreach(e -&gt; System.out.println(""Filtered value: "" + e));\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#peek-java.util.function.Consumer-"">Java 8 API Documentation</a>\n  </li>\n  <li> 4comprehension: <a href=""https://4comprehension.com/idiomatic-peeking/"">Idiomatic Peeking with Java Stream API</a> </li>\n  <li> Data Geekery: <a href=""https://blog.jooq.org/2014/06/13/java-8-friday-10-subtle-mistakes-when-using-the-streams-api/"">10 Subtle Mistakes When\n  Using the Streams API</a> </li>\n</ul>'}]",[],['squid:S3864'],,,,
java:S3972,java,Conditionals should start on new lines,2023-06-14T03:41:52+0000,"<p>Code is clearest when each statement has its own line. Nonetheless, it is a common pattern to combine on the same line an <code>if</code> and its
resulting <em>then</em> statement. However, when an <code>if</code> is placed on the same line as the closing <code>}</code> from a preceding
<em>then</em>, <em>else</em> or <em>else if</em> part, it is either an error - <code>else</code> is missing - or the invitation to a future error as
maintainers fail to understand that the two statements are unconnected.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (condition1) {
  // ...
} if (condition2) {  // Noncompliant
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (condition1) {
  // ...
} else if (condition2) {
  //...
}
</pre>
<p>Or</p>
<pre>
if (condition1) {
  // ...
}

if (condition2) {
  //...
}
</pre>","<p>Code is clearest when each statement has its own line. Nonetheless, it is a common pattern to combine on the same line an <code>if</code> and its
resulting <em>then</em> statement. However, when an <code>if</code> is placed on the same line as the closing <code>}</code> from a preceding
<em>then</em>, <em>else</em> or <em>else if</em> part, it is either an error - <code>else</code> is missing - or the invitation to a future error as
maintainers fail to understand that the two statements are unconnected.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (condition1) {
  // ...
} if (condition2) {  // Noncompliant
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (condition1) {
  // ...
} else if (condition2) {
  //...
}
</pre>
<p>Or</p>
<pre>
if (condition1) {
  // ...
}

if (condition2) {
  //...
}
</pre>",CRITICAL,READY,False,[],['suspicious'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,10min,CONSTANT_ISSUE,10min,False,ALL,False,"[{'key': 'default', 'content': '<p>Code is clearest when each statement has its own line. Nonetheless, it is a common pattern to combine on the same line an <code>if</code> and its\nresulting <em>then</em> statement. However, when an <code>if</code> is placed on the same line as the closing <code>}</code> from a preceding\n<em>then</em>, <em>else</em> or <em>else if</em> part, it is either an error - <code>else</code> is missing - or the invitation to a future error as\nmaintainers fail to understand that the two statements are unconnected.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition1) {\n  // ...\n} if (condition2) {  // Noncompliant\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition1) {\n  // ...\n} else if (condition2) {\n  //...\n}\n</pre>\n<p>Or</p>\n<pre>\nif (condition1) {\n  // ...\n}\n\nif (condition2) {\n  //...\n}\n</pre>'}]",[],['squid:S3972'],,,,
java:S3973,java,A conditionally executed single line should be denoted by indentation,2023-06-14T03:41:52+0000,"<p>In the absence of enclosing curly braces, the line immediately after a conditional is the one that is conditionally executed. By both convention
and good practice, such lines are indented. In the absence of both curly braces and indentation the intent of the original programmer is entirely
unclear and perhaps not actually what is executed. Additionally, such code is highly likely to be confusing to maintainers.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (condition)  // Noncompliant
doTheThing();

doTheOtherThing();
somethingElseEntirely();

foo();
</pre>
<h2>Compliant Solution</h2>
<pre>
if (condition)
  doTheThing();

doTheOtherThing();
somethingElseEntirely();

foo();
</pre>","<p>In the absence of enclosing curly braces, the line immediately after a conditional is the one that is conditionally executed. By both convention
and good practice, such lines are indented. In the absence of both curly braces and indentation the intent of the original programmer is entirely
unclear and perhaps not actually what is executed. Additionally, such code is highly likely to be confusing to maintainers.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (condition)  // Noncompliant
doTheThing();

doTheOtherThing();
somethingElseEntirely();

foo();
</pre>
<h2>Compliant Solution</h2>
<pre>
if (condition)
  doTheThing();

doTheOtherThing();
somethingElseEntirely();

foo();
</pre>",CRITICAL,READY,False,[],"['confusing', 'suspicious']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,10min,CONSTANT_ISSUE,10min,False,ALL,False,"[{'key': 'default', 'content': '<p>In the absence of enclosing curly braces, the line immediately after a conditional is the one that is conditionally executed. By both convention\nand good practice, such lines are indented. In the absence of both curly braces and indentation the intent of the original programmer is entirely\nunclear and perhaps not actually what is executed. Additionally, such code is highly likely to be confusing to maintainers.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)  // Noncompliant\ndoTheThing();\n\ndoTheOtherThing();\nsomethingElseEntirely();\n\nfoo();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition)\n  doTheThing();\n\ndoTheOtherThing();\nsomethingElseEntirely();\n\nfoo();\n</pre>'}]",[],['squid:S3973'],,,,
java:S3985,java,"Unused ""private"" classes should be removed",2023-06-14T03:41:52+0000,"<p><code>private</code> classes that are never used are dead code: unnecessary, inoperative code that should be removed. Cleaning out dead code
decreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being introduced.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo
{
  ...
  private class MyUnusedPrivateClass {...} // Noncompliant
}
</pre>","<p><code>private</code> classes that are never used are dead code: unnecessary, inoperative code that should be removed. Cleaning out dead code
decreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being introduced.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo
{
  ...
  private class MyUnusedPrivateClass {...} // Noncompliant
}
</pre>",MAJOR,READY,False,[],['unused'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,2min,CONSTANT_ISSUE,2min,False,ALL,False,"[{'key': 'default', 'content': '<p><code>private</code> classes that are never used are dead code: unnecessary, inoperative code that should be removed. Cleaning out dead code\ndecreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being introduced.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo\n{\n  ...\n  private class MyUnusedPrivateClass {...} // Noncompliant\n}\n</pre>'}]",[],['squid:S3985'],,,,
java:S1200,java,Classes should not be coupled to too many other classes (Single Responsibility Principle),2023-06-14T03:41:52+0000,"<p>According to the Single Responsibility Principle, introduced by Robert C. Martin in his book ""Principles of Object Oriented Design"", a class should
have only one responsibility:</p>
<blockquote>
  <p>If a class has more than one responsibility, then the responsibilities become coupled.</p>
  <p>Changes to one responsibility may impair or inhibit the class' ability to meet the others.</p>
  <p>This kind of coupling leads to fragile designs that break in unexpected ways when changed.</p>
</blockquote>
<p>Classes which rely on many other classes tend to aggregate too many responsibilities and should be split into several smaller ones.</p>
<p>Nested classes dependencies are not counted as dependencies of the outer class.</p>
<h2>Noncompliant Code Example</h2>
<p>With a threshold of 5:</p>
<pre>
class Foo {                        // Noncompliant - Foo depends on too many classes: T1, T2, T3, T4, T5, T6 and T7
  T1 a1;                           // Foo is coupled to T1
  T2 a2;                           // Foo is coupled to T2
  T3 a3;                           // Foo is coupled to T3

  public T4 compute(T5 a, T6 b) {  // Foo is coupled to T4, T5 and T6
    T7 result = a.getResult(b);    // Foo is coupled to T7
    return result;
  }

  public static class Bar {        // Compliant - Bar depends on 2 classes: T8 and T9
    T8 a8;
    T9 a9;
  }
}
</pre>","<p>According to the Single Responsibility Principle, introduced by Robert C. Martin in his book ""Principles of Object Oriented Design"", a class should
have only one responsibility:</p>
<blockquote>
  <p>If a class has more than one responsibility, then the responsibilities become coupled.</p>
  <p>Changes to one responsibility may impair or inhibit the class' ability to meet the others.</p>
  <p>This kind of coupling leads to fragile designs that break in unexpected ways when changed.</p>
</blockquote>
<p>Classes which rely on many other classes tend to aggregate too many responsibilities and should be split into several smaller ones.</p>
<p>Nested classes dependencies are not counted as dependencies of the outer class.</p>
<h2>Noncompliant Code Example</h2>
<p>With a threshold of 5:</p>
<pre>
class Foo {                        // Noncompliant - Foo depends on too many classes: T1, T2, T3, T4, T5, T6 and T7
  T1 a1;                           // Foo is coupled to T1
  T2 a2;                           // Foo is coupled to T2
  T3 a3;                           // Foo is coupled to T3

  public T4 compute(T5 a, T6 b) {  // Foo is coupled to T4, T5 and T6
    T7 result = a.getResult(b);    // Foo is coupled to T7
    return result;
  }

  public static class Bar {        // Compliant - Bar depends on 2 classes: T8 and T9
    T8 a8;
    T9 a9;
  }
}
</pre>",MAJOR,READY,False,[],['brain-overload'],java,Java,"[{'key': 'max', 'htmlDesc': 'Maximum number of classes a single class is allowed to depend upon', 'defaultValue': '20', 'type': 'INTEGER'}]",CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,2h,CONSTANT_ISSUE,2h,False,MAIN,False,"[{'key': 'default', 'content': '<p>According to the Single Responsibility Principle, introduced by Robert C. Martin in his book ""Principles of Object Oriented Design"", a class should\nhave only one responsibility:</p>\n<blockquote>\n  <p>If a class has more than one responsibility, then the responsibilities become coupled.</p>\n  <p>Changes to one responsibility may impair or inhibit the class\' ability to meet the others.</p>\n  <p>This kind of coupling leads to fragile designs that break in unexpected ways when changed.</p>\n</blockquote>\n<p>Classes which rely on many other classes tend to aggregate too many responsibilities and should be split into several smaller ones.</p>\n<p>Nested classes dependencies are not counted as dependencies of the outer class.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With a threshold of 5:</p>\n<pre>\nclass Foo {                        // Noncompliant - Foo depends on too many classes: T1, T2, T3, T4, T5, T6 and T7\n  T1 a1;                           // Foo is coupled to T1\n  T2 a2;                           // Foo is coupled to T2\n  T3 a3;                           // Foo is coupled to T3\n\n  public T4 compute(T5 a, T6 b) {  // Foo is coupled to T4, T5 and T6\n    T7 result = a.getResult(b);    // Foo is coupled to T7\n    return result;\n  }\n\n  public static class Bar {        // Compliant - Bar depends on 2 classes: T8 and T9\n    T8 a8;\n    T9 a9;\n  }\n}\n</pre>'}]",[],['squid:S1200'],,,,
java:S3740,java,Raw types should not be used,2023-06-14T03:41:52+0000,"<p>Generic types shouldn’t be used raw (without type parameters) in variable declarations or return values. Doing so bypasses generic type checking,
and defers the catch of unsafe code to runtime.</p>
<h2>Noncompliant Code Example</h2>
<pre>
List myList; // Noncompliant
Set mySet; // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
List&lt;String&gt; myList;
Set&lt;? extends Number&gt; mySet;
</pre>","<p>Generic types shouldn’t be used raw (without type parameters) in variable declarations or return values. Doing so bypasses generic type checking,
and defers the catch of unsafe code to runtime.</p>
<h2>Noncompliant Code Example</h2>
<pre>
List myList; // Noncompliant
Set mySet; // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
List&lt;String&gt; myList;
Set&lt;? extends Number&gt; mySet;
</pre>",MAJOR,READY,False,[],['pitfall'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>Generic types shouldn’t be used raw (without type parameters) in variable declarations or return values. Doing so bypasses generic type checking,\nand defers the catch of unsafe code to runtime.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList myList; // Noncompliant\nSet mySet; // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nList&lt;String&gt; myList;\nSet&lt;? extends Number&gt; mySet;\n</pre>'}]",[],['squid:S3740'],,,,
java:S4719,java,"""StandardCharsets"" constants should be preferred",2023-06-14T03:41:52+0000,"<p>JDK7 introduced the class <code>java.nio.charset.StandardCharsets</code>. It provides constants for all charsets that are guaranteed to be
available on every implementation of the Java platform.</p>
<ul>
  <li> ISO_8859_1 </li>
  <li> US_ASCII </li>
  <li> UTF_16 </li>
  <li> UTF_16BE </li>
  <li> UTF_16LE </li>
  <li> UTF_8 </li>
</ul>
<p>These constants should be preferred to:</p>
<ul>
  <li> the use of a String such as ""UTF-8"" which has the drawback of requiring the <code>catch</code>/<code>throw</code> of an
  <code>UnsupportedEncodingException</code> that will never actually happen </li>
  <li> the use of Guava’s <code>Charsets</code> class, which has been obsolete since JDK7 </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
try {
  byte[] bytes = string.getBytes(""UTF-8""); // Noncompliant; use a String instead of StandardCharsets.UTF_8
} catch (UnsupportedEncodingException e) {
  throw new AssertionError(e);
}
// ...
byte[] bytes = string.getBytes(Charsets.UTF_8); // Noncompliant; Guava way obsolete since JDK7
</pre>
<h2>Compliant Solution</h2>
<pre>
byte[] bytes = string.getBytes(StandardCharsets.UTF_8)
</pre>","<p>JDK7 introduced the class <code>java.nio.charset.StandardCharsets</code>. It provides constants for all charsets that are guaranteed to be
available on every implementation of the Java platform.</p>
<ul>
  <li> ISO_8859_1 </li>
  <li> US_ASCII </li>
  <li> UTF_16 </li>
  <li> UTF_16BE </li>
  <li> UTF_16LE </li>
  <li> UTF_8 </li>
</ul>
<p>These constants should be preferred to:</p>
<ul>
  <li> the use of a String such as ""UTF-8"" which has the drawback of requiring the <code>catch</code>/<code>throw</code> of an
  <code>UnsupportedEncodingException</code> that will never actually happen </li>
  <li> the use of Guava’s <code>Charsets</code> class, which has been obsolete since JDK7 </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
try {
  byte[] bytes = string.getBytes(""UTF-8""); // Noncompliant; use a String instead of StandardCharsets.UTF_8
} catch (UnsupportedEncodingException e) {
  throw new AssertionError(e);
}
// ...
byte[] bytes = string.getBytes(Charsets.UTF_8); // Noncompliant; Guava way obsolete since JDK7
</pre>
<h2>Compliant Solution</h2>
<pre>
byte[] bytes = string.getBytes(StandardCharsets.UTF_8)
</pre>",MINOR,READY,False,[],"['clumsy', 'java7']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,1min,CONSTANT_ISSUE,1min,False,ALL,False,"[{'key': 'default', 'content': '<p>JDK7 introduced the class <code>java.nio.charset.StandardCharsets</code>. It provides constants for all charsets that are guaranteed to be\navailable on every implementation of the Java platform.</p>\n<ul>\n  <li> ISO_8859_1 </li>\n  <li> US_ASCII </li>\n  <li> UTF_16 </li>\n  <li> UTF_16BE </li>\n  <li> UTF_16LE </li>\n  <li> UTF_8 </li>\n</ul>\n<p>These constants should be preferred to:</p>\n<ul>\n  <li> the use of a String such as ""UTF-8"" which has the drawback of requiring the <code>catch</code>/<code>throw</code> of an\n  <code>UnsupportedEncodingException</code> that will never actually happen </li>\n  <li> the use of Guava’s <code>Charsets</code> class, which has been obsolete since JDK7 </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry {\n  byte[] bytes = string.getBytes(""UTF-8""); // Noncompliant; use a String instead of StandardCharsets.UTF_8\n} catch (UnsupportedEncodingException e) {\n  throw new AssertionError(e);\n}\n// ...\nbyte[] bytes = string.getBytes(Charsets.UTF_8); // Noncompliant; Guava way obsolete since JDK7\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nbyte[] bytes = string.getBytes(StandardCharsets.UTF_8)\n</pre>'}]",[],['squid:S4719'],,,,
java:S4838,java,An iteration on a Collection should be performed on the type handled by the Collection,2023-06-14T03:41:52+0000,"<p>This rule raises an issue when an iteration over the items of a <code>Collection</code> is performed on a super-type of the type handled by the
<code>Collection</code>.</p>
<p>Relying on <code>Object</code> or any classes between <code>Object</code> and the real class handled by the <code>Collection</code> is not
recommended. While it’s accepted by the language, this practice reduces readability of the code and forces to down-cast the item of the
<code>Collection</code> to be able to call a method on it while simply using the correct type in the iteration makes things more clear and simple.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public Collection&lt;Person&gt; getPersons() { ... }

for (Object item : getPersons()) { // Noncompliant
  Person person = (Person) item; // Noncompliant; it's required to down-cast to the to correct type to use ""item""
  person.getAdress();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for (Person person : getPersons()) { // Compliant
  person.getAddress() ;
}
</pre>","<p>This rule raises an issue when an iteration over the items of a <code>Collection</code> is performed on a super-type of the type handled by the
<code>Collection</code>.</p>
<p>Relying on <code>Object</code> or any classes between <code>Object</code> and the real class handled by the <code>Collection</code> is not
recommended. While it’s accepted by the language, this practice reduces readability of the code and forces to down-cast the item of the
<code>Collection</code> to be able to call a method on it while simply using the correct type in the iteration makes things more clear and simple.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public Collection&lt;Person&gt; getPersons() { ... }

for (Object item : getPersons()) { // Noncompliant
  Person person = (Person) item; // Noncompliant; it's required to down-cast to the to correct type to use ""item""
  person.getAdress();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for (Person person : getPersons()) { // Compliant
  person.getAddress() ;
}
</pre>",MINOR,READY,False,[],"['bad-practice', 'clumsy']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,1min,CONSTANT_ISSUE,1min,False,MAIN,False,"[{'key': 'default', 'content': '<p>This rule raises an issue when an iteration over the items of a <code>Collection</code> is performed on a super-type of the type handled by the\n<code>Collection</code>.</p>\n<p>Relying on <code>Object</code> or any classes between <code>Object</code> and the real class handled by the <code>Collection</code> is not\nrecommended. While it’s accepted by the language, this practice reduces readability of the code and forces to down-cast the item of the\n<code>Collection</code> to be able to call a method on it while simply using the correct type in the iteration makes things more clear and simple.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic Collection&lt;Person&gt; getPersons() { ... }\n\nfor (Object item : getPersons()) { // Noncompliant\n  Person person = (Person) item; // Noncompliant; it\'s required to down-cast to the to correct type to use ""item""\n  person.getAdress();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor (Person person : getPersons()) { // Compliant\n  person.getAddress() ;\n}\n</pre>'}]",[],['squid:S4838'],,,,
java:S5803,java,"Class members annotated with ""@VisibleForTesting"" should not be accessed from production code",2023-06-14T03:41:52+0000,"<p>@VisibleForTesting can be used to mark methods, fields and classes whose visibility restrictions have been relaxed more than necessary for the API
to allow for easier unit testing.</p>
<p>Access to such methods, fields and classes only possible thanks to this relaxed visibility is fine for test code, but it should be avoided in
production code. In production code these methods should be treated as if they are private.</p>
<p>Supported framework:</p>
<ul>
  <li> Guava: <code>com.google.common.annotations.VisibleForTesting</code> </li>
  <li> AssertJ: <code>org.assertj.core.util.VisibleForTesting</code> </li>
  <li> Android: <code>androidx.annotation.VisibleForTesting</code> </li>
  <li> Apache Flink: <code>org.apache.flink.annotation.VisibleForTesting</code> </li>
</ul>
<p>or any other annotation named <code>VisibleForTesting</code></p>
<h2>Noncompliant Code Example</h2>
<pre>
/** src/main/java/MyObject.java */

@VisibleForTesting String foo;

/** src/main/java/Service.java */

new MyObject().foo; // Noncompliant, foo is accessed from production code
</pre>
<h2>Compliant Solution</h2>
<pre>
/** src/main/java/MyObject.java */

@VisibleForTesting String foo;

/** src/test/java/MyObjectTest.java */

new MyObject().foo; // Compliant, foo is accessed from test code
</pre>","<p>@VisibleForTesting can be used to mark methods, fields and classes whose visibility restrictions have been relaxed more than necessary for the API
to allow for easier unit testing.</p>
<p>Access to such methods, fields and classes only possible thanks to this relaxed visibility is fine for test code, but it should be avoided in
production code. In production code these methods should be treated as if they are private.</p>
<p>Supported framework:</p>
<ul>
  <li> Guava: <code>com.google.common.annotations.VisibleForTesting</code> </li>
  <li> AssertJ: <code>org.assertj.core.util.VisibleForTesting</code> </li>
  <li> Android: <code>androidx.annotation.VisibleForTesting</code> </li>
  <li> Apache Flink: <code>org.apache.flink.annotation.VisibleForTesting</code> </li>
</ul>
<p>or any other annotation named <code>VisibleForTesting</code></p>
<h2>Noncompliant Code Example</h2>
<pre>
/** src/main/java/MyObject.java */

@VisibleForTesting String foo;

/** src/main/java/Service.java */

new MyObject().foo; // Noncompliant, foo is accessed from production code
</pre>
<h2>Compliant Solution</h2>
<pre>
/** src/main/java/MyObject.java */

@VisibleForTesting String foo;

/** src/test/java/MyObjectTest.java */

new MyObject().foo; // Compliant, foo is accessed from test code
</pre>",CRITICAL,READY,False,[],['pitfall'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,10min,CONSTANT_ISSUE,10min,False,MAIN,False,"[{'key': 'default', 'content': '<p>@VisibleForTesting can be used to mark methods, fields and classes whose visibility restrictions have been relaxed more than necessary for the API\nto allow for easier unit testing.</p>\n<p>Access to such methods, fields and classes only possible thanks to this relaxed visibility is fine for test code, but it should be avoided in\nproduction code. In production code these methods should be treated as if they are private.</p>\n<p>Supported framework:</p>\n<ul>\n  <li> Guava: <code>com.google.common.annotations.VisibleForTesting</code> </li>\n  <li> AssertJ: <code>org.assertj.core.util.VisibleForTesting</code> </li>\n  <li> Android: <code>androidx.annotation.VisibleForTesting</code> </li>\n  <li> Apache Flink: <code>org.apache.flink.annotation.VisibleForTesting</code> </li>\n</ul>\n<p>or any other annotation named <code>VisibleForTesting</code></p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n/** src/main/java/MyObject.java */\n\n@VisibleForTesting String foo;\n\n/** src/main/java/Service.java */\n\nnew MyObject().foo; // Noncompliant, foo is accessed from production code\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n/** src/main/java/MyObject.java */\n\n@VisibleForTesting String foo;\n\n/** src/test/java/MyObjectTest.java */\n\nnew MyObject().foo; // Compliant, foo is accessed from test code\n</pre>'}]",[],['squid:S5803'],,,,
java:S1448,java,Classes should not have too many methods,2023-06-14T03:41:52+0000,"<p>A class that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain.
Above a specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well defined topics.</p>","<p>A class that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain.
Above a specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well defined topics.</p>",MAJOR,READY,False,[],['brain-overload'],java,Java,"[{'key': 'countNonpublicMethods', 'htmlDesc': 'Whether or not to include non-public methods in the count.', 'defaultValue': 'true', 'type': 'BOOLEAN'}, {'key': 'maximumMethodThreshold', 'htmlDesc': 'The maximum number of methods authorized in a class.', 'defaultValue': '35', 'type': 'INTEGER'}]",CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,1h,CONSTANT_ISSUE,1h,False,MAIN,False,"[{'key': 'default', 'content': '<p>A class that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain.\nAbove a specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well defined topics.</p>'}]",[],['squid:S1448'],,,,
java:S1449,java,String operations should not rely on the default system locale,2023-06-14T03:41:52+0000,"<p>Failure to specify a locale when calling the methods <code>toLowerCase()</code>, <code>toUpperCase()</code> or <code>format()</code> on
<code>String</code> objects means the system default encoding will be used, possibly creating problems with international characters or number
representations. For instance with the Turkish language, when converting the small letter 'i' to upper case, the result is capital letter 'I' with a
dot over it.</p>
<p>Case conversion without a locale may work fine in its ""home"" environment, but break in ways that are extremely difficult to diagnose for customers
who use different encodings. Such bugs can be nearly, if not completely, impossible to reproduce when it’s time to fix them. For locale-sensitive
strings, the correct locale should always be used, but <code>Locale.ROOT</code> can be used for case-insensitive ones.</p>
<h2>Noncompliant Code Example</h2>
<pre>
myString.toLowerCase()
</pre>
<h2>Compliant Solution</h2>
<pre>
myString.toLowerCase(Locale.TR)
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/4zdGBQ"">CERT, STR02-J.</a> - Specify an appropriate locale when comparing locale-dependent data
  </li>
</ul>","<p>Failure to specify a locale when calling the methods <code>toLowerCase()</code>, <code>toUpperCase()</code> or <code>format()</code> on
<code>String</code> objects means the system default encoding will be used, possibly creating problems with international characters or number
representations. For instance with the Turkish language, when converting the small letter 'i' to upper case, the result is capital letter 'I' with a
dot over it.</p>
<p>Case conversion without a locale may work fine in its ""home"" environment, but break in ways that are extremely difficult to diagnose for customers
who use different encodings. Such bugs can be nearly, if not completely, impossible to reproduce when it’s time to fix them. For locale-sensitive
strings, the correct locale should always be used, but <code>Locale.ROOT</code> can be used for case-insensitive ones.</p>
<h2>Noncompliant Code Example</h2>
<pre>
myString.toLowerCase()
</pre>
<h2>Compliant Solution</h2>
<pre>
myString.toLowerCase(Locale.TR)
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/4zdGBQ"">CERT, STR02-J.</a> - Specify an appropriate locale when comparing locale-dependent data
  </li>
</ul>",MINOR,READY,False,[],"['cert', 'unpredictable']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,MAIN,False,"[{'key': 'default', 'content': '<p>Failure to specify a locale when calling the methods <code>toLowerCase()</code>, <code>toUpperCase()</code> or <code>format()</code> on\n<code>String</code> objects means the system default encoding will be used, possibly creating problems with international characters or number\nrepresentations. For instance with the Turkish language, when converting the small letter \'i\' to upper case, the result is capital letter \'I\' with a\ndot over it.</p>\n<p>Case conversion without a locale may work fine in its ""home"" environment, but break in ways that are extremely difficult to diagnose for customers\nwho use different encodings. Such bugs can be nearly, if not completely, impossible to reproduce when it’s time to fix them. For locale-sensitive\nstrings, the correct locale should always be used, but <code>Locale.ROOT</code> can be used for case-insensitive ones.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nmyString.toLowerCase()\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nmyString.toLowerCase(Locale.TR)\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/4zdGBQ"">CERT, STR02-J.</a> - Specify an appropriate locale when comparing locale-dependent data\n  </li>\n</ul>'}]",[],['squid:S1449'],,,,
java:S1940,java,Boolean checks should not be inverted,2023-06-14T03:41:52+0000,"<p>It is needlessly complex to invert the result of a boolean comparison. The opposite comparison should be made instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if ( !(a == 2)) { ...}  // Noncompliant
boolean b = !(i &lt; 10);  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
if (a != 2) { ...}
boolean b = (i &gt;= 10);
</pre>","<p>It is needlessly complex to invert the result of a boolean comparison. The opposite comparison should be made instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if ( !(a == 2)) { ...}  // Noncompliant
boolean b = !(i &lt; 10);  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
if (a != 2) { ...}
boolean b = (i &gt;= 10);
</pre>",MINOR,READY,False,[],['pitfall'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,2min,CONSTANT_ISSUE,2min,False,ALL,False,"[{'key': 'default', 'content': '<p>It is needlessly complex to invert the result of a boolean comparison. The opposite comparison should be made instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ( !(a == 2)) { ...}  // Noncompliant\nboolean b = !(i &lt; 10);  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (a != 2) { ...}\nboolean b = (i &gt;= 10);\n</pre>'}]",[],['squid:S1940'],,,,
java:S3626,java,Jump statements should not be redundant,2023-06-14T03:41:52+0000,"<p>Jump statements such as <code>return</code> and <code>continue</code> let you change the default flow of program execution, but jump statements
that direct the control flow to the original direction are just a waste of keystrokes.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void foo() {
  while (condition1) {
    if (condition2) {
      continue; // Noncompliant
    } else {
      doTheThing();
    }
  }
  return; // Noncompliant; this is a void method
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void foo() {
  while (condition1) {
    if (!condition2) {
      doTheThing();
    }
  }
}
</pre>","<p>Jump statements such as <code>return</code> and <code>continue</code> let you change the default flow of program execution, but jump statements
that direct the control flow to the original direction are just a waste of keystrokes.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void foo() {
  while (condition1) {
    if (condition2) {
      continue; // Noncompliant
    } else {
      doTheThing();
    }
  }
  return; // Noncompliant; this is a void method
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void foo() {
  while (condition1) {
    if (!condition2) {
      doTheThing();
    }
  }
}
</pre>",MINOR,READY,False,[],"['clumsy', 'redundant']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,1min,CONSTANT_ISSUE,1min,False,ALL,False,"[{'key': 'default', 'content': '<p>Jump statements such as <code>return</code> and <code>continue</code> let you change the default flow of program execution, but jump statements\nthat direct the control flow to the original direction are just a waste of keystrokes.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void foo() {\n  while (condition1) {\n    if (condition2) {\n      continue; // Noncompliant\n    } else {\n      doTheThing();\n    }\n  }\n  return; // Noncompliant; this is a void method\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void foo() {\n  while (condition1) {\n    if (!condition2) {\n      doTheThing();\n    }\n  }\n}\n</pre>'}]",[],['squid:S3626'],,,,
java:S4087,java,"""close()"" calls should not be redundant",2023-06-14T03:41:52+0000,"<p>Java 7’s try-with-resources structure automatically handles closing the resources that the <code>try</code> itself opens. Thus, adding an explicit
<code>close()</code> call is redundant and potentially confusing.</p>
<h2>Noncompliant Code Example</h2>
<pre>
try (PrintWriter writer = new PrintWriter(process.getOutputStream())) {
  String contents = file.contents();
  writer.write(new Gson().toJson(new MyObject(contents)));
  writer.flush();
  writer.close();  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
try (PrintWriter writer = new PrintWriter(process.getOutputStream())) {
  String contents = file.contents();
  writer.write(new Gson().toJson(new MyObject(contents)));
  writer.flush();
}
</pre>","<p>Java 7’s try-with-resources structure automatically handles closing the resources that the <code>try</code> itself opens. Thus, adding an explicit
<code>close()</code> call is redundant and potentially confusing.</p>
<h2>Noncompliant Code Example</h2>
<pre>
try (PrintWriter writer = new PrintWriter(process.getOutputStream())) {
  String contents = file.contents();
  writer.write(new Gson().toJson(new MyObject(contents)));
  writer.flush();
  writer.close();  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
try (PrintWriter writer = new PrintWriter(process.getOutputStream())) {
  String contents = file.contents();
  writer.write(new Gson().toJson(new MyObject(contents)));
  writer.flush();
}
</pre>",MINOR,READY,False,[],['redundant'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,2min,CONSTANT_ISSUE,2min,False,ALL,False,"[{'key': 'default', 'content': '<p>Java 7’s try-with-resources structure automatically handles closing the resources that the <code>try</code> itself opens. Thus, adding an explicit\n<code>close()</code> call is redundant and potentially confusing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry (PrintWriter writer = new PrintWriter(process.getOutputStream())) {\n  String contents = file.contents();\n  writer.write(new Gson().toJson(new MyObject(contents)));\n  writer.flush();\n  writer.close();  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry (PrintWriter writer = new PrintWriter(process.getOutputStream())) {\n  String contents = file.contents();\n  writer.write(new Gson().toJson(new MyObject(contents)));\n  writer.flush();\n}\n</pre>'}]",[],['squid:S4087'],,,,
java:S6262,java,AWS region should not be set with a hardcoded String,2023-06-14T03:41:52+0000,"<p>When explicitly setting the region on an AWS Client, you should always prefer providing the value from the Enum <a
href=""https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/index.html?com/amazonaws/regions/Regions.html"">Regions</a> instead of a hardcoded String.
This will allow you to transparently support any change in the API and avoid mistakes.</p>
<p>This rule reports an issue when a hardcoded string is used instead of an available enum value.</p>
<h2>Noncompliant Code Example</h2>
<pre>
AmazonS3ClientBuilder.standard().withRegion(""eu_west_1"").build();
</pre>
<h2>Compliant Solution</h2>
<pre>
AmazonS3ClientBuilder.standard().withRegion(Regions.EU_WEST_1).build();
</pre>","<p>When explicitly setting the region on an AWS Client, you should always prefer providing the value from the Enum <a
href=""https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/index.html?com/amazonaws/regions/Regions.html"">Regions</a> instead of a hardcoded String.
This will allow you to transparently support any change in the API and avoid mistakes.</p>
<p>This rule reports an issue when a hardcoded string is used instead of an available enum value.</p>
<h2>Noncompliant Code Example</h2>
<pre>
AmazonS3ClientBuilder.standard().withRegion(""eu_west_1"").build();
</pre>
<h2>Compliant Solution</h2>
<pre>
AmazonS3ClientBuilder.standard().withRegion(Regions.EU_WEST_1).build();
</pre>",MINOR,READY,False,[],['aws'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,MAIN,False,"[{'key': 'default', 'content': '<p>When explicitly setting the region on an AWS Client, you should always prefer providing the value from the Enum <a\nhref=""https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/index.html?com/amazonaws/regions/Regions.html"">Regions</a> instead of a hardcoded String.\nThis will allow you to transparently support any change in the API and avoid mistakes.</p>\n<p>This rule reports an issue when a hardcoded string is used instead of an available enum value.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nAmazonS3ClientBuilder.standard().withRegion(""eu_west_1"").build();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nAmazonS3ClientBuilder.standard().withRegion(Regions.EU_WEST_1).build();\n</pre>'}]",[],['squid:S6262'],,,,
java:S1943,java,Classes and methods that rely on the default system encoding should not be used,2023-06-14T03:41:52+0000,"<p>Using classes and methods that rely on the default system encoding can result in code that works fine in its ""home"" environment. But that code may
break for customers who use different encodings in ways that are extremely difficult to diagnose and nearly, if not completely, impossible to
reproduce when it’s time to fix them.</p>
<p>This rule detects uses of the following classes and methods:</p>
<ul>
  <li> <code>FileReader</code> </li>
  <li> <code>FileWriter</code> </li>
  <li> String constructors with a <code>byte[]</code> argument but no <code>Charset</code> argument
    <ul>
      <li> <code>String(byte[] bytes)</code> </li>
      <li> <code>String(byte[] bytes, int offset, int length)</code> </li>
    </ul>  </li>
  <li> <code>String.getBytes()</code> </li>
  <li> <code>String.getBytes(int srcBegin, int srcEnd, byte[] dst, int dstBegin)</code> </li>
  <li> <code>InputStreamReader(InputStream in)</code> </li>
  <li> <code>OutputStreamWriter(OutputStream out)</code> </li>
  <li> <code>ByteArrayOutputStream.toString()</code> </li>
  <li> Some <code>Formatter</code> constructors
    <ul>
      <li> <code>Formatter(String fileName)</code> </li>
      <li> <code>Formatter(File file)</code> </li>
      <li> <code>Formatter(OutputStream os)</code> </li>
    </ul>  </li>
  <li> Some <code>Scanner</code> constructors
    <ul>
      <li> <code>Scanner(File source)</code> </li>
      <li> <code>Scanner(Path source)</code> </li>
      <li> <code>Scanner(InputStream source)</code> </li>
    </ul>  </li>
  <li> Some <code>PrintStream</code> constructors
    <ul>
      <li> <code>PrintStream(File file)</code> </li>
      <li> <code>PrintStream(OutputStream out)</code> </li>
      <li> <code>PrintStream(OutputStream out, boolean autoFlush)</code> </li>
      <li> <code>PrintStream(String fileName)</code> </li>
    </ul>  </li>
  <li> Some <code>PrintWriter</code> constructors
    <ul>
      <li> <code>PrintWriter(File file)</code> </li>
      <li> <code>PrintWriter(OutputStream out)</code> </li>
      <li> <code>PrintWriter(OutputStream out, boolean autoFlush)</code> </li>
      <li> <code>PrintWriter(String fileName)</code> </li>
    </ul>  </li>
  <li> methods from Apache commons-io library which accept an encoding argument when that argument is null, and overloads of those methods that omit
  the encoding argument
    <ul>
      <li> <code>IOUtils.copy(InputStream, Writer)</code> </li>
      <li> <code>IOUtils.copy(Reader, OutputStream)</code> </li>
      <li> <code>IOUtils.readLines(InputStream)</code> </li>
      <li> <code>IOUtils.toByteArray(Reader)</code> </li>
      <li> <code>IOUtils.toByteArray(String)</code> </li>
      <li> <code>IOUtils.toCharArray(InputStream)</code> </li>
      <li> <code>IOUtils.toInputStream(TypeCriteria.subtypeOf(CharSequence))</code> </li>
      <li> <code>IOUtils.toString(byte[])</code> </li>
      <li> <code>IOUtils.toString(URI)</code> </li>
      <li> <code>IOUtils.toString(URL)</code> </li>
      <li> <code>IOUtils.write(char[], OutputStream)</code> </li>
      <li> <code>IOUtils.write(CharSequence, OutputStream)</code> </li>
      <li> <code>IOUtils.writeLines(Collection, String, OutputStream)</code> </li>
      <li> <code>FileUtils.readFileToString(File)</code> </li>
      <li> <code>FileUtils.readLines(File)</code> </li>
      <li> <code>FileUtils.write(File, CharSequence)</code> </li>
      <li> <code>FileUtils.write(File, CharSequence, boolean)</code> </li>
      <li> <code>FileUtils.writeStringToFile(File, String)</code> </li>
    </ul>  </li>
</ul>
<h2>See</h2>
<ul>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/pzdGBQ"">CERT, STR04-J.</a> - Use compatible character encodings when communicating string data
  between JVMs </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/ujZGBQ"">CERT, STR50-J.</a> - Use the appropriate method for counting characters in a string
  </li>
</ul>","<p>Using classes and methods that rely on the default system encoding can result in code that works fine in its ""home"" environment. But that code may
break for customers who use different encodings in ways that are extremely difficult to diagnose and nearly, if not completely, impossible to
reproduce when it’s time to fix them.</p>
<p>This rule detects uses of the following classes and methods:</p>
<ul>
  <li> <code>FileReader</code> </li>
  <li> <code>FileWriter</code> </li>
  <li> String constructors with a <code>byte[]</code> argument but no <code>Charset</code> argument
    <ul>
      <li> <code>String(byte[] bytes)</code> </li>
      <li> <code>String(byte[] bytes, int offset, int length)</code> </li>
    </ul>  </li>
  <li> <code>String.getBytes()</code> </li>
  <li> <code>String.getBytes(int srcBegin, int srcEnd, byte[] dst, int dstBegin)</code> </li>
  <li> <code>InputStreamReader(InputStream in)</code> </li>
  <li> <code>OutputStreamWriter(OutputStream out)</code> </li>
  <li> <code>ByteArrayOutputStream.toString()</code> </li>
  <li> Some <code>Formatter</code> constructors
    <ul>
      <li> <code>Formatter(String fileName)</code> </li>
      <li> <code>Formatter(File file)</code> </li>
      <li> <code>Formatter(OutputStream os)</code> </li>
    </ul>  </li>
  <li> Some <code>Scanner</code> constructors
    <ul>
      <li> <code>Scanner(File source)</code> </li>
      <li> <code>Scanner(Path source)</code> </li>
      <li> <code>Scanner(InputStream source)</code> </li>
    </ul>  </li>
  <li> Some <code>PrintStream</code> constructors
    <ul>
      <li> <code>PrintStream(File file)</code> </li>
      <li> <code>PrintStream(OutputStream out)</code> </li>
      <li> <code>PrintStream(OutputStream out, boolean autoFlush)</code> </li>
      <li> <code>PrintStream(String fileName)</code> </li>
    </ul>  </li>
  <li> Some <code>PrintWriter</code> constructors
    <ul>
      <li> <code>PrintWriter(File file)</code> </li>
      <li> <code>PrintWriter(OutputStream out)</code> </li>
      <li> <code>PrintWriter(OutputStream out, boolean autoFlush)</code> </li>
      <li> <code>PrintWriter(String fileName)</code> </li>
    </ul>  </li>
  <li> methods from Apache commons-io library which accept an encoding argument when that argument is null, and overloads of those methods that omit
  the encoding argument
    <ul>
      <li> <code>IOUtils.copy(InputStream, Writer)</code> </li>
      <li> <code>IOUtils.copy(Reader, OutputStream)</code> </li>
      <li> <code>IOUtils.readLines(InputStream)</code> </li>
      <li> <code>IOUtils.toByteArray(Reader)</code> </li>
      <li> <code>IOUtils.toByteArray(String)</code> </li>
      <li> <code>IOUtils.toCharArray(InputStream)</code> </li>
      <li> <code>IOUtils.toInputStream(TypeCriteria.subtypeOf(CharSequence))</code> </li>
      <li> <code>IOUtils.toString(byte[])</code> </li>
      <li> <code>IOUtils.toString(URI)</code> </li>
      <li> <code>IOUtils.toString(URL)</code> </li>
      <li> <code>IOUtils.write(char[], OutputStream)</code> </li>
      <li> <code>IOUtils.write(CharSequence, OutputStream)</code> </li>
      <li> <code>IOUtils.writeLines(Collection, String, OutputStream)</code> </li>
      <li> <code>FileUtils.readFileToString(File)</code> </li>
      <li> <code>FileUtils.readLines(File)</code> </li>
      <li> <code>FileUtils.write(File, CharSequence)</code> </li>
      <li> <code>FileUtils.write(File, CharSequence, boolean)</code> </li>
      <li> <code>FileUtils.writeStringToFile(File, String)</code> </li>
    </ul>  </li>
</ul>
<h2>See</h2>
<ul>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/pzdGBQ"">CERT, STR04-J.</a> - Use compatible character encodings when communicating string data
  between JVMs </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/ujZGBQ"">CERT, STR50-J.</a> - Use the appropriate method for counting characters in a string
  </li>
</ul>",MINOR,READY,False,[],"['cert', 'i18n', 'unpredictable']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,15min,CONSTANT_ISSUE,15min,False,MAIN,False,"[{'key': 'default', 'content': '<p>Using classes and methods that rely on the default system encoding can result in code that works fine in its ""home"" environment. But that code may\nbreak for customers who use different encodings in ways that are extremely difficult to diagnose and nearly, if not completely, impossible to\nreproduce when it’s time to fix them.</p>\n<p>This rule detects uses of the following classes and methods:</p>\n<ul>\n  <li> <code>FileReader</code> </li>\n  <li> <code>FileWriter</code> </li>\n  <li> String constructors with a <code>byte[]</code> argument but no <code>Charset</code> argument\n    <ul>\n      <li> <code>String(byte[] bytes)</code> </li>\n      <li> <code>String(byte[] bytes, int offset, int length)</code> </li>\n    </ul>  </li>\n  <li> <code>String.getBytes()</code> </li>\n  <li> <code>String.getBytes(int srcBegin, int srcEnd, byte[] dst, int dstBegin)</code> </li>\n  <li> <code>InputStreamReader(InputStream in)</code> </li>\n  <li> <code>OutputStreamWriter(OutputStream out)</code> </li>\n  <li> <code>ByteArrayOutputStream.toString()</code> </li>\n  <li> Some <code>Formatter</code> constructors\n    <ul>\n      <li> <code>Formatter(String fileName)</code> </li>\n      <li> <code>Formatter(File file)</code> </li>\n      <li> <code>Formatter(OutputStream os)</code> </li>\n    </ul>  </li>\n  <li> Some <code>Scanner</code> constructors\n    <ul>\n      <li> <code>Scanner(File source)</code> </li>\n      <li> <code>Scanner(Path source)</code> </li>\n      <li> <code>Scanner(InputStream source)</code> </li>\n    </ul>  </li>\n  <li> Some <code>PrintStream</code> constructors\n    <ul>\n      <li> <code>PrintStream(File file)</code> </li>\n      <li> <code>PrintStream(OutputStream out)</code> </li>\n      <li> <code>PrintStream(OutputStream out, boolean autoFlush)</code> </li>\n      <li> <code>PrintStream(String fileName)</code> </li>\n    </ul>  </li>\n  <li> Some <code>PrintWriter</code> constructors\n    <ul>\n      <li> <code>PrintWriter(File file)</code> </li>\n      <li> <code>PrintWriter(OutputStream out)</code> </li>\n      <li> <code>PrintWriter(OutputStream out, boolean autoFlush)</code> </li>\n      <li> <code>PrintWriter(String fileName)</code> </li>\n    </ul>  </li>\n  <li> methods from Apache commons-io library which accept an encoding argument when that argument is null, and overloads of those methods that omit\n  the encoding argument\n    <ul>\n      <li> <code>IOUtils.copy(InputStream, Writer)</code> </li>\n      <li> <code>IOUtils.copy(Reader, OutputStream)</code> </li>\n      <li> <code>IOUtils.readLines(InputStream)</code> </li>\n      <li> <code>IOUtils.toByteArray(Reader)</code> </li>\n      <li> <code>IOUtils.toByteArray(String)</code> </li>\n      <li> <code>IOUtils.toCharArray(InputStream)</code> </li>\n      <li> <code>IOUtils.toInputStream(TypeCriteria.subtypeOf(CharSequence))</code> </li>\n      <li> <code>IOUtils.toString(byte[])</code> </li>\n      <li> <code>IOUtils.toString(URI)</code> </li>\n      <li> <code>IOUtils.toString(URL)</code> </li>\n      <li> <code>IOUtils.write(char[], OutputStream)</code> </li>\n      <li> <code>IOUtils.write(CharSequence, OutputStream)</code> </li>\n      <li> <code>IOUtils.writeLines(Collection, String, OutputStream)</code> </li>\n      <li> <code>FileUtils.readFileToString(File)</code> </li>\n      <li> <code>FileUtils.readLines(File)</code> </li>\n      <li> <code>FileUtils.write(File, CharSequence)</code> </li>\n      <li> <code>FileUtils.write(File, CharSequence, boolean)</code> </li>\n      <li> <code>FileUtils.writeStringToFile(File, String)</code> </li>\n    </ul>  </li>\n</ul>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/pzdGBQ"">CERT, STR04-J.</a> - Use compatible character encodings when communicating string data\n  between JVMs </li>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/ujZGBQ"">CERT, STR50-J.</a> - Use the appropriate method for counting characters in a string\n  </li>\n</ul>'}]",[],['squid:S1943'],,,,
java:S1948,java,"Fields in a ""Serializable"" class should either be transient or serializable",2023-06-14T03:41:52+0000,"<p>Fields in a <code>Serializable</code> class must themselves be either <code>Serializable</code> or <code>transient</code> even if the class is
never explicitly serialized or deserialized. For instance, under load, most J2EE application frameworks flush objects to disk, and an allegedly
<code>Serializable</code> object with non-transient, non-serializable data members could cause program crashes, and open the door to attackers. In
general a <code>Serializable</code> class is expected to fulfil its contract and not have an unexpected behaviour when an instance is serialized.</p>
<p>This rule raises an issue on non-<code>Serializable</code> fields, and on collection fields when they are not <code>private</code> (because they
could be assigned non-<code>Serializable</code> values externally), and when they are assigned non-<code>Serializable</code> types within the
class.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Address {
  //...
}

public class Person implements Serializable {
  private static final long serialVersionUID = 1905122041950251207L;

  private String name;
  private Address address;  // Noncompliant; Address isn't serializable
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Address implements Serializable {
  private static final long serialVersionUID = 2405172041950251807L;
}

public class Person implements Serializable {
  private static final long serialVersionUID = 1905122041950251207L;

  private String name;
  private Address address;
}
</pre>
<h2>Exceptions</h2>
<p>The alternative to making all members <code>serializable</code> or <code>transient</code> is to implement special methods which take on the
responsibility of properly serializing and de-serializing the object. This rule ignores classes which implement the following methods:</p>
<pre>
 private void writeObject(java.io.ObjectOutputStream out)
     throws IOException
 private void readObject(java.io.ObjectInputStream in)
     throws IOException, ClassNotFoundException;
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/594"">MITRE, CWE-594</a> - Saving Unserializable Objects to Disk </li>
  <li> <a href=""https://docs.oracle.com/javase/6/docs/api/java/io/Serializable.html"">Oracle Java 6, Serializable</a> </li>
  <li> <a href=""https://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html"">Oracle Java 7, Serializable</a> </li>
</ul>","<p>Fields in a <code>Serializable</code> class must themselves be either <code>Serializable</code> or <code>transient</code> even if the class is
never explicitly serialized or deserialized. For instance, under load, most J2EE application frameworks flush objects to disk, and an allegedly
<code>Serializable</code> object with non-transient, non-serializable data members could cause program crashes, and open the door to attackers. In
general a <code>Serializable</code> class is expected to fulfil its contract and not have an unexpected behaviour when an instance is serialized.</p>
<p>This rule raises an issue on non-<code>Serializable</code> fields, and on collection fields when they are not <code>private</code> (because they
could be assigned non-<code>Serializable</code> values externally), and when they are assigned non-<code>Serializable</code> types within the
class.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Address {
  //...
}

public class Person implements Serializable {
  private static final long serialVersionUID = 1905122041950251207L;

  private String name;
  private Address address;  // Noncompliant; Address isn't serializable
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Address implements Serializable {
  private static final long serialVersionUID = 2405172041950251807L;
}

public class Person implements Serializable {
  private static final long serialVersionUID = 1905122041950251207L;

  private String name;
  private Address address;
}
</pre>
<h2>Exceptions</h2>
<p>The alternative to making all members <code>serializable</code> or <code>transient</code> is to implement special methods which take on the
responsibility of properly serializing and de-serializing the object. This rule ignores classes which implement the following methods:</p>
<pre>
 private void writeObject(java.io.ObjectOutputStream out)
     throws IOException
 private void readObject(java.io.ObjectInputStream in)
     throws IOException, ClassNotFoundException;
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/594"">MITRE, CWE-594</a> - Saving Unserializable Objects to Disk </li>
  <li> <a href=""https://docs.oracle.com/javase/6/docs/api/java/io/Serializable.html"">Oracle Java 6, Serializable</a> </li>
  <li> <a href=""https://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html"">Oracle Java 7, Serializable</a> </li>
</ul>",CRITICAL,READY,False,[],"['cwe', 'serialization']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,30min,CONSTANT_ISSUE,30min,False,ALL,False,"[{'key': 'default', 'content': '<p>Fields in a <code>Serializable</code> class must themselves be either <code>Serializable</code> or <code>transient</code> even if the class is\nnever explicitly serialized or deserialized. For instance, under load, most J2EE application frameworks flush objects to disk, and an allegedly\n<code>Serializable</code> object with non-transient, non-serializable data members could cause program crashes, and open the door to attackers. In\ngeneral a <code>Serializable</code> class is expected to fulfil its contract and not have an unexpected behaviour when an instance is serialized.</p>\n<p>This rule raises an issue on non-<code>Serializable</code> fields, and on collection fields when they are not <code>private</code> (because they\ncould be assigned non-<code>Serializable</code> values externally), and when they are assigned non-<code>Serializable</code> types within the\nclass.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Address {\n  //...\n}\n\npublic class Person implements Serializable {\n  private static final long serialVersionUID = 1905122041950251207L;\n\n  private String name;\n  private Address address;  // Noncompliant; Address isn\'t serializable\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Address implements Serializable {\n  private static final long serialVersionUID = 2405172041950251807L;\n}\n\npublic class Person implements Serializable {\n  private static final long serialVersionUID = 1905122041950251207L;\n\n  private String name;\n  private Address address;\n}\n</pre>\n<h2>Exceptions</h2>\n<p>The alternative to making all members <code>serializable</code> or <code>transient</code> is to implement special methods which take on the\nresponsibility of properly serializing and de-serializing the object. This rule ignores classes which implement the following methods:</p>\n<pre>\n private void writeObject(java.io.ObjectOutputStream out)\n     throws IOException\n private void readObject(java.io.ObjectInputStream in)\n     throws IOException, ClassNotFoundException;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/594"">MITRE, CWE-594</a> - Saving Unserializable Objects to Disk </li>\n  <li> <a href=""https://docs.oracle.com/javase/6/docs/api/java/io/Serializable.html"">Oracle Java 6, Serializable</a> </li>\n  <li> <a href=""https://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html"">Oracle Java 7, Serializable</a> </li>\n</ul>'}]",[],['squid:S1948'],,,,
java:S1700,java,A field should not duplicate the name of its containing class,2023-06-14T03:41:52+0000,"<p>It’s confusing to have a class member with the same name (case differences aside) as its enclosing class. This is particularly so when you consider
the common practice of naming a class instance for the class itself.</p>
<p>Best practice dictates that any field or member with the same name as the enclosing class be renamed to be more descriptive of the particular
aspect of the class it represents or holds.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo {
  private String foo;

  public String getFoo() { }
}

Foo foo = new Foo();
foo.getFoo() // what does this return?
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Foo {
  private String name;

  public String getName() { }
}

//...

Foo foo = new Foo();
foo.getName()
</pre>
<h2>Exceptions</h2>
<p>When the type of the field is the containing class and that field is static, no issue is raised to allow singletons named like the type.</p>
<pre>
public class Foo {
  ...
  private static Foo foo;
  public Foo getInstance() {
    if(foo==null) {
      foo = new Foo();
    }
    return foo;
  }
  ...
}
</pre>","<p>It’s confusing to have a class member with the same name (case differences aside) as its enclosing class. This is particularly so when you consider
the common practice of naming a class instance for the class itself.</p>
<p>Best practice dictates that any field or member with the same name as the enclosing class be renamed to be more descriptive of the particular
aspect of the class it represents or holds.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo {
  private String foo;

  public String getFoo() { }
}

Foo foo = new Foo();
foo.getFoo() // what does this return?
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Foo {
  private String name;

  public String getName() { }
}

//...

Foo foo = new Foo();
foo.getName()
</pre>
<h2>Exceptions</h2>
<p>When the type of the field is the containing class and that field is static, no issue is raised to allow singletons named like the type.</p>
<pre>
public class Foo {
  ...
  private static Foo foo;
  public Foo getInstance() {
    if(foo==null) {
      foo = new Foo();
    }
    return foo;
  }
  ...
}
</pre>",MAJOR,READY,False,[],['brain-overload'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,10min,CONSTANT_ISSUE,10min,False,ALL,False,"[{'key': 'default', 'content': '<p>It’s confusing to have a class member with the same name (case differences aside) as its enclosing class. This is particularly so when you consider\nthe common practice of naming a class instance for the class itself.</p>\n<p>Best practice dictates that any field or member with the same name as the enclosing class be renamed to be more descriptive of the particular\naspect of the class it represents or holds.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n  private String foo;\n\n  public String getFoo() { }\n}\n\nFoo foo = new Foo();\nfoo.getFoo() // what does this return?\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n  private String name;\n\n  public String getName() { }\n}\n\n//...\n\nFoo foo = new Foo();\nfoo.getName()\n</pre>\n<h2>Exceptions</h2>\n<p>When the type of the field is the containing class and that field is static, no issue is raised to allow singletons named like the type.</p>\n<pre>\npublic class Foo {\n  ...\n  private static Foo foo;\n  public Foo getInstance() {\n    if(foo==null) {\n      foo = new Foo();\n    }\n    return foo;\n  }\n  ...\n}\n</pre>'}]",[],['squid:S1700'],,,,
java:S1942,java,Simple class names should be used,2023-06-14T03:41:52+0000,"<p>Java’s <code>import</code> mechanism allows the use of simple class names. Therefore, using a class' fully qualified name in a file that
<code>import</code>s the class is redundant and confusing.</p>
<h2>Noncompliant Code Example</h2>
<pre>
import java.util.List;
import java.sql.Timestamp;

//...

java.util.List&lt;String&gt; myList;  // Noncompliant
java.sql.Timestamp tStamp; // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
import java.util.List;
import java.sql.Timestamp;

//...

List&lt;String&gt; myList;
Timestamp tStamp;
</pre>","<p>Java’s <code>import</code> mechanism allows the use of simple class names. Therefore, using a class' fully qualified name in a file that
<code>import</code>s the class is redundant and confusing.</p>
<h2>Noncompliant Code Example</h2>
<pre>
import java.util.List;
import java.sql.Timestamp;

//...

java.util.List&lt;String&gt; myList;  // Noncompliant
java.sql.Timestamp tStamp; // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
import java.util.List;
import java.sql.Timestamp;

//...

List&lt;String&gt; myList;
Timestamp tStamp;
</pre>",MINOR,READY,False,[],"['confusing', 'redundant']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,2min,CONSTANT_ISSUE,2min,False,ALL,False,"[{'key': 'default', 'content': ""<p>Java’s <code>import</code> mechanism allows the use of simple class names. Therefore, using a class' fully qualified name in a file that\n<code>import</code>s the class is redundant and confusing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport java.util.List;\nimport java.sql.Timestamp;\n\n//...\n\njava.util.List&lt;String&gt; myList;  // Noncompliant\njava.sql.Timestamp tStamp; // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport java.util.List;\nimport java.sql.Timestamp;\n\n//...\n\nList&lt;String&gt; myList;\nTimestamp tStamp;\n</pre>""}]",[],['squid:S1942'],,,,
java:S1820,java,Classes should not have too many fields,2023-06-14T03:41:52+0000,"<p>A class that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain, and
having a lot of fields is an indication that a class has grown too large.</p>
<p>Above a specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well defined topics.</p>","<p>A class that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain, and
having a lot of fields is an indication that a class has grown too large.</p>
<p>Above a specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well defined topics.</p>",MAJOR,READY,False,[],['brain-overload'],java,Java,"[{'key': 'countNonpublicFields', 'htmlDesc': 'Whether or not to include non-public fields in the count', 'defaultValue': 'true', 'type': 'BOOLEAN'}, {'key': 'maximumFieldThreshold', 'htmlDesc': 'The maximum number of fields', 'defaultValue': '20', 'type': 'INTEGER'}]",CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,1h,CONSTANT_ISSUE,1h,False,MAIN,False,"[{'key': 'default', 'content': '<p>A class that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain, and\nhaving a lot of fields is an indication that a class has grown too large.</p>\n<p>Above a specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well defined topics.</p>'}]",[],['squid:S1820'],,,,
java:S1821,java,"""switch"" statements and expressions should not be nested",2023-06-14T03:41:52+0000,"<p>Nested <code>switch</code> structures are difficult to understand because you can easily confuse the cases of an inner <code>switch</code> as
belonging to an outer statement or expression. Therefore nested <code>switch</code> statements and expressions should be avoided.</p>
<p>Specifically, you should structure your code to avoid the need for nested <code>switch</code> statements or expressions, but if you cannot, then
consider moving the inner <code>switch</code> to another method.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void foo(int n, int m) {
  switch (n) {
    case 0:
      switch (m) {  // Noncompliant; nested switch
        // ...
      }
    case 1:
      // ...
    default:
      // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void foo(int n, int m) {
  switch (n) {
    case 0:
      bar(m);
    case 1:
      // ...
    default:
      // ...
  }
}

void bar(int m){
  switch(m) {
    // ...
  }
}
</pre>","<p>Nested <code>switch</code> structures are difficult to understand because you can easily confuse the cases of an inner <code>switch</code> as
belonging to an outer statement or expression. Therefore nested <code>switch</code> statements and expressions should be avoided.</p>
<p>Specifically, you should structure your code to avoid the need for nested <code>switch</code> statements or expressions, but if you cannot, then
consider moving the inner <code>switch</code> to another method.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void foo(int n, int m) {
  switch (n) {
    case 0:
      switch (m) {  // Noncompliant; nested switch
        // ...
      }
    case 1:
      // ...
    default:
      // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void foo(int n, int m) {
  switch (n) {
    case 0:
      bar(m);
    case 1:
      // ...
    default:
      // ...
  }
}

void bar(int m){
  switch(m) {
    // ...
  }
}
</pre>",CRITICAL,READY,False,[],['pitfall'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,10min,CONSTANT_ISSUE,10min,False,ALL,False,"[{'key': 'default', 'content': '<p>Nested <code>switch</code> structures are difficult to understand because you can easily confuse the cases of an inner <code>switch</code> as\nbelonging to an outer statement or expression. Therefore nested <code>switch</code> statements and expressions should be avoided.</p>\n<p>Specifically, you should structure your code to avoid the need for nested <code>switch</code> statements or expressions, but if you cannot, then\nconsider moving the inner <code>switch</code> to another method.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid foo(int n, int m) {\n  switch (n) {\n    case 0:\n      switch (m) {  // Noncompliant; nested switch\n        // ...\n      }\n    case 1:\n      // ...\n    default:\n      // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvoid foo(int n, int m) {\n  switch (n) {\n    case 0:\n      bar(m);\n    case 1:\n      // ...\n    default:\n      // ...\n  }\n}\n\nvoid bar(int m){\n  switch(m) {\n    // ...\n  }\n}\n</pre>'}]",[],['squid:S1821'],,,,
java:S1905,java,Redundant casts should not be used,2023-06-14T03:41:52+0000,"<p>Unnecessary casting expressions make the code harder to read and understand.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void example() {
  for (Foo obj : (List&lt;Foo&gt;) getFoos()) {  // Noncompliant; cast unnecessary because List&lt;Foo&gt; is what's returned
    //...
  }
}

public List&lt;Foo&gt; getFoos() {
  return this.foos;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void example() {
  for (Foo obj : getFoos()) {
    //...
  }
}

public List&lt;Foo&gt; getFoos() {
  return this.foos;
}
</pre>
<h2>Exceptions</h2>
<p>Casting may be required to distinguish the method to call in the case of overloading:</p>
<pre>
class A {}
class B extends A{}
class C {
  void fun(A a){}
  void fun(B b){}

  void foo() {
    B b = new B();
    fun(b);
    fun((A) b); //call the first method so cast is not redundant.
  }

}
</pre>","<p>Unnecessary casting expressions make the code harder to read and understand.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void example() {
  for (Foo obj : (List&lt;Foo&gt;) getFoos()) {  // Noncompliant; cast unnecessary because List&lt;Foo&gt; is what's returned
    //...
  }
}

public List&lt;Foo&gt; getFoos() {
  return this.foos;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void example() {
  for (Foo obj : getFoos()) {
    //...
  }
}

public List&lt;Foo&gt; getFoos() {
  return this.foos;
}
</pre>
<h2>Exceptions</h2>
<p>Casting may be required to distinguish the method to call in the case of overloading:</p>
<pre>
class A {}
class B extends A{}
class C {
  void fun(A a){}
  void fun(B b){}

  void foo() {
    B b = new B();
    fun(b);
    fun((A) b); //call the first method so cast is not redundant.
  }

}
</pre>",MINOR,READY,False,[],"['clumsy', 'redundant']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': ""<p>Unnecessary casting expressions make the code harder to read and understand.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void example() {\n  for (Foo obj : (List&lt;Foo&gt;) getFoos()) {  // Noncompliant; cast unnecessary because List&lt;Foo&gt; is what's returned\n    //...\n  }\n}\n\npublic List&lt;Foo&gt; getFoos() {\n  return this.foos;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void example() {\n  for (Foo obj : getFoos()) {\n    //...\n  }\n}\n\npublic List&lt;Foo&gt; getFoos() {\n  return this.foos;\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Casting may be required to distinguish the method to call in the case of overloading:</p>\n<pre>\nclass A {}\nclass B extends A{}\nclass C {\n  void fun(A a){}\n  void fun(B b){}\n\n  void foo() {\n    B b = new B();\n    fun(b);\n    fun((A) b); //call the first method so cast is not redundant.\n  }\n\n}\n</pre>""}]",[],['squid:S1905'],,,,
java:S1939,java,Extensions and implementations should not be redundant,2023-06-14T03:41:52+0000,"<p>All classes extend <code>Object</code> implicitly. Doing so explicitly is redundant.</p>
<p>Further, declaring the implementation of an interface <em>and</em> one if its parents is also redundant. If you implement the interface, you also
implicitly implement its parents and there’s no need to do so explicitly.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public interface MyFace {
  // ...
}

public interface MyOtherFace extends MyFace {
  // ...
}

public class Foo
    extends Object // Noncompliant
    implements MyFace, MyOtherFace {  // Noncompliant
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public interface MyFace {
  // ...
}

public interface MyOtherFace extends MyFace {
  // ...
}

public class Foo implements MyOtherFace {
  //...
}
</pre>","<p>All classes extend <code>Object</code> implicitly. Doing so explicitly is redundant.</p>
<p>Further, declaring the implementation of an interface <em>and</em> one if its parents is also redundant. If you implement the interface, you also
implicitly implement its parents and there’s no need to do so explicitly.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public interface MyFace {
  // ...
}

public interface MyOtherFace extends MyFace {
  // ...
}

public class Foo
    extends Object // Noncompliant
    implements MyFace, MyOtherFace {  // Noncompliant
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public interface MyFace {
  // ...
}

public interface MyOtherFace extends MyFace {
  // ...
}

public class Foo implements MyOtherFace {
  //...
}
</pre>",MINOR,READY,False,[],['clumsy'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,1min,CONSTANT_ISSUE,1min,False,ALL,False,"[{'key': 'default', 'content': '<p>All classes extend <code>Object</code> implicitly. Doing so explicitly is redundant.</p>\n<p>Further, declaring the implementation of an interface <em>and</em> one if its parents is also redundant. If you implement the interface, you also\nimplicitly implement its parents and there’s no need to do so explicitly.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface MyFace {\n  // ...\n}\n\npublic interface MyOtherFace extends MyFace {\n  // ...\n}\n\npublic class Foo\n    extends Object // Noncompliant\n    implements MyFace, MyOtherFace {  // Noncompliant\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic interface MyFace {\n  // ...\n}\n\npublic interface MyOtherFace extends MyFace {\n  // ...\n}\n\npublic class Foo implements MyOtherFace {\n  //...\n}\n</pre>'}]",[],['squid:S1939'],,,,
java:S1941,java,Variables should not be declared before they are relevant,2023-06-14T03:41:52+0000,"<p>For the sake of clarity, variables should be declared as close to where they’re used as possible. This is particularly true when considering
methods that contain early returns and the potential to throw exceptions. In these cases, it is not only pointless, but also confusing to declare a
variable that may never be used because conditions for an early return are met first.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public boolean isConditionMet(int a, int b) {
  int difference = a - b;
  MyClass foo = new MyClass(a);  // Noncompliant; not used before early return

  if (difference &lt; 0) {
    return false;
  }

  // ...

  if (foo.doTheThing()) {
    return true;
  }
  return false;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public boolean isConditionMet(int a, int b) {
  int difference = a - b;

  if (difference &lt; 0) {
    return false;
  }

  // ...

  MyClass foo = new MyClass(a);
  if (foo.doTheThing()) {
    return true;
  }
  return false;
}
</pre>","<p>For the sake of clarity, variables should be declared as close to where they’re used as possible. This is particularly true when considering
methods that contain early returns and the potential to throw exceptions. In these cases, it is not only pointless, but also confusing to declare a
variable that may never be used because conditions for an early return are met first.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public boolean isConditionMet(int a, int b) {
  int difference = a - b;
  MyClass foo = new MyClass(a);  // Noncompliant; not used before early return

  if (difference &lt; 0) {
    return false;
  }

  // ...

  if (foo.doTheThing()) {
    return true;
  }
  return false;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public boolean isConditionMet(int a, int b) {
  int difference = a - b;

  if (difference &lt; 0) {
    return false;
  }

  // ...

  MyClass foo = new MyClass(a);
  if (foo.doTheThing()) {
    return true;
  }
  return false;
}
</pre>",MINOR,READY,False,[],['brain-overload'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>For the sake of clarity, variables should be declared as close to where they’re used as possible. This is particularly true when considering\nmethods that contain early returns and the potential to throw exceptions. In these cases, it is not only pointless, but also confusing to declare a\nvariable that may never be used because conditions for an early return are met first.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boolean isConditionMet(int a, int b) {\n  int difference = a - b;\n  MyClass foo = new MyClass(a);  // Noncompliant; not used before early return\n\n  if (difference &lt; 0) {\n    return false;\n  }\n\n  // ...\n\n  if (foo.doTheThing()) {\n    return true;\n  }\n  return false;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean isConditionMet(int a, int b) {\n  int difference = a - b;\n\n  if (difference &lt; 0) {\n    return false;\n  }\n\n  // ...\n\n  MyClass foo = new MyClass(a);\n  if (foo.doTheThing()) {\n    return true;\n  }\n  return false;\n}\n</pre>'}]",[],['squid:S1941'],,,,
java:S6035,java,Single-character alternations in regular expressions should be replaced with character classes,2023-06-14T03:41:52+0000,"<p>When an alternation contains multiple alternatives that consist of a single character, it can be rewritten as a character class. This should be
preferred because it is more efficient and can even help prevent stack overflows when used inside a repetition (see rule <a href='/coding_rules#rule_key=java%3AS5998'>S5998</a>).</p>
<h2>Noncompliant Code Example</h2>
<pre>
Pattern.compile(""a|b|c""); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
Pattern.compile(""[abc]"");
// or
Pattern.compile(""[a-c]"");
</pre>","<p>When an alternation contains multiple alternatives that consist of a single character, it can be rewritten as a character class. This should be
preferred because it is more efficient and can even help prevent stack overflows when used inside a repetition (see rule <a href='/coding_rules#rule_key=java%3AS5998'>S5998</a>).</p>
<h2>Noncompliant Code Example</h2>
<pre>
Pattern.compile(""a|b|c""); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
Pattern.compile(""[abc]"");
// or
Pattern.compile(""[a-c]"");
</pre>",MAJOR,READY,False,[],['regex'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>When an alternation contains multiple alternatives that consist of a single character, it can be rewritten as a character class. This should be\npreferred because it is more efficient and can even help prevent stack overflows when used inside a repetition (see rule <a href=\'/coding_rules#rule_key=java%3AS5998\'>S5998</a>).</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nPattern.compile(""a|b|c""); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nPattern.compile(""[abc]"");\n// or\nPattern.compile(""[a-c]"");\n</pre>'}]",[],['squid:S6035'],,,,
java:S6126,java,String multiline concatenation should be replaced with Text Blocks,2023-06-14T03:41:52+0000,"<p>In Java 15 Text Blocks are now official and can be used. The most common pattern for multiline strings in Java &lt; 15 was to write String
concatenation. Now it’s possible to do it in a more natural way using Text Blocks.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String textBlock =
               ""&lt;html&gt;\n"" +
               ""    &lt;body&gt;\n"" +
               ""        &lt;tag&gt;\n"" +
               ""        &lt;/tag&gt;\n"" +
               ""    &lt;/body&gt;\n"" +
               ""&lt;/html&gt;"";
</pre>
<h2>Compliant Solution</h2>
<pre>
String textBlock = """"""
        &lt;html&gt;
            &lt;body&gt;
                &lt;tag&gt;
                &lt;/tag&gt;
            &lt;/body&gt;
        &lt;/html&gt;"""""";
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://openjdk.java.net/jeps/378"">JEP 378: Text Blocks</a> </li>
  <li> <a href=""https://cr.openjdk.java.net/~jlaskey/Strings/TextBlocksGuide_v9.html"">Programmer’s Guide To Text Blocks</a>, by Jim Laskey and Stuart
  Marks </li>
</ul>","<p>In Java 15 Text Blocks are now official and can be used. The most common pattern for multiline strings in Java &lt; 15 was to write String
concatenation. Now it’s possible to do it in a more natural way using Text Blocks.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String textBlock =
               ""&lt;html&gt;\n"" +
               ""    &lt;body&gt;\n"" +
               ""        &lt;tag&gt;\n"" +
               ""        &lt;/tag&gt;\n"" +
               ""    &lt;/body&gt;\n"" +
               ""&lt;/html&gt;"";
</pre>
<h2>Compliant Solution</h2>
<pre>
String textBlock = """"""
        &lt;html&gt;
            &lt;body&gt;
                &lt;tag&gt;
                &lt;/tag&gt;
            &lt;/body&gt;
        &lt;/html&gt;"""""";
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://openjdk.java.net/jeps/378"">JEP 378: Text Blocks</a> </li>
  <li> <a href=""https://cr.openjdk.java.net/~jlaskey/Strings/TextBlocksGuide_v9.html"">Programmer’s Guide To Text Blocks</a>, by Jim Laskey and Stuart
  Marks </li>
</ul>",MAJOR,READY,False,[],['java15'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,2min,CONSTANT_ISSUE,2min,False,ALL,False,"[{'key': 'default', 'content': '<p>In Java 15 Text Blocks are now official and can be used. The most common pattern for multiline strings in Java &lt; 15 was to write String\nconcatenation. Now it’s possible to do it in a more natural way using Text Blocks.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString textBlock =\n               ""&lt;html&gt;\\n"" +\n               ""    &lt;body&gt;\\n"" +\n               ""        &lt;tag&gt;\\n"" +\n               ""        &lt;/tag&gt;\\n"" +\n               ""    &lt;/body&gt;\\n"" +\n               ""&lt;/html&gt;"";\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString textBlock = """"""\n        &lt;html&gt;\n            &lt;body&gt;\n                &lt;tag&gt;\n                &lt;/tag&gt;\n            &lt;/body&gt;\n        &lt;/html&gt;"""""";\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://openjdk.java.net/jeps/378"">JEP 378: Text Blocks</a> </li>\n  <li> <a href=""https://cr.openjdk.java.net/~jlaskey/Strings/TextBlocksGuide_v9.html"">Programmer’s Guide To Text Blocks</a>, by Jim Laskey and Stuart\n  Marks </li>\n</ul>'}]",[],['squid:S6126'],,,,
java:S6246,java,Lambdas should not invoke other lambdas synchronously,2023-06-14T03:41:52+0000,"<p>Invoking other Lambdas synchronously from a Lambda is a scalability anti-pattern. Lambdas have a maximum execution time before they timeout (15
minutes as of May 2021). Having to wait for another Lambda to finish its execution could lead to a timeout.</p>
<p>A better solution is to generate&nbsp;events that can be consumed asynchronously by other Lambdas.</p>
<h2>Noncompliant Code Example</h2>
<p>With AWS SDKv1</p>
<pre>
InvokeRequest invokeRequest = new InvokeRequest()
         .withFunctionName(""myFunction"");

AWSLambda awsLambda = AWSLambdaClientBuilder.standard()
		.withCredentials(new ProfileCredentialsProvider())
		.withRegion(Regions.US_WEST_2).build();

awsLambda.invoke(invokeRequest); // Noncompliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://docs.aws.amazon.com/lambda/latest/dg/best-practices.html"">Best practices for working with AWS Lambda functions</a> </li>
</ul>","<p>Invoking other Lambdas synchronously from a Lambda is a scalability anti-pattern. Lambdas have a maximum execution time before they timeout (15
minutes as of May 2021). Having to wait for another Lambda to finish its execution could lead to a timeout.</p>
<p>A better solution is to generate&nbsp;events that can be consumed asynchronously by other Lambdas.</p>
<h2>Noncompliant Code Example</h2>
<p>With AWS SDKv1</p>
<pre>
InvokeRequest invokeRequest = new InvokeRequest()
         .withFunctionName(""myFunction"");

AWSLambda awsLambda = AWSLambdaClientBuilder.standard()
		.withCredentials(new ProfileCredentialsProvider())
		.withRegion(Regions.US_WEST_2).build();

awsLambda.invoke(invokeRequest); // Noncompliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://docs.aws.amazon.com/lambda/latest/dg/best-practices.html"">Best practices for working with AWS Lambda functions</a> </li>
</ul>",MINOR,READY,False,[],['aws'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,3h,CONSTANT_ISSUE,3h,False,ALL,False,"[{'key': 'default', 'content': '<p>Invoking other Lambdas synchronously from a Lambda is a scalability anti-pattern. Lambdas have a maximum execution time before they timeout (15\nminutes as of May 2021). Having to wait for another Lambda to finish its execution could lead to a timeout.</p>\n<p>A better solution is to generate&nbsp;events that can be consumed asynchronously by other Lambdas.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With AWS SDKv1</p>\n<pre>\nInvokeRequest invokeRequest = new InvokeRequest()\n         .withFunctionName(""myFunction"");\n\nAWSLambda awsLambda = AWSLambdaClientBuilder.standard()\n\t\t.withCredentials(new ProfileCredentialsProvider())\n\t\t.withRegion(Regions.US_WEST_2).build();\n\nawsLambda.invoke(invokeRequest); // Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://docs.aws.amazon.com/lambda/latest/dg/best-practices.html"">Best practices for working with AWS Lambda functions</a> </li>\n</ul>'}]",[],['squid:S6246'],,,,
java:S6395,java,Non-capturing groups without quantifier should not be used,2023-06-14T03:41:52+0000,"<p>Sub-patterns can be wrapped by parentheses to build a group. This enables to restrict alternations, back reference the group or apply quantifier to
the sub-pattern.</p>
<p>If this group should not be part of the match result or if no reference to this group is required, a non-capturing group can be created by adding
<code>?:</code> behind the opening parenthesis.</p>
<p>However, if this non-capturing group does not have a quantifier, or does not wrap an alternation, then imaging this group is redundant.</p>
<h2>Noncompliant Code Example</h2>
<pre>
""(?:number)\\d{2}""
</pre>
<h2>Compliant Solution</h2>
<pre>
""number\\d{2}""      	// it is anyway required
""(?:number)?\\d{2}""  	// it is in fact optional
</pre>
<h2>Exceptions</h2>
<p>This rule does not report an issue if the non-capturing group is an alternation.</p>
<pre>
""(?:number|string)""
</pre>","<p>Sub-patterns can be wrapped by parentheses to build a group. This enables to restrict alternations, back reference the group or apply quantifier to
the sub-pattern.</p>
<p>If this group should not be part of the match result or if no reference to this group is required, a non-capturing group can be created by adding
<code>?:</code> behind the opening parenthesis.</p>
<p>However, if this non-capturing group does not have a quantifier, or does not wrap an alternation, then imaging this group is redundant.</p>
<h2>Noncompliant Code Example</h2>
<pre>
""(?:number)\\d{2}""
</pre>
<h2>Compliant Solution</h2>
<pre>
""number\\d{2}""      	// it is anyway required
""(?:number)?\\d{2}""  	// it is in fact optional
</pre>
<h2>Exceptions</h2>
<p>This rule does not report an issue if the non-capturing group is an alternation.</p>
<pre>
""(?:number|string)""
</pre>",MAJOR,READY,False,[],['regex'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>Sub-patterns can be wrapped by parentheses to build a group. This enables to restrict alternations, back reference the group or apply quantifier to\nthe sub-pattern.</p>\n<p>If this group should not be part of the match result or if no reference to this group is required, a non-capturing group can be created by adding\n<code>?:</code> behind the opening parenthesis.</p>\n<p>However, if this non-capturing group does not have a quantifier, or does not wrap an alternation, then imaging this group is redundant.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n""(?:number)\\\\d{2}""\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n""number\\\\d{2}""      \t// it is anyway required\n""(?:number)?\\\\d{2}""  \t// it is in fact optional\n</pre>\n<h2>Exceptions</h2>\n<p>This rule does not report an issue if the non-capturing group is an alternation.</p>\n<pre>\n""(?:number|string)""\n</pre>'}]",[],['squid:S6395'],,,,
java:S6396,java,Superfluous curly brace quantifiers should be avoided,2023-06-14T03:41:52+0000,"<p>Curly brace quantifiers in regular expressions can be used to have a more fine-grained control over how many times the character or the
sub-expression preceeding them should occur. They can be used to match an expression exactly n times with <code>{n}</code>, between n and m times with
<code>{n,m}</code>, or at least n times with <code>{n,}</code>. In some cases, using such a quantifier is superfluous for the semantic of the regular
expression, and it can be removed to improve readability. This rule raises an issue when one of the following quantifiers is encountered:</p>
<ul>
  <li> <code>{1,1}</code> or <code>{1}</code>: they match the expression exactly once. The same behavior can be achieved without the quantifier. </li>
  <li> <code>{0,0}</code> or <code>{0}</code>: they match the expression zero times. The same behavior can be achieved by removing the expression.
  </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
""ab{1,1}c""
""ab{1}c""
""ab{0,0}c""
""ab{0}c""
</pre>
<h2>Compliant Solution</h2>
<pre>
""abc""
""ac""
</pre>","<p>Curly brace quantifiers in regular expressions can be used to have a more fine-grained control over how many times the character or the
sub-expression preceeding them should occur. They can be used to match an expression exactly n times with <code>{n}</code>, between n and m times with
<code>{n,m}</code>, or at least n times with <code>{n,}</code>. In some cases, using such a quantifier is superfluous for the semantic of the regular
expression, and it can be removed to improve readability. This rule raises an issue when one of the following quantifiers is encountered:</p>
<ul>
  <li> <code>{1,1}</code> or <code>{1}</code>: they match the expression exactly once. The same behavior can be achieved without the quantifier. </li>
  <li> <code>{0,0}</code> or <code>{0}</code>: they match the expression zero times. The same behavior can be achieved by removing the expression.
  </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
""ab{1,1}c""
""ab{1}c""
""ab{0,0}c""
""ab{0}c""
</pre>
<h2>Compliant Solution</h2>
<pre>
""abc""
""ac""
</pre>",MAJOR,READY,False,[],['regex'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>Curly brace quantifiers in regular expressions can be used to have a more fine-grained control over how many times the character or the\nsub-expression preceeding them should occur. They can be used to match an expression exactly n times with <code>{n}</code>, between n and m times with\n<code>{n,m}</code>, or at least n times with <code>{n,}</code>. In some cases, using such a quantifier is superfluous for the semantic of the regular\nexpression, and it can be removed to improve readability. This rule raises an issue when one of the following quantifiers is encountered:</p>\n<ul>\n  <li> <code>{1,1}</code> or <code>{1}</code>: they match the expression exactly once. The same behavior can be achieved without the quantifier. </li>\n  <li> <code>{0,0}</code> or <code>{0}</code>: they match the expression zero times. The same behavior can be achieved by removing the expression.\n  </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\n""ab{1,1}c""\n""ab{1}c""\n""ab{0,0}c""\n""ab{0}c""\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n""abc""\n""ac""\n</pre>'}]",[],['squid:S6396'],,,,
java:S6397,java,Character classes in regular expressions should not contain only one character,2023-06-14T03:41:52+0000,"<p>Character classes in regular expressions are a convenient way to match one of several possible characters by listing the allowed characters or
ranges of characters. If a character class contains only one character, the effect is the same as just writing the character without a character
class.</p>
<p>Thus, having only one character in a character class is usually a simple oversight that remained after removing other characters of the class.</p>
<h2>Noncompliant Code Example</h2>
<pre>
""a[b]c""
""[\\^]""
</pre>
<h2>Compliant Solution</h2>
<pre>
""abc""
""\\^""
""a[*]c"" // Compliant, see Exceptions
</pre>
<h2>Exceptions</h2>
<p>This rule does not raise when the character inside the class is a metacharacter. This notation is sometimes used to avoid escaping (e.g.,
<code>[.]{3}</code> to match three dots).</p>","<p>Character classes in regular expressions are a convenient way to match one of several possible characters by listing the allowed characters or
ranges of characters. If a character class contains only one character, the effect is the same as just writing the character without a character
class.</p>
<p>Thus, having only one character in a character class is usually a simple oversight that remained after removing other characters of the class.</p>
<h2>Noncompliant Code Example</h2>
<pre>
""a[b]c""
""[\\^]""
</pre>
<h2>Compliant Solution</h2>
<pre>
""abc""
""\\^""
""a[*]c"" // Compliant, see Exceptions
</pre>
<h2>Exceptions</h2>
<p>This rule does not raise when the character inside the class is a metacharacter. This notation is sometimes used to avoid escaping (e.g.,
<code>[.]{3}</code> to match three dots).</p>",MAJOR,READY,False,[],['regex'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>Character classes in regular expressions are a convenient way to match one of several possible characters by listing the allowed characters or\nranges of characters. If a character class contains only one character, the effect is the same as just writing the character without a character\nclass.</p>\n<p>Thus, having only one character in a character class is usually a simple oversight that remained after removing other characters of the class.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n""a[b]c""\n""[\\\\^]""\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n""abc""\n""\\\\^""\n""a[*]c"" // Compliant, see Exceptions\n</pre>\n<h2>Exceptions</h2>\n<p>This rule does not raise when the character inside the class is a metacharacter. This notation is sometimes used to avoid escaping (e.g.,\n<code>[.]{3}</code> to match three dots).</p>'}]",[],['squid:S6397'],,,,
java:S4065,java,"""ThreadLocal.withInitial"" should be preferred",2023-06-14T03:41:52+0000,"<p>Java 8 introduced <code>ThreadLocal.withInitial</code> which is a simpler alternative to creating an anonymous inner class to initialise a
<code>ThreadLocal</code> instance.</p>
<p>This rule raises an issue when a <code>ThreadLocal</code> anonymous inner class can be replaced by a call to
<code>ThreadLocal.withInitial</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
ThreadLocal&lt;List&lt;String&gt;&gt; myThreadLocal =
    new ThreadLocal&lt;List&lt;String&gt;&gt;() { // Noncompliant
        @Override
        protected List&lt;String&gt; initialValue() {
            return new ArrayList&lt;String&gt;();
        }
    };
</pre>
<h2>Compliant Solution</h2>
<pre>
ThreadLocal&lt;List&lt;String&gt;&gt; myThreadLocal = ThreadLocal.withInitial(ArrayList::new);
</pre>","<p>Java 8 introduced <code>ThreadLocal.withInitial</code> which is a simpler alternative to creating an anonymous inner class to initialise a
<code>ThreadLocal</code> instance.</p>
<p>This rule raises an issue when a <code>ThreadLocal</code> anonymous inner class can be replaced by a call to
<code>ThreadLocal.withInitial</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
ThreadLocal&lt;List&lt;String&gt;&gt; myThreadLocal =
    new ThreadLocal&lt;List&lt;String&gt;&gt;() { // Noncompliant
        @Override
        protected List&lt;String&gt; initialValue() {
            return new ArrayList&lt;String&gt;();
        }
    };
</pre>
<h2>Compliant Solution</h2>
<pre>
ThreadLocal&lt;List&lt;String&gt;&gt; myThreadLocal = ThreadLocal.withInitial(ArrayList::new);
</pre>",MINOR,READY,False,[],['java8'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>Java 8 introduced <code>ThreadLocal.withInitial</code> which is a simpler alternative to creating an anonymous inner class to initialise a\n<code>ThreadLocal</code> instance.</p>\n<p>This rule raises an issue when a <code>ThreadLocal</code> anonymous inner class can be replaced by a call to\n<code>ThreadLocal.withInitial</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nThreadLocal&lt;List&lt;String&gt;&gt; myThreadLocal =\n    new ThreadLocal&lt;List&lt;String&gt;&gt;() { // Noncompliant\n        @Override\n        protected List&lt;String&gt; initialValue() {\n            return new ArrayList&lt;String&gt;();\n        }\n    };\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nThreadLocal&lt;List&lt;String&gt;&gt; myThreadLocal = ThreadLocal.withInitial(ArrayList::new);\n</pre>'}]",[],['squid:S4065'],,,,
java:S6241,java,"Region should be set explicitly when creating a new ""AwsClient""",2023-06-14T03:41:52+0000,"<p>If the region is not specified when creating a new AwsClient with an <a
href=""https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/awscore/client/builder/AwsClientBuilder.html"">AwsClientBuilder</a>, the AWS SDK
will execute some logic to identify the endpoint automatically.</p>
<p>While it will probably identify the correct one, this extra logic will slow down startup time, already known to be a hotspot.</p>
<p>You should therefore always define the logic to set the region yourself. This is typically done by retrieving the region from the Lambda provided
AWS_REGION environment variable.</p>
<p>This will make the code more explicit and spare initialization time.</p>
<p>This rule reports an issue when the region is not set when creating an AwsClient.</p>
<h2>Noncompliant Code Example</h2>
<pre>
S3Client.builder()
    .credentialsProvider(EnvironmentVariableCredentialsProvider.create())
    .build();
</pre>
<h2>Compliant Solution</h2>
<pre>
S3Client.builder()
    .region(Region.of(System.getenv(SdkSystemSetting.AWS_REGION.environmentVariable()))
    .credentialsProvider(EnvironmentVariableCredentialsProvider.create())
    .build();
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://aws.amazon.com/fr/blogs/developer/tuning-the-aws-java-sdk-2-x-to-reduce-startup-time/"">Tuning the AWS Java SDK 2.x to reduce
  startup time</a> </li>
  <li> <a href=""https://docs.aws.amazon.com/sdk-for-java/latest/developer-guide/lambda-optimize-starttime.html"">Optimizing cold start performance for
  AWS Lambda</a> </li>
  <li> <a href=""https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html"">Environment variable configuration</a> </li>
  <li> <a
  href=""https://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/java-dg-region-selection.html#automatically-determine-the-aws-region-from-the-environment"">Automatically Determine the AWS Region</a> </li>
</ul>","<p>If the region is not specified when creating a new AwsClient with an <a
href=""https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/awscore/client/builder/AwsClientBuilder.html"">AwsClientBuilder</a>, the AWS SDK
will execute some logic to identify the endpoint automatically.</p>
<p>While it will probably identify the correct one, this extra logic will slow down startup time, already known to be a hotspot.</p>
<p>You should therefore always define the logic to set the region yourself. This is typically done by retrieving the region from the Lambda provided
AWS_REGION environment variable.</p>
<p>This will make the code more explicit and spare initialization time.</p>
<p>This rule reports an issue when the region is not set when creating an AwsClient.</p>
<h2>Noncompliant Code Example</h2>
<pre>
S3Client.builder()
    .credentialsProvider(EnvironmentVariableCredentialsProvider.create())
    .build();
</pre>
<h2>Compliant Solution</h2>
<pre>
S3Client.builder()
    .region(Region.of(System.getenv(SdkSystemSetting.AWS_REGION.environmentVariable()))
    .credentialsProvider(EnvironmentVariableCredentialsProvider.create())
    .build();
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://aws.amazon.com/fr/blogs/developer/tuning-the-aws-java-sdk-2-x-to-reduce-startup-time/"">Tuning the AWS Java SDK 2.x to reduce
  startup time</a> </li>
  <li> <a href=""https://docs.aws.amazon.com/sdk-for-java/latest/developer-guide/lambda-optimize-starttime.html"">Optimizing cold start performance for
  AWS Lambda</a> </li>
  <li> <a href=""https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html"">Environment variable configuration</a> </li>
  <li> <a
  href=""https://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/java-dg-region-selection.html#automatically-determine-the-aws-region-from-the-environment"">Automatically Determine the AWS Region</a> </li>
</ul>",MAJOR,READY,False,[],"['aws', 'startup-time']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,20min,CONSTANT_ISSUE,20min,False,MAIN,False,"[{'key': 'default', 'content': '<p>If the region is not specified when creating a new AwsClient with an <a\nhref=""https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/awscore/client/builder/AwsClientBuilder.html"">AwsClientBuilder</a>, the AWS SDK\nwill execute some logic to identify the endpoint automatically.</p>\n<p>While it will probably identify the correct one, this extra logic will slow down startup time, already known to be a hotspot.</p>\n<p>You should therefore always define the logic to set the region yourself. This is typically done by retrieving the region from the Lambda provided\nAWS_REGION environment variable.</p>\n<p>This will make the code more explicit and spare initialization time.</p>\n<p>This rule reports an issue when the region is not set when creating an AwsClient.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nS3Client.builder()\n    .credentialsProvider(EnvironmentVariableCredentialsProvider.create())\n    .build();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nS3Client.builder()\n    .region(Region.of(System.getenv(SdkSystemSetting.AWS_REGION.environmentVariable()))\n    .credentialsProvider(EnvironmentVariableCredentialsProvider.create())\n    .build();\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://aws.amazon.com/fr/blogs/developer/tuning-the-aws-java-sdk-2-x-to-reduce-startup-time/"">Tuning the AWS Java SDK 2.x to reduce\n  startup time</a> </li>\n  <li> <a href=""https://docs.aws.amazon.com/sdk-for-java/latest/developer-guide/lambda-optimize-starttime.html"">Optimizing cold start performance for\n  AWS Lambda</a> </li>\n  <li> <a href=""https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html"">Environment variable configuration</a> </li>\n  <li> <a\n  href=""https://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/java-dg-region-selection.html#automatically-determine-the-aws-region-from-the-environment"">Automatically Determine the AWS Region</a> </li>\n</ul>'}]",[],['squid:S6241'],,,,
java:S6242,java,"Credentials Provider should be set explicitly when creating a new ""AwsClient""",2023-06-14T03:41:52+0000,"<p>If the credentials provider is not specified when creating a new AwsClient with an <a
href=""https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/awscore/client/builder/AwsClientBuilder.html"">AwsClientBuilder</a>, the AWS SDK
will execute some logic to identify it automatically.</p>
<p>While it will probably identify the correct one, this extra logic will slow down startup time, already known to be a hotspot.</p>
<p>You should therefore always define the logic to set the credentials provider yourself. This is typically done by retrieving it from the Lambda
provided environment variable.</p>
<p>This will make the code more explicit and spare initialization time.</p>
<p>This rule reports an issue when the credentials provider is not set when creating an AwsClient.</p>
<h2>Noncompliant Code Example</h2>
<pre>
S3Client.builder()
    .region(Region.of(System.getenv(SdkSystemSetting.AWS_REGION.environmentVariable())))
    .build();
</pre>
<h2>Compliant Solution</h2>
<pre>
S3Client.builder()
    .region(Region.of(System.getenv(SdkSystemSetting.AWS_REGION.environmentVariable()))
    .credentialsProvider(EnvironmentVariableCredentialsProvider.create())
    .build();
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://aws.amazon.com/fr/blogs/developer/tuning-the-aws-java-sdk-2-x-to-reduce-startup-time/"">Tuning the AWS Java SDK 2.x to reduce
  startup time</a> </li>
  <li> <a href=""https://docs.aws.amazon.com/sdk-for-java/latest/developer-guide/lambda-optimize-starttime.html"">Optimizing cold start performance for
  AWS Lambda</a> </li>
  <li> <a href=""https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html"">Environment variable configuration</a> </li>
  <li> <a href=""https://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/credentials.html"">Default Credential Provider Chain</a> </li>
</ul>","<p>If the credentials provider is not specified when creating a new AwsClient with an <a
href=""https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/awscore/client/builder/AwsClientBuilder.html"">AwsClientBuilder</a>, the AWS SDK
will execute some logic to identify it automatically.</p>
<p>While it will probably identify the correct one, this extra logic will slow down startup time, already known to be a hotspot.</p>
<p>You should therefore always define the logic to set the credentials provider yourself. This is typically done by retrieving it from the Lambda
provided environment variable.</p>
<p>This will make the code more explicit and spare initialization time.</p>
<p>This rule reports an issue when the credentials provider is not set when creating an AwsClient.</p>
<h2>Noncompliant Code Example</h2>
<pre>
S3Client.builder()
    .region(Region.of(System.getenv(SdkSystemSetting.AWS_REGION.environmentVariable())))
    .build();
</pre>
<h2>Compliant Solution</h2>
<pre>
S3Client.builder()
    .region(Region.of(System.getenv(SdkSystemSetting.AWS_REGION.environmentVariable()))
    .credentialsProvider(EnvironmentVariableCredentialsProvider.create())
    .build();
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://aws.amazon.com/fr/blogs/developer/tuning-the-aws-java-sdk-2-x-to-reduce-startup-time/"">Tuning the AWS Java SDK 2.x to reduce
  startup time</a> </li>
  <li> <a href=""https://docs.aws.amazon.com/sdk-for-java/latest/developer-guide/lambda-optimize-starttime.html"">Optimizing cold start performance for
  AWS Lambda</a> </li>
  <li> <a href=""https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html"">Environment variable configuration</a> </li>
  <li> <a href=""https://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/credentials.html"">Default Credential Provider Chain</a> </li>
</ul>",MAJOR,READY,False,[],"['aws', 'startup-time']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,20min,CONSTANT_ISSUE,20min,False,MAIN,False,"[{'key': 'default', 'content': '<p>If the credentials provider is not specified when creating a new AwsClient with an <a\nhref=""https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/awscore/client/builder/AwsClientBuilder.html"">AwsClientBuilder</a>, the AWS SDK\nwill execute some logic to identify it automatically.</p>\n<p>While it will probably identify the correct one, this extra logic will slow down startup time, already known to be a hotspot.</p>\n<p>You should therefore always define the logic to set the credentials provider yourself. This is typically done by retrieving it from the Lambda\nprovided environment variable.</p>\n<p>This will make the code more explicit and spare initialization time.</p>\n<p>This rule reports an issue when the credentials provider is not set when creating an AwsClient.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nS3Client.builder()\n    .region(Region.of(System.getenv(SdkSystemSetting.AWS_REGION.environmentVariable())))\n    .build();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nS3Client.builder()\n    .region(Region.of(System.getenv(SdkSystemSetting.AWS_REGION.environmentVariable()))\n    .credentialsProvider(EnvironmentVariableCredentialsProvider.create())\n    .build();\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://aws.amazon.com/fr/blogs/developer/tuning-the-aws-java-sdk-2-x-to-reduce-startup-time/"">Tuning the AWS Java SDK 2.x to reduce\n  startup time</a> </li>\n  <li> <a href=""https://docs.aws.amazon.com/sdk-for-java/latest/developer-guide/lambda-optimize-starttime.html"">Optimizing cold start performance for\n  AWS Lambda</a> </li>\n  <li> <a href=""https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html"">Environment variable configuration</a> </li>\n  <li> <a href=""https://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/credentials.html"">Default Credential Provider Chain</a> </li>\n</ul>'}]",[],['squid:S6242'],,,,
java:S6019,java,Reluctant quantifiers in regular expressions should be followed by an expression that can't match the empty string,2023-06-14T03:41:52+0000,"<p>When a reluctant quantifier (such as <code>*?</code> or <code>+?</code>) is followed by a pattern that can match the empty string or directly by
the end of the regex, it will always match the empty string when used with methods that find partial matches (such as <code>find</code>,
<code>replaceAll</code>, <code>split</code> etc.).</p>
<p>Similarly, when used with methods that find full matches, a reluctant quantifier that’s followed directly by the end of the regex (or a pattern
that always matches the empty string, such as <code>()</code>) behaves indistinguishably from a greedy quantifier while being less efficient.</p>
<p>This is likely a sign that the regex does not work as intended.</p>
<h2>Noncompliant Code Example</h2>
<pre>
""start123endstart456"".replaceAll(""start\\w*?(end)?"", ""x""); // Noncompliant. In contrast to what one would expect, the result is not ""xx"".
str.matches(""\\d*?""); // Noncompliant. Matches the same as ""\d*"", but will backtrack in every position.
</pre>
<h2>Compliant Solution</h2>
<pre>
""start123endstart456"".replaceAll(""start\\w*?(end|$)"", ""x""); // Result is ""xx"".
str.matches(""\\d*"");
</pre>","<p>When a reluctant quantifier (such as <code>*?</code> or <code>+?</code>) is followed by a pattern that can match the empty string or directly by
the end of the regex, it will always match the empty string when used with methods that find partial matches (such as <code>find</code>,
<code>replaceAll</code>, <code>split</code> etc.).</p>
<p>Similarly, when used with methods that find full matches, a reluctant quantifier that’s followed directly by the end of the regex (or a pattern
that always matches the empty string, such as <code>()</code>) behaves indistinguishably from a greedy quantifier while being less efficient.</p>
<p>This is likely a sign that the regex does not work as intended.</p>
<h2>Noncompliant Code Example</h2>
<pre>
""start123endstart456"".replaceAll(""start\\w*?(end)?"", ""x""); // Noncompliant. In contrast to what one would expect, the result is not ""xx"".
str.matches(""\\d*?""); // Noncompliant. Matches the same as ""\d*"", but will backtrack in every position.
</pre>
<h2>Compliant Solution</h2>
<pre>
""start123endstart456"".replaceAll(""start\\w*?(end|$)"", ""x""); // Result is ""xx"".
str.matches(""\\d*"");
</pre>",MAJOR,READY,False,[],['regex'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,10min,CONSTANT_ISSUE,10min,False,ALL,False,"[{'key': 'default', 'content': '<p>When a reluctant quantifier (such as <code>*?</code> or <code>+?</code>) is followed by a pattern that can match the empty string or directly by\nthe end of the regex, it will always match the empty string when used with methods that find partial matches (such as <code>find</code>,\n<code>replaceAll</code>, <code>split</code> etc.).</p>\n<p>Similarly, when used with methods that find full matches, a reluctant quantifier that’s followed directly by the end of the regex (or a pattern\nthat always matches the empty string, such as <code>()</code>) behaves indistinguishably from a greedy quantifier while being less efficient.</p>\n<p>This is likely a sign that the regex does not work as intended.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n""start123endstart456"".replaceAll(""start\\\\w*?(end)?"", ""x""); // Noncompliant. In contrast to what one would expect, the result is not ""xx"".\nstr.matches(""\\\\d*?""); // Noncompliant. Matches the same as ""\\d*"", but will backtrack in every position.\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n""start123endstart456"".replaceAll(""start\\\\w*?(end|$)"", ""x""); // Result is ""xx"".\nstr.matches(""\\\\d*"");\n</pre>'}]",[],['squid:S6019'],,,,
java:S6243,java,Reusable resources should be initialized at construction time of Lambda functions,2023-06-14T03:41:52+0000,"<p>Resources that can be reused across multiple invocations of the Lambda function should be initialized at construction time. For example in the
constructor of the class, or in field initializers. This way, when the same container is reused for multiple function invocations, the existing
instance can be reused, along with all resources stored in its fields. It is a good practice to reuse SDK clients and database connections by
initializing them at class construction time, to avoid recreating them on every lambda invocation. Failing to do so can lead to performance
degradation, and when not closed properly, even out of memory errors.</p>
<p>This rule reports an issue when the SDK client or the database connection is initialized locally inside a Lambda function.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class App implements RequestHandler&lt;Object, Object&gt; {
    @Override
    public Object handleRequest(final Object input, final Context context) {
      S3Client s3Client = DependencyFactory.s3Client();
      s3Client.listBuckets();
      // ...
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class App implements RequestHandler&lt;Object, Object&gt; {
    private final S3Client s3Client;

    public App() {
      s3Client = DependencyFactory.s3Client();
    }

    @Override
    public Object handleRequest(final Object input, final Context context) {
      s3Client.listBuckets();
      // ...
    }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://aws.amazon.com/fr/blogs/developer/tuning-the-aws-java-sdk-2-x-to-reduce-startup-time/"">Tuning the AWS Java SDK 2.x to reduce
  startup time</a> </li>
  <li> <a href=""https://docs.aws.amazon.com/lambda/latest/dg/best-practices.html"">Best practices for working with AWS Lambda functions</a> </li>
  <li> <a href=""https://aws.amazon.com/fr/blogs/compute/container-reuse-in-lambda/"">Understanding Container Reuse in AWS Lambda</a> </li>
</ul>","<p>Resources that can be reused across multiple invocations of the Lambda function should be initialized at construction time. For example in the
constructor of the class, or in field initializers. This way, when the same container is reused for multiple function invocations, the existing
instance can be reused, along with all resources stored in its fields. It is a good practice to reuse SDK clients and database connections by
initializing them at class construction time, to avoid recreating them on every lambda invocation. Failing to do so can lead to performance
degradation, and when not closed properly, even out of memory errors.</p>
<p>This rule reports an issue when the SDK client or the database connection is initialized locally inside a Lambda function.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class App implements RequestHandler&lt;Object, Object&gt; {
    @Override
    public Object handleRequest(final Object input, final Context context) {
      S3Client s3Client = DependencyFactory.s3Client();
      s3Client.listBuckets();
      // ...
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class App implements RequestHandler&lt;Object, Object&gt; {
    private final S3Client s3Client;

    public App() {
      s3Client = DependencyFactory.s3Client();
    }

    @Override
    public Object handleRequest(final Object input, final Context context) {
      s3Client.listBuckets();
      // ...
    }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://aws.amazon.com/fr/blogs/developer/tuning-the-aws-java-sdk-2-x-to-reduce-startup-time/"">Tuning the AWS Java SDK 2.x to reduce
  startup time</a> </li>
  <li> <a href=""https://docs.aws.amazon.com/lambda/latest/dg/best-practices.html"">Best practices for working with AWS Lambda functions</a> </li>
  <li> <a href=""https://aws.amazon.com/fr/blogs/compute/container-reuse-in-lambda/"">Understanding Container Reuse in AWS Lambda</a> </li>
</ul>",MAJOR,READY,False,[],['aws'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,20min,CONSTANT_ISSUE,20min,False,MAIN,False,"[{'key': 'default', 'content': '<p>Resources that can be reused across multiple invocations of the Lambda function should be initialized at construction time. For example in the\nconstructor of the class, or in field initializers. This way, when the same container is reused for multiple function invocations, the existing\ninstance can be reused, along with all resources stored in its fields. It is a good practice to reuse SDK clients and database connections by\ninitializing them at class construction time, to avoid recreating them on every lambda invocation. Failing to do so can lead to performance\ndegradation, and when not closed properly, even out of memory errors.</p>\n<p>This rule reports an issue when the SDK client or the database connection is initialized locally inside a Lambda function.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class App implements RequestHandler&lt;Object, Object&gt; {\n    @Override\n    public Object handleRequest(final Object input, final Context context) {\n      S3Client s3Client = DependencyFactory.s3Client();\n      s3Client.listBuckets();\n      // ...\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class App implements RequestHandler&lt;Object, Object&gt; {\n    private final S3Client s3Client;\n\n    public App() {\n      s3Client = DependencyFactory.s3Client();\n    }\n\n    @Override\n    public Object handleRequest(final Object input, final Context context) {\n      s3Client.listBuckets();\n      // ...\n    }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://aws.amazon.com/fr/blogs/developer/tuning-the-aws-java-sdk-2-x-to-reduce-startup-time/"">Tuning the AWS Java SDK 2.x to reduce\n  startup time</a> </li>\n  <li> <a href=""https://docs.aws.amazon.com/lambda/latest/dg/best-practices.html"">Best practices for working with AWS Lambda functions</a> </li>\n  <li> <a href=""https://aws.amazon.com/fr/blogs/compute/container-reuse-in-lambda/"">Understanding Container Reuse in AWS Lambda</a> </li>\n</ul>'}]",[],['squid:S6243'],,,,
java:S6244,java,Consumer Builders should be used,2023-06-14T03:41:52+0000,"<p>Some API, like the AWS SDK, heavily rely on the builder pattern to create different data structures. Despite all the benefits, this pattern can
become really verbose, especially when dealing with nested structures. In order to reach a more concise code, ""Consumer Builders"", also called
""Consumer Interface"" are often introduced.</p>
<p>The idea is to overload the methods taking others structures in a Builder with a Consumer of Builder instead. This enables to use a lambda instead
of nesting another Builder, resulting in more concise and readable code.</p>
<p>This rule reports an issue when the Consumer Builder methods could be used instead of the classical ones.</p>
<h2>Noncompliant Code Example</h2>
<pre>
SendEmailRequest.builder()
  .destination(Destination.builder()
    .toAddresses(""to-email@domain.com"")
    .bccAddresses(""bcc-email@domain.com"")
    .build())
.build();
</pre>
<h2>Compliant Solution</h2>
<pre>
SendEmailRequest.builder()
  .destination(d -&gt; d.toAddresses(""to-email@domain.com"").bccAddresses(""bcc-email@domain.com""))
  .build();
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://aws.amazon.com/fr/blogs/developer/consumer-builders-in-the-aws-sdk-for-java-v2/"">Consumer Builders in the AWS SDK for Java
  v2</a> </li>
</ul>","<p>Some API, like the AWS SDK, heavily rely on the builder pattern to create different data structures. Despite all the benefits, this pattern can
become really verbose, especially when dealing with nested structures. In order to reach a more concise code, ""Consumer Builders"", also called
""Consumer Interface"" are often introduced.</p>
<p>The idea is to overload the methods taking others structures in a Builder with a Consumer of Builder instead. This enables to use a lambda instead
of nesting another Builder, resulting in more concise and readable code.</p>
<p>This rule reports an issue when the Consumer Builder methods could be used instead of the classical ones.</p>
<h2>Noncompliant Code Example</h2>
<pre>
SendEmailRequest.builder()
  .destination(Destination.builder()
    .toAddresses(""to-email@domain.com"")
    .bccAddresses(""bcc-email@domain.com"")
    .build())
.build();
</pre>
<h2>Compliant Solution</h2>
<pre>
SendEmailRequest.builder()
  .destination(d -&gt; d.toAddresses(""to-email@domain.com"").bccAddresses(""bcc-email@domain.com""))
  .build();
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://aws.amazon.com/fr/blogs/developer/consumer-builders-in-the-aws-sdk-for-java-v2/"">Consumer Builders in the AWS SDK for Java
  v2</a> </li>
</ul>",MINOR,READY,False,[],['aws'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,MAIN,False,"[{'key': 'default', 'content': '<p>Some API, like the AWS SDK, heavily rely on the builder pattern to create different data structures. Despite all the benefits, this pattern can\nbecome really verbose, especially when dealing with nested structures. In order to reach a more concise code, ""Consumer Builders"", also called\n""Consumer Interface"" are often introduced.</p>\n<p>The idea is to overload the methods taking others structures in a Builder with a Consumer of Builder instead. This enables to use a lambda instead\nof nesting another Builder, resulting in more concise and readable code.</p>\n<p>This rule reports an issue when the Consumer Builder methods could be used instead of the classical ones.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSendEmailRequest.builder()\n  .destination(Destination.builder()\n    .toAddresses(""to-email@domain.com"")\n    .bccAddresses(""bcc-email@domain.com"")\n    .build())\n.build();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nSendEmailRequest.builder()\n  .destination(d -&gt; d.toAddresses(""to-email@domain.com"").bccAddresses(""bcc-email@domain.com""))\n  .build();\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://aws.amazon.com/fr/blogs/developer/consumer-builders-in-the-aws-sdk-for-java-v2/"">Consumer Builders in the AWS SDK for Java\n  v2</a> </li>\n</ul>'}]",[],['squid:S6244'],,,,
java:S1610,java,Abstract classes without fields should be converted to interfaces,2023-06-14T03:41:52+0000,"<p>With Java 8’s ""default method"" feature, any abstract class without direct or inherited field should be converted into an interface. However, this
change may not be appropriate in libraries or other applications where the class is intended to be used as an API.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project’s <code>sonar.java.source</code> is lower than <code>8</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public abstract class Car {
  public abstract void start(Environment c);

  public void stop(Environment c) {
    c.freeze(this);
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public interface Car {
  public void start(Environment c);

  public default void stop(Environment c) {
    c.freeze(this);
  }
}
</pre>","<p>With Java 8’s ""default method"" feature, any abstract class without direct or inherited field should be converted into an interface. However, this
change may not be appropriate in libraries or other applications where the class is intended to be used as an API.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project’s <code>sonar.java.source</code> is lower than <code>8</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public abstract class Car {
  public abstract void start(Environment c);

  public void stop(Environment c) {
    c.freeze(this);
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public interface Car {
  public void start(Environment c);

  public default void stop(Environment c) {
    c.freeze(this);
  }
}
</pre>",MINOR,READY,False,[],['java8'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,10min,CONSTANT_ISSUE,10min,False,ALL,False,"[{'key': 'default', 'content': '<p>With Java 8’s ""default method"" feature, any abstract class without direct or inherited field should be converted into an interface. However, this\nchange may not be appropriate in libraries or other applications where the class is intended to be used as an API.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project’s <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic abstract class Car {\n  public abstract void start(Environment c);\n\n  public void stop(Environment c) {\n    c.freeze(this);\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic interface Car {\n  public void start(Environment c);\n\n  public default void stop(Environment c) {\n    c.freeze(this);\n  }\n}\n</pre>'}]",[],['squid:S1610'],,,,
java:S1611,java,Parentheses should be removed from a single lambda input parameter when its type is inferred,2023-06-14T03:41:52+0000,"<p>There are two possible syntaxes for a lambda having only one input parameter with an inferred type: with and without parentheses around that single
parameter. The simpler syntax, without parentheses, is more compact and readable than the one with parentheses, and is therefore preferred.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project’s <code>sonar.java.source</code> is lower than <code>8</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
(x) -&gt; x * 2
</pre>
<h2>Compliant Solution</h2>
<pre>
x -&gt; x * 2
</pre>","<p>There are two possible syntaxes for a lambda having only one input parameter with an inferred type: with and without parentheses around that single
parameter. The simpler syntax, without parentheses, is more compact and readable than the one with parentheses, and is therefore preferred.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project’s <code>sonar.java.source</code> is lower than <code>8</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
(x) -&gt; x * 2
</pre>
<h2>Compliant Solution</h2>
<pre>
x -&gt; x * 2
</pre>",MINOR,READY,False,[],['java8'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,2min,CONSTANT_ISSUE,2min,False,ALL,False,"[{'key': 'default', 'content': '<p>There are two possible syntaxes for a lambda having only one input parameter with an inferred type: with and without parentheses around that single\nparameter. The simpler syntax, without parentheses, is more compact and readable than the one with parentheses, and is therefore preferred.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project’s <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n(x) -&gt; x * 2\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nx -&gt; x * 2\n</pre>'}]",[],['squid:S1611'],,,,
java:S1612,java,Lambdas should be replaced with method references,2023-06-14T03:41:52+0000,"<p>Method/constructor references are commonly agreed to be more readable than lambdas in most situations, and are therefore preferred.</p>
<p>However, method references are sometimes less concise than lambdas. In such cases, it might be fine to keep the lambda if it is better for
readability. This choice is ultimately up to the programmer. Therefore, this rule only raises issues on lambda functions that could be replaced by
shorter method references.</p>
<p><code>null</code> checks can be replaced with references to the <code>Objects::isNull</code> and <code>Objects::nonNull</code> methods,
<code>casts</code> can be replaced with <code>SomeClass.class::cast</code> and <code>instanceof</code> can be replaced with
<code>SomeClass.class::isInstance</code>.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project’s <code>sonar.java.source</code> is lower than <code>8</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class A {
  void process(List&lt;A&gt; list) {
    list.stream()
      .filter(a -&gt; a instanceof B)
      .map(a -&gt; (B) a)
      .map(b -&gt; b.&lt;String&gt;getObject())
      .forEach(b -&gt; { System.out.println(b); });
  }
}

class B extends A {
  &lt;T&gt; T getObject() {
    return null;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class A {
  void process(List&lt;A&gt; list) {
    list.stream()
      .filter(B.class::isInstance)
      .map(B.class::cast)            // Note: keeping the lambda would also be compliant here, since it is shorter
      .map(B::&lt;String&gt;getObject)
      .forEach(System.out::println);
  }
}

class B extends A {
  &lt;T&gt; T getObject() {
    return null;
  }
}
</pre>","<p>Method/constructor references are commonly agreed to be more readable than lambdas in most situations, and are therefore preferred.</p>
<p>However, method references are sometimes less concise than lambdas. In such cases, it might be fine to keep the lambda if it is better for
readability. This choice is ultimately up to the programmer. Therefore, this rule only raises issues on lambda functions that could be replaced by
shorter method references.</p>
<p><code>null</code> checks can be replaced with references to the <code>Objects::isNull</code> and <code>Objects::nonNull</code> methods,
<code>casts</code> can be replaced with <code>SomeClass.class::cast</code> and <code>instanceof</code> can be replaced with
<code>SomeClass.class::isInstance</code>.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project’s <code>sonar.java.source</code> is lower than <code>8</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class A {
  void process(List&lt;A&gt; list) {
    list.stream()
      .filter(a -&gt; a instanceof B)
      .map(a -&gt; (B) a)
      .map(b -&gt; b.&lt;String&gt;getObject())
      .forEach(b -&gt; { System.out.println(b); });
  }
}

class B extends A {
  &lt;T&gt; T getObject() {
    return null;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class A {
  void process(List&lt;A&gt; list) {
    list.stream()
      .filter(B.class::isInstance)
      .map(B.class::cast)            // Note: keeping the lambda would also be compliant here, since it is shorter
      .map(B::&lt;String&gt;getObject)
      .forEach(System.out::println);
  }
}

class B extends A {
  &lt;T&gt; T getObject() {
    return null;
  }
}
</pre>",MINOR,READY,False,[],['java8'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,2min,CONSTANT_ISSUE,2min,False,ALL,False,"[{'key': 'default', 'content': '<p>Method/constructor references are commonly agreed to be more readable than lambdas in most situations, and are therefore preferred.</p>\n<p>However, method references are sometimes less concise than lambdas. In such cases, it might be fine to keep the lambda if it is better for\nreadability. This choice is ultimately up to the programmer. Therefore, this rule only raises issues on lambda functions that could be replaced by\nshorter method references.</p>\n<p><code>null</code> checks can be replaced with references to the <code>Objects::isNull</code> and <code>Objects::nonNull</code> methods,\n<code>casts</code> can be replaced with <code>SomeClass.class::cast</code> and <code>instanceof</code> can be replaced with\n<code>SomeClass.class::isInstance</code>.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project’s <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass A {\n  void process(List&lt;A&gt; list) {\n    list.stream()\n      .filter(a -&gt; a instanceof B)\n      .map(a -&gt; (B) a)\n      .map(b -&gt; b.&lt;String&gt;getObject())\n      .forEach(b -&gt; { System.out.println(b); });\n  }\n}\n\nclass B extends A {\n  &lt;T&gt; T getObject() {\n    return null;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass A {\n  void process(List&lt;A&gt; list) {\n    list.stream()\n      .filter(B.class::isInstance)\n      .map(B.class::cast)            // Note: keeping the lambda would also be compliant here, since it is shorter\n      .map(B::&lt;String&gt;getObject)\n      .forEach(System.out::println);\n  }\n}\n\nclass B extends A {\n  &lt;T&gt; T getObject() {\n    return null;\n  }\n}\n</pre>'}]",[],['squid:S1612'],,,,
java:S1854,java,Unused assignments should be removed,2023-06-14T03:41:52+0000,"<p>A dead store happens when a local variable is assigned a value that is not read by any subsequent instruction. Calculating or retrieving a value
only to then overwrite it or throw it away, could indicate a serious error in the code. Even if it’s not an error, it is at best a waste of resources.
Therefore all calculated values should be used.</p>
<h2>Noncompliant Code Example</h2>
<pre>
i = a + b; // Noncompliant; calculation result not used before value is overwritten
i = compute();
</pre>
<h2>Compliant Solution</h2>
<pre>
i = a + b;
i += compute();
</pre>
<h2>Exceptions</h2>
<p>This rule ignores initializations to -1, 0, 1, <code>null</code>, <code>true</code>, <code>false</code> and <code>""""</code>.</p>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/563"">MITRE, CWE-563</a> - Assignment to Variable without Use ('Unused Variable') </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/39UxBQ"">CERT, MSC13-C.</a> - Detect and remove unused values </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/9DZGBQ"">CERT, MSC56-J.</a> - Detect and remove superfluous code and values </li>
</ul>","<p>A dead store happens when a local variable is assigned a value that is not read by any subsequent instruction. Calculating or retrieving a value
only to then overwrite it or throw it away, could indicate a serious error in the code. Even if it’s not an error, it is at best a waste of resources.
Therefore all calculated values should be used.</p>
<h2>Noncompliant Code Example</h2>
<pre>
i = a + b; // Noncompliant; calculation result not used before value is overwritten
i = compute();
</pre>
<h2>Compliant Solution</h2>
<pre>
i = a + b;
i += compute();
</pre>
<h2>Exceptions</h2>
<p>This rule ignores initializations to -1, 0, 1, <code>null</code>, <code>true</code>, <code>false</code> and <code>""""</code>.</p>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/563"">MITRE, CWE-563</a> - Assignment to Variable without Use ('Unused Variable') </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/39UxBQ"">CERT, MSC13-C.</a> - Detect and remove unused values </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/9DZGBQ"">CERT, MSC56-J.</a> - Detect and remove superfluous code and values </li>
</ul>",MAJOR,READY,False,[],"['cert', 'cwe', 'unused']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,15min,CONSTANT_ISSUE,15min,False,ALL,False,"[{'key': 'default', 'content': '<p>A dead store happens when a local variable is assigned a value that is not read by any subsequent instruction. Calculating or retrieving a value\nonly to then overwrite it or throw it away, could indicate a serious error in the code. Even if it’s not an error, it is at best a waste of resources.\nTherefore all calculated values should be used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ni = a + b; // Noncompliant; calculation result not used before value is overwritten\ni = compute();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ni = a + b;\ni += compute();\n</pre>\n<h2>Exceptions</h2>\n<p>This rule ignores initializations to -1, 0, 1, <code>null</code>, <code>true</code>, <code>false</code> and <code>""""</code>.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/563"">MITRE, CWE-563</a> - Assignment to Variable without Use (\'Unused Variable\') </li>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/39UxBQ"">CERT, MSC13-C.</a> - Detect and remove unused values </li>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/9DZGBQ"">CERT, MSC56-J.</a> - Detect and remove superfluous code and values </li>\n</ul>'}]",[],['squid:S1854'],,,,
java:S1858,java,"""toString()"" should never be called on a String object",2023-06-14T03:41:52+0000,"<p>Invoking a method designed to return a string representation of an object which is already a string is a waste of keystrokes. This redundant
construction may be optimized by the compiler, but will be confusing in the meantime.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String message = ""hello world"";
System.out.println(message.toString()); // Noncompliant;
</pre>
<h2>Compliant Solution</h2>
<pre>
String message = ""hello world"";
System.out.println(message);
</pre>","<p>Invoking a method designed to return a string representation of an object which is already a string is a waste of keystrokes. This redundant
construction may be optimized by the compiler, but will be confusing in the meantime.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String message = ""hello world"";
System.out.println(message.toString()); // Noncompliant;
</pre>
<h2>Compliant Solution</h2>
<pre>
String message = ""hello world"";
System.out.println(message);
</pre>",MINOR,READY,False,[],"['clumsy', 'finding']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,2min,CONSTANT_ISSUE,2min,False,ALL,False,"[{'key': 'default', 'content': '<p>Invoking a method designed to return a string representation of an object which is already a string is a waste of keystrokes. This redundant\nconstruction may be optimized by the compiler, but will be confusing in the meantime.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString message = ""hello world"";\nSystem.out.println(message.toString()); // Noncompliant;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString message = ""hello world"";\nSystem.out.println(message);\n</pre>'}]",[],['squid:S1858'],,,,
java:S2701,java,Literal boolean values and nulls should not be used in assertions,2023-06-14T03:41:52+0000,"<p>There’s no reason to use literal boolean values or nulls in assertions. Instead of using them with <em>assertEquals</em>, <em>assertNotEquals</em>
and similar methods, you should be using <em>assertTrue</em>, <em>assertFalse</em>, <em>assertNull</em> or <em>assertNotNull</em> instead (or
<em>isNull</em> etc. when using Fest). Using them with assertions unrelated to equality (such as <em>assertNull</em>) is most likely a bug.</p>
<p>Supported frameworks:</p>
<ul>
  <li> JUnit3 </li>
  <li> JUnit4 </li>
  <li> JUnit5 </li>
  <li> Fest assert </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
Assert.assertTrue(true);  // Noncompliant
assertThat(null).isNull(); // Noncompliant

assertEquals(true, something()); // Noncompliant
assertNotEquals(null, something()); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
assertTrue(something());
assertNotNull(something());
</pre>","<p>There’s no reason to use literal boolean values or nulls in assertions. Instead of using them with <em>assertEquals</em>, <em>assertNotEquals</em>
and similar methods, you should be using <em>assertTrue</em>, <em>assertFalse</em>, <em>assertNull</em> or <em>assertNotNull</em> instead (or
<em>isNull</em> etc. when using Fest). Using them with assertions unrelated to equality (such as <em>assertNull</em>) is most likely a bug.</p>
<p>Supported frameworks:</p>
<ul>
  <li> JUnit3 </li>
  <li> JUnit4 </li>
  <li> JUnit5 </li>
  <li> Fest assert </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
Assert.assertTrue(true);  // Noncompliant
assertThat(null).isNull(); // Noncompliant

assertEquals(true, something()); // Noncompliant
assertNotEquals(null, something()); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
assertTrue(something());
assertNotNull(something());
</pre>",MINOR,READY,False,[],"['junit', 'tests']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,TEST,False,"[{'key': 'default', 'content': '<p>There’s no reason to use literal boolean values or nulls in assertions. Instead of using them with <em>assertEquals</em>, <em>assertNotEquals</em>\nand similar methods, you should be using <em>assertTrue</em>, <em>assertFalse</em>, <em>assertNull</em> or <em>assertNotNull</em> instead (or\n<em>isNull</em> etc. when using Fest). Using them with assertions unrelated to equality (such as <em>assertNull</em>) is most likely a bug.</p>\n<p>Supported frameworks:</p>\n<ul>\n  <li> JUnit3 </li>\n  <li> JUnit4 </li>\n  <li> JUnit5 </li>\n  <li> Fest assert </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nAssert.assertTrue(true);  // Noncompliant\nassertThat(null).isNull(); // Noncompliant\n\nassertEquals(true, something()); // Noncompliant\nassertNotEquals(null, something()); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nassertTrue(something());\nassertNotNull(something());\n</pre>'}]",[],['squid:S2701'],,,,
java:S2718,java,"""DateUtils.truncate"" from Apache Commons Lang library should not be used",2023-06-14T03:41:52+0000,"<p>The use of the <code>ZonedDateTime</code> class introduced in Java 8 to truncate a date can be significantly faster than the <code>DateUtils</code>
class from Commons Lang.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project’s <code>sonar.java.source</code> is lower than <code>8</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public Date trunc(Date date) {
  return DateUtils.truncate(date, Calendar.SECOND);  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public Date trunc(Date date) {
  Instant instant = date.toInstant();
  ZonedDateTime zonedDateTime = instant.atZone(ZoneId.systemDefault());
  ZonedDateTime truncatedZonedDateTime = zonedDateTime.truncatedTo(ChronoUnit.SECONDS);
  Instant truncatedInstant = truncatedZonedDateTime.toInstant();
  return Date.from(truncatedInstant);
}
</pre>","<p>The use of the <code>ZonedDateTime</code> class introduced in Java 8 to truncate a date can be significantly faster than the <code>DateUtils</code>
class from Commons Lang.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project’s <code>sonar.java.source</code> is lower than <code>8</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public Date trunc(Date date) {
  return DateUtils.truncate(date, Calendar.SECOND);  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public Date trunc(Date date) {
  Instant instant = date.toInstant();
  ZonedDateTime zonedDateTime = instant.atZone(ZoneId.systemDefault());
  ZonedDateTime truncatedZonedDateTime = zonedDateTime.truncatedTo(ChronoUnit.SECONDS);
  Instant truncatedInstant = truncatedZonedDateTime.toInstant();
  return Date.from(truncatedInstant);
}
</pre>",MAJOR,READY,False,[],"['java8', 'performance']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,10min,CONSTANT_ISSUE,10min,False,ALL,False,"[{'key': 'default', 'content': '<p>The use of the <code>ZonedDateTime</code> class introduced in Java 8 to truncate a date can be significantly faster than the <code>DateUtils</code>\nclass from Commons Lang.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project’s <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic Date trunc(Date date) {\n  return DateUtils.truncate(date, Calendar.SECOND);  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic Date trunc(Date date) {\n  Instant instant = date.toInstant();\n  ZonedDateTime zonedDateTime = instant.atZone(ZoneId.systemDefault());\n  ZonedDateTime truncatedZonedDateTime = zonedDateTime.truncatedTo(ChronoUnit.SECONDS);\n  Instant truncatedInstant = truncatedZonedDateTime.toInstant();\n  return Date.from(truncatedInstant);\n}\n</pre>'}]",[],['squid:S2718'],,,,
java:S2959,java,Unnecessary semicolons should be omitted,2023-06-14T03:41:52+0000,"<p>Under the reasoning that cleaner code is better code, the semicolon at the end of a try-with-resources construct should be omitted because it can
be omitted.</p>
<h2>Noncompliant Code Example</h2>
<pre>
try (ByteArrayInputStream b = new ByteArrayInputStream(new byte[10]);  // ignored; this one's required
      Reader r = new InputStreamReader(b);)   // Noncompliant
{
   //do stuff
}
</pre>
<h2>Compliant Solution</h2>
<pre>
try (ByteArrayInputStream b = new ByteArrayInputStream(new byte[10]);
      Reader r = new InputStreamReader(b))
{
   //do stuff
}
</pre>","<p>Under the reasoning that cleaner code is better code, the semicolon at the end of a try-with-resources construct should be omitted because it can
be omitted.</p>
<h2>Noncompliant Code Example</h2>
<pre>
try (ByteArrayInputStream b = new ByteArrayInputStream(new byte[10]);  // ignored; this one's required
      Reader r = new InputStreamReader(b);)   // Noncompliant
{
   //do stuff
}
</pre>
<h2>Compliant Solution</h2>
<pre>
try (ByteArrayInputStream b = new ByteArrayInputStream(new byte[10]);
      Reader r = new InputStreamReader(b))
{
   //do stuff
}
</pre>",MINOR,READY,False,[],['convention'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,1min,CONSTANT_ISSUE,1min,False,ALL,False,"[{'key': 'default', 'content': ""<p>Under the reasoning that cleaner code is better code, the semicolon at the end of a try-with-resources construct should be omitted because it can\nbe omitted.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry (ByteArrayInputStream b = new ByteArrayInputStream(new byte[10]);  // ignored; this one's required\n      Reader r = new InputStreamReader(b);)   // Noncompliant\n{\n   //do stuff\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry (ByteArrayInputStream b = new ByteArrayInputStream(new byte[10]);\n      Reader r = new InputStreamReader(b))\n{\n   //do stuff\n}\n</pre>""}]",[],['squid:S2959'],,,,
java:S6068,java,"Call to Mockito method ""verify"", ""when"" or ""given"" should be simplified",2023-06-14T03:41:52+0000,"<p>Mockito provides <em>argument matchers</em> for flexibly stubbing or verifying method calls.</p>
<p><code>Mockito.verify()</code>, <code>Mockito.when()</code>, <code>Stubber.when()</code> and <code>BDDMockito.given()</code> each have overloads
with and without argument matchers.</p>
<p>However, the default matching behavior (i.e. without argument matchers) uses <code>equals()</code>. If only the matcher
<code>org.mockito.ArgumentMatchers.eq()</code> is used, the call is equivalent to the call without matchers, i.e. the <code>eq()</code> is not
necessary and can be omitted. The resulting code is shorter and easier to read.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@Test
public void myTest() {
  given(foo.bar(eq(v1), eq(v2), eq(v3))).willReturn(null);   // Noncompliant
  when(foo.baz(eq(v4), eq(v5))).thenReturn(""foo"");   // Noncompliant
  doThrow(new RuntimeException()).when(foo).quux(eq(42));    // Noncompliant
  verify(foo).bar(eq(v1), eq(v2), eq(v3));   // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@Test
public void myTest() {
  given(foo.bar(v1, v2, v3)).willReturn(null);
  when(foo.baz(v4, v5)).thenReturn(""foo"");
  doThrow(new RuntimeException()).when(foo).quux(42);
  verify(foo).bar(v1, v2, v3);
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://javadoc.io/doc/org.mockito/mockito-core/latest/org/mockito/Mockito.html#argument_matchers"">Mockito documentation</a> -
  argument matchers </li>
  <li> <a href='/coding_rules#rule_key=java%3AS6073'>S6073</a> - Mockito argument matchers should be used on all parameters </li>
</ul>","<p>Mockito provides <em>argument matchers</em> for flexibly stubbing or verifying method calls.</p>
<p><code>Mockito.verify()</code>, <code>Mockito.when()</code>, <code>Stubber.when()</code> and <code>BDDMockito.given()</code> each have overloads
with and without argument matchers.</p>
<p>However, the default matching behavior (i.e. without argument matchers) uses <code>equals()</code>. If only the matcher
<code>org.mockito.ArgumentMatchers.eq()</code> is used, the call is equivalent to the call without matchers, i.e. the <code>eq()</code> is not
necessary and can be omitted. The resulting code is shorter and easier to read.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@Test
public void myTest() {
  given(foo.bar(eq(v1), eq(v2), eq(v3))).willReturn(null);   // Noncompliant
  when(foo.baz(eq(v4), eq(v5))).thenReturn(""foo"");   // Noncompliant
  doThrow(new RuntimeException()).when(foo).quux(eq(42));    // Noncompliant
  verify(foo).bar(eq(v1), eq(v2), eq(v3));   // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@Test
public void myTest() {
  given(foo.bar(v1, v2, v3)).willReturn(null);
  when(foo.baz(v4, v5)).thenReturn(""foo"");
  doThrow(new RuntimeException()).when(foo).quux(42);
  verify(foo).bar(v1, v2, v3);
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://javadoc.io/doc/org.mockito/mockito-core/latest/org/mockito/Mockito.html#argument_matchers"">Mockito documentation</a> -
  argument matchers </li>
  <li> <a href='/coding_rules#rule_key=java%3AS6073'>S6073</a> - Mockito argument matchers should be used on all parameters </li>
</ul>",MINOR,READY,False,[],"['clumsy', 'mockito', 'tests']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,2min,CONSTANT_ISSUE,2min,False,TEST,False,"[{'key': 'default', 'content': '<p>Mockito provides <em>argument matchers</em> for flexibly stubbing or verifying method calls.</p>\n<p><code>Mockito.verify()</code>, <code>Mockito.when()</code>, <code>Stubber.when()</code> and <code>BDDMockito.given()</code> each have overloads\nwith and without argument matchers.</p>\n<p>However, the default matching behavior (i.e. without argument matchers) uses <code>equals()</code>. If only the matcher\n<code>org.mockito.ArgumentMatchers.eq()</code> is used, the call is equivalent to the call without matchers, i.e. the <code>eq()</code> is not\nnecessary and can be omitted. The resulting code is shorter and easier to read.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Test\npublic void myTest() {\n  given(foo.bar(eq(v1), eq(v2), eq(v3))).willReturn(null);   // Noncompliant\n  when(foo.baz(eq(v4), eq(v5))).thenReturn(""foo"");   // Noncompliant\n  doThrow(new RuntimeException()).when(foo).quux(eq(42));    // Noncompliant\n  verify(foo).bar(eq(v1), eq(v2), eq(v3));   // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Test\npublic void myTest() {\n  given(foo.bar(v1, v2, v3)).willReturn(null);\n  when(foo.baz(v4, v5)).thenReturn(""foo"");\n  doThrow(new RuntimeException()).when(foo).quux(42);\n  verify(foo).bar(v1, v2, v3);\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://javadoc.io/doc/org.mockito/mockito-core/latest/org/mockito/Mockito.html#argument_matchers"">Mockito documentation</a> -\n  argument matchers </li>\n  <li> <a href=\'/coding_rules#rule_key=java%3AS6073\'>S6073</a> - Mockito argument matchers should be used on all parameters </li>\n</ul>'}]",[],['squid:S6068'],,,,
java:S124,java,Track comments matching a regular expression,2023-06-14T03:41:52+0000,"<p>This rule template can be used to create rules which will be triggered when the full content of a comment matches a given regular expression. Note
that the regular expression should be expressed using the dotall format (where the <code>.</code> character matches any character).</p>
<p>For example, one can create a rule with the regular expression <code>.*REVIEW.*</code> to match all comment containing ""REVIEW"".</p>
<p>Note that, in order to match REVIEW regardless of the case, the <code>(?i)</code> modifier should be prepended to the expression, as in
<code>(?i).*REVIEW.*</code>.</p>","<p>This rule template can be used to create rules which will be triggered when the full content of a comment matches a given regular expression. Note
that the regular expression should be expressed using the dotall format (where the <code>.</code> character matches any character).</p>
<p>For example, one can create a rule with the regular expression <code>.*REVIEW.*</code> to match all comment containing ""REVIEW"".</p>
<p>Note that, in order to match REVIEW regardless of the case, the <code>(?i)</code> modifier should be prepended to the expression, as in
<code>(?i).*REVIEW.*</code>.</p>",MAJOR,READY,True,[],[],java,Java,"[{'key': 'regularExpression', 'htmlDesc': 'The regular expression', 'type': 'STRING'}, {'key': 'message', 'htmlDesc': 'The issue message', 'defaultValue': 'The regular expression matches this comment.', 'type': 'STRING'}]",CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,0min,CONSTANT_ISSUE,0min,False,MAIN,False,"[{'key': 'default', 'content': '<p>This rule template can be used to create rules which will be triggered when the full content of a comment matches a given regular expression. Note\nthat the regular expression should be expressed using the dotall format (where the <code>.</code> character matches any character).</p>\n<p>For example, one can create a rule with the regular expression <code>.*REVIEW.*</code> to match all comment containing ""REVIEW"".</p>\n<p>Note that, in order to match REVIEW regardless of the case, the <code>(?i)</code> modifier should be prepended to the expression, as in\n<code>(?i).*REVIEW.*</code>.</p>'}]",[],['squid:S124'],,,,
java:S125,java,Sections of code should not be commented out,2023-06-14T03:41:52+0000,"<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>
<p>Unused code should be deleted and can be retrieved from source control history if required.</p>","<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>
<p>Unused code should be deleted and can be retrieved from source control history if required.</p>",MAJOR,READY,False,[],['unused'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>\n<p>Unused code should be deleted and can be retrieved from source control history if required.</p>'}]",[],['squid:CommentedOutCodeLine'],,,,
java:S126,java,"""if ... else if"" constructs should end with ""else"" clauses",2023-06-14T03:41:52+0000,"<p>This rule applies whenever an <code>if</code> statement is followed by one or more <code>else if</code> statements; the final <code>else if</code>
should be followed by an <code>else</code> statement.</p>
<p>The requirement for a final <code>else</code> statement is defensive programming.</p>
<p>The <code>else</code> statement should either take appropriate action or contain a suitable comment as to why no action is taken. This is
consistent with the requirement to have a final <code>default</code> clause in a <code>switch</code> statement.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (x == 0) {
  doSomething();
} else if (x == 1) {
  doSomethingElse();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (x == 0) {
  doSomething();
} else if (x == 1) {
  doSomethingElse();
} else {
  throw new IllegalStateException();
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/RtYxBQ"">CERT, MSC01-C.</a> - Strive for logical completeness </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/jzZGBQ"">CERT, MSC57-J.</a> - Strive for logical completeness </li>
</ul>","<p>This rule applies whenever an <code>if</code> statement is followed by one or more <code>else if</code> statements; the final <code>else if</code>
should be followed by an <code>else</code> statement.</p>
<p>The requirement for a final <code>else</code> statement is defensive programming.</p>
<p>The <code>else</code> statement should either take appropriate action or contain a suitable comment as to why no action is taken. This is
consistent with the requirement to have a final <code>default</code> clause in a <code>switch</code> statement.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (x == 0) {
  doSomething();
} else if (x == 1) {
  doSomethingElse();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (x == 0) {
  doSomething();
} else if (x == 1) {
  doSomethingElse();
} else {
  throw new IllegalStateException();
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/RtYxBQ"">CERT, MSC01-C.</a> - Strive for logical completeness </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/jzZGBQ"">CERT, MSC57-J.</a> - Strive for logical completeness </li>
</ul>",CRITICAL,READY,False,[],['cert'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>This rule applies whenever an <code>if</code> statement is followed by one or more <code>else if</code> statements; the final <code>else if</code>\nshould be followed by an <code>else</code> statement.</p>\n<p>The requirement for a final <code>else</code> statement is defensive programming.</p>\n<p>The <code>else</code> statement should either take appropriate action or contain a suitable comment as to why no action is taken. This is\nconsistent with the requirement to have a final <code>default</code> clause in a <code>switch</code> statement.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (x == 0) {\n  doSomething();\n} else if (x == 1) {\n  doSomethingElse();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (x == 0) {\n  doSomething();\n} else if (x == 1) {\n  doSomethingElse();\n} else {\n  throw new IllegalStateException();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/RtYxBQ"">CERT, MSC01-C.</a> - Strive for logical completeness </li>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/jzZGBQ"">CERT, MSC57-J.</a> - Strive for logical completeness </li>\n</ul>'}]",[],['squid:S126'],,,,
java:S127,java,"""for"" loop stop conditions should be invariant",2023-06-14T03:41:52+0000,"<p>A <code>for</code> loop stop condition should test the loop counter against an invariant value (i.e. one that is true at both the beginning and
ending of every loop iteration). Ideally, this means that the stop condition is set to a local variable just before the loop begins.</p>
<p>Stop conditions that are not invariant are slightly less efficient, as well as being difficult to understand and maintain, and likely lead to the
introduction of errors in the future.</p>
<p>This rule tracks three types of non-invariant stop conditions:</p>
<ul>
  <li> When the loop counters are updated in the body of the <code>for</code> loop </li>
  <li> When the stop condition depend upon a method call </li>
  <li> When the stop condition depends on an object property, since such properties could change during the execution of the loop. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
for (int i = 0; i &lt; 10; i++) {
  ...
  i = i - 1; // Noncompliant; counter updated in the body of the loop
  ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for (int i = 0; i &lt; 10; i++) {...}
</pre>","<p>A <code>for</code> loop stop condition should test the loop counter against an invariant value (i.e. one that is true at both the beginning and
ending of every loop iteration). Ideally, this means that the stop condition is set to a local variable just before the loop begins.</p>
<p>Stop conditions that are not invariant are slightly less efficient, as well as being difficult to understand and maintain, and likely lead to the
introduction of errors in the future.</p>
<p>This rule tracks three types of non-invariant stop conditions:</p>
<ul>
  <li> When the loop counters are updated in the body of the <code>for</code> loop </li>
  <li> When the stop condition depend upon a method call </li>
  <li> When the stop condition depends on an object property, since such properties could change during the execution of the loop. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
for (int i = 0; i &lt; 10; i++) {
  ...
  i = i - 1; // Noncompliant; counter updated in the body of the loop
  ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for (int i = 0; i &lt; 10; i++) {...}
</pre>",MAJOR,READY,False,[],['pitfall'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,10min,CONSTANT_ISSUE,10min,False,ALL,False,"[{'key': 'default', 'content': '<p>A <code>for</code> loop stop condition should test the loop counter against an invariant value (i.e. one that is true at both the beginning and\nending of every loop iteration). Ideally, this means that the stop condition is set to a local variable just before the loop begins.</p>\n<p>Stop conditions that are not invariant are slightly less efficient, as well as being difficult to understand and maintain, and likely lead to the\nintroduction of errors in the future.</p>\n<p>This rule tracks three types of non-invariant stop conditions:</p>\n<ul>\n  <li> When the loop counters are updated in the body of the <code>for</code> loop </li>\n  <li> When the stop condition depend upon a method call </li>\n  <li> When the stop condition depends on an object property, since such properties could change during the execution of the loop. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 0; i &lt; 10; i++) {\n  ...\n  i = i - 1; // Noncompliant; counter updated in the body of the loop\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor (int i = 0; i &lt; 10; i++) {...}\n</pre>'}]",[],['squid:ForLoopCounterChangedCheck'],,,,
java:S128,java,"Switch cases should end with an unconditional ""break"" statement",2023-06-14T03:41:52+0000,"<p>When the execution is not explicitly terminated at the end of a switch case, it continues to execute the statements of the following case. While
this is sometimes intentional, it often is a mistake which leads to unexpected behavior.</p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (myVariable) {
  case 1:
    foo();
    break;
  case 2:  // Both 'doSomething()' and 'doSomethingElse()' will be executed. Is it on purpose ?
    doSomething();
  default:
    doSomethingElse();
    break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch (myVariable) {
  case 1:
    foo();
    break;
  case 2:
    doSomething();
    break;
  default:
    doSomethingElse();
    break;
}
</pre>
<h2>Exceptions</h2>
<p>This rule is relaxed in the following cases:</p>
<pre>
switch (myVariable) {
  case 0:                                // Empty case used to specify the same behavior for a group of cases.
  case 1:
    doSomething();
    break;
  case 2:                                // Use of a fallthrough comment
    // fallthrough
  case 3:                                // Use of return statement
    return;
  case 4:                                // Use of throw statement
    throw new IllegalStateException();
  case 5:                                // Use of continue statement
    continue;
  default:                               // For the last case, use of break statement is optional
    doSomethingElse();
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/484"">MITRE, CWE-484</a> - Omitted Break Statement in Switch </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/ldYxBQ"">CERT, MSC17-C.</a> - Finish every set of statements associated with a case label with a
  break statement </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/1DdGBQ"">CERT, MSC52-J.</a> - Finish every set of statements associated with a case label with a
  break statement </li>
</ul>","<p>When the execution is not explicitly terminated at the end of a switch case, it continues to execute the statements of the following case. While
this is sometimes intentional, it often is a mistake which leads to unexpected behavior.</p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (myVariable) {
  case 1:
    foo();
    break;
  case 2:  // Both 'doSomething()' and 'doSomethingElse()' will be executed. Is it on purpose ?
    doSomething();
  default:
    doSomethingElse();
    break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch (myVariable) {
  case 1:
    foo();
    break;
  case 2:
    doSomething();
    break;
  default:
    doSomethingElse();
    break;
}
</pre>
<h2>Exceptions</h2>
<p>This rule is relaxed in the following cases:</p>
<pre>
switch (myVariable) {
  case 0:                                // Empty case used to specify the same behavior for a group of cases.
  case 1:
    doSomething();
    break;
  case 2:                                // Use of a fallthrough comment
    // fallthrough
  case 3:                                // Use of return statement
    return;
  case 4:                                // Use of throw statement
    throw new IllegalStateException();
  case 5:                                // Use of continue statement
    continue;
  default:                               // For the last case, use of break statement is optional
    doSomethingElse();
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/484"">MITRE, CWE-484</a> - Omitted Break Statement in Switch </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/ldYxBQ"">CERT, MSC17-C.</a> - Finish every set of statements associated with a case label with a
  break statement </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/1DdGBQ"">CERT, MSC52-J.</a> - Finish every set of statements associated with a case label with a
  break statement </li>
</ul>",BLOCKER,READY,False,[],"['cert', 'cwe', 'suspicious']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,10min,CONSTANT_ISSUE,10min,False,ALL,False,"[{'key': 'default', 'content': '<p>When the execution is not explicitly terminated at the end of a switch case, it continues to execute the statements of the following case. While\nthis is sometimes intentional, it often is a mistake which leads to unexpected behavior.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (myVariable) {\n  case 1:\n    foo();\n    break;\n  case 2:  // Both \'doSomething()\' and \'doSomethingElse()\' will be executed. Is it on purpose ?\n    doSomething();\n  default:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (myVariable) {\n  case 1:\n    foo();\n    break;\n  case 2:\n    doSomething();\n    break;\n  default:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule is relaxed in the following cases:</p>\n<pre>\nswitch (myVariable) {\n  case 0:                                // Empty case used to specify the same behavior for a group of cases.\n  case 1:\n    doSomething();\n    break;\n  case 2:                                // Use of a fallthrough comment\n    // fallthrough\n  case 3:                                // Use of return statement\n    return;\n  case 4:                                // Use of throw statement\n    throw new IllegalStateException();\n  case 5:                                // Use of continue statement\n    continue;\n  default:                               // For the last case, use of break statement is optional\n    doSomethingElse();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/484"">MITRE, CWE-484</a> - Omitted Break Statement in Switch </li>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/ldYxBQ"">CERT, MSC17-C.</a> - Finish every set of statements associated with a case label with a\n  break statement </li>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/1DdGBQ"">CERT, MSC52-J.</a> - Finish every set of statements associated with a case label with a\n  break statement </li>\n</ul>'}]",[],['squid:S128'],,,,
java:S131,java,"""switch"" statements should have ""default"" clauses",2023-06-14T03:41:52+0000,"<p>The requirement for a final <code>default</code> clause is defensive programming. The clause should either take appropriate action, or contain a
suitable comment as to why no action is taken.</p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (param) {  //missing default clause
  case 0:
    doSomething();
    break;
  case 1:
    doSomethingElse();
    break;
}

switch (param) {
  default: // default clause should be the last one
    error();
    break;
  case 0:
    doSomething();
    break;
  case 1:
    doSomethingElse();
    break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch (param) {
  case 0:
    doSomething();
    break;
  case 1:
    doSomethingElse();
    break;
  default:
    error();
    break;
}
</pre>
<h2>Exceptions</h2>
<p>If the <code>switch</code> parameter is an <code>Enum</code> and if all the constants of this enum are used in the <code>case</code> statements,
then no <code>default</code> clause is expected.</p>
<p>Example:</p>
<pre>
public enum Day {
    SUNDAY, MONDAY
}
...
switch(day) {
  case SUNDAY:
    doSomething();
    break;
  case MONDAY:
    doSomethingElse();
    break;
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/478"">MITRE, CWE-478</a> - Missing Default Case in Switch Statement </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/RtYxBQ"">CERT, MSC01-C.</a> - Strive for logical completeness </li>
</ul>","<p>The requirement for a final <code>default</code> clause is defensive programming. The clause should either take appropriate action, or contain a
suitable comment as to why no action is taken.</p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (param) {  //missing default clause
  case 0:
    doSomething();
    break;
  case 1:
    doSomethingElse();
    break;
}

switch (param) {
  default: // default clause should be the last one
    error();
    break;
  case 0:
    doSomething();
    break;
  case 1:
    doSomethingElse();
    break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch (param) {
  case 0:
    doSomething();
    break;
  case 1:
    doSomethingElse();
    break;
  default:
    error();
    break;
}
</pre>
<h2>Exceptions</h2>
<p>If the <code>switch</code> parameter is an <code>Enum</code> and if all the constants of this enum are used in the <code>case</code> statements,
then no <code>default</code> clause is expected.</p>
<p>Example:</p>
<pre>
public enum Day {
    SUNDAY, MONDAY
}
...
switch(day) {
  case SUNDAY:
    doSomething();
    break;
  case MONDAY:
    doSomethingElse();
    break;
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/478"">MITRE, CWE-478</a> - Missing Default Case in Switch Statement </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/RtYxBQ"">CERT, MSC01-C.</a> - Strive for logical completeness </li>
</ul>",CRITICAL,READY,False,[],"['cert', 'cwe']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>The requirement for a final <code>default</code> clause is defensive programming. The clause should either take appropriate action, or contain a\nsuitable comment as to why no action is taken.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (param) {  //missing default clause\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n\nswitch (param) {\n  default: // default clause should be the last one\n    error();\n    break;\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (param) {\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n  default:\n    error();\n    break;\n}\n</pre>\n<h2>Exceptions</h2>\n<p>If the <code>switch</code> parameter is an <code>Enum</code> and if all the constants of this enum are used in the <code>case</code> statements,\nthen no <code>default</code> clause is expected.</p>\n<p>Example:</p>\n<pre>\npublic enum Day {\n    SUNDAY, MONDAY\n}\n...\nswitch(day) {\n  case SUNDAY:\n    doSomething();\n    break;\n  case MONDAY:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/478"">MITRE, CWE-478</a> - Missing Default Case in Switch Statement </li>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/RtYxBQ"">CERT, MSC01-C.</a> - Strive for logical completeness </li>\n</ul>'}]",[],['squid:SwitchLastCaseIsDefaultCheck'],,,,
java:S134,java,"Control flow statements ""if"", ""for"", ""while"", ""switch"" and ""try"" should not be nested too deeply",2023-06-14T03:41:52+0000,"<p>Nested <code>if</code>, <code>for</code>, <code>while</code>, <code>switch</code>, and <code>try</code> statements are key ingredients for making
what’s known as ""Spaghetti code"".</p>
<p>Such code is hard to read, refactor and therefore maintain.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold of 3:</p>
<pre>
if (condition1) {                  // Compliant - depth = 1
  /* ... */
  if (condition2) {                // Compliant - depth = 2
    /* ... */
    for(int i = 0; i &lt; 10; i++) {  // Compliant - depth = 3, not exceeding the limit
      /* ... */
      if (condition4) {            // Noncompliant - depth = 4
        if (condition5) {          // Depth = 5, exceeding the limit, but issues are only reported on depth = 4
          /* ... */
        }
        return;
      }
    }
  }
}
</pre>","<p>Nested <code>if</code>, <code>for</code>, <code>while</code>, <code>switch</code>, and <code>try</code> statements are key ingredients for making
what’s known as ""Spaghetti code"".</p>
<p>Such code is hard to read, refactor and therefore maintain.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold of 3:</p>
<pre>
if (condition1) {                  // Compliant - depth = 1
  /* ... */
  if (condition2) {                // Compliant - depth = 2
    /* ... */
    for(int i = 0; i &lt; 10; i++) {  // Compliant - depth = 3, not exceeding the limit
      /* ... */
      if (condition4) {            // Noncompliant - depth = 4
        if (condition5) {          // Depth = 5, exceeding the limit, but issues are only reported on depth = 4
          /* ... */
        }
        return;
      }
    }
  }
}
</pre>",CRITICAL,READY,False,[],['brain-overload'],java,Java,"[{'key': 'max', 'htmlDesc': 'Maximum allowed control flow statement nesting depth.', 'defaultValue': '3', 'type': 'INTEGER'}]",CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,10min,CONSTANT_ISSUE,10min,False,ALL,False,"[{'key': 'default', 'content': '<p>Nested <code>if</code>, <code>for</code>, <code>while</code>, <code>switch</code>, and <code>try</code> statements are key ingredients for making\nwhat’s known as ""Spaghetti code"".</p>\n<p>Such code is hard to read, refactor and therefore maintain.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 3:</p>\n<pre>\nif (condition1) {                  // Compliant - depth = 1\n  /* ... */\n  if (condition2) {                // Compliant - depth = 2\n    /* ... */\n    for(int i = 0; i &lt; 10; i++) {  // Compliant - depth = 3, not exceeding the limit\n      /* ... */\n      if (condition4) {            // Noncompliant - depth = 4\n        if (condition5) {          // Depth = 5, exceeding the limit, but issues are only reported on depth = 4\n          /* ... */\n        }\n        return;\n      }\n    }\n  }\n}\n</pre>'}]",[],['squid:S134'],,,,
java:S1710,java,Annotation repetitions should not be wrapped,2023-06-14T03:41:52+0000,"<p>Before Java 8 if you needed to use multiple instances of the same annotation, they had to be wrapped in a container annotation. With Java 8, that’s
no longer necessary, allowing for cleaner, more readable code.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project’s <code>sonar.java.source</code> is lower than <code>8</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@SomeAnnotations({  // Noncompliant
  @SomeAnnotation(..a..),
  @SomeAnnotation(..b..),
  @SomeAnnotation(..c..),
})
public class SomeClass {
  ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@SomeAnnotation(..a..)
@SomeAnnotation(..b..)
@SomeAnnotation(..c..)
public class SomeClass {
  ...
}
</pre>","<p>Before Java 8 if you needed to use multiple instances of the same annotation, they had to be wrapped in a container annotation. With Java 8, that’s
no longer necessary, allowing for cleaner, more readable code.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project’s <code>sonar.java.source</code> is lower than <code>8</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@SomeAnnotations({  // Noncompliant
  @SomeAnnotation(..a..),
  @SomeAnnotation(..b..),
  @SomeAnnotation(..c..),
})
public class SomeClass {
  ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@SomeAnnotation(..a..)
@SomeAnnotation(..b..)
@SomeAnnotation(..c..)
public class SomeClass {
  ...
}
</pre>",MINOR,READY,False,[],['java8'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,2min,CONSTANT_ISSUE,2min,False,ALL,False,"[{'key': 'default', 'content': '<p>Before Java 8 if you needed to use multiple instances of the same annotation, they had to be wrapped in a container annotation. With Java 8, that’s\nno longer necessary, allowing for cleaner, more readable code.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project’s <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@SomeAnnotations({  // Noncompliant\n  @SomeAnnotation(..a..),\n  @SomeAnnotation(..b..),\n  @SomeAnnotation(..c..),\n})\npublic class SomeClass {\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@SomeAnnotation(..a..)\n@SomeAnnotation(..b..)\n@SomeAnnotation(..c..)\npublic class SomeClass {\n  ...\n}\n</pre>'}]",[],['squid:S1710'],,,,
java:S1711,java,Standard functional interfaces should not be redefined,2023-06-14T03:41:52+0000,"<p>Just as there is little justification for writing your own String class, there is no good reason to re-define one of the existing, standard
functional interfaces.</p>
<p>Doing so may seem tempting, since it would allow you to specify a little extra context with the name. But in the long run, it will be a source of
confusion, because maintenance programmers will wonder what is different between the custom functional interface and the standard one.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@FunctionalInterface
public interface MyInterface { // Noncompliant
	double toDouble(int a);
}

@FunctionalInterface
public interface ExtendedBooleanSupplier { // Noncompliant
  boolean get();
  default boolean isFalse() {
    return !get();
  }
}

public class MyClass {
    private int a;
    public double myMethod(MyInterface instance){
	return instance.toDouble(a);
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@FunctionalInterface
public interface ExtendedBooleanSupplier extends BooleanSupplier { // Compliant, extends java.util.function.BooleanSupplier
  default boolean isFalse() {
    return !getAsBoolean();
  }
}

public class MyClass {
    private int a;
    public double myMethod(IntToDoubleFunction instance){
	return instance.applyAsDouble(a);
    }
}
</pre>","<p>Just as there is little justification for writing your own String class, there is no good reason to re-define one of the existing, standard
functional interfaces.</p>
<p>Doing so may seem tempting, since it would allow you to specify a little extra context with the name. But in the long run, it will be a source of
confusion, because maintenance programmers will wonder what is different between the custom functional interface and the standard one.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@FunctionalInterface
public interface MyInterface { // Noncompliant
	double toDouble(int a);
}

@FunctionalInterface
public interface ExtendedBooleanSupplier { // Noncompliant
  boolean get();
  default boolean isFalse() {
    return !get();
  }
}

public class MyClass {
    private int a;
    public double myMethod(MyInterface instance){
	return instance.toDouble(a);
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@FunctionalInterface
public interface ExtendedBooleanSupplier extends BooleanSupplier { // Compliant, extends java.util.function.BooleanSupplier
  default boolean isFalse() {
    return !getAsBoolean();
  }
}

public class MyClass {
    private int a;
    public double myMethod(IntToDoubleFunction instance){
	return instance.applyAsDouble(a);
    }
}
</pre>",MAJOR,READY,False,[],['java8'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,10min,CONSTANT_ISSUE,10min,False,MAIN,False,"[{'key': 'default', 'content': '<p>Just as there is little justification for writing your own String class, there is no good reason to re-define one of the existing, standard\nfunctional interfaces.</p>\n<p>Doing so may seem tempting, since it would allow you to specify a little extra context with the name. But in the long run, it will be a source of\nconfusion, because maintenance programmers will wonder what is different between the custom functional interface and the standard one.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@FunctionalInterface\npublic interface MyInterface { // Noncompliant\n\tdouble toDouble(int a);\n}\n\n@FunctionalInterface\npublic interface ExtendedBooleanSupplier { // Noncompliant\n  boolean get();\n  default boolean isFalse() {\n    return !get();\n  }\n}\n\npublic class MyClass {\n    private int a;\n    public double myMethod(MyInterface instance){\n\treturn instance.toDouble(a);\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@FunctionalInterface\npublic interface ExtendedBooleanSupplier extends BooleanSupplier { // Compliant, extends java.util.function.BooleanSupplier\n  default boolean isFalse() {\n    return !getAsBoolean();\n  }\n}\n\npublic class MyClass {\n    private int a;\n    public double myMethod(IntToDoubleFunction instance){\n\treturn instance.applyAsDouble(a);\n    }\n}\n</pre>'}]",[],['squid:S1711'],,,,
java:S2924,java,JUnit rules should be used,2023-06-14T03:41:52+0000,"<p>While some <code>TestRule</code> classes have the desired effect without ever being directly referenced by a test, several others do not, and
there’s no reason to leave them cluttering up the file if they’re not in use.</p>
<p>This rule raises an issue when <code>Test</code> class fields of the following types aren’t used by any of the test methods:
<code>TemporaryFolder</code>, and <code>TestName</code>.</p>
<p>This rule also applies to the JUnit 5 equivalent classes: <code>TempDir</code>, and <code>TestInfo</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class ProjectDefinitionTest {

  @Rule
  public TemporaryFolder temp = new TemporaryFolder();  // Noncompliant

  @Test
  public void shouldSetKey() {
    ProjectDefinition def = ProjectDefinition.create();
    def.setKey(""mykey"");
    assertThat(def.getKey(), is(""mykey""));
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class ProjectDefinitionTest {

  @Test
  public void shouldSetKey() {
    ProjectDefinition def = ProjectDefinition.create();
    def.setKey(""mykey"");
    assertThat(def.getKey(), is(""mykey""));
  }
}
</pre>","<p>While some <code>TestRule</code> classes have the desired effect without ever being directly referenced by a test, several others do not, and
there’s no reason to leave them cluttering up the file if they’re not in use.</p>
<p>This rule raises an issue when <code>Test</code> class fields of the following types aren’t used by any of the test methods:
<code>TemporaryFolder</code>, and <code>TestName</code>.</p>
<p>This rule also applies to the JUnit 5 equivalent classes: <code>TempDir</code>, and <code>TestInfo</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class ProjectDefinitionTest {

  @Rule
  public TemporaryFolder temp = new TemporaryFolder();  // Noncompliant

  @Test
  public void shouldSetKey() {
    ProjectDefinition def = ProjectDefinition.create();
    def.setKey(""mykey"");
    assertThat(def.getKey(), is(""mykey""));
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class ProjectDefinitionTest {

  @Test
  public void shouldSetKey() {
    ProjectDefinition def = ProjectDefinition.create();
    def.setKey(""mykey"");
    assertThat(def.getKey(), is(""mykey""));
  }
}
</pre>",MINOR,READY,False,[],"['junit', 'tests', 'unused']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,TEST,False,"[{'key': 'default', 'content': '<p>While some <code>TestRule</code> classes have the desired effect without ever being directly referenced by a test, several others do not, and\nthere’s no reason to leave them cluttering up the file if they’re not in use.</p>\n<p>This rule raises an issue when <code>Test</code> class fields of the following types aren’t used by any of the test methods:\n<code>TemporaryFolder</code>, and <code>TestName</code>.</p>\n<p>This rule also applies to the JUnit 5 equivalent classes: <code>TempDir</code>, and <code>TestInfo</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class ProjectDefinitionTest {\n\n  @Rule\n  public TemporaryFolder temp = new TemporaryFolder();  // Noncompliant\n\n  @Test\n  public void shouldSetKey() {\n    ProjectDefinition def = ProjectDefinition.create();\n    def.setKey(""mykey"");\n    assertThat(def.getKey(), is(""mykey""));\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class ProjectDefinitionTest {\n\n  @Test\n  public void shouldSetKey() {\n    ProjectDefinition def = ProjectDefinition.create();\n    def.setKey(""mykey"");\n    assertThat(def.getKey(), is(""mykey""));\n  }\n}\n</pre>'}]",[],['squid:S2924'],,,,
java:S2925,java,"""Thread.sleep"" should not be used in tests",2023-06-14T03:41:52+0000,"<p>Using <code>Thread.sleep</code> in a test is just generally a bad idea. It creates brittle tests that can fail unpredictably depending on
environment (""Passes on my machine!"") or load. Don’t rely on timing (use mocks) or use libraries such as <code>Awaitility</code> for asynchroneous
testing.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@Test
public void testDoTheThing(){

  MyClass myClass = new MyClass();
  myClass.doTheThing();

  Thread.sleep(500);  // Noncompliant
  // assertions...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@Test
public void testDoTheThing(){

  MyClass myClass = new MyClass();
  myClass.doTheThing();

  await().atMost(2, Duration.SECONDS).until(didTheThing());  // Compliant
  // assertions...
}

private Callable&lt;Boolean&gt; didTheThing() {
  return new Callable&lt;Boolean&gt;() {
    public Boolean call() throws Exception {
      // check the condition that must be fulfilled...
    }
  };
}
</pre>","<p>Using <code>Thread.sleep</code> in a test is just generally a bad idea. It creates brittle tests that can fail unpredictably depending on
environment (""Passes on my machine!"") or load. Don’t rely on timing (use mocks) or use libraries such as <code>Awaitility</code> for asynchroneous
testing.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@Test
public void testDoTheThing(){

  MyClass myClass = new MyClass();
  myClass.doTheThing();

  Thread.sleep(500);  // Noncompliant
  // assertions...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@Test
public void testDoTheThing(){

  MyClass myClass = new MyClass();
  myClass.doTheThing();

  await().atMost(2, Duration.SECONDS).until(didTheThing());  // Compliant
  // assertions...
}

private Callable&lt;Boolean&gt; didTheThing() {
  return new Callable&lt;Boolean&gt;() {
    public Boolean call() throws Exception {
      // check the condition that must be fulfilled...
    }
  };
}
</pre>",MAJOR,READY,False,[],"['bad-practice', 'tests']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,20min,CONSTANT_ISSUE,20min,False,TEST,False,"[{'key': 'default', 'content': '<p>Using <code>Thread.sleep</code> in a test is just generally a bad idea. It creates brittle tests that can fail unpredictably depending on\nenvironment (""Passes on my machine!"") or load. Don’t rely on timing (use mocks) or use libraries such as <code>Awaitility</code> for asynchroneous\ntesting.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Test\npublic void testDoTheThing(){\n\n  MyClass myClass = new MyClass();\n  myClass.doTheThing();\n\n  Thread.sleep(500);  // Noncompliant\n  // assertions...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Test\npublic void testDoTheThing(){\n\n  MyClass myClass = new MyClass();\n  myClass.doTheThing();\n\n  await().atMost(2, Duration.SECONDS).until(didTheThing());  // Compliant\n  // assertions...\n}\n\nprivate Callable&lt;Boolean&gt; didTheThing() {\n  return new Callable&lt;Boolean&gt;() {\n    public Boolean call() throws Exception {\n      // check the condition that must be fulfilled...\n    }\n  };\n}\n</pre>'}]",[],['squid:S2925'],,,,
java:S135,java,"Loops should not contain more than a single ""break"" or ""continue"" statement",2023-06-14T03:41:52+0000,"<p>Restricting the number of <code>break</code> and <code>continue</code> statements in a loop is done in the interest of good structured
programming.</p>
<p>Only one <code>break</code> or one <code>continue</code> statement is acceptable in a loop, since it facilitates optimal coding. If there is more
than one, the code should be refactored to increase readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (int i = 1; i &lt;= 10; i++) {     // Noncompliant - 2 continue - one might be tempted to add some logic in between
  if (i % 2 == 0) {
    continue;
  }

  if (i % 3 == 0) {
    continue;
  }

  System.out.println(""i = "" + i);
}
</pre>","<p>Restricting the number of <code>break</code> and <code>continue</code> statements in a loop is done in the interest of good structured
programming.</p>
<p>Only one <code>break</code> or one <code>continue</code> statement is acceptable in a loop, since it facilitates optimal coding. If there is more
than one, the code should be refactored to increase readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (int i = 1; i &lt;= 10; i++) {     // Noncompliant - 2 continue - one might be tempted to add some logic in between
  if (i % 2 == 0) {
    continue;
  }

  if (i % 3 == 0) {
    continue;
  }

  System.out.println(""i = "" + i);
}
</pre>",MINOR,READY,False,[],['brain-overload'],java,Java,[],LINEAR,LINEAR,CODE_SMELL,LINEAR,,LINEAR,,False,ALL,False,"[{'key': 'default', 'content': '<p>Restricting the number of <code>break</code> and <code>continue</code> statements in a loop is done in the interest of good structured\nprogramming.</p>\n<p>Only one <code>break</code> or one <code>continue</code> statement is acceptable in a loop, since it facilitates optimal coding. If there is more\nthan one, the code should be refactored to increase readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 1; i &lt;= 10; i++) {     // Noncompliant - 2 continue - one might be tempted to add some logic in between\n  if (i % 2 == 0) {\n    continue;\n  }\n\n  if (i % 3 == 0) {\n    continue;\n  }\n\n  System.out.println(""i = "" + i);\n}\n</pre>'}]",[],['squid:S135'],20min,20min,"per extra [""break"" or ""continue""|""CONTINUE"", ""EXIT"", ""CHECK""] statement",
java:S138,java,Methods should not have too many lines,2023-06-14T03:41:52+0000,"<p>A method that grows too large tends to aggregate too many responsibilities. Such method inevitably become harder to understand and therefore harder
to maintain.</p>
<p>Above a specific threshold, it is strongly advised to refactor into smaller methods which focus on well-defined tasks. Those smaller methods will
not only be easier to understand, but also probably easier to test.</p>","<p>A method that grows too large tends to aggregate too many responsibilities. Such method inevitably become harder to understand and therefore harder
to maintain.</p>
<p>Above a specific threshold, it is strongly advised to refactor into smaller methods which focus on well-defined tasks. Those smaller methods will
not only be easier to understand, but also probably easier to test.</p>",MAJOR,READY,False,[],['brain-overload'],java,Java,"[{'key': 'max', 'htmlDesc': 'Maximum authorized lines in a method', 'defaultValue': '75', 'type': 'INTEGER'}]",CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,20min,CONSTANT_ISSUE,20min,False,MAIN,False,"[{'key': 'default', 'content': '<p>A method that grows too large tends to aggregate too many responsibilities. Such method inevitably become harder to understand and therefore harder\nto maintain.</p>\n<p>Above a specific threshold, it is strongly advised to refactor into smaller methods which focus on well-defined tasks. Those smaller methods will\nnot only be easier to understand, but also probably easier to test.</p>'}]",[],['squid:S138'],,,,
java:S139,java,Comments should not be located at the end of lines of code,2023-06-14T03:41:52+0000,"<p>This rule verifies that single-line comments are not located at the ends of lines of code. The main idea behind this rule is that in order to be
really readable, trailing comments would have to be properly written and formatted (correct alignment, no interference with the visual structure of
the code, not too long to be visible) but most often, automatic code formatters would not handle this correctly: the code would end up less readable.
Comments are far better placed on the previous empty line of code, where they will always be visible and properly formatted.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int a1 = b + c; // This is a trailing comment that can be very very long
</pre>
<h2>Compliant Solution</h2>
<pre>
// This very long comment is better placed before the line of code
int a2 = b + c;
</pre>","<p>This rule verifies that single-line comments are not located at the ends of lines of code. The main idea behind this rule is that in order to be
really readable, trailing comments would have to be properly written and formatted (correct alignment, no interference with the visual structure of
the code, not too long to be visible) but most often, automatic code formatters would not handle this correctly: the code would end up less readable.
Comments are far better placed on the previous empty line of code, where they will always be visible and properly formatted.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int a1 = b + c; // This is a trailing comment that can be very very long
</pre>
<h2>Compliant Solution</h2>
<pre>
// This very long comment is better placed before the line of code
int a2 = b + c;
</pre>",MINOR,READY,False,[],['convention'],java,Java,"[{'key': 'legalTrailingCommentPattern', 'htmlDesc': 'Description Pattern for text of trailing comments that are allowed. By default, comments containing only one word.', 'defaultValue': '^\\s*+[^\\s]++$', 'type': 'STRING'}]",CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,1min,CONSTANT_ISSUE,1min,False,ALL,False,"[{'key': 'default', 'content': '<p>This rule verifies that single-line comments are not located at the ends of lines of code. The main idea behind this rule is that in order to be\nreally readable, trailing comments would have to be properly written and formatted (correct alignment, no interference with the visual structure of\nthe code, not too long to be visible) but most often, automatic code formatters would not handle this correctly: the code would end up less readable.\nComments are far better placed on the previous empty line of code, where they will always be visible and properly formatted.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint a1 = b + c; // This is a trailing comment that can be very very long\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n// This very long comment is better placed before the line of code\nint a2 = b + c;\n</pre>'}]",[],['squid:TrailingCommentCheck'],,,,
java:S1602,java,Lambdas containing only one statement should not nest this statement in a block,2023-06-14T03:41:52+0000,"<p>There are two ways to write lambdas that contain single statement, but one is definitely more compact and readable than the other.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project’s <code>sonar.java.source</code> is lower than <code>8</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
x -&gt; {System.out.println(x+1);}
(a, b) -&gt; { return a+b; }
</pre>
<h2>Compliant Solution</h2>
<pre>
x -&gt; System.out.println(x+1)
(a, b) -&gt; a+b    //For return statement, the return keyword should also be dropped
</pre>","<p>There are two ways to write lambdas that contain single statement, but one is definitely more compact and readable than the other.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project’s <code>sonar.java.source</code> is lower than <code>8</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
x -&gt; {System.out.println(x+1);}
(a, b) -&gt; { return a+b; }
</pre>
<h2>Compliant Solution</h2>
<pre>
x -&gt; System.out.println(x+1)
(a, b) -&gt; a+b    //For return statement, the return keyword should also be dropped
</pre>",MINOR,READY,False,[],['java8'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>There are two ways to write lambdas that contain single statement, but one is definitely more compact and readable than the other.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project’s <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nx -&gt; {System.out.println(x+1);}\n(a, b) -&gt; { return a+b; }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nx -&gt; System.out.println(x+1)\n(a, b) -&gt; a+b    //For return statement, the return keyword should also be dropped\n</pre>'}]",[],['squid:S1602'],,,,
java:S1604,java,Anonymous inner classes containing only one method should become lambdas,2023-06-14T03:41:52+0000,"<p>Before Java 8, the only way to partially support closures in Java was by using anonymous inner classes. But the syntax of anonymous classes may
seem unwieldy and unclear.</p>
<p>With Java 8, most uses of anonymous inner classes should be replaced by lambdas to highly increase the readability of the source code.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project’s <code>sonar.java.source</code> is lower than <code>8</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
myCollection.stream().map(new Mapper&lt;String,String&gt;() {
  public String map(String input) {
    return new StringBuilder(input).reverse().toString();
  }
});

Predicate&lt;String&gt; isEmpty = new Predicate&lt;String&gt; {
    boolean test(String myString) {
        return myString.isEmpty();
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
myCollection.stream().map(input -&gt; new StringBuilder(input).reverse().toString());

Predicate&lt;String&gt; isEmpty = myString -&gt; myString.isEmpty();
</pre>","<p>Before Java 8, the only way to partially support closures in Java was by using anonymous inner classes. But the syntax of anonymous classes may
seem unwieldy and unclear.</p>
<p>With Java 8, most uses of anonymous inner classes should be replaced by lambdas to highly increase the readability of the source code.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project’s <code>sonar.java.source</code> is lower than <code>8</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
myCollection.stream().map(new Mapper&lt;String,String&gt;() {
  public String map(String input) {
    return new StringBuilder(input).reverse().toString();
  }
});

Predicate&lt;String&gt; isEmpty = new Predicate&lt;String&gt; {
    boolean test(String myString) {
        return myString.isEmpty();
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
myCollection.stream().map(input -&gt; new StringBuilder(input).reverse().toString());

Predicate&lt;String&gt; isEmpty = myString -&gt; myString.isEmpty();
</pre>",MAJOR,READY,False,[],['java8'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>Before Java 8, the only way to partially support closures in Java was by using anonymous inner classes. But the syntax of anonymous classes may\nseem unwieldy and unclear.</p>\n<p>With Java 8, most uses of anonymous inner classes should be replaced by lambdas to highly increase the readability of the source code.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project’s <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nmyCollection.stream().map(new Mapper&lt;String,String&gt;() {\n  public String map(String input) {\n    return new StringBuilder(input).reverse().toString();\n  }\n});\n\nPredicate&lt;String&gt; isEmpty = new Predicate&lt;String&gt; {\n    boolean test(String myString) {\n        return myString.isEmpty();\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nmyCollection.stream().map(input -&gt; new StringBuilder(input).reverse().toString());\n\nPredicate&lt;String&gt; isEmpty = myString -&gt; myString.isEmpty();\n</pre>'}]",[],['squid:S1604'],,,,
java:S1607,java,JUnit4 @Ignored and JUnit5 @Disabled annotations should be used to disable tests and should provide a rationale,2023-06-14T03:41:52+0000,"<p>When a test fails due, for example, to infrastructure issues, you might want to ignore it temporarily. But without some kind of notation about why
the test is being ignored, it may never be reactivated. Such tests are difficult to address without comprehensive knowledge of the project, and end up
polluting their projects.</p>
<p>This rule raises an issue for each ignored test that does not have any comment about why it is being skipped.</p>
<ul>
  <li> For Junit4, this rule targets the @Ignore annotation. </li>
  <li> For Junit5, this rule targets the @Disabled annotation. </li>
  <li> Cases where assumeTrue(false) or assumeFalse(true) are used to skip tests are targeted as well. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
@Ignore  // Noncompliant
@Test
public void testDoTheThing() {
  // ...
</pre>
<p>or</p>
<pre>
@Test
public void testDoTheThing() {
  Assume.assumeFalse(true); // Noncompliant
  // ...
</pre>
<h2>Compliant Solution</h2>
<pre>
@Test
@Ignore(""See Ticket #1234"")
public void testDoTheThing() {
  // ...
</pre>","<p>When a test fails due, for example, to infrastructure issues, you might want to ignore it temporarily. But without some kind of notation about why
the test is being ignored, it may never be reactivated. Such tests are difficult to address without comprehensive knowledge of the project, and end up
polluting their projects.</p>
<p>This rule raises an issue for each ignored test that does not have any comment about why it is being skipped.</p>
<ul>
  <li> For Junit4, this rule targets the @Ignore annotation. </li>
  <li> For Junit5, this rule targets the @Disabled annotation. </li>
  <li> Cases where assumeTrue(false) or assumeFalse(true) are used to skip tests are targeted as well. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
@Ignore  // Noncompliant
@Test
public void testDoTheThing() {
  // ...
</pre>
<p>or</p>
<pre>
@Test
public void testDoTheThing() {
  Assume.assumeFalse(true); // Noncompliant
  // ...
</pre>
<h2>Compliant Solution</h2>
<pre>
@Test
@Ignore(""See Ticket #1234"")
public void testDoTheThing() {
  // ...
</pre>",MAJOR,READY,False,[],"['bad-practice', 'confusing', 'junit', 'suspicious', 'tests']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,10min,CONSTANT_ISSUE,10min,False,TEST,False,"[{'key': 'default', 'content': '<p>When a test fails due, for example, to infrastructure issues, you might want to ignore it temporarily. But without some kind of notation about why\nthe test is being ignored, it may never be reactivated. Such tests are difficult to address without comprehensive knowledge of the project, and end up\npolluting their projects.</p>\n<p>This rule raises an issue for each ignored test that does not have any comment about why it is being skipped.</p>\n<ul>\n  <li> For Junit4, this rule targets the @Ignore annotation. </li>\n  <li> For Junit5, this rule targets the @Disabled annotation. </li>\n  <li> Cases where assumeTrue(false) or assumeFalse(true) are used to skip tests are targeted as well. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Ignore  // Noncompliant\n@Test\npublic void testDoTheThing() {\n  // ...\n</pre>\n<p>or</p>\n<pre>\n@Test\npublic void testDoTheThing() {\n  Assume.assumeFalse(true); // Noncompliant\n  // ...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Test\n@Ignore(""See Ticket #1234"")\npublic void testDoTheThing() {\n  // ...\n</pre>'}]",[],['squid:S1607'],,,,
java:S1844,java,"""Object.wait(...)"" should never be called on objects that implement ""java.util.concurrent.locks.Condition""",2023-06-14T03:41:52+0000,"<p>From the Java API documentation:</p>
<blockquote>
  <p><code>Condition</code> factors out the <code>Object</code> monitor methods (<code>wait</code>, <code>notify</code> and <code>notifyAll</code>)
  into distinct objects to give the effect of having multiple wait-sets per object, by combining them with the use of arbitrary Lock implementations.
  Where a <code>Lock</code> replaces the use of <code>synchronized</code> methods and statements, a <code>Condition</code> replaces the use of the
  <code>Object</code> monitor methods.</p>
</blockquote>
<p>The purpose of implementing the <code>Condition</code> interface is to gain access to its more nuanced <code>await</code> methods. Therefore,
calling the method <code>Object.wait(...)</code> on a class implementing the <code>Condition</code> interface is silly and confusing.</p>
<h2>Noncompliant Code Example</h2>
<pre>
final Lock lock = new ReentrantLock();
final Condition notFull  = lock.newCondition();
...
notFull.wait();
</pre>
<h2>Compliant Solution</h2>
<pre>
final Lock lock = new ReentrantLock();
final Condition notFull  = lock.newCondition();
...
notFull.await();
</pre>","<p>From the Java API documentation:</p>
<blockquote>
  <p><code>Condition</code> factors out the <code>Object</code> monitor methods (<code>wait</code>, <code>notify</code> and <code>notifyAll</code>)
  into distinct objects to give the effect of having multiple wait-sets per object, by combining them with the use of arbitrary Lock implementations.
  Where a <code>Lock</code> replaces the use of <code>synchronized</code> methods and statements, a <code>Condition</code> replaces the use of the
  <code>Object</code> monitor methods.</p>
</blockquote>
<p>The purpose of implementing the <code>Condition</code> interface is to gain access to its more nuanced <code>await</code> methods. Therefore,
calling the method <code>Object.wait(...)</code> on a class implementing the <code>Condition</code> interface is silly and confusing.</p>
<h2>Noncompliant Code Example</h2>
<pre>
final Lock lock = new ReentrantLock();
final Condition notFull  = lock.newCondition();
...
notFull.wait();
</pre>
<h2>Compliant Solution</h2>
<pre>
final Lock lock = new ReentrantLock();
final Condition notFull  = lock.newCondition();
...
notFull.await();
</pre>",MAJOR,READY,False,[],['suspicious'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,20min,CONSTANT_ISSUE,20min,False,ALL,False,"[{'key': 'default', 'content': '<p>From the Java API documentation:</p>\n<blockquote>\n  <p><code>Condition</code> factors out the <code>Object</code> monitor methods (<code>wait</code>, <code>notify</code> and <code>notifyAll</code>)\n  into distinct objects to give the effect of having multiple wait-sets per object, by combining them with the use of arbitrary Lock implementations.\n  Where a <code>Lock</code> replaces the use of <code>synchronized</code> methods and statements, a <code>Condition</code> replaces the use of the\n  <code>Object</code> monitor methods.</p>\n</blockquote>\n<p>The purpose of implementing the <code>Condition</code> interface is to gain access to its more nuanced <code>await</code> methods. Therefore,\ncalling the method <code>Object.wait(...)</code> on a class implementing the <code>Condition</code> interface is silly and confusing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfinal Lock lock = new ReentrantLock();\nfinal Condition notFull  = lock.newCondition();\n...\nnotFull.wait();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfinal Lock lock = new ReentrantLock();\nfinal Condition notFull  = lock.newCondition();\n...\nnotFull.await();\n</pre>'}]",[],['squid:S1844'],,,,
java:S1845,java,Methods and field names should not be the same or differ only by capitalization,2023-06-14T03:41:52+0000,"<p>Looking at the set of methods in a class, including superclass methods, and finding two methods or fields that differ only by capitalization is
confusing to users of the class. It is similarly confusing to have a method and a field which differ only in capitalization or a method and a field
with exactly the same name and visibility.</p>
<p>In the case of methods, it may have been a mistake on the part of the original developer, who intended to override a superclass method, but instead
added a new method with nearly the same name.</p>
<p>Otherwise, this situation simply indicates poor naming. Method names should be action-oriented, and thus contain a verb, which is unlikely in the
case where both a method and a member have the same name (with or without capitalization differences). However, renaming a public method could be
disruptive to callers. Therefore renaming the member is the recommended action.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Car{

  public DriveTrain drive;

  public void tearDown(){...}

  public void drive() {...}  // Noncompliant; duplicates field name
}

public class MyCar extends Car{
  public void teardown(){...}  // Noncompliant; not an override. It it really what's intended?

  public void drivefast(){...}

  public void driveFast(){...} //Huh?
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Car{

  private DriveTrain drive;

  public void tearDown(){...}

  public void drive() {...}  // field visibility reduced
}

public class MyCar extends Car{
  @Override
  public void tearDown(){...}

  public void drivefast(){...}

  public void driveReallyFast(){...}

}
</pre>","<p>Looking at the set of methods in a class, including superclass methods, and finding two methods or fields that differ only by capitalization is
confusing to users of the class. It is similarly confusing to have a method and a field which differ only in capitalization or a method and a field
with exactly the same name and visibility.</p>
<p>In the case of methods, it may have been a mistake on the part of the original developer, who intended to override a superclass method, but instead
added a new method with nearly the same name.</p>
<p>Otherwise, this situation simply indicates poor naming. Method names should be action-oriented, and thus contain a verb, which is unlikely in the
case where both a method and a member have the same name (with or without capitalization differences). However, renaming a public method could be
disruptive to callers. Therefore renaming the member is the recommended action.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Car{

  public DriveTrain drive;

  public void tearDown(){...}

  public void drive() {...}  // Noncompliant; duplicates field name
}

public class MyCar extends Car{
  public void teardown(){...}  // Noncompliant; not an override. It it really what's intended?

  public void drivefast(){...}

  public void driveFast(){...} //Huh?
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Car{

  private DriveTrain drive;

  public void tearDown(){...}

  public void drive() {...}  // field visibility reduced
}

public class MyCar extends Car{
  @Override
  public void tearDown(){...}

  public void drivefast(){...}

  public void driveReallyFast(){...}

}
</pre>",BLOCKER,READY,False,[],['confusing'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,10min,CONSTANT_ISSUE,10min,False,ALL,False,"[{'key': 'default', 'content': ""<p>Looking at the set of methods in a class, including superclass methods, and finding two methods or fields that differ only by capitalization is\nconfusing to users of the class. It is similarly confusing to have a method and a field which differ only in capitalization or a method and a field\nwith exactly the same name and visibility.</p>\n<p>In the case of methods, it may have been a mistake on the part of the original developer, who intended to override a superclass method, but instead\nadded a new method with nearly the same name.</p>\n<p>Otherwise, this situation simply indicates poor naming. Method names should be action-oriented, and thus contain a verb, which is unlikely in the\ncase where both a method and a member have the same name (with or without capitalization differences). However, renaming a public method could be\ndisruptive to callers. Therefore renaming the member is the recommended action.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Car{\n\n  public DriveTrain drive;\n\n  public void tearDown(){...}\n\n  public void drive() {...}  // Noncompliant; duplicates field name\n}\n\npublic class MyCar extends Car{\n  public void teardown(){...}  // Noncompliant; not an override. It it really what's intended?\n\n  public void drivefast(){...}\n\n  public void driveFast(){...} //Huh?\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Car{\n\n  private DriveTrain drive;\n\n  public void tearDown(){...}\n\n  public void drive() {...}  // field visibility reduced\n}\n\npublic class MyCar extends Car{\n  @Override\n  public void tearDown(){...}\n\n  public void drivefast(){...}\n\n  public void driveReallyFast(){...}\n\n}\n</pre>""}]",[],['squid:S1845'],,,,
java:S5194,java,"Use Java 12 ""switch"" expression",2023-06-14T03:41:52+0000,"<p>Many existing switch statements are essentially simulations of switch expressions, where each arm either assigns to a common target variable or
returns a value. Expressing this as a statement is roundabout, repetitive, and error-prone.</p>
<p>Java 12 added support for switch expressions, which provide more succinct and less error-prone version of switch.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void day_of_week(DoW day) {
    int numLetters;
    switch (day) {  // Noncompliant
      case MONDAY:
      case FRIDAY:
      case SUNDAY:
        numLetters = 6;
        break;
      case TUESDAY:
        numLetters = 7;
        break;
      case THURSDAY:
      case SATURDAY:
        numLetters = 8;
        break;
      case WEDNESDAY:
        numLetters = 9;
        break;
      default:
        throw new IllegalStateException(""Wat: "" + day);
    }
}

int return_switch(int x) {
    switch (x) { // Noncompliant
      case 1:
        return 1;
      case 2:
        return 2;
      default:
        throw new IllegalStateException();
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
int numLetters = switch (day) {
    case MONDAY, FRIDAY, SUNDAY -&gt; 6;
    case TUESDAY                -&gt; 7;
    case THURSDAY, SATURDAY     -&gt; 8;
    case WEDNESDAY              -&gt; 9;
};
</pre>","<p>Many existing switch statements are essentially simulations of switch expressions, where each arm either assigns to a common target variable or
returns a value. Expressing this as a statement is roundabout, repetitive, and error-prone.</p>
<p>Java 12 added support for switch expressions, which provide more succinct and less error-prone version of switch.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void day_of_week(DoW day) {
    int numLetters;
    switch (day) {  // Noncompliant
      case MONDAY:
      case FRIDAY:
      case SUNDAY:
        numLetters = 6;
        break;
      case TUESDAY:
        numLetters = 7;
        break;
      case THURSDAY:
      case SATURDAY:
        numLetters = 8;
        break;
      case WEDNESDAY:
        numLetters = 9;
        break;
      default:
        throw new IllegalStateException(""Wat: "" + day);
    }
}

int return_switch(int x) {
    switch (x) { // Noncompliant
      case 1:
        return 1;
      case 2:
        return 2;
      default:
        throw new IllegalStateException();
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
int numLetters = switch (day) {
    case MONDAY, FRIDAY, SUNDAY -&gt; 6;
    case TUESDAY                -&gt; 7;
    case THURSDAY, SATURDAY     -&gt; 8;
    case WEDNESDAY              -&gt; 9;
};
</pre>",MINOR,READY,False,[],['java12'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>Many existing switch statements are essentially simulations of switch expressions, where each arm either assigns to a common target variable or\nreturns a value. Expressing this as a statement is roundabout, repetitive, and error-prone.</p>\n<p>Java 12 added support for switch expressions, which provide more succinct and less error-prone version of switch.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid day_of_week(DoW day) {\n    int numLetters;\n    switch (day) {  // Noncompliant\n      case MONDAY:\n      case FRIDAY:\n      case SUNDAY:\n        numLetters = 6;\n        break;\n      case TUESDAY:\n        numLetters = 7;\n        break;\n      case THURSDAY:\n      case SATURDAY:\n        numLetters = 8;\n        break;\n      case WEDNESDAY:\n        numLetters = 9;\n        break;\n      default:\n        throw new IllegalStateException(""Wat: "" + day);\n    }\n}\n\nint return_switch(int x) {\n    switch (x) { // Noncompliant\n      case 1:\n        return 1;\n      case 2:\n        return 2;\n      default:\n        throw new IllegalStateException();\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint numLetters = switch (day) {\n    case MONDAY, FRIDAY, SUNDAY -&gt; 6;\n    case TUESDAY                -&gt; 7;\n    case THURSDAY, SATURDAY     -&gt; 8;\n    case WEDNESDAY              -&gt; 9;\n};\n</pre>'}]",[],['squid:S5194'],,,,
java:S110,java,Inheritance tree of classes should not be too deep,2023-06-14T03:41:52+0000,"<p>Inheritance is certainly one of the most valuable concepts in object-oriented programming. It’s a way to compartmentalize and reuse code by
creating collections of attributes and behaviors called classes which can be based on previously created classes. But abusing this concept by creating
a deep inheritance tree can lead to very complex and unmaintainable source code. Most of the time too deep of an inheritance tree is due to bad object
oriented design which leads to a systematic use of 'inheritance' when 'composition' would be better suited.</p>
<p>This rule raises an issue when the inheritance tree, starting from <code>Object</code> has a greater depth than is allowed.</p>
<p>For the parameter of the rule, the following rules are applied:</p>
<ul>
  <li> <code>?</code> matches a single character </li>
  <li> <code>*</code> matches zero or more characters </li>
  <li> <code>**</code> matches zero or more packages </li>
</ul>
<p>Examples:</p>
<ul>
  <li> <code>java.fwk.AbstractFwkClass</code> will stop count when AbstractFwkClassclass is reached. </li>
  <li> <code>java.fwk.*</code> will stop count when any member of java.fwkPackage package is reached. </li>
  <li> <code>java.fwk.**</code> same as above, but including sub-packages. </li>
</ul>
<p>Exceptions:</p>
<p>The rule stops counting when it encounters a class from one of the following packages (or sub-packages):</p>
<ul>
  <li> <code>android.**</code> </li>
  <li> <code>com.intellij.**</code> </li>
  <li> <code>com.persistit.**</code> </li>
  <li> <code>javax.swing.**</code> </li>
  <li> <code>org.eclipse.**</code> </li>
  <li> <code>org.springframework.**</code> </li>
</ul>","<p>Inheritance is certainly one of the most valuable concepts in object-oriented programming. It’s a way to compartmentalize and reuse code by
creating collections of attributes and behaviors called classes which can be based on previously created classes. But abusing this concept by creating
a deep inheritance tree can lead to very complex and unmaintainable source code. Most of the time too deep of an inheritance tree is due to bad object
oriented design which leads to a systematic use of 'inheritance' when 'composition' would be better suited.</p>
<p>This rule raises an issue when the inheritance tree, starting from <code>Object</code> has a greater depth than is allowed.</p>
<p>For the parameter of the rule, the following rules are applied:</p>
<ul>
  <li> <code>?</code> matches a single character </li>
  <li> <code>*</code> matches zero or more characters </li>
  <li> <code>**</code> matches zero or more packages </li>
</ul>
<p>Examples:</p>
<ul>
  <li> <code>java.fwk.AbstractFwkClass</code> will stop count when AbstractFwkClassclass is reached. </li>
  <li> <code>java.fwk.*</code> will stop count when any member of java.fwkPackage package is reached. </li>
  <li> <code>java.fwk.**</code> same as above, but including sub-packages. </li>
</ul>
<p>Exceptions:</p>
<p>The rule stops counting when it encounters a class from one of the following packages (or sub-packages):</p>
<ul>
  <li> <code>android.**</code> </li>
  <li> <code>com.intellij.**</code> </li>
  <li> <code>com.persistit.**</code> </li>
  <li> <code>javax.swing.**</code> </li>
  <li> <code>org.eclipse.**</code> </li>
  <li> <code>org.springframework.**</code> </li>
</ul>",MAJOR,READY,False,[],['design'],java,Java,"[{'key': 'max', 'htmlDesc': 'Maximum depth of the inheritance tree. (Number)', 'defaultValue': '5', 'type': 'INTEGER'}, {'key': 'filteredClasses', 'htmlDesc': 'Classes to be filtered out of the count of inheritance. Ex : java.fwk.AbstractFwkClass, java.fwkPackage.*', 'type': 'STRING'}]",LINEAR_OFFSET,LINEAR_OFFSET,CODE_SMELL,LINEAR_OFFSET,4h,LINEAR_OFFSET,4h,False,ALL,False,"[{'key': 'default', 'content': ""<p>Inheritance is certainly one of the most valuable concepts in object-oriented programming. It’s a way to compartmentalize and reuse code by\ncreating collections of attributes and behaviors called classes which can be based on previously created classes. But abusing this concept by creating\na deep inheritance tree can lead to very complex and unmaintainable source code. Most of the time too deep of an inheritance tree is due to bad object\noriented design which leads to a systematic use of 'inheritance' when 'composition' would be better suited.</p>\n<p>This rule raises an issue when the inheritance tree, starting from <code>Object</code> has a greater depth than is allowed.</p>\n<p>For the parameter of the rule, the following rules are applied:</p>\n<ul>\n  <li> <code>?</code> matches a single character </li>\n  <li> <code>*</code> matches zero or more characters </li>\n  <li> <code>**</code> matches zero or more packages </li>\n</ul>\n<p>Examples:</p>\n<ul>\n  <li> <code>java.fwk.AbstractFwkClass</code> will stop count when AbstractFwkClassclass is reached. </li>\n  <li> <code>java.fwk.*</code> will stop count when any member of java.fwkPackage package is reached. </li>\n  <li> <code>java.fwk.**</code> same as above, but including sub-packages. </li>\n</ul>\n<p>Exceptions:</p>\n<p>The rule stops counting when it encounters a class from one of the following packages (or sub-packages):</p>\n<ul>\n  <li> <code>android.**</code> </li>\n  <li> <code>com.intellij.**</code> </li>\n  <li> <code>com.persistit.**</code> </li>\n  <li> <code>javax.swing.**</code> </li>\n  <li> <code>org.eclipse.**</code> </li>\n  <li> <code>org.springframework.**</code> </li>\n</ul>""}]",[],['squid:MaximumInheritanceDepth'],30min,30min,Number of parents above the defined threshold,
java:S2188,java,JUnit test cases should call super methods,2023-06-14T03:41:52+0000,"<p>Overriding a parent class method prevents that method from being called unless an explicit <code>super</code> call is made in the overriding
method. In some cases not calling the <code>super</code> method is acceptable, but not with <code>setUp</code> and <code>tearDown</code> in a JUnit 3
<code>TestCase</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClassTest extends MyAbstractTestCase {

  private MyClass myClass;
    @Override
    protected void setUp() throws Exception {  // Noncompliant
      myClass = new MyClass();
    }
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClassTest extends MyAbstractTestCase {

  private MyClass myClass;
    @Override
    protected void setUp() throws Exception {
      super.setUp();
      myClass = new MyClass();
    }
</pre>","<p>Overriding a parent class method prevents that method from being called unless an explicit <code>super</code> call is made in the overriding
method. In some cases not calling the <code>super</code> method is acceptable, but not with <code>setUp</code> and <code>tearDown</code> in a JUnit 3
<code>TestCase</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClassTest extends MyAbstractTestCase {

  private MyClass myClass;
    @Override
    protected void setUp() throws Exception {  // Noncompliant
      myClass = new MyClass();
    }
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClassTest extends MyAbstractTestCase {

  private MyClass myClass;
    @Override
    protected void setUp() throws Exception {
      super.setUp();
      myClass = new MyClass();
    }
</pre>",BLOCKER,READY,False,[],"['junit', 'tests']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,TEST,False,"[{'key': 'default', 'content': '<p>Overriding a parent class method prevents that method from being called unless an explicit <code>super</code> call is made in the overriding\nmethod. In some cases not calling the <code>super</code> method is acceptable, but not with <code>setUp</code> and <code>tearDown</code> in a JUnit 3\n<code>TestCase</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClassTest extends MyAbstractTestCase {\n\n  private MyClass myClass;\n    @Override\n    protected void setUp() throws Exception {  // Noncompliant\n      myClass = new MyClass();\n    }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClassTest extends MyAbstractTestCase {\n\n  private MyClass myClass;\n    @Override\n    protected void setUp() throws Exception {\n      super.setUp();\n      myClass = new MyClass();\n    }\n</pre>'}]",[],['squid:S2188'],,,,
java:S3038,java,Abstract methods should not be redundant,2023-06-14T03:41:52+0000,"<p>There’s no point in redundantly defining an <code>abstract</code> method with the same signature as a method in an <code>interface</code> that the
class <code>implements</code>. Any concrete child classes will have to implement the method either way.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public interface Reportable {
  String getReport();
}

public abstract class AbstractRuleReport implements Reportable{
  public abstract String getReport();  // Noncompliant

  // ...
}
</pre>","<p>There’s no point in redundantly defining an <code>abstract</code> method with the same signature as a method in an <code>interface</code> that the
class <code>implements</code>. Any concrete child classes will have to implement the method either way.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public interface Reportable {
  String getReport();
}

public abstract class AbstractRuleReport implements Reportable{
  public abstract String getReport();  // Noncompliant

  // ...
}
</pre>",MINOR,READY,False,[],['confusing'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,2min,CONSTANT_ISSUE,2min,False,ALL,False,"[{'key': 'default', 'content': '<p>There’s no point in redundantly defining an <code>abstract</code> method with the same signature as a method in an <code>interface</code> that the\nclass <code>implements</code>. Any concrete child classes will have to implement the method either way.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface Reportable {\n  String getReport();\n}\n\npublic abstract class AbstractRuleReport implements Reportable{\n  public abstract String getReport();  // Noncompliant\n\n  // ...\n}\n</pre>'}]",[],['squid:S3038'],,,,
java:S3398,java,"""private"" methods called only by inner classes should be moved to those classes",2023-06-14T03:41:52+0000,"<p>When a <code>private</code> method is only invoked by an inner class, there’s no reason not to move it into that class. It will still have the same
access to the outer class' members, but the outer class will be clearer and less cluttered.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Outie {
  private int i=0;

  private void increment() {  // Noncompliant
    i++;
  }

  public class Innie {
    public void doTheThing() {
      Outie.this.increment();
    }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Outie {
  private int i=0;

  public class Innie {
    public void doTheThing() {
      increment();
    }

    private void increment() {
      Outie.this.i++;
    }
  }
}
</pre>","<p>When a <code>private</code> method is only invoked by an inner class, there’s no reason not to move it into that class. It will still have the same
access to the outer class' members, but the outer class will be clearer and less cluttered.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Outie {
  private int i=0;

  private void increment() {  // Noncompliant
    i++;
  }

  public class Innie {
    public void doTheThing() {
      Outie.this.increment();
    }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Outie {
  private int i=0;

  public class Innie {
    public void doTheThing() {
      increment();
    }

    private void increment() {
      Outie.this.i++;
    }
  }
}
</pre>",MINOR,READY,False,[],['confusing'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': ""<p>When a <code>private</code> method is only invoked by an inner class, there’s no reason not to move it into that class. It will still have the same\naccess to the outer class' members, but the outer class will be clearer and less cluttered.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Outie {\n  private int i=0;\n\n  private void increment() {  // Noncompliant\n    i++;\n  }\n\n  public class Innie {\n    public void doTheThing() {\n      Outie.this.increment();\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Outie {\n  private int i=0;\n\n  public class Innie {\n    public void doTheThing() {\n      increment();\n    }\n\n    private void increment() {\n      Outie.this.i++;\n    }\n  }\n}\n</pre>""}]",[],['squid:S3398'],,,,
java:S4248,java,Regex patterns should not be created needlessly,2023-06-14T03:41:52+0000,"<p>The <code>java.util.regex.Pattern.compile()</code> methods have a significant performance cost, and therefore should be used sensibly.</p>
<p>Moreover they are the only mechanism available to create instances of the Pattern class, which are necessary to do any pattern matching using
regular expressions. Unfortunately that can be hidden behind convenience methods like <code>String.matches()</code> or
<code>String.split()</code>.</p>
<p>It is therefore somewhat easy to inadvertently repeatedly compile the same regular expression at great performance cost with no valid reason.</p>
<p>This rule raises an issue when:</p>
<ul>
  <li> A <code>Pattern</code> is compiled from a <code>String</code> literal or constant and is not stored in a static final reference. </li>
  <li> <code>String.matches</code>, <code>String.split</code>, <code>String.replaceAll</code> or <code>String.replaceFirst</code> are invoked with a
  <code>String</code> literal or constant. In which case the code should be refactored to use a <code>java.util.regex.Pattern</code> while respecting
  the previous rule. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
public void doingSomething(String stringToMatch) {
  Pattern regex = Pattern.compile(""myRegex"");  // Noncompliant
  Matcher matcher = regex.matcher(""s"");
  // ...
  if (stringToMatch.matches(""myRegex2"")) {  // Noncompliant
    // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
private static final Pattern myRegex = Pattern.compile(""myRegex"");
private static final Pattern myRegex2 = Pattern.compile(""myRegex2"");

public void doingSomething(String stringToMatch) {
  Matcher matcher = myRegex.matcher(""s"");
  // ...
  if (myRegex2.matcher(stringToMatch).matches()) {
    // ...
  }
}
</pre>
<h2>Exceptions</h2>
<p><code>String.split</code> doesn’t create a regex when the string passed as argument meets either of these 2 conditions:</p>
<ul>
  <li> It is a one-char String and this character is not one of the RegEx’s meta characters "".$|()[{^?*+\"" </li>
  <li> It is a two-char String and the first char is the backslash and the second is not the ascii digit or ascii letter. </li>
</ul>
<p>In which case no issue will be raised.</p>","<p>The <code>java.util.regex.Pattern.compile()</code> methods have a significant performance cost, and therefore should be used sensibly.</p>
<p>Moreover they are the only mechanism available to create instances of the Pattern class, which are necessary to do any pattern matching using
regular expressions. Unfortunately that can be hidden behind convenience methods like <code>String.matches()</code> or
<code>String.split()</code>.</p>
<p>It is therefore somewhat easy to inadvertently repeatedly compile the same regular expression at great performance cost with no valid reason.</p>
<p>This rule raises an issue when:</p>
<ul>
  <li> A <code>Pattern</code> is compiled from a <code>String</code> literal or constant and is not stored in a static final reference. </li>
  <li> <code>String.matches</code>, <code>String.split</code>, <code>String.replaceAll</code> or <code>String.replaceFirst</code> are invoked with a
  <code>String</code> literal or constant. In which case the code should be refactored to use a <code>java.util.regex.Pattern</code> while respecting
  the previous rule. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
public void doingSomething(String stringToMatch) {
  Pattern regex = Pattern.compile(""myRegex"");  // Noncompliant
  Matcher matcher = regex.matcher(""s"");
  // ...
  if (stringToMatch.matches(""myRegex2"")) {  // Noncompliant
    // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
private static final Pattern myRegex = Pattern.compile(""myRegex"");
private static final Pattern myRegex2 = Pattern.compile(""myRegex2"");

public void doingSomething(String stringToMatch) {
  Matcher matcher = myRegex.matcher(""s"");
  // ...
  if (myRegex2.matcher(stringToMatch).matches()) {
    // ...
  }
}
</pre>
<h2>Exceptions</h2>
<p><code>String.split</code> doesn’t create a regex when the string passed as argument meets either of these 2 conditions:</p>
<ul>
  <li> It is a one-char String and this character is not one of the RegEx’s meta characters "".$|()[{^?*+\"" </li>
  <li> It is a two-char String and the first char is the backslash and the second is not the ascii digit or ascii letter. </li>
</ul>
<p>In which case no issue will be raised.</p>",MAJOR,READY,False,[],"['performance', 'regex']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,10min,CONSTANT_ISSUE,10min,False,ALL,False,"[{'key': 'default', 'content': '<p>The <code>java.util.regex.Pattern.compile()</code> methods have a significant performance cost, and therefore should be used sensibly.</p>\n<p>Moreover they are the only mechanism available to create instances of the Pattern class, which are necessary to do any pattern matching using\nregular expressions. Unfortunately that can be hidden behind convenience methods like <code>String.matches()</code> or\n<code>String.split()</code>.</p>\n<p>It is therefore somewhat easy to inadvertently repeatedly compile the same regular expression at great performance cost with no valid reason.</p>\n<p>This rule raises an issue when:</p>\n<ul>\n  <li> A <code>Pattern</code> is compiled from a <code>String</code> literal or constant and is not stored in a static final reference. </li>\n  <li> <code>String.matches</code>, <code>String.split</code>, <code>String.replaceAll</code> or <code>String.replaceFirst</code> are invoked with a\n  <code>String</code> literal or constant. In which case the code should be refactored to use a <code>java.util.regex.Pattern</code> while respecting\n  the previous rule. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doingSomething(String stringToMatch) {\n  Pattern regex = Pattern.compile(""myRegex"");  // Noncompliant\n  Matcher matcher = regex.matcher(""s"");\n  // ...\n  if (stringToMatch.matches(""myRegex2"")) {  // Noncompliant\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate static final Pattern myRegex = Pattern.compile(""myRegex"");\nprivate static final Pattern myRegex2 = Pattern.compile(""myRegex2"");\n\npublic void doingSomething(String stringToMatch) {\n  Matcher matcher = myRegex.matcher(""s"");\n  // ...\n  if (myRegex2.matcher(stringToMatch).matches()) {\n    // ...\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p><code>String.split</code> doesn’t create a regex when the string passed as argument meets either of these 2 conditions:</p>\n<ul>\n  <li> It is a one-char String and this character is not one of the RegEx’s meta characters "".$|()[{^?*+\\"" </li>\n  <li> It is a two-char String and the first char is the backslash and the second is not the ascii digit or ascii letter. </li>\n</ul>\n<p>In which case no issue will be raised.</p>'}]",[],['squid:S4248'],,,,
java:S112,java,Generic exceptions should never be thrown,2023-06-14T03:41:52+0000,"<p>Using such generic exceptions as <code>Error</code>, <code>RuntimeException</code>, <code>Throwable</code>, and <code>Exception</code> prevents
calling methods from handling true, system-generated exceptions differently than application-generated errors.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void foo(String bar) throws Throwable {  // Noncompliant
  throw new RuntimeException(""My Message"");     // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void foo(String bar) {
  throw new MyOwnRuntimeException(""My Message"");
}
</pre>
<h2>Exceptions</h2>
<p>Generic exceptions in the signatures of overriding methods are ignored, because overriding method has to follow signature of the throw declaration
in the superclass. The issue will be raised on superclass declaration of the method (or won’t be raised at all if superclass is not part of the
analysis).</p>
<pre>
@Override
public void myMethod() throws Exception {...}
</pre>
<p>Generic exceptions are also ignored in the signatures of methods that make calls to methods that throw generic exceptions.</p>
<pre>
public void myOtherMethod throws Exception {
  doTheThing();  // this method throws Exception
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/397"">MITRE, CWE-397</a> - Declaration of Throws for Generic Exception </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/_DdGBQ"">CERT, ERR07-J.</a> - Do not throw RuntimeException, Exception, or Throwable </li>
</ul>","<p>Using such generic exceptions as <code>Error</code>, <code>RuntimeException</code>, <code>Throwable</code>, and <code>Exception</code> prevents
calling methods from handling true, system-generated exceptions differently than application-generated errors.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void foo(String bar) throws Throwable {  // Noncompliant
  throw new RuntimeException(""My Message"");     // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void foo(String bar) {
  throw new MyOwnRuntimeException(""My Message"");
}
</pre>
<h2>Exceptions</h2>
<p>Generic exceptions in the signatures of overriding methods are ignored, because overriding method has to follow signature of the throw declaration
in the superclass. The issue will be raised on superclass declaration of the method (or won’t be raised at all if superclass is not part of the
analysis).</p>
<pre>
@Override
public void myMethod() throws Exception {...}
</pre>
<p>Generic exceptions are also ignored in the signatures of methods that make calls to methods that throw generic exceptions.</p>
<pre>
public void myOtherMethod throws Exception {
  doTheThing();  // this method throws Exception
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/397"">MITRE, CWE-397</a> - Declaration of Throws for Generic Exception </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/_DdGBQ"">CERT, ERR07-J.</a> - Do not throw RuntimeException, Exception, or Throwable </li>
</ul>",MAJOR,READY,False,[],"['cert', 'cwe', 'error-handling']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,20min,CONSTANT_ISSUE,20min,False,MAIN,False,"[{'key': 'default', 'content': '<p>Using such generic exceptions as <code>Error</code>, <code>RuntimeException</code>, <code>Throwable</code>, and <code>Exception</code> prevents\ncalling methods from handling true, system-generated exceptions differently than application-generated errors.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void foo(String bar) throws Throwable {  // Noncompliant\n  throw new RuntimeException(""My Message"");     // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void foo(String bar) {\n  throw new MyOwnRuntimeException(""My Message"");\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Generic exceptions in the signatures of overriding methods are ignored, because overriding method has to follow signature of the throw declaration\nin the superclass. The issue will be raised on superclass declaration of the method (or won’t be raised at all if superclass is not part of the\nanalysis).</p>\n<pre>\n@Override\npublic void myMethod() throws Exception {...}\n</pre>\n<p>Generic exceptions are also ignored in the signatures of methods that make calls to methods that throw generic exceptions.</p>\n<pre>\npublic void myOtherMethod throws Exception {\n  doTheThing();  // this method throws Exception\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/397"">MITRE, CWE-397</a> - Declaration of Throws for Generic Exception </li>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/_DdGBQ"">CERT, ERR07-J.</a> - Do not throw RuntimeException, Exception, or Throwable </li>\n</ul>'}]",[],['squid:S00112'],,,,
java:S2065,java,"Fields in non-serializable classes should not be ""transient""",2023-06-14T03:41:52+0000,"<p><code>transient</code> is used to mark fields in a <code>Serializable</code> class which will not be written out to file (or stream). In a class
that does not implement <code>Serializable</code>, this modifier is simply wasted keystrokes, and should be removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Vegetable {  // does not implement Serializable
  private transient Season ripe;  // Noncompliant
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Vegetable {
  private Season ripe;
  // ...
}
</pre>","<p><code>transient</code> is used to mark fields in a <code>Serializable</code> class which will not be written out to file (or stream). In a class
that does not implement <code>Serializable</code>, this modifier is simply wasted keystrokes, and should be removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Vegetable {  // does not implement Serializable
  private transient Season ripe;  // Noncompliant
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Vegetable {
  private Season ripe;
  // ...
}
</pre>",MINOR,READY,False,[],"['serialization', 'unused']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,2min,CONSTANT_ISSUE,2min,False,ALL,False,"[{'key': 'default', 'content': '<p><code>transient</code> is used to mark fields in a <code>Serializable</code> class which will not be written out to file (or stream). In a class\nthat does not implement <code>Serializable</code>, this modifier is simply wasted keystrokes, and should be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Vegetable {  // does not implement Serializable\n  private transient Season ripe;  // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Vegetable {\n  private Season ripe;\n  // ...\n}\n</pre>'}]",[],['squid:S2065'],,,,
java:S2186,java,"JUnit assertions should not be used in ""run"" methods",2023-06-14T03:41:52+0000,"<p>JUnit assertions should not be made from the <code>run</code> method of a <code>Runnable</code>, because failed assertions result in
<code>AssertionError</code>s being thrown. If the error is thrown from a thread other than the one that ran the test, the thread will exit but the
test won’t fail.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void run() {
  // ...
  Assert.assertEquals(expected, actual);  // Noncompliant
}
</pre>","<p>JUnit assertions should not be made from the <code>run</code> method of a <code>Runnable</code>, because failed assertions result in
<code>AssertionError</code>s being thrown. If the error is thrown from a thread other than the one that ran the test, the thread will exit but the
test won’t fail.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void run() {
  // ...
  Assert.assertEquals(expected, actual);  // Noncompliant
}
</pre>",CRITICAL,READY,False,[],"['junit', 'tests']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,30min,CONSTANT_ISSUE,30min,False,TEST,False,"[{'key': 'default', 'content': '<p>JUnit assertions should not be made from the <code>run</code> method of a <code>Runnable</code>, because failed assertions result in\n<code>AssertionError</code>s being thrown. If the error is thrown from a thread other than the one that ran the test, the thread will exit but the\ntest won’t fail.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void run() {\n  // ...\n  Assert.assertEquals(expected, actual);  // Noncompliant\n}\n</pre>'}]",[],['squid:S2186'],,,,
java:S2187,java,TestCases should contain tests,2023-06-14T03:41:52+0000,"<p>There’s no point in having a JUnit <code>TestCase</code> without any test methods. Similarly, you shouldn’t have a file in the tests directory
named <code>*Test</code>, <code>*Tests</code>, or <code>*TestCase</code>, but no tests in the file. Doing either of these things may lead someone to
think that uncovered classes have been tested.</p>
<p>This rule raises an issue when files in the test directory are named <code>*Test</code>, <code>*Tests</code>, or <code>*TestCase</code> or
implement <code>TestCase</code> but don’t contain any tests.</p>
<p>Supported frameworks:</p>
<ul>
  <li> JUnit3 </li>
  <li> JUnit4 </li>
  <li> JUnit5 </li>
  <li> TestNG </li>
  <li> Zohhak </li>
  <li> ArchUnit </li>
  <li> Pact </li>
</ul>","<p>There’s no point in having a JUnit <code>TestCase</code> without any test methods. Similarly, you shouldn’t have a file in the tests directory
named <code>*Test</code>, <code>*Tests</code>, or <code>*TestCase</code>, but no tests in the file. Doing either of these things may lead someone to
think that uncovered classes have been tested.</p>
<p>This rule raises an issue when files in the test directory are named <code>*Test</code>, <code>*Tests</code>, or <code>*TestCase</code> or
implement <code>TestCase</code> but don’t contain any tests.</p>
<p>Supported frameworks:</p>
<ul>
  <li> JUnit3 </li>
  <li> JUnit4 </li>
  <li> JUnit5 </li>
  <li> TestNG </li>
  <li> Zohhak </li>
  <li> ArchUnit </li>
  <li> Pact </li>
</ul>",BLOCKER,READY,False,[],"['confusing', 'junit', 'tests', 'unused']",java,Java,"[{'key': 'TestClassNamePattern', 'htmlDesc': 'Test class name pattern (regular expression)', 'defaultValue': '.*(Test|Tests|TestCase)', 'type': 'STRING'}]",CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,TEST,False,"[{'key': 'default', 'content': '<p>There’s no point in having a JUnit <code>TestCase</code> without any test methods. Similarly, you shouldn’t have a file in the tests directory\nnamed <code>*Test</code>, <code>*Tests</code>, or <code>*TestCase</code>, but no tests in the file. Doing either of these things may lead someone to\nthink that uncovered classes have been tested.</p>\n<p>This rule raises an issue when files in the test directory are named <code>*Test</code>, <code>*Tests</code>, or <code>*TestCase</code> or\nimplement <code>TestCase</code> but don’t contain any tests.</p>\n<p>Supported frameworks:</p>\n<ul>\n  <li> JUnit3 </li>\n  <li> JUnit4 </li>\n  <li> JUnit5 </li>\n  <li> TestNG </li>\n  <li> Zohhak </li>\n  <li> ArchUnit </li>\n  <li> Pact </li>\n</ul>'}]",[],['squid:S2187'],,,,
java:S4488,java,"Composed ""@RequestMapping"" variants should be preferred",2023-06-14T03:41:52+0000,"<p>Spring framework 4.3 introduced variants of the <code>@RequestMapping</code> annotation to better represent the semantics of the annotated methods.
The use of <code>@GetMapping</code>, <code>@PostMapping</code>, <code>@PutMapping</code>, <code>@PatchMapping</code> and <code>@DeleteMapping</code>
should be preferred to the use of the raw <code>@RequestMapping(method = RequestMethod.XYZ)</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@RequestMapping(path = ""/greeting"", method = RequestMethod.GET) // Noncompliant
public Greeting greeting(@RequestParam(value = ""name"", defaultValue = ""World"") String name) {
...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@GetMapping(path = ""/greeting"") // Compliant
public Greeting greeting(@RequestParam(value = ""name"", defaultValue = ""World"") String name) {
...
}
</pre>","<p>Spring framework 4.3 introduced variants of the <code>@RequestMapping</code> annotation to better represent the semantics of the annotated methods.
The use of <code>@GetMapping</code>, <code>@PostMapping</code>, <code>@PutMapping</code>, <code>@PatchMapping</code> and <code>@DeleteMapping</code>
should be preferred to the use of the raw <code>@RequestMapping(method = RequestMethod.XYZ)</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@RequestMapping(path = ""/greeting"", method = RequestMethod.GET) // Noncompliant
public Greeting greeting(@RequestParam(value = ""name"", defaultValue = ""World"") String name) {
...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@GetMapping(path = ""/greeting"") // Compliant
public Greeting greeting(@RequestParam(value = ""name"", defaultValue = ""World"") String name) {
...
}
</pre>",MINOR,READY,False,[],['spring'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,2min,CONSTANT_ISSUE,2min,False,MAIN,False,"[{'key': 'default', 'content': '<p>Spring framework 4.3 introduced variants of the <code>@RequestMapping</code> annotation to better represent the semantics of the annotated methods.\nThe use of <code>@GetMapping</code>, <code>@PostMapping</code>, <code>@PutMapping</code>, <code>@PatchMapping</code> and <code>@DeleteMapping</code>\nshould be preferred to the use of the raw <code>@RequestMapping(method = RequestMethod.XYZ)</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@RequestMapping(path = ""/greeting"", method = RequestMethod.GET) // Noncompliant\npublic Greeting greeting(@RequestParam(value = ""name"", defaultValue = ""World"") String name) {\n...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@GetMapping(path = ""/greeting"") // Compliant\npublic Greeting greeting(@RequestParam(value = ""name"", defaultValue = ""World"") String name) {\n...\n}\n</pre>'}]",[],['squid:S4488'],,,,
java:S103,java,Lines should not be too long,2023-06-14T03:41:52+0000,<p>Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.</p>,<p>Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.</p>,MAJOR,READY,False,[],['convention'],java,Java,"[{'key': 'maximumLineLength', 'htmlDesc': 'The maximum authorized line length.', 'defaultValue': '120', 'type': 'INTEGER'}]",CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,1min,CONSTANT_ISSUE,1min,False,ALL,False,"[{'key': 'default', 'content': '<p>Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.</p>'}]",[],['squid:S00103'],,,,
java:S104,java,Files should not have too many lines of code,2023-06-14T03:41:52+0000,"<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to
maintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those
smaller files will not only be easier to understand but also probably easier to test.</p>","<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to
maintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those
smaller files will not only be easier to understand but also probably easier to test.</p>",MAJOR,READY,False,[],['brain-overload'],java,Java,"[{'key': 'Max', 'htmlDesc': 'Maximum authorized lines in a file.', 'defaultValue': '750', 'type': 'INTEGER'}]",CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,1h,CONSTANT_ISSUE,1h,False,ALL,False,"[{'key': 'default', 'content': '<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to\nmaintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those\nsmaller files will not only be easier to understand but also probably easier to test.</p>'}]",[],['squid:S00104'],,,,
java:S105,java,Tabulation characters should not be used,2023-06-14T03:41:52+0000,"<p>Developers should not need to configure the tab width of their text editors in order to be able to read source code.</p>
<p>So the use of the tabulation character must be banned.</p>","<p>Developers should not need to configure the tab width of their text editors in order to be able to read source code.</p>
<p>So the use of the tabulation character must be banned.</p>",MINOR,READY,False,[],['convention'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,2min,CONSTANT_ISSUE,2min,False,ALL,False,"[{'key': 'default', 'content': '<p>Developers should not need to configure the tab width of their text editors in order to be able to read source code.</p>\n<p>So the use of the tabulation character must be banned.</p>'}]",[],['squid:S00105'],,,,
java:S106,java,Standard outputs should not be used directly to log anything,2023-06-14T03:41:52+0000,"<p>When logging a message there are several important requirements which must be fulfilled:</p>
<ul>
  <li> The user must be able to easily retrieve the logs </li>
  <li> The format of all logged message must be uniform to allow the user to easily read the log </li>
  <li> Logged data must actually be recorded </li>
  <li> Sensitive data must only be logged securely </li>
</ul>
<p>If a program directly writes to the standard outputs, there is absolutely no way to comply with those requirements. That’s why defining and using a
dedicated logger is highly recommended.</p>
<h2>Noncompliant Code Example</h2>
<pre>
System.out.println(""My Message"");  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
logger.log(""My Message"");
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/"">OWASP Top 10 2021 Category A9</a> - Security Logging and
  Monitoring Failures </li>
  <li> <a href=""https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure"">OWASP Top 10 2017 Category A3</a> - Sensitive Data
  Exposure </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/nzdGBQ"">CERT, ERR02-J.</a> - Prevent exceptions while logging data </li>
</ul>","<p>When logging a message there are several important requirements which must be fulfilled:</p>
<ul>
  <li> The user must be able to easily retrieve the logs </li>
  <li> The format of all logged message must be uniform to allow the user to easily read the log </li>
  <li> Logged data must actually be recorded </li>
  <li> Sensitive data must only be logged securely </li>
</ul>
<p>If a program directly writes to the standard outputs, there is absolutely no way to comply with those requirements. That’s why defining and using a
dedicated logger is highly recommended.</p>
<h2>Noncompliant Code Example</h2>
<pre>
System.out.println(""My Message"");  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
logger.log(""My Message"");
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/"">OWASP Top 10 2021 Category A9</a> - Security Logging and
  Monitoring Failures </li>
  <li> <a href=""https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure"">OWASP Top 10 2017 Category A3</a> - Sensitive Data
  Exposure </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/nzdGBQ"">CERT, ERR02-J.</a> - Prevent exceptions while logging data </li>
</ul>",MAJOR,READY,False,[],"['bad-practice', 'cert', 'owasp-a3']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,10min,CONSTANT_ISSUE,10min,False,MAIN,False,"[{'key': 'default', 'content': '<p>When logging a message there are several important requirements which must be fulfilled:</p>\n<ul>\n  <li> The user must be able to easily retrieve the logs </li>\n  <li> The format of all logged message must be uniform to allow the user to easily read the log </li>\n  <li> Logged data must actually be recorded </li>\n  <li> Sensitive data must only be logged securely </li>\n</ul>\n<p>If a program directly writes to the standard outputs, there is absolutely no way to comply with those requirements. That’s why defining and using a\ndedicated logger is highly recommended.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSystem.out.println(""My Message"");  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlogger.log(""My Message"");\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/"">OWASP Top 10 2021 Category A9</a> - Security Logging and\n  Monitoring Failures </li>\n  <li> <a href=""https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure"">OWASP Top 10 2017 Category A3</a> - Sensitive Data\n  Exposure </li>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/nzdGBQ"">CERT, ERR02-J.</a> - Prevent exceptions while logging data </li>\n</ul>'}]",[],['squid:S106'],,,,
java:S107,java,Methods should not have too many parameters,2023-06-14T03:41:52+0000,"<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many
things.</p>
<h2>Noncompliant Code Example</h2>
<p>With a maximum number of 4 parameters:</p>
<pre>
public void doSomething(int param1, int param2, int param3, String param4, long param5) {
...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void doSomething(int param1, int param2, int param3, String param4) {
...
}
</pre>
<h2>Exceptions</h2>
<p>Methods annotated with :</p>
<ul>
  <li> Spring’s <code>@RequestMapping</code> (and related shortcut annotations, like <code>@GetRequest</code>) </li>
  <li> JAX-RS API annotations (like <code>@javax.ws.rs.GET</code>) </li>
  <li> Bean constructor injection with <code>@org.springframework.beans.factory.annotation.Autowired</code> </li>
  <li> CDI constructor injection with <code>@javax.inject.Inject</code> </li>
  <li> <code>@com.fasterxml.jackson.annotation.JsonCreator</code> </li>
  <li> Micronaut’s annotations (like <code>@io.micronaut.http.annotation.Get</code>) </li>
</ul>
<p>may have a lot of parameters, encapsulation being possible. Such methods are therefore ignored.</p>
<p>Also, if a class annotated as a Spring component (like <code>@org.springframework.stereotype.Component</code>) has a single constructor, that
constructor will be considered <code>@Autowired</code> and ignored by the rule.</p>","<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many
things.</p>
<h2>Noncompliant Code Example</h2>
<p>With a maximum number of 4 parameters:</p>
<pre>
public void doSomething(int param1, int param2, int param3, String param4, long param5) {
...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void doSomething(int param1, int param2, int param3, String param4) {
...
}
</pre>
<h2>Exceptions</h2>
<p>Methods annotated with :</p>
<ul>
  <li> Spring’s <code>@RequestMapping</code> (and related shortcut annotations, like <code>@GetRequest</code>) </li>
  <li> JAX-RS API annotations (like <code>@javax.ws.rs.GET</code>) </li>
  <li> Bean constructor injection with <code>@org.springframework.beans.factory.annotation.Autowired</code> </li>
  <li> CDI constructor injection with <code>@javax.inject.Inject</code> </li>
  <li> <code>@com.fasterxml.jackson.annotation.JsonCreator</code> </li>
  <li> Micronaut’s annotations (like <code>@io.micronaut.http.annotation.Get</code>) </li>
</ul>
<p>may have a lot of parameters, encapsulation being possible. Such methods are therefore ignored.</p>
<p>Also, if a class annotated as a Spring component (like <code>@org.springframework.stereotype.Component</code>) has a single constructor, that
constructor will be considered <code>@Autowired</code> and ignored by the rule.</p>",MAJOR,READY,False,[],['brain-overload'],java,Java,"[{'key': 'max', 'htmlDesc': 'Maximum authorized number of parameters', 'defaultValue': '7', 'type': 'INTEGER'}, {'key': 'constructorMax', 'htmlDesc': 'Maximum authorized number of parameters for a constructor', 'defaultValue': '7', 'type': 'INTEGER'}]",CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,20min,CONSTANT_ISSUE,20min,False,ALL,False,"[{'key': 'default', 'content': '<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many\nthings.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With a maximum number of 4 parameters:</p>\n<pre>\npublic void doSomething(int param1, int param2, int param3, String param4, long param5) {\n...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(int param1, int param2, int param3, String param4) {\n...\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Methods annotated with :</p>\n<ul>\n  <li> Spring’s <code>@RequestMapping</code> (and related shortcut annotations, like <code>@GetRequest</code>) </li>\n  <li> JAX-RS API annotations (like <code>@javax.ws.rs.GET</code>) </li>\n  <li> Bean constructor injection with <code>@org.springframework.beans.factory.annotation.Autowired</code> </li>\n  <li> CDI constructor injection with <code>@javax.inject.Inject</code> </li>\n  <li> <code>@com.fasterxml.jackson.annotation.JsonCreator</code> </li>\n  <li> Micronaut’s annotations (like <code>@io.micronaut.http.annotation.Get</code>) </li>\n</ul>\n<p>may have a lot of parameters, encapsulation being possible. Such methods are therefore ignored.</p>\n<p>Also, if a class annotated as a Spring component (like <code>@org.springframework.stereotype.Component</code>) has a single constructor, that\nconstructor will be considered <code>@Autowired</code> and ignored by the rule.</p>'}]",[],['squid:S00107'],,,,
java:S2062,java,"""readResolve"" methods should be inheritable",2023-06-14T03:41:52+0000,"<p>The <code>readResolve()</code> method allows final tweaks to the state of an object during deserialization. Non-final classes which implement
<code>readResolve()</code>, should not set its visibility to <code>private</code> since it will then be unavailable to child classes.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Fruit implements Serializable {
  private static final long serialVersionUID = 1;

  private Object readResolve() throws ObjectStreamException  // Noncompliant
  {...}

  //...
}

public class Raspberry extends Fruit implements Serializable {  // No access to parent's readResolve() method
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Fruit implements Serializable {
  private static final long serialVersionUID = 1;

  protected Object readResolve() throws ObjectStreamException
  {...}

  //...
}

public class Raspberry extends Fruit implements Serializable {
  //...
}
</pre>","<p>The <code>readResolve()</code> method allows final tweaks to the state of an object during deserialization. Non-final classes which implement
<code>readResolve()</code>, should not set its visibility to <code>private</code> since it will then be unavailable to child classes.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Fruit implements Serializable {
  private static final long serialVersionUID = 1;

  private Object readResolve() throws ObjectStreamException  // Noncompliant
  {...}

  //...
}

public class Raspberry extends Fruit implements Serializable {  // No access to parent's readResolve() method
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Fruit implements Serializable {
  private static final long serialVersionUID = 1;

  protected Object readResolve() throws ObjectStreamException
  {...}

  //...
}

public class Raspberry extends Fruit implements Serializable {
  //...
}
</pre>",CRITICAL,READY,False,[],['pitfall'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': ""<p>The <code>readResolve()</code> method allows final tweaks to the state of an object during deserialization. Non-final classes which implement\n<code>readResolve()</code>, should not set its visibility to <code>private</code> since it will then be unavailable to child classes.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit implements Serializable {\n  private static final long serialVersionUID = 1;\n\n  private Object readResolve() throws ObjectStreamException  // Noncompliant\n  {...}\n\n  //...\n}\n\npublic class Raspberry extends Fruit implements Serializable {  // No access to parent's readResolve() method\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Fruit implements Serializable {\n  private static final long serialVersionUID = 1;\n\n  protected Object readResolve() throws ObjectStreamException\n  {...}\n\n  //...\n}\n\npublic class Raspberry extends Fruit implements Serializable {\n  //...\n}\n</pre>""}]",[],['squid:S2062'],,,,
java:S2063,java,"Comparators should be ""Serializable""",2023-06-14T03:41:52+0000,"<p>A non-serializable <code>Comparator</code> can prevent an otherwise-<code>Serializable</code> ordered collection from being serializable. Since the
overhead to make a <code>Comparator</code> serializable is usually low, doing so can be considered good defensive programming.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class FruitComparator implements Comparator&lt;Fruit&gt; {  // Noncompliant
  int compare(Fruit f1, Fruit f2) {...}
  boolean equals(Object obj) {...}
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class FruitComparator implements Comparator&lt;Fruit&gt;, Serializable {
  private static final long serialVersionUID = 1;

  int compare(Fruit f1, Fruit f2) {...}
  boolean equals(Object obj) {...}
}
</pre>","<p>A non-serializable <code>Comparator</code> can prevent an otherwise-<code>Serializable</code> ordered collection from being serializable. Since the
overhead to make a <code>Comparator</code> serializable is usually low, doing so can be considered good defensive programming.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class FruitComparator implements Comparator&lt;Fruit&gt; {  // Noncompliant
  int compare(Fruit f1, Fruit f2) {...}
  boolean equals(Object obj) {...}
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class FruitComparator implements Comparator&lt;Fruit&gt;, Serializable {
  private static final long serialVersionUID = 1;

  int compare(Fruit f1, Fruit f2) {...}
  boolean equals(Object obj) {...}
}
</pre>",CRITICAL,READY,False,[],"['pitfall', 'serialization']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>A non-serializable <code>Comparator</code> can prevent an otherwise-<code>Serializable</code> ordered collection from being serializable. Since the\noverhead to make a <code>Comparator</code> serializable is usually low, doing so can be considered good defensive programming.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class FruitComparator implements Comparator&lt;Fruit&gt; {  // Noncompliant\n  int compare(Fruit f1, Fruit f2) {...}\n  boolean equals(Object obj) {...}\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class FruitComparator implements Comparator&lt;Fruit&gt;, Serializable {\n  private static final long serialVersionUID = 1;\n\n  int compare(Fruit f1, Fruit f2) {...}\n  boolean equals(Object obj) {...}\n}\n</pre>'}]",[],['squid:S2063'],,,,
java:S2185,java,Silly math should not be performed,2023-06-14T03:41:52+0000,"<p>Certain math operations are just silly and should not be performed because their results are predictable.</p>
<p>In particular, <code>anyValue % 1</code> is silly because it will always return 0.</p>
<p>Casting a non-floating-point value to floating-point and then passing it to <code>Math.round</code>, <code>Math.ceil</code>, or
<code>Math.floor</code> is silly because the result will always be the original value.</p>
<p>These operations are silly with any constant value: <code>Math.abs</code>, <code>Math.ceil</code>, <code>Math.floor</code>, <code>Math.rint</code>,
<code>Math.round</code>.</p>
<p>And these oprations are silly with certain constant values:</p>
<table>
  <colgroup>
    <col style=""width: 50%;"">
    <col style=""width: 50%;"">
  </colgroup>
  <thead>
    <tr>
      <th>Operation</th>
      <th>Value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><p>acos</p></td>
      <td><p>0.0 or 1.0</p></td>
    </tr>
    <tr>
      <td><p>asin</p></td>
      <td><p>0.0 or 1.0</p></td>
    </tr>
    <tr>
      <td><p>atan</p></td>
      <td><p>0.0 or 1.0</p></td>
    </tr>
    <tr>
      <td><p>atan2</p></td>
      <td><p>0.0</p></td>
    </tr>
    <tr>
      <td><p>cbrt</p></td>
      <td><p>0.0 or 1.0</p></td>
    </tr>
    <tr>
      <td><p>cos</p></td>
      <td><p>0.0</p></td>
    </tr>
    <tr>
      <td><p>cosh</p></td>
      <td><p>0.0</p></td>
    </tr>
    <tr>
      <td><p>exp</p></td>
      <td><p>0.0 or 1.0</p></td>
    </tr>
    <tr>
      <td><p>expm1</p></td>
      <td><p>0.0</p></td>
    </tr>
    <tr>
      <td><p>log</p></td>
      <td><p>0.0 or 1.0</p></td>
    </tr>
    <tr>
      <td><p>log10</p></td>
      <td><p>0.0 or 1.0</p></td>
    </tr>
    <tr>
      <td><p>sin</p></td>
      <td><p>0.0</p></td>
    </tr>
    <tr>
      <td><p>sinh</p></td>
      <td><p>0.0</p></td>
    </tr>
    <tr>
      <td><p>sqrt</p></td>
      <td><p>0.0 or 1.0</p></td>
    </tr>
    <tr>
      <td><p>tan</p></td>
      <td><p>0.0</p></td>
    </tr>
    <tr>
      <td><p>tanh</p></td>
      <td><p>0.0</p></td>
    </tr>
    <tr>
      <td><p>toDegrees</p></td>
      <td><p>0.0 or 1.0</p></td>
    </tr>
    <tr>
      <td><p>toRadians</p></td>
      <td><p>0.0</p></td>
    </tr>
  </tbody>
</table>
<h2>Noncompliant Code Example</h2>
<pre>
public void doMath(int a) {
  double floor = Math.floor((double)a); // Noncompliant
  double ceiling = Math.ceil(4.2);  // Noncompliant
  double arcTan = Math.atan(0.0);  // Noncompliant
}
</pre>","<p>Certain math operations are just silly and should not be performed because their results are predictable.</p>
<p>In particular, <code>anyValue % 1</code> is silly because it will always return 0.</p>
<p>Casting a non-floating-point value to floating-point and then passing it to <code>Math.round</code>, <code>Math.ceil</code>, or
<code>Math.floor</code> is silly because the result will always be the original value.</p>
<p>These operations are silly with any constant value: <code>Math.abs</code>, <code>Math.ceil</code>, <code>Math.floor</code>, <code>Math.rint</code>,
<code>Math.round</code>.</p>
<p>And these oprations are silly with certain constant values:</p>
<table>
  <colgroup>
    <col style=""width: 50%;"">
    <col style=""width: 50%;"">
  </colgroup>
  <thead>
    <tr>
      <th>Operation</th>
      <th>Value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><p>acos</p></td>
      <td><p>0.0 or 1.0</p></td>
    </tr>
    <tr>
      <td><p>asin</p></td>
      <td><p>0.0 or 1.0</p></td>
    </tr>
    <tr>
      <td><p>atan</p></td>
      <td><p>0.0 or 1.0</p></td>
    </tr>
    <tr>
      <td><p>atan2</p></td>
      <td><p>0.0</p></td>
    </tr>
    <tr>
      <td><p>cbrt</p></td>
      <td><p>0.0 or 1.0</p></td>
    </tr>
    <tr>
      <td><p>cos</p></td>
      <td><p>0.0</p></td>
    </tr>
    <tr>
      <td><p>cosh</p></td>
      <td><p>0.0</p></td>
    </tr>
    <tr>
      <td><p>exp</p></td>
      <td><p>0.0 or 1.0</p></td>
    </tr>
    <tr>
      <td><p>expm1</p></td>
      <td><p>0.0</p></td>
    </tr>
    <tr>
      <td><p>log</p></td>
      <td><p>0.0 or 1.0</p></td>
    </tr>
    <tr>
      <td><p>log10</p></td>
      <td><p>0.0 or 1.0</p></td>
    </tr>
    <tr>
      <td><p>sin</p></td>
      <td><p>0.0</p></td>
    </tr>
    <tr>
      <td><p>sinh</p></td>
      <td><p>0.0</p></td>
    </tr>
    <tr>
      <td><p>sqrt</p></td>
      <td><p>0.0 or 1.0</p></td>
    </tr>
    <tr>
      <td><p>tan</p></td>
      <td><p>0.0</p></td>
    </tr>
    <tr>
      <td><p>tanh</p></td>
      <td><p>0.0</p></td>
    </tr>
    <tr>
      <td><p>toDegrees</p></td>
      <td><p>0.0 or 1.0</p></td>
    </tr>
    <tr>
      <td><p>toRadians</p></td>
      <td><p>0.0</p></td>
    </tr>
  </tbody>
</table>
<h2>Noncompliant Code Example</h2>
<pre>
public void doMath(int a) {
  double floor = Math.floor((double)a); // Noncompliant
  double ceiling = Math.ceil(4.2);  // Noncompliant
  double arcTan = Math.atan(0.0);  // Noncompliant
}
</pre>",MAJOR,READY,False,[],['clumsy'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,15min,CONSTANT_ISSUE,15min,False,ALL,False,"[{'key': 'default', 'content': '<p>Certain math operations are just silly and should not be performed because their results are predictable.</p>\n<p>In particular, <code>anyValue % 1</code> is silly because it will always return 0.</p>\n<p>Casting a non-floating-point value to floating-point and then passing it to <code>Math.round</code>, <code>Math.ceil</code>, or\n<code>Math.floor</code> is silly because the result will always be the original value.</p>\n<p>These operations are silly with any constant value: <code>Math.abs</code>, <code>Math.ceil</code>, <code>Math.floor</code>, <code>Math.rint</code>,\n<code>Math.round</code>.</p>\n<p>And these oprations are silly with certain constant values:</p>\n<table>\n  <colgroup>\n    <col style=""width: 50%;"">\n    <col style=""width: 50%;"">\n  </colgroup>\n  <thead>\n    <tr>\n      <th>Operation</th>\n      <th>Value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><p>acos</p></td>\n      <td><p>0.0 or 1.0</p></td>\n    </tr>\n    <tr>\n      <td><p>asin</p></td>\n      <td><p>0.0 or 1.0</p></td>\n    </tr>\n    <tr>\n      <td><p>atan</p></td>\n      <td><p>0.0 or 1.0</p></td>\n    </tr>\n    <tr>\n      <td><p>atan2</p></td>\n      <td><p>0.0</p></td>\n    </tr>\n    <tr>\n      <td><p>cbrt</p></td>\n      <td><p>0.0 or 1.0</p></td>\n    </tr>\n    <tr>\n      <td><p>cos</p></td>\n      <td><p>0.0</p></td>\n    </tr>\n    <tr>\n      <td><p>cosh</p></td>\n      <td><p>0.0</p></td>\n    </tr>\n    <tr>\n      <td><p>exp</p></td>\n      <td><p>0.0 or 1.0</p></td>\n    </tr>\n    <tr>\n      <td><p>expm1</p></td>\n      <td><p>0.0</p></td>\n    </tr>\n    <tr>\n      <td><p>log</p></td>\n      <td><p>0.0 or 1.0</p></td>\n    </tr>\n    <tr>\n      <td><p>log10</p></td>\n      <td><p>0.0 or 1.0</p></td>\n    </tr>\n    <tr>\n      <td><p>sin</p></td>\n      <td><p>0.0</p></td>\n    </tr>\n    <tr>\n      <td><p>sinh</p></td>\n      <td><p>0.0</p></td>\n    </tr>\n    <tr>\n      <td><p>sqrt</p></td>\n      <td><p>0.0 or 1.0</p></td>\n    </tr>\n    <tr>\n      <td><p>tan</p></td>\n      <td><p>0.0</p></td>\n    </tr>\n    <tr>\n      <td><p>tanh</p></td>\n      <td><p>0.0</p></td>\n    </tr>\n    <tr>\n      <td><p>toDegrees</p></td>\n      <td><p>0.0 or 1.0</p></td>\n    </tr>\n    <tr>\n      <td><p>toRadians</p></td>\n      <td><p>0.0</p></td>\n    </tr>\n  </tbody>\n</table>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doMath(int a) {\n  double floor = Math.floor((double)a); // Noncompliant\n  double ceiling = Math.ceil(4.2);  // Noncompliant\n  double arcTan = Math.atan(0.0);  // Noncompliant\n}\n</pre>'}]",[],['squid:S2185'],,,,
java:S3030,java,"Classes should not have too many ""static"" imports",2023-06-14T03:41:52+0000,"<p>Importing a class statically allows you to use its <code>public static</code> members without qualifying them with the class name. That can be
handy, but if you import too many classes statically, your code can become confusing and difficult to maintain.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold value: 4</p>
<pre>
import static java.lang.Math.*;
import static java.util.Collections.*;
import static com.myco.corporate.Constants.*;
import static com.myco.division.Constants.*;
import static com.myco.department.Constants.*;  // Noncompliant
</pre>","<p>Importing a class statically allows you to use its <code>public static</code> members without qualifying them with the class name. That can be
handy, but if you import too many classes statically, your code can become confusing and difficult to maintain.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold value: 4</p>
<pre>
import static java.lang.Math.*;
import static java.util.Collections.*;
import static com.myco.corporate.Constants.*;
import static com.myco.division.Constants.*;
import static com.myco.department.Constants.*;  // Noncompliant
</pre>",MAJOR,READY,False,[],['brain-overload'],java,Java,"[{'key': 'threshold', 'htmlDesc': 'The maximum number of static imports allowed', 'defaultValue': '4', 'type': 'INTEGER'}]",CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,30min,CONSTANT_ISSUE,30min,False,ALL,False,"[{'key': 'default', 'content': '<p>Importing a class statically allows you to use its <code>public static</code> members without qualifying them with the class name. That can be\nhandy, but if you import too many classes statically, your code can become confusing and difficult to maintain.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold value: 4</p>\n<pre>\nimport static java.lang.Math.*;\nimport static java.util.Collections.*;\nimport static com.myco.corporate.Constants.*;\nimport static com.myco.division.Constants.*;\nimport static com.myco.department.Constants.*;  // Noncompliant\n</pre>'}]",[],['squid:S3030'],,,,
java:S108,java,Nested blocks of code should not be left empty,2023-06-14T03:41:52+0000,"<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (int i = 0; i &lt; 42; i++){}  // Empty on purpose or missing piece of code ?
</pre>
<h2>Exceptions</h2>
<p>When a block contains a comment, this block is not considered to be empty unless it is a <code>synchronized</code> block. <code>synchronized</code>
blocks are still considered empty even with comments because they can still affect program flow.</p>","<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (int i = 0; i &lt; 42; i++){}  // Empty on purpose or missing piece of code ?
</pre>
<h2>Exceptions</h2>
<p>When a block contains a comment, this block is not considered to be empty unless it is a <code>synchronized</code> block. <code>synchronized</code>
blocks are still considered empty even with comments because they can still affect program flow.</p>",MAJOR,READY,False,[],['suspicious'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 0; i &lt; 42; i++){}  // Empty on purpose or missing piece of code ?\n</pre>\n<h2>Exceptions</h2>\n<p>When a block contains a comment, this block is not considered to be empty unless it is a <code>synchronized</code> block. <code>synchronized</code>\nblocks are still considered empty even with comments because they can still affect program flow.</p>'}]",[],['squid:S00108'],,,,
java:S109,java,Magic numbers should not be used,2023-06-14T03:41:52+0000,"<p>A magic number is a number that comes out of nowhere, and is directly used in a statement. Magic numbers are often used, for instance to limit the
number of iterations of a loop, to test the value of a property, etc.</p>
<p>Using magic numbers may seem obvious and straightforward when you’re writing a piece of code, but they are much less obvious and straightforward at
debugging time.</p>
<p>That is why magic numbers must be demystified by first being assigned to clearly named variables before being used.</p>
<p>-1, 0 and 1 are not considered magic numbers.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public static void doSomething() {
	for(int i = 0; i &lt; 4; i++){                 // Noncompliant, 4 is a magic number
		...
	}
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public static final int NUMBER_OF_CYCLES = 4;
public static void doSomething() {
  for(int i = 0; i &lt; NUMBER_OF_CYCLES ; i++){
    ...
  }
}
</pre>
<h2>Exceptions</h2>
<p>This rule ignores <code>hashCode</code> methods.</p>","<p>A magic number is a number that comes out of nowhere, and is directly used in a statement. Magic numbers are often used, for instance to limit the
number of iterations of a loop, to test the value of a property, etc.</p>
<p>Using magic numbers may seem obvious and straightforward when you’re writing a piece of code, but they are much less obvious and straightforward at
debugging time.</p>
<p>That is why magic numbers must be demystified by first being assigned to clearly named variables before being used.</p>
<p>-1, 0 and 1 are not considered magic numbers.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public static void doSomething() {
	for(int i = 0; i &lt; 4; i++){                 // Noncompliant, 4 is a magic number
		...
	}
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public static final int NUMBER_OF_CYCLES = 4;
public static void doSomething() {
  for(int i = 0; i &lt; NUMBER_OF_CYCLES ; i++){
    ...
  }
}
</pre>
<h2>Exceptions</h2>
<p>This rule ignores <code>hashCode</code> methods.</p>",MAJOR,READY,False,[],['brain-overload'],java,Java,"[{'key': 'Authorized numbers', 'htmlDesc': 'Comma separated list of authorized numbers. Example: -1,0,1,2', 'defaultValue': '-1,0,1', 'type': 'STRING'}]",CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,MAIN,False,"[{'key': 'default', 'content': '<p>A magic number is a number that comes out of nowhere, and is directly used in a statement. Magic numbers are often used, for instance to limit the\nnumber of iterations of a loop, to test the value of a property, etc.</p>\n<p>Using magic numbers may seem obvious and straightforward when you’re writing a piece of code, but they are much less obvious and straightforward at\ndebugging time.</p>\n<p>That is why magic numbers must be demystified by first being assigned to clearly named variables before being used.</p>\n<p>-1, 0 and 1 are not considered magic numbers.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic static void doSomething() {\n\tfor(int i = 0; i &lt; 4; i++){                 // Noncompliant, 4 is a magic number\n\t\t...\n\t}\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static final int NUMBER_OF_CYCLES = 4;\npublic static void doSomething() {\n  for(int i = 0; i &lt; NUMBER_OF_CYCLES ; i++){\n    ...\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule ignores <code>hashCode</code> methods.</p>'}]",[],['squid:S109'],,,,
java:S120,java,Package names should comply with a naming convention,2023-06-14T03:41:52+0000,"<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all package names match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^[a-z_]+(\.[a-z_][a-z0-9_]*)*$</code>:</p>
<pre>
package org.exAmple; // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
package org.example;
</pre>","<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all package names match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^[a-z_]+(\.[a-z_][a-z0-9_]*)*$</code>:</p>
<pre>
package org.exAmple; // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
package org.example;
</pre>",MINOR,READY,False,[],['convention'],java,Java,"[{'key': 'format', 'htmlDesc': 'Regular expression used to check the package names against.', 'defaultValue': '^[a-z_]+(\\.[a-z_][a-z0-9_]*)*$', 'type': 'STRING'}]",CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,10min,CONSTANT_ISSUE,10min,False,ALL,False,"[{'key': 'default', 'content': '<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all package names match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[a-z_]+(\\.[a-z_][a-z0-9_]*)*$</code>:</p>\n<pre>\npackage org.exAmple; // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npackage org.example;\n</pre>'}]",[],['squid:S00120'],,,,
java:S121,java,Control structures should use curly braces,2023-06-14T03:41:52+0000,"<p>While not technically incorrect, the omission of curly braces can be misleading, and may lead to the introduction of errors during maintenance.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (condition)  // Noncompliant
  executeSomething();
</pre>
<h2>Compliant Solution</h2>
<pre>
if (condition) {
  executeSomething();
}
</pre>
<h2>Exceptions</h2>
<p>When the body of an <code>if</code> statement is a single <code>return</code>, <code>break</code> or <code>continue</code> and is on the same
line.</p>
<h2>See</h2>
<ul>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/g9YxBQ"">CERT, EXP19-C.</a> - Use braces for the body of an if, for, or while statement </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/MzZGBQ"">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement </li>
</ul>","<p>While not technically incorrect, the omission of curly braces can be misleading, and may lead to the introduction of errors during maintenance.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (condition)  // Noncompliant
  executeSomething();
</pre>
<h2>Compliant Solution</h2>
<pre>
if (condition) {
  executeSomething();
}
</pre>
<h2>Exceptions</h2>
<p>When the body of an <code>if</code> statement is a single <code>return</code>, <code>break</code> or <code>continue</code> and is on the same
line.</p>
<h2>See</h2>
<ul>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/g9YxBQ"">CERT, EXP19-C.</a> - Use braces for the body of an if, for, or while statement </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/MzZGBQ"">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement </li>
</ul>",CRITICAL,READY,False,[],"['cert', 'pitfall']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,2min,CONSTANT_ISSUE,2min,False,ALL,False,"[{'key': 'default', 'content': '<p>While not technically incorrect, the omission of curly braces can be misleading, and may lead to the introduction of errors during maintenance.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)  // Noncompliant\n  executeSomething();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition) {\n  executeSomething();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>When the body of an <code>if</code> statement is a single <code>return</code>, <code>break</code> or <code>continue</code> and is on the same\nline.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/g9YxBQ"">CERT, EXP19-C.</a> - Use braces for the body of an if, for, or while statement </li>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/MzZGBQ"">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement </li>\n</ul>'}]",[],['squid:S00121'],,,,
java:S3047,java,Multiple loops over the same set should be combined,2023-06-14T03:41:52+0000,"<p>When a method loops multiple over the same set of data, whether it’s a list or a set of numbers, it is highly likely that the method could be made
more efficient by combining the loops into a single set of iterations.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void doSomethingToAList(List&lt;String&gt; strings) {
  for (String str : strings) {
    doStep1(str);
  }
  for (String str : strings) {  // Noncompliant
    doStep2(str);
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void doSomethingToAList(List&lt;String&gt; strings) {
  for (String str : strings) {
    doStep1(str);
    doStep2(str);
  }
}
</pre>","<p>When a method loops multiple over the same set of data, whether it’s a list or a set of numbers, it is highly likely that the method could be made
more efficient by combining the loops into a single set of iterations.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void doSomethingToAList(List&lt;String&gt; strings) {
  for (String str : strings) {
    doStep1(str);
  }
  for (String str : strings) {  // Noncompliant
    doStep2(str);
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void doSomethingToAList(List&lt;String&gt; strings) {
  for (String str : strings) {
    doStep1(str);
    doStep2(str);
  }
}
</pre>",MINOR,READY,False,[],['performance'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,20min,CONSTANT_ISSUE,20min,False,MAIN,False,"[{'key': 'default', 'content': '<p>When a method loops multiple over the same set of data, whether it’s a list or a set of numbers, it is highly likely that the method could be made\nmore efficient by combining the loops into a single set of iterations.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomethingToAList(List&lt;String&gt; strings) {\n  for (String str : strings) {\n    doStep1(str);\n  }\n  for (String str : strings) {  // Noncompliant\n    doStep2(str);\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomethingToAList(List&lt;String&gt; strings) {\n  for (String str : strings) {\n    doStep1(str);\n    doStep2(str);\n  }\n}\n</pre>'}]",[],['squid:S3047'],,,,
java:S122,java,Statements should be on separate lines,2023-06-14T03:41:52+0000,"<p>For better readability, do not put more than one statement on a single line.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if(someCondition) doSomething();
</pre>
<h2>Compliant Solution</h2>
<pre>
if(someCondition) {
  doSomething();
}
</pre>","<p>For better readability, do not put more than one statement on a single line.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if(someCondition) doSomething();
</pre>
<h2>Compliant Solution</h2>
<pre>
if(someCondition) {
  doSomething();
}
</pre>",MAJOR,READY,False,[],['convention'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,1min,CONSTANT_ISSUE,1min,False,ALL,False,"[{'key': 'default', 'content': '<p>For better readability, do not put more than one statement on a single line.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(someCondition) doSomething();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif(someCondition) {\n  doSomething();\n}\n</pre>'}]",[],['squid:S00122'],,,,
java:S2197,java,Modulus results should not be checked for direct equality,2023-06-14T03:41:52+0000,"<p>When the modulus of a negative number is calculated, the result will either be negative or zero. Thus, comparing the modulus of a variable for
equality with a positive number (or a negative one) could result in unexpected results.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public boolean isOdd(int x) {
  return x % 2 == 1;  // Noncompliant; if x is an odd negative, x % 2 == -1
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public boolean isOdd(int x) {
  return x % 2 != 0;
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/pDdGBQ"">CERT, NUM51-J.</a> - Do not assume that the remainder operator always returns a
  nonnegative result for integral operands </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/_NUxBQ"">CERT, INT10-C</a> - Do not assume a positive remainder when using the % operator </li>
</ul>","<p>When the modulus of a negative number is calculated, the result will either be negative or zero. Thus, comparing the modulus of a variable for
equality with a positive number (or a negative one) could result in unexpected results.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public boolean isOdd(int x) {
  return x % 2 == 1;  // Noncompliant; if x is an odd negative, x % 2 == -1
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public boolean isOdd(int x) {
  return x % 2 != 0;
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/pDdGBQ"">CERT, NUM51-J.</a> - Do not assume that the remainder operator always returns a
  nonnegative result for integral operands </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/_NUxBQ"">CERT, INT10-C</a> - Do not assume a positive remainder when using the % operator </li>
</ul>",CRITICAL,READY,False,[],"['cert', 'suspicious']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>When the modulus of a negative number is calculated, the result will either be negative or zero. Thus, comparing the modulus of a variable for\nequality with a positive number (or a negative one) could result in unexpected results.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boolean isOdd(int x) {\n  return x % 2 == 1;  // Noncompliant; if x is an odd negative, x % 2 == -1\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean isOdd(int x) {\n  return x % 2 != 0;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/pDdGBQ"">CERT, NUM51-J.</a> - Do not assume that the remainder operator always returns a\n  nonnegative result for integral operands </li>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/_NUxBQ"">CERT, INT10-C</a> - Do not assume a positive remainder when using the % operator </li>\n</ul>'}]",[],['squid:S2197'],,,,
java:S113,java,Files should contain an empty newline at the end,2023-06-14T03:41:52+0000,"<p>Some tools work better when files end with an empty line.</p>
<p>This rule simply generates an issue if it is missing.</p>
<p>For example, a Git diff looks like this if the empty line is missing at the end of the file:</p>
<pre>
+class Test {
+}
\ No newline at end of file
</pre>","<p>Some tools work better when files end with an empty line.</p>
<p>This rule simply generates an issue if it is missing.</p>
<p>For example, a Git diff looks like this if the empty line is missing at the end of the file:</p>
<pre>
+class Test {
+}
\ No newline at end of file
</pre>",MINOR,READY,False,[],['convention'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,1min,CONSTANT_ISSUE,1min,False,ALL,False,"[{'key': 'default', 'content': '<p>Some tools work better when files end with an empty line.</p>\n<p>This rule simply generates an issue if it is missing.</p>\n<p>For example, a Git diff looks like this if the empty line is missing at the end of the file:</p>\n<pre>\n+class Test {\n+}\n\\ No newline at end of file\n</pre>'}]",[],['squid:S00113'],,,,
java:S114,java,Interface names should comply with a naming convention,2023-06-14T03:41:52+0000,"<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all
interface names match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>
<pre>
public interface myInterface {...} // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
public interface MyInterface {...}
</pre>","<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all
interface names match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>
<pre>
public interface myInterface {...} // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
public interface MyInterface {...}
</pre>",MINOR,READY,False,[],['convention'],java,Java,"[{'key': 'format', 'htmlDesc': 'Regular expression used to check the interface names against.', 'defaultValue': '^[A-Z][a-zA-Z0-9]*$', 'type': 'STRING'}]",CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,10min,CONSTANT_ISSUE,10min,False,ALL,False,"[{'key': 'default', 'content': '<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all\ninterface names match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>\n<pre>\npublic interface myInterface {...} // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic interface MyInterface {...}\n</pre>'}]",[],['squid:S00114'],,,,
java:S3042,java,"""writeObject"" should not be the only ""synchronized"" code in a class",2023-06-14T03:41:52+0000,"<p>The purpose of synchronization is to ensure that only one thread executes a given block of code at a time. There’s no real problem with marking
<code>writeObject</code> <code>synchronized</code>, but it’s highly suspicious if this serialization-related method is the only
<code>synchronized</code> code in a <code>class</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class RubberBall {

  private Color color;
  private int diameter;

  public RubberBall(Color color, int diameter) {
    // ...
  }

  public void bounce(float angle, float velocity) {
    // ...
  }

  private synchronized void writeObject(ObjectOutputStream stream) throws IOException { // Noncompliant
    // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class RubberBall {

  private Color color;
  private int diameter;

   public RubberBall(Color color, int diameter) {
    // ...
  }

  public void bounce(float angle, float velocity) {
    // ...
  }

  private void writeObject(ObjectOutputStream stream) throws IOException {
    // ...
  }
}
</pre>","<p>The purpose of synchronization is to ensure that only one thread executes a given block of code at a time. There’s no real problem with marking
<code>writeObject</code> <code>synchronized</code>, but it’s highly suspicious if this serialization-related method is the only
<code>synchronized</code> code in a <code>class</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class RubberBall {

  private Color color;
  private int diameter;

  public RubberBall(Color color, int diameter) {
    // ...
  }

  public void bounce(float angle, float velocity) {
    // ...
  }

  private synchronized void writeObject(ObjectOutputStream stream) throws IOException { // Noncompliant
    // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class RubberBall {

  private Color color;
  private int diameter;

   public RubberBall(Color color, int diameter) {
    // ...
  }

  public void bounce(float angle, float velocity) {
    // ...
  }

  private void writeObject(ObjectOutputStream stream) throws IOException {
    // ...
  }
}
</pre>",MAJOR,READY,False,[],['confusing'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,20min,CONSTANT_ISSUE,20min,False,ALL,False,"[{'key': 'default', 'content': '<p>The purpose of synchronization is to ensure that only one thread executes a given block of code at a time. There’s no real problem with marking\n<code>writeObject</code> <code>synchronized</code>, but it’s highly suspicious if this serialization-related method is the only\n<code>synchronized</code> code in a <code>class</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class RubberBall {\n\n  private Color color;\n  private int diameter;\n\n  public RubberBall(Color color, int diameter) {\n    // ...\n  }\n\n  public void bounce(float angle, float velocity) {\n    // ...\n  }\n\n  private synchronized void writeObject(ObjectOutputStream stream) throws IOException { // Noncompliant\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class RubberBall {\n\n  private Color color;\n  private int diameter;\n\n   public RubberBall(Color color, int diameter) {\n    // ...\n  }\n\n  public void bounce(float angle, float velocity) {\n    // ...\n  }\n\n  private void writeObject(ObjectOutputStream stream) throws IOException {\n    // ...\n  }\n}\n</pre>'}]",[],['squid:S3042'],,,,
java:S115,java,Constant names should comply with a naming convention,2023-06-14T03:41:52+0000,"<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all constant names match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$</code>:</p>
<pre>
public class MyClass {
  public static final int first = 1;
}

public enum MyEnum {
  first;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass {
  public static final int FIRST = 1;
}

public enum MyEnum {
  FIRST;
}
</pre>","<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all constant names match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$</code>:</p>
<pre>
public class MyClass {
  public static final int first = 1;
}

public enum MyEnum {
  first;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass {
  public static final int FIRST = 1;
}

public enum MyEnum {
  FIRST;
}
</pre>",CRITICAL,READY,False,[],['convention'],java,Java,"[{'key': 'format', 'htmlDesc': 'Regular expression used to check the constant names against.', 'defaultValue': '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$', 'type': 'STRING'}]",CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,2min,CONSTANT_ISSUE,2min,False,ALL,False,"[{'key': 'default', 'content': '<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all constant names match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$</code>:</p>\n<pre>\npublic class MyClass {\n  public static final int first = 1;\n}\n\npublic enum MyEnum {\n  first;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  public static final int FIRST = 1;\n}\n\npublic enum MyEnum {\n  FIRST;\n}\n</pre>'}]",[],['squid:S00115'],,,,
java:S116,java,Field names should comply with a naming convention,2023-06-14T03:41:52+0000,"<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that field
names match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>
<pre>
class MyClass {
   private int my_field;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass {
   private int myField;
}
</pre>","<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that field
names match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>
<pre>
class MyClass {
   private int my_field;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass {
   private int myField;
}
</pre>",MINOR,READY,False,[],['convention'],java,Java,"[{'key': 'format', 'htmlDesc': 'Regular expression used to check the field names against.', 'defaultValue': '^[a-z][a-zA-Z0-9]*$', 'type': 'STRING'}]",CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,2min,CONSTANT_ISSUE,2min,False,ALL,False,"[{'key': 'default', 'content': '<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that field\nnames match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>\n<pre>\nclass MyClass {\n   private int my_field;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n   private int myField;\n}\n</pre>'}]",[],['squid:S00116'],,,,
java:S117,java,Local variable and method parameter names should comply with a naming convention,2023-06-14T03:41:52+0000,"<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when a local variable or function parameter name does
not match the provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>
<pre>
public void doSomething(int my_param) {
  int LOCAL;
  ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void doSomething(int myParam) {
  int local;
  ...
}
</pre>
<h2>Exceptions</h2>
<p>Loop counters are ignored by this rule.</p>
<pre>
for (int i_1 = 0; i_1 &lt; limit; i_1++) {  // Compliant
  // ...
}
</pre>
<p>as well as one-character <code>catch</code> variables:</p>
<pre>
try {
//...
} catch (Exception e) { // Compliant
}
</pre>","<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when a local variable or function parameter name does
not match the provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>
<pre>
public void doSomething(int my_param) {
  int LOCAL;
  ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void doSomething(int myParam) {
  int local;
  ...
}
</pre>
<h2>Exceptions</h2>
<p>Loop counters are ignored by this rule.</p>
<pre>
for (int i_1 = 0; i_1 &lt; limit; i_1++) {  // Compliant
  // ...
}
</pre>
<p>as well as one-character <code>catch</code> variables:</p>
<pre>
try {
//...
} catch (Exception e) { // Compliant
}
</pre>",MINOR,READY,False,[],['convention'],java,Java,"[{'key': 'format', 'htmlDesc': 'Regular expression used to check the names against.', 'defaultValue': '^[a-z][a-zA-Z0-9]*$', 'type': 'STRING'}]",CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,2min,CONSTANT_ISSUE,2min,False,ALL,False,"[{'key': 'default', 'content': '<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when a local variable or function parameter name does\nnot match the provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>\n<pre>\npublic void doSomething(int my_param) {\n  int LOCAL;\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(int myParam) {\n  int local;\n  ...\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Loop counters are ignored by this rule.</p>\n<pre>\nfor (int i_1 = 0; i_1 &lt; limit; i_1++) {  // Compliant\n  // ...\n}\n</pre>\n<p>as well as one-character <code>catch</code> variables:</p>\n<pre>\ntry {\n//...\n} catch (Exception e) { // Compliant\n}\n</pre>'}]",[],['squid:S00117'],,,,
java:S118,java,Abstract class names should comply with a naming convention,2023-06-14T03:41:52+0000,"<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all
<code>abstract</code> class names match a provided regular expression. If a non-abstract class match the regular expression, an issue is raised to
suggest to either make it abstract or to rename it.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression: <code>^Abstract[A-Z][a-zA-Z0-9]*$</code>:</p>
<pre>
abstract class MyClass { // Noncompliant
}

class AbstractLikeClass { // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
abstract class AbstractClass {
}

class LikeClass {
}
</pre>","<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all
<code>abstract</code> class names match a provided regular expression. If a non-abstract class match the regular expression, an issue is raised to
suggest to either make it abstract or to rename it.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression: <code>^Abstract[A-Z][a-zA-Z0-9]*$</code>:</p>
<pre>
abstract class MyClass { // Noncompliant
}

class AbstractLikeClass { // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
abstract class AbstractClass {
}

class LikeClass {
}
</pre>",MINOR,READY,False,[],['convention'],java,Java,"[{'key': 'format', 'htmlDesc': 'Regular expression used to check the abstract class names against.', 'defaultValue': '^Abstract[A-Z][a-zA-Z0-9]*$', 'type': 'STRING'}]",CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,10min,CONSTANT_ISSUE,10min,False,ALL,False,"[{'key': 'default', 'content': '<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all\n<code>abstract</code> class names match a provided regular expression. If a non-abstract class match the regular expression, an issue is raised to\nsuggest to either make it abstract or to rename it.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression: <code>^Abstract[A-Z][a-zA-Z0-9]*$</code>:</p>\n<pre>\nabstract class MyClass { // Noncompliant\n}\n\nclass AbstractLikeClass { // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nabstract class AbstractClass {\n}\n\nclass LikeClass {\n}\n</pre>'}]",[],['squid:S00118'],,,,
java:S119,java,Type parameter names should comply with a naming convention,2023-06-14T03:41:52+0000,"<p>Shared naming conventions make it possible for a team to collaborate efficiently. Following the established convention of single-letter type
parameter names helps users and maintainers of your code quickly see the difference between a type parameter and a poorly named class.</p>
<p>This rule check that all type parameter names match a provided regular expression. The following code snippets use the default regular
expression.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass&lt;TYPE&gt; { // Noncompliant
  &lt;TYPE&gt; void method(TYPE t) { // Noncompliant
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass&lt;T&gt; {
  &lt;T&gt; void method(T t) {
  }
}
</pre>","<p>Shared naming conventions make it possible for a team to collaborate efficiently. Following the established convention of single-letter type
parameter names helps users and maintainers of your code quickly see the difference between a type parameter and a poorly named class.</p>
<p>This rule check that all type parameter names match a provided regular expression. The following code snippets use the default regular
expression.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass&lt;TYPE&gt; { // Noncompliant
  &lt;TYPE&gt; void method(TYPE t) { // Noncompliant
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass&lt;T&gt; {
  &lt;T&gt; void method(T t) {
  }
}
</pre>",MINOR,READY,False,[],['convention'],java,Java,"[{'key': 'format', 'htmlDesc': 'Regular expression used to check the type parameter names against.', 'defaultValue': '^[A-Z][0-9]?$', 'type': 'STRING'}]",CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,10min,CONSTANT_ISSUE,10min,False,ALL,False,"[{'key': 'default', 'content': '<p>Shared naming conventions make it possible for a team to collaborate efficiently. Following the established convention of single-letter type\nparameter names helps users and maintainers of your code quickly see the difference between a type parameter and a poorly named class.</p>\n<p>This rule check that all type parameter names match a provided regular expression. The following code snippets use the default regular\nexpression.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass&lt;TYPE&gt; { // Noncompliant\n  &lt;TYPE&gt; void method(TYPE t) { // Noncompliant\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass&lt;T&gt; {\n  &lt;T&gt; void method(T t) {\n  }\n}\n</pre>'}]",[],['squid:S00119'],,,,
java:S2196,java,"Switches should be used for sequences of simple ""String"" tests",2023-06-14T03:41:52+0000,"<p>Since Java 7, <code>String</code>s can be used as <code>switch</code> arguments. So when a single <code>String</code> is tested against three or
more values in an <code>if</code>/<code>else if</code> structure, it should be converted to a switch instead for greater readability.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project’s <code>sonar.java.source</code> is lower than <code>7</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (""red"".equals(choice)) {  // Noncompliant
  dispenseRed();
} else if (""blue"".equals(choice)) {
  dispenseBlue();
} else if (""yellow"".equals(choice)) {
  dispenseYellow();
} else {
  promptUser();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch(choice) {
  case ""Red"":
    dispenseRed();
    break;
  case ""Blue"":
    dispenseBlue():
    break;
  case ""Yellow"":
    dispenseYellow();
    break;
  default:
    promptUser();
    break;
}
</pre>","<p>Since Java 7, <code>String</code>s can be used as <code>switch</code> arguments. So when a single <code>String</code> is tested against three or
more values in an <code>if</code>/<code>else if</code> structure, it should be converted to a switch instead for greater readability.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project’s <code>sonar.java.source</code> is lower than <code>7</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (""red"".equals(choice)) {  // Noncompliant
  dispenseRed();
} else if (""blue"".equals(choice)) {
  dispenseBlue();
} else if (""yellow"".equals(choice)) {
  dispenseYellow();
} else {
  promptUser();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch(choice) {
  case ""Red"":
    dispenseRed();
    break;
  case ""Blue"":
    dispenseBlue():
    break;
  case ""Yellow"":
    dispenseYellow();
    break;
  default:
    promptUser();
    break;
}
</pre>",MINOR,READY,False,[],['clumsy'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>Since Java 7, <code>String</code>s can be used as <code>switch</code> arguments. So when a single <code>String</code> is tested against three or\nmore values in an <code>if</code>/<code>else if</code> structure, it should be converted to a switch instead for greater readability.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project’s <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (""red"".equals(choice)) {  // Noncompliant\n  dispenseRed();\n} else if (""blue"".equals(choice)) {\n  dispenseBlue();\n} else if (""yellow"".equals(choice)) {\n  dispenseYellow();\n} else {\n  promptUser();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch(choice) {\n  case ""Red"":\n    dispenseRed();\n    break;\n  case ""Blue"":\n    dispenseBlue():\n    break;\n  case ""Yellow"":\n    dispenseYellow();\n    break;\n  default:\n    promptUser();\n    break;\n}\n</pre>'}]",[],['squid:S2196'],,,,
java:S4011,java,Track uses of disallowed constructors,2023-06-14T03:41:52+0000,"<p>This rule allows banning usage of certain constructors.</p>
<h2>Noncompliant Code Example</h2>
<p>Given parameters:</p>
<ul>
  <li> className: java.util.Date </li>
  <li> argumentTypes: java.lang.String </li>
</ul>
<pre>
Date birthday;
birthday = new Date(""Sat Sep 27 05:42:21 EDT 1986"");  // Noncompliant
birthday = new Date(528176541000L); // Compliant
</pre>","<p>This rule allows banning usage of certain constructors.</p>
<h2>Noncompliant Code Example</h2>
<p>Given parameters:</p>
<ul>
  <li> className: java.util.Date </li>
  <li> argumentTypes: java.lang.String </li>
</ul>
<pre>
Date birthday;
birthday = new Date(""Sat Sep 27 05:42:21 EDT 1986"");  // Noncompliant
birthday = new Date(528176541000L); // Compliant
</pre>",MAJOR,READY,True,[],[],java,Java,"[{'key': 'className', 'htmlDesc': 'Name of the class whose constructor is forbidden. This parameter is mandatory, if absent the rule is disabled.', 'type': 'STRING'}, {'key': 'argumentTypes', 'htmlDesc': 'Comma-delimited list of argument types, E.G. java.lang.String, int[], int', 'type': 'STRING'}, {'key': 'allOverloads', 'htmlDesc': 'Set to true to flag all overloads regardless of parameter type', 'defaultValue': 'false', 'type': 'BOOLEAN'}]",CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,0min,CONSTANT_ISSUE,0min,False,MAIN,False,"[{'key': 'default', 'content': '<p>This rule allows banning usage of certain constructors.</p>\n<h2>Noncompliant Code Example</h2>\n<p>Given parameters:</p>\n<ul>\n  <li> className: java.util.Date </li>\n  <li> argumentTypes: java.lang.String </li>\n</ul>\n<pre>\nDate birthday;\nbirthday = new Date(""Sat Sep 27 05:42:21 EDT 1986"");  // Noncompliant\nbirthday = new Date(528176541000L); // Compliant\n</pre>'}]",[],['squid:S4011'],,,,
java:S1199,java,Nested code blocks should not be used,2023-06-14T03:41:52+0000,"<p>Nested code blocks can be used to create a new scope and restrict the visibility of the variables defined inside it. Using this feature in a method
typically indicates that the method has too many responsibilities, and should be refactored into smaller methods.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void evaluate(int operator) {
  // Do some computation...
  {
    int a = stack.pop();
    int b = stack.pop();
    int result = a + b;
    stack.push(result);
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void evaluate(int operator) {
  // Do some computation...
  evaluateAdd();
}

private void evaluateAdd() {
  int a = stack.pop();
  int b = stack.pop();
  int result = a + b;
  stack.push(result);
}
</pre>","<p>Nested code blocks can be used to create a new scope and restrict the visibility of the variables defined inside it. Using this feature in a method
typically indicates that the method has too many responsibilities, and should be refactored into smaller methods.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void evaluate(int operator) {
  // Do some computation...
  {
    int a = stack.pop();
    int b = stack.pop();
    int result = a + b;
    stack.push(result);
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void evaluate(int operator) {
  // Do some computation...
  evaluateAdd();
}

private void evaluateAdd() {
  int a = stack.pop();
  int b = stack.pop();
  int result = a + b;
  stack.push(result);
}
</pre>",MINOR,READY,False,[],['bad-practice'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,10min,CONSTANT_ISSUE,10min,False,ALL,False,"[{'key': 'default', 'content': '<p>Nested code blocks can be used to create a new scope and restrict the visibility of the variables defined inside it. Using this feature in a method\ntypically indicates that the method has too many responsibilities, and should be refactored into smaller methods.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void evaluate(int operator) {\n  // Do some computation...\n  {\n    int a = stack.pop();\n    int b = stack.pop();\n    int result = a + b;\n    stack.push(result);\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void evaluate(int operator) {\n  // Do some computation...\n  evaluateAdd();\n}\n\nprivate void evaluateAdd() {\n  int a = stack.pop();\n  int b = stack.pop();\n  int result = a + b;\n  stack.push(result);\n}\n</pre>'}]",[],['squid:S1199'],,,,
java:S2047,java,"The names of methods with boolean return values should start with ""is"" or ""has""",2023-06-14T03:41:52+0000,"<p>Well-named functions can allow the users of your code to understand at a glance what to expect from the function - even before reading the
documentation. Toward that end, methods returning a boolean should have names that start with ""is"" or ""has"" rather than with ""get"".</p>
<h2>Noncompliant Code Example</h2>
<pre>
public boolean getFoo() { // Noncompliant
  // ...
}

public boolean getBar(Bar c) { // Noncompliant
  // ...
}

public boolean testForBar(Bar c) { // Compliant - The method does not start by 'get'.
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public boolean isFoo() {
  // ...
}

public boolean hasBar(Bar c) {
  // ...
}

public boolean testForBar(Bar c) {
  // ...
}
</pre>
<h2>Exceptions</h2>
<p>Overriding methods are excluded.</p>
<pre>
@Override
public boolean getFoo(){
  // ...
}
</pre>","<p>Well-named functions can allow the users of your code to understand at a glance what to expect from the function - even before reading the
documentation. Toward that end, methods returning a boolean should have names that start with ""is"" or ""has"" rather than with ""get"".</p>
<h2>Noncompliant Code Example</h2>
<pre>
public boolean getFoo() { // Noncompliant
  // ...
}

public boolean getBar(Bar c) { // Noncompliant
  // ...
}

public boolean testForBar(Bar c) { // Compliant - The method does not start by 'get'.
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public boolean isFoo() {
  // ...
}

public boolean hasBar(Bar c) {
  // ...
}

public boolean testForBar(Bar c) {
  // ...
}
</pre>
<h2>Exceptions</h2>
<p>Overriding methods are excluded.</p>
<pre>
@Override
public boolean getFoo(){
  // ...
}
</pre>",MAJOR,READY,False,[],['convention'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,15min,CONSTANT_ISSUE,15min,False,ALL,False,"[{'key': 'default', 'content': '<p>Well-named functions can allow the users of your code to understand at a glance what to expect from the function - even before reading the\ndocumentation. Toward that end, methods returning a boolean should have names that start with ""is"" or ""has"" rather than with ""get"".</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boolean getFoo() { // Noncompliant\n  // ...\n}\n\npublic boolean getBar(Bar c) { // Noncompliant\n  // ...\n}\n\npublic boolean testForBar(Bar c) { // Compliant - The method does not start by \'get\'.\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean isFoo() {\n  // ...\n}\n\npublic boolean hasBar(Bar c) {\n  // ...\n}\n\npublic boolean testForBar(Bar c) {\n  // ...\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Overriding methods are excluded.</p>\n<pre>\n@Override\npublic boolean getFoo(){\n  // ...\n}\n</pre>'}]",[],['squid:S2047'],,,,
java:S2166,java,"Classes named like ""Exception"" should extend ""Exception"" or a subclass",2023-06-14T03:41:52+0000,"<p>Clear, communicative naming is important in code. It helps maintainers and API users understand the intentions for and uses of a unit of code.
Using ""exception"" in the name of a class that does not extend <code>Exception</code> or one of its subclasses is a clear violation of the expectation
that a class' name will indicate what it is and/or does.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class FruitException {  // Noncompliant; this has nothing to do with Exception
  private Fruit expected;
  private String unusualCharacteristics;
  private boolean appropriateForCommercialExploitation;
  // ...
}

public class CarException {  // Noncompliant; the extends clause was forgotten?
  public CarException(String message, Throwable cause) {
  // ...
</pre>
<h2>Compliant Solution</h2>
<pre>
public class FruitSport {
  private Fruit expected;
  private String unusualCharacteristics;
  private boolean appropriateForCommercialExploitation;
  // ...
}

public class CarException extends Exception {
  public CarException(String message, Throwable cause) {
  // ...
</pre>","<p>Clear, communicative naming is important in code. It helps maintainers and API users understand the intentions for and uses of a unit of code.
Using ""exception"" in the name of a class that does not extend <code>Exception</code> or one of its subclasses is a clear violation of the expectation
that a class' name will indicate what it is and/or does.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class FruitException {  // Noncompliant; this has nothing to do with Exception
  private Fruit expected;
  private String unusualCharacteristics;
  private boolean appropriateForCommercialExploitation;
  // ...
}

public class CarException {  // Noncompliant; the extends clause was forgotten?
  public CarException(String message, Throwable cause) {
  // ...
</pre>
<h2>Compliant Solution</h2>
<pre>
public class FruitSport {
  private Fruit expected;
  private String unusualCharacteristics;
  private boolean appropriateForCommercialExploitation;
  // ...
}

public class CarException extends Exception {
  public CarException(String message, Throwable cause) {
  // ...
</pre>",MAJOR,READY,False,[],"['convention', 'error-handling', 'pitfall']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,MAIN,False,"[{'key': 'default', 'content': '<p>Clear, communicative naming is important in code. It helps maintainers and API users understand the intentions for and uses of a unit of code.\nUsing ""exception"" in the name of a class that does not extend <code>Exception</code> or one of its subclasses is a clear violation of the expectation\nthat a class\' name will indicate what it is and/or does.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class FruitException {  // Noncompliant; this has nothing to do with Exception\n  private Fruit expected;\n  private String unusualCharacteristics;\n  private boolean appropriateForCommercialExploitation;\n  // ...\n}\n\npublic class CarException {  // Noncompliant; the extends clause was forgotten?\n  public CarException(String message, Throwable cause) {\n  // ...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class FruitSport {\n  private Fruit expected;\n  private String unusualCharacteristics;\n  private boolean appropriateForCommercialExploitation;\n  // ...\n}\n\npublic class CarException extends Exception {\n  public CarException(String message, Throwable cause) {\n  // ...\n</pre>'}]",[],['squid:S2166'],,,,
java:S3014,java,"""ThreadGroup"" should not be used",2023-06-14T03:41:52+0000,"<p>There is little valid reason to use the methods of the <code>ThreadGroup</code> class. Some are deprecated (<code>allowThreadSuspension()</code>,
<code>resume()</code>, <code>stop()</code>, and <code>suspend()</code>), some are obsolete, others aren’t thread-safe, and still others are insecure
(<code>activeCount()</code>, <code>enumerate()</code>) . For these reasons, any use of <code>ThreadGroup</code> is suspicious and should be
avoided.</p>
<h2>Compliant Solution</h2>
<pre>
ThreadFactory threadFactory = Executors.defaultThreadFactory();
ThreadPoolExecutor executorPool = new ThreadPoolExecutor(3, 10, 5, TimeUnit.SECONDS, new ArrayBlockingQueue&lt;Runnable&gt;(2), threadFactory);

for (int i = 0; i &lt; 10; i++) {
  executorPool.execute(new JobThread(""Job: "" + i));
}

System.out.println(executorPool.getActiveCount()); // Compliant
executorPool.shutdown();
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/YzdGBQ"">CERT, THI01-J.</a> - Do not invoke ThreadGroup methods </li>
</ul>","<p>There is little valid reason to use the methods of the <code>ThreadGroup</code> class. Some are deprecated (<code>allowThreadSuspension()</code>,
<code>resume()</code>, <code>stop()</code>, and <code>suspend()</code>), some are obsolete, others aren’t thread-safe, and still others are insecure
(<code>activeCount()</code>, <code>enumerate()</code>) . For these reasons, any use of <code>ThreadGroup</code> is suspicious and should be
avoided.</p>
<h2>Compliant Solution</h2>
<pre>
ThreadFactory threadFactory = Executors.defaultThreadFactory();
ThreadPoolExecutor executorPool = new ThreadPoolExecutor(3, 10, 5, TimeUnit.SECONDS, new ArrayBlockingQueue&lt;Runnable&gt;(2), threadFactory);

for (int i = 0; i &lt; 10; i++) {
  executorPool.execute(new JobThread(""Job: "" + i));
}

System.out.println(executorPool.getActiveCount()); // Compliant
executorPool.shutdown();
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/YzdGBQ"">CERT, THI01-J.</a> - Do not invoke ThreadGroup methods </li>
</ul>",BLOCKER,READY,False,[],"['cert', 'design', 'suspicious']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,45min,CONSTANT_ISSUE,45min,False,MAIN,False,"[{'key': 'default', 'content': '<p>There is little valid reason to use the methods of the <code>ThreadGroup</code> class. Some are deprecated (<code>allowThreadSuspension()</code>,\n<code>resume()</code>, <code>stop()</code>, and <code>suspend()</code>), some are obsolete, others aren’t thread-safe, and still others are insecure\n(<code>activeCount()</code>, <code>enumerate()</code>) . For these reasons, any use of <code>ThreadGroup</code> is suspicious and should be\navoided.</p>\n<h2>Compliant Solution</h2>\n<pre>\nThreadFactory threadFactory = Executors.defaultThreadFactory();\nThreadPoolExecutor executorPool = new ThreadPoolExecutor(3, 10, 5, TimeUnit.SECONDS, new ArrayBlockingQueue&lt;Runnable&gt;(2), threadFactory);\n\nfor (int i = 0; i &lt; 10; i++) {\n  executorPool.execute(new JobThread(""Job: "" + i));\n}\n\nSystem.out.println(executorPool.getActiveCount()); // Compliant\nexecutorPool.shutdown();\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/YzdGBQ"">CERT, THI01-J.</a> - Do not invoke ThreadGroup methods </li>\n</ul>'}]",[],['squid:S3014'],,,,
java:S4349,java,"""write(byte[],int,int)"" should be overridden",2023-06-14T03:41:52+0000,"<p>When directly subclassing <code>java.io.OutputStream</code> or <code>java.io.FilterOutputStream</code>, the only requirement is that you implement
the method <code>write(int)</code>. However most uses for such streams don’t write a single byte at a time and the default implementation for
<code>write(byte[],int,int)</code> will call <code>write(int)</code> for every single byte in the array which can create a lot of overhead and is
utterly inefficient. It is therefore strongly recommended that subclasses provide an efficient implementation of
<code>write(byte[],int,int)</code>.</p>
<p>This rule raises an issue when a direct subclass of <code>java.io.OutputStream</code> or <code>java.io.FilterOutputStream</code> doesn’t provide an
override of <code>write(byte[],int,int)</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyStream extends OutputStream { // Noncompliant
    private FileOutputStream fout;

    public MyStream(File file) throws IOException {
        fout = new FileOutputStream(file);
    }

    @Override
    public void write(int b) throws IOException {
        fout.write(b);
    }

    @Override
    public void close() throws IOException {
        fout.write(""\n\n"".getBytes());
        fout.close();
        super.close();
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyStream extends OutputStream {
    private FileOutputStream fout;

    public MyStream(File file) throws IOException {
        fout = new FileOutputStream(file);
    }

    @Override
    public void write(int b) throws IOException {
        fout.write(b);
    }

    @Override
    public void write(byte[] b, int off, int len) throws IOException {
        fout.write(b, off, len);
    }

    @Override
    public void close() throws IOException {
        fout.write(""\n\n"".getBytes());
        fout.close();
        super.close();
    }
}
</pre>
<h2>Exceptions</h2>
<p>This rule doesn’t raise an issue when the class is declared <code>abstract</code>.</p>","<p>When directly subclassing <code>java.io.OutputStream</code> or <code>java.io.FilterOutputStream</code>, the only requirement is that you implement
the method <code>write(int)</code>. However most uses for such streams don’t write a single byte at a time and the default implementation for
<code>write(byte[],int,int)</code> will call <code>write(int)</code> for every single byte in the array which can create a lot of overhead and is
utterly inefficient. It is therefore strongly recommended that subclasses provide an efficient implementation of
<code>write(byte[],int,int)</code>.</p>
<p>This rule raises an issue when a direct subclass of <code>java.io.OutputStream</code> or <code>java.io.FilterOutputStream</code> doesn’t provide an
override of <code>write(byte[],int,int)</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyStream extends OutputStream { // Noncompliant
    private FileOutputStream fout;

    public MyStream(File file) throws IOException {
        fout = new FileOutputStream(file);
    }

    @Override
    public void write(int b) throws IOException {
        fout.write(b);
    }

    @Override
    public void close() throws IOException {
        fout.write(""\n\n"".getBytes());
        fout.close();
        super.close();
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyStream extends OutputStream {
    private FileOutputStream fout;

    public MyStream(File file) throws IOException {
        fout = new FileOutputStream(file);
    }

    @Override
    public void write(int b) throws IOException {
        fout.write(b);
    }

    @Override
    public void write(byte[] b, int off, int len) throws IOException {
        fout.write(b, off, len);
    }

    @Override
    public void close() throws IOException {
        fout.write(""\n\n"".getBytes());
        fout.close();
        super.close();
    }
}
</pre>
<h2>Exceptions</h2>
<p>This rule doesn’t raise an issue when the class is declared <code>abstract</code>.</p>",MINOR,READY,False,[],['performance'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,30min,CONSTANT_ISSUE,30min,False,MAIN,False,"[{'key': 'default', 'content': '<p>When directly subclassing <code>java.io.OutputStream</code> or <code>java.io.FilterOutputStream</code>, the only requirement is that you implement\nthe method <code>write(int)</code>. However most uses for such streams don’t write a single byte at a time and the default implementation for\n<code>write(byte[],int,int)</code> will call <code>write(int)</code> for every single byte in the array which can create a lot of overhead and is\nutterly inefficient. It is therefore strongly recommended that subclasses provide an efficient implementation of\n<code>write(byte[],int,int)</code>.</p>\n<p>This rule raises an issue when a direct subclass of <code>java.io.OutputStream</code> or <code>java.io.FilterOutputStream</code> doesn’t provide an\noverride of <code>write(byte[],int,int)</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyStream extends OutputStream { // Noncompliant\n    private FileOutputStream fout;\n\n    public MyStream(File file) throws IOException {\n        fout = new FileOutputStream(file);\n    }\n\n    @Override\n    public void write(int b) throws IOException {\n        fout.write(b);\n    }\n\n    @Override\n    public void close() throws IOException {\n        fout.write(""\\n\\n"".getBytes());\n        fout.close();\n        super.close();\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyStream extends OutputStream {\n    private FileOutputStream fout;\n\n    public MyStream(File file) throws IOException {\n        fout = new FileOutputStream(file);\n    }\n\n    @Override\n    public void write(int b) throws IOException {\n        fout.write(b);\n    }\n\n    @Override\n    public void write(byte[] b, int off, int len) throws IOException {\n        fout.write(b, off, len);\n    }\n\n    @Override\n    public void close() throws IOException {\n        fout.write(""\\n\\n"".getBytes());\n        fout.close();\n        super.close();\n    }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule doesn’t raise an issue when the class is declared <code>abstract</code>.</p>'}]",[],['squid:S4349'],,,,
java:S1075,java,URIs should not be hardcoded,2023-06-14T03:41:52+0000,"<p>Hard coding a URI makes it difficult to test a program: path literals are not always portable across operating systems, a given absolute path may
not exist on a specific test environment, a specified Internet URL may not be available when executing the tests, production environment filesystems
usually differ from the development environment, …​etc. For all those reasons, a URI should never be hard coded. Instead, it should be replaced by
customizable parameter.</p>
<p>Further even if the elements of a URI are obtained dynamically, portability can still be limited if the path-delimiters are hard-coded.</p>
<p>This rule raises an issue when URI’s or path delimiters are hard coded.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo {
  public Collection&lt;User&gt; listUsers() {
    File userList = new File(""/home/mylogin/Dev/users.txt""); // Noncompliant
    Collection&lt;User&gt; users = parse(userList);
    return users;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Foo {
  // Configuration is a class that returns customizable properties: it can be mocked to be injected during tests.
  private Configuration config;
  public Foo(Configuration myConfig) {
    this.config = myConfig;
  }
  public Collection&lt;User&gt; listUsers() {
    // Find here the way to get the correct folder, in this case using the Configuration object
    String listingFolder = config.getProperty(""myApplication.listingFolder"");
    // and use this parameter instead of the hard coded path
    File userList = new File(listingFolder, ""users.txt""); // Compliant
    Collection&lt;User&gt; users = parse(userList);
    return users;
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/OjdGBQ"">CERT, MSC03-J.</a> - Never hard code sensitive information </li>
</ul>","<p>Hard coding a URI makes it difficult to test a program: path literals are not always portable across operating systems, a given absolute path may
not exist on a specific test environment, a specified Internet URL may not be available when executing the tests, production environment filesystems
usually differ from the development environment, …​etc. For all those reasons, a URI should never be hard coded. Instead, it should be replaced by
customizable parameter.</p>
<p>Further even if the elements of a URI are obtained dynamically, portability can still be limited if the path-delimiters are hard-coded.</p>
<p>This rule raises an issue when URI’s or path delimiters are hard coded.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo {
  public Collection&lt;User&gt; listUsers() {
    File userList = new File(""/home/mylogin/Dev/users.txt""); // Noncompliant
    Collection&lt;User&gt; users = parse(userList);
    return users;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Foo {
  // Configuration is a class that returns customizable properties: it can be mocked to be injected during tests.
  private Configuration config;
  public Foo(Configuration myConfig) {
    this.config = myConfig;
  }
  public Collection&lt;User&gt; listUsers() {
    // Find here the way to get the correct folder, in this case using the Configuration object
    String listingFolder = config.getProperty(""myApplication.listingFolder"");
    // and use this parameter instead of the hard coded path
    File userList = new File(listingFolder, ""users.txt""); // Compliant
    Collection&lt;User&gt; users = parse(userList);
    return users;
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/OjdGBQ"">CERT, MSC03-J.</a> - Never hard code sensitive information </li>
</ul>",MINOR,READY,False,[],"['android', 'cert']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,20min,CONSTANT_ISSUE,20min,False,MAIN,False,"[{'key': 'default', 'content': '<p>Hard coding a URI makes it difficult to test a program: path literals are not always portable across operating systems, a given absolute path may\nnot exist on a specific test environment, a specified Internet URL may not be available when executing the tests, production environment filesystems\nusually differ from the development environment, …\u200betc. For all those reasons, a URI should never be hard coded. Instead, it should be replaced by\ncustomizable parameter.</p>\n<p>Further even if the elements of a URI are obtained dynamically, portability can still be limited if the path-delimiters are hard-coded.</p>\n<p>This rule raises an issue when URI’s or path delimiters are hard coded.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n  public Collection&lt;User&gt; listUsers() {\n    File userList = new File(""/home/mylogin/Dev/users.txt""); // Noncompliant\n    Collection&lt;User&gt; users = parse(userList);\n    return users;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n  // Configuration is a class that returns customizable properties: it can be mocked to be injected during tests.\n  private Configuration config;\n  public Foo(Configuration myConfig) {\n    this.config = myConfig;\n  }\n  public Collection&lt;User&gt; listUsers() {\n    // Find here the way to get the correct folder, in this case using the Configuration object\n    String listingFolder = config.getProperty(""myApplication.listingFolder"");\n    // and use this parameter instead of the hard coded path\n    File userList = new File(listingFolder, ""users.txt""); // Compliant\n    Collection&lt;User&gt; users = parse(userList);\n    return users;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/OjdGBQ"">CERT, MSC03-J.</a> - Never hard code sensitive information </li>\n</ul>'}]",[],['squid:S1075'],,,,
java:S1194,java,"""java.lang.Error"" should not be extended",2023-06-14T03:41:52+0000,"<p><code>java.lang.Error</code> and its subclasses represent abnormal conditions, such as <code>OutOfMemoryError</code>, which should only be
encountered by the Java Virtual Machine.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyException extends Error { /* ... */ }       // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyException extends Exception { /* ... */ }   // Compliant
</pre>","<p><code>java.lang.Error</code> and its subclasses represent abnormal conditions, such as <code>OutOfMemoryError</code>, which should only be
encountered by the Java Virtual Machine.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyException extends Error { /* ... */ }       // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyException extends Exception { /* ... */ }   // Compliant
</pre>",MAJOR,READY,False,[],['error-handling'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,10min,CONSTANT_ISSUE,10min,False,MAIN,False,"[{'key': 'default', 'content': '<p><code>java.lang.Error</code> and its subclasses represent abnormal conditions, such as <code>OutOfMemoryError</code>, which should only be\nencountered by the Java Virtual Machine.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyException extends Error { /* ... */ }       // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyException extends Exception { /* ... */ }   // Compliant\n</pre>'}]",[],['squid:S1194'],,,,
java:S1195,java,"Array designators ""[]"" should be located after the type in method signatures",2023-06-14T03:41:52+0000,"<p>According to the Java Language Specification:</p>
<blockquote>
  <p>For compatibility with older versions of the Java SE platform,</p>
  <p>the declaration of a method that returns an array is allowed to place (some or all of) the empty bracket pairs that form the declaration of the
  array type after the formal parameter list.</p>
  <p>This obsolescent syntax should not be used in new code.</p>
</blockquote>
<h2>Noncompliant Code Example</h2>
<pre>
public int getVector()[] { /* ... */ }    // Noncompliant

public int[] getMatrix()[] { /* ... */ }  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
public int[] getVector() { /* ... */ }

public int[][] getMatrix() { /* ... */ }
</pre>","<p>According to the Java Language Specification:</p>
<blockquote>
  <p>For compatibility with older versions of the Java SE platform,</p>
  <p>the declaration of a method that returns an array is allowed to place (some or all of) the empty bracket pairs that form the declaration of the
  array type after the formal parameter list.</p>
  <p>This obsolescent syntax should not be used in new code.</p>
</blockquote>
<h2>Noncompliant Code Example</h2>
<pre>
public int getVector()[] { /* ... */ }    // Noncompliant

public int[] getMatrix()[] { /* ... */ }  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
public int[] getVector() { /* ... */ }

public int[][] getMatrix() { /* ... */ }
</pre>",MINOR,READY,False,[],['convention'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>According to the Java Language Specification:</p>\n<blockquote>\n  <p>For compatibility with older versions of the Java SE platform,</p>\n  <p>the declaration of a method that returns an array is allowed to place (some or all of) the empty bracket pairs that form the declaration of the\n  array type after the formal parameter list.</p>\n  <p>This obsolescent syntax should not be used in new code.</p>\n</blockquote>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int getVector()[] { /* ... */ }    // Noncompliant\n\npublic int[] getMatrix()[] { /* ... */ }  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int[] getVector() { /* ... */ }\n\npublic int[][] getMatrix() { /* ... */ }\n</pre>'}]",[],['squid:S1195'],,,,
java:S1197,java,"Array designators ""[]"" should be on the type, not the variable",2023-06-14T03:41:52+0000,"<p>Array designators should always be located on the type for better code readability. Otherwise, developers must look both at the type and the
variable name to know whether or not a variable is an array.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int matrix[][];   // Noncompliant
int[] matrix[];   // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
int[][] matrix;   // Compliant
</pre>","<p>Array designators should always be located on the type for better code readability. Otherwise, developers must look both at the type and the
variable name to know whether or not a variable is an array.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int matrix[][];   // Noncompliant
int[] matrix[];   // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
int[][] matrix;   // Compliant
</pre>",MINOR,READY,False,[],['convention'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>Array designators should always be located on the type for better code readability. Otherwise, developers must look both at the type and the\nvariable name to know whether or not a variable is an array.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint matrix[][];   // Noncompliant\nint[] matrix[];   // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint[][] matrix;   // Compliant\n</pre>'}]",[],['squid:S1197'],,,,
java:S2165,java,"""finalize"" should not set fields to ""null""",2023-06-14T03:41:52+0000,"<p>There is no point in setting class fields to <code>null</code> in a finalizer. If this this is a hint to the garbage collector, it is unnecessary -
the object will be garbage collected anyway - and doing so may actually cause extra work for the garbage collector.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo {
  private String name;

  @Override
  void finalize() {
    name = null;  // Noncompliant; completely unnecessary
  }
}
</pre>","<p>There is no point in setting class fields to <code>null</code> in a finalizer. If this this is a hint to the garbage collector, it is unnecessary -
the object will be garbage collected anyway - and doing so may actually cause extra work for the garbage collector.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo {
  private String name;

  @Override
  void finalize() {
    name = null;  // Noncompliant; completely unnecessary
  }
}
</pre>",MINOR,READY,False,[],"['clumsy', 'performance']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,MAIN,False,"[{'key': 'default', 'content': '<p>There is no point in setting class fields to <code>null</code> in a finalizer. If this this is a hint to the garbage collector, it is unnecessary -\nthe object will be garbage collected anyway - and doing so may actually cause extra work for the garbage collector.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n  private String name;\n\n  @Override\n  void finalize() {\n    name = null;  // Noncompliant; completely unnecessary\n  }\n}\n</pre>'}]",[],['squid:S2165'],,,,
java:S3010,java,Static fields should not be updated in constructors,2023-06-14T03:41:52+0000,"<p>Assigning a value to a <code>static</code> field in a constructor could cause unreliable behavior at runtime since it will change the value for all
instances of the class.</p>
<p>Instead remove the field’s <code>static</code> modifier, or initialize it statically.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Person {
  static Date dateOfBirth;
  static int expectedFingers;

  public Person(date birthday) {
    dateOfBirth = birthday;  // Noncompliant; now everyone has this birthday
    expectedFingers = 10;  // Noncompliant
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Person {
  Date dateOfBirth;
  static int expectedFingers = 10;

  public Person(date birthday) {
    dateOfBirth = birthday;
  }
}
</pre>","<p>Assigning a value to a <code>static</code> field in a constructor could cause unreliable behavior at runtime since it will change the value for all
instances of the class.</p>
<p>Instead remove the field’s <code>static</code> modifier, or initialize it statically.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Person {
  static Date dateOfBirth;
  static int expectedFingers;

  public Person(date birthday) {
    dateOfBirth = birthday;  // Noncompliant; now everyone has this birthday
    expectedFingers = 10;  // Noncompliant
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Person {
  Date dateOfBirth;
  static int expectedFingers = 10;

  public Person(date birthday) {
    dateOfBirth = birthday;
  }
}
</pre>",MAJOR,READY,False,[],[],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,20min,CONSTANT_ISSUE,20min,False,MAIN,False,"[{'key': 'default', 'content': '<p>Assigning a value to a <code>static</code> field in a constructor could cause unreliable behavior at runtime since it will change the value for all\ninstances of the class.</p>\n<p>Instead remove the field’s <code>static</code> modifier, or initialize it statically.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Person {\n  static Date dateOfBirth;\n  static int expectedFingers;\n\n  public Person(date birthday) {\n    dateOfBirth = birthday;  // Noncompliant; now everyone has this birthday\n    expectedFingers = 10;  // Noncompliant\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Person {\n  Date dateOfBirth;\n  static int expectedFingers = 10;\n\n  public Person(date birthday) {\n    dateOfBirth = birthday;\n  }\n}\n</pre>'}]",[],['squid:S3010'],,,,
java:S3011,java,"Reflection should not be used to increase accessibility of classes, methods, or fields",2023-06-14T03:41:52+0000,"<p>This rule raises an issue when reflection is used to change the visibility of a class, method or field, and when it is used to directly update a
field value. Altering or bypassing the accessibility of classes, methods, or fields violates the encapsulation principle and could lead to run-time
errors.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void makeItPublic(String methodName) throws NoSuchMethodException {

  this.getClass().getMethod(methodName).setAccessible(true); // Noncompliant
}

public void setItAnyway(String fieldName, int value) {
  this.getClass().getDeclaredField(fieldName).setInt(this, value); // Noncompliant; bypasses controls in setter
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/_jZGBQ"">CERT, SEC05-J.</a> - Do not use reflection to increase accessibility of classes,
  methods, or fields </li>
</ul>","<p>This rule raises an issue when reflection is used to change the visibility of a class, method or field, and when it is used to directly update a
field value. Altering or bypassing the accessibility of classes, methods, or fields violates the encapsulation principle and could lead to run-time
errors.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void makeItPublic(String methodName) throws NoSuchMethodException {

  this.getClass().getMethod(methodName).setAccessible(true); // Noncompliant
}

public void setItAnyway(String fieldName, int value) {
  this.getClass().getDeclaredField(fieldName).setInt(this, value); // Noncompliant; bypasses controls in setter
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/_jZGBQ"">CERT, SEC05-J.</a> - Do not use reflection to increase accessibility of classes,
  methods, or fields </li>
</ul>",MAJOR,READY,False,[],['cert'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,30min,CONSTANT_ISSUE,30min,False,MAIN,False,"[{'key': 'default', 'content': '<p>This rule raises an issue when reflection is used to change the visibility of a class, method or field, and when it is used to directly update a\nfield value. Altering or bypassing the accessibility of classes, methods, or fields violates the encapsulation principle and could lead to run-time\nerrors.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void makeItPublic(String methodName) throws NoSuchMethodException {\n\n  this.getClass().getMethod(methodName).setAccessible(true); // Noncompliant\n}\n\npublic void setItAnyway(String fieldName, int value) {\n  this.getClass().getDeclaredField(fieldName).setInt(this, value); // Noncompliant; bypasses controls in setter\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/_jZGBQ"">CERT, SEC05-J.</a> - Do not use reflection to increase accessibility of classes,\n  methods, or fields </li>\n</ul>'}]",[],['squid:S3011'],,,,
java:S3012,java,Arrays should not be copied using loops,2023-06-14T03:41:52+0000,"<p>Using a loop to copy an array or a subset of an array is simply wasted code when there are built-in functions to do it for you. Instead, use
<code>Arrays.copyOf</code> to copy an entire array into another array, use <code>System.arraycopy</code> to copy only a subset of an array into
another array, and use <code>Arrays.asList</code> to feed the constructor of a new list with an array.</p>
<p>Note that <code>Arrays.asList</code> simply puts a <code>Collections</code> wrapper around the original array, so further steps are required if a
non-fixed-size <code>List</code> is desired.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void makeCopies(String[] source) {

  this.array = new String[source.length];
  this.list = new ArrayList(source.length);

  for (int i = 0; i &lt; source.length; i++) {
    this.array[i] = source[i]; // Noncompliant
  }

  for (String s : source) {
    this.list.add(s); // Noncompliant
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void makeCopies(String[] source) {
  this.array = Arrays.copyOf(source, source.length);
  Collections.addAll(this.list, source);
}
</pre>
<h2>Exceptions</h2>
<p>Rule detects only the most idiomatic patterns, it will not consider loops with non-trivial control flow. For example, array elements that are
copied conditionally are ignored.</p>
<pre>
public int[] getCopy(int[] source) {
  int[] dest = new int[source.length];
  for (int i = 0; i &lt; source.length; i++) {
    if (source[i] &gt; 10) {
      dest[i] = source[i];  // Compliant
    }
  }
  return dest;
}
</pre>","<p>Using a loop to copy an array or a subset of an array is simply wasted code when there are built-in functions to do it for you. Instead, use
<code>Arrays.copyOf</code> to copy an entire array into another array, use <code>System.arraycopy</code> to copy only a subset of an array into
another array, and use <code>Arrays.asList</code> to feed the constructor of a new list with an array.</p>
<p>Note that <code>Arrays.asList</code> simply puts a <code>Collections</code> wrapper around the original array, so further steps are required if a
non-fixed-size <code>List</code> is desired.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void makeCopies(String[] source) {

  this.array = new String[source.length];
  this.list = new ArrayList(source.length);

  for (int i = 0; i &lt; source.length; i++) {
    this.array[i] = source[i]; // Noncompliant
  }

  for (String s : source) {
    this.list.add(s); // Noncompliant
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void makeCopies(String[] source) {
  this.array = Arrays.copyOf(source, source.length);
  Collections.addAll(this.list, source);
}
</pre>
<h2>Exceptions</h2>
<p>Rule detects only the most idiomatic patterns, it will not consider loops with non-trivial control flow. For example, array elements that are
copied conditionally are ignored.</p>
<pre>
public int[] getCopy(int[] source) {
  int[] dest = new int[source.length];
  for (int i = 0; i &lt; source.length; i++) {
    if (source[i] &gt; 10) {
      dest[i] = source[i];  // Compliant
    }
  }
  return dest;
}
</pre>",MINOR,READY,False,[],['clumsy'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,MAIN,False,"[{'key': 'default', 'content': '<p>Using a loop to copy an array or a subset of an array is simply wasted code when there are built-in functions to do it for you. Instead, use\n<code>Arrays.copyOf</code> to copy an entire array into another array, use <code>System.arraycopy</code> to copy only a subset of an array into\nanother array, and use <code>Arrays.asList</code> to feed the constructor of a new list with an array.</p>\n<p>Note that <code>Arrays.asList</code> simply puts a <code>Collections</code> wrapper around the original array, so further steps are required if a\nnon-fixed-size <code>List</code> is desired.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void makeCopies(String[] source) {\n\n  this.array = new String[source.length];\n  this.list = new ArrayList(source.length);\n\n  for (int i = 0; i &lt; source.length; i++) {\n    this.array[i] = source[i]; // Noncompliant\n  }\n\n  for (String s : source) {\n    this.list.add(s); // Noncompliant\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void makeCopies(String[] source) {\n  this.array = Arrays.copyOf(source, source.length);\n  Collections.addAll(this.list, source);\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Rule detects only the most idiomatic patterns, it will not consider loops with non-trivial control flow. For example, array elements that are\ncopied conditionally are ignored.</p>\n<pre>\npublic int[] getCopy(int[] source) {\n  int[] dest = new int[source.length];\n  for (int i = 0; i &lt; source.length; i++) {\n    if (source[i] &gt; 10) {\n      dest[i] = source[i];  // Compliant\n    }\n  }\n  return dest;\n}\n</pre>'}]",[],['squid:S3012'],,,,
java:S3252,java,"""static"" base class members should not be accessed via derived types",2023-06-14T03:41:52+0000,"<p>In the interest of code clarity, <code>static</code> members of a <code>base</code> class should never be accessed using a derived type’s name.
Doing so is confusing and could create the illusion that two different static members exist.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Parent {
  public static int counter;
}

class Child extends Parent {
  public Child() {
    Child.counter++;  // Noncompliant
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Parent {
  public static int counter;
}

class Child extends Parent {
  public Child() {
    Parent.counter++;
  }
}
</pre>","<p>In the interest of code clarity, <code>static</code> members of a <code>base</code> class should never be accessed using a derived type’s name.
Doing so is confusing and could create the illusion that two different static members exist.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Parent {
  public static int counter;
}

class Child extends Parent {
  public Child() {
    Child.counter++;  // Noncompliant
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Parent {
  public static int counter;
}

class Child extends Parent {
  public Child() {
    Parent.counter++;
  }
}
</pre>",CRITICAL,READY,False,[],['confusing'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,MAIN,False,"[{'key': 'default', 'content': '<p>In the interest of code clarity, <code>static</code> members of a <code>base</code> class should never be accessed using a derived type’s name.\nDoing so is confusing and could create the illusion that two different static members exist.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Parent {\n  public static int counter;\n}\n\nclass Child extends Parent {\n  public Child() {\n    Child.counter++;  // Noncompliant\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Parent {\n  public static int counter;\n}\n\nclass Child extends Parent {\n  public Child() {\n    Parent.counter++;\n  }\n}\n</pre>'}]",[],['squid:S3252'],,,,
java:S3254,java,Default annotation parameter values should not be passed as arguments,2023-06-14T03:41:52+0000,"<p>Specifying the default value for an annotation parameter is redundant. Such values should be omitted in the interests of readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@MyAnnotation(arg = ""def"")  // Noncompliant
public class MyClass {
  // ...
}
public @interface MyAnnotation {
  String arg() default ""def"";
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@MyAnnotation
public class MyClass {
  // ...
}
public @interface MyAnnotation {
  String arg() default ""def"";
}
</pre>","<p>Specifying the default value for an annotation parameter is redundant. Such values should be omitted in the interests of readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@MyAnnotation(arg = ""def"")  // Noncompliant
public class MyClass {
  // ...
}
public @interface MyAnnotation {
  String arg() default ""def"";
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@MyAnnotation
public class MyClass {
  // ...
}
public @interface MyAnnotation {
  String arg() default ""def"";
}
</pre>",MINOR,READY,False,[],"['clumsy', 'finding']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,2min,CONSTANT_ISSUE,2min,False,MAIN,False,"[{'key': 'default', 'content': '<p>Specifying the default value for an annotation parameter is redundant. Such values should be omitted in the interests of readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@MyAnnotation(arg = ""def"")  // Noncompliant\npublic class MyClass {\n  // ...\n}\npublic @interface MyAnnotation {\n  String arg() default ""def"";\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@MyAnnotation\npublic class MyClass {\n  // ...\n}\npublic @interface MyAnnotation {\n  String arg() default ""def"";\n}\n</pre>'}]",[],['squid:S3254'],,,,
java:S5793,java,Migrate your tests from JUnit4 to the new JUnit5 annotations,2023-06-14T03:41:52+0000,"<p>As mentioned in JUnit5 documentation, it is possible to integrate JUnit4 with JUnit5:</p>
<blockquote>
  <p>JUnit provides a gentle migration path via a JUnit Vintage test engine which allows existing tests based on JUnit 3 and JUnit 4 to be executed
  using the JUnit Platform infrastructure. Since all classes and annotations specific to JUnit Jupiter reside under a new org.junit.jupiter base
  package, having both JUnit 4 and JUnit Jupiter in the classpath does not lead to any conflicts.</p>
</blockquote>
<p>However, maintaining both systems is a temporary solution. This rule flags all the annotations from JUnit4 which would need to be migrated to
JUnit5, hence helping migration of a project.</p>
<p>Here is the list of JUnit4 annotations tracked by the rule, with their corresponding annotations in JUnit5:</p>
<table>
  <colgroup>
    <col style=""width: 50%;"">
    <col style=""width: 50%;"">
  </colgroup>
  <thead>
    <tr>
      <th>JUnit4</th>
      <th>JUnit5</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><p><code>org.junit.Test</code></p></td>
      <td><p><code>org.junit.jupiter.api.Test</code></p></td>
    </tr>
    <tr>
      <td><p><code>org.junit.Before</code></p></td>
      <td><p><code>org.junit.jupiter.api.BeforeEach</code></p></td>
    </tr>
    <tr>
      <td><p><code>org.junit.After</code></p></td>
      <td><p><code>org.junit.jupiter.api.AfterEach</code></p></td>
    </tr>
    <tr>
      <td><p><code>org.junit.BeforeClass</code></p></td>
      <td><p><code>org.junit.jupiter.api.BeforeAll</code></p></td>
    </tr>
    <tr>
      <td><p><code>org.junit.AfterClass</code></p></td>
      <td><p><code>org.junit.jupiter.api.AfterAll</code></p></td>
    </tr>
    <tr>
      <td><p><code>org.junit.Ignore</code></p></td>
      <td><p><code>org.junit.jupiter.api.Disabled</code></p></td>
    </tr>
  </tbody>
</table>
<p>Note that the following annotations might requires some rework of the tests to have JUnit5 equivalent behavior. A simple replacement of the
annotation won’t work immediately:</p>
<table>
  <colgroup>
    <col style=""width: 50%;"">
    <col style=""width: 50%;"">
  </colgroup>
  <thead>
    <tr>
      <th>JUnit4</th>
      <th>JUnit5</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><p><code>org.junit.experimental.categories.Category</code></p></td>
      <td><p><code>org.junit.jupiter.api.Tag</code></p></td>
    </tr>
    <tr>
      <td><p><code>org.junit.Rule</code></p></td>
      <td><p><code>org.junit.jupiter.api.extension.ExtendWith</code></p></td>
    </tr>
    <tr>
      <td><p><code>org.junit.ClassRule</code></p></td>
      <td><p><code>org.junit.jupiter.api.extension.RegisterExtension</code></p></td>
    </tr>
    <tr>
      <td><p><code>org.junit.runner.RunWith</code></p></td>
      <td><p><code>org.junit.jupiter.api.extension.ExtendWith</code></p></td>
    </tr>
  </tbody>
</table>
<h2>Noncompliant Code Example</h2>
<pre>
package org.foo;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.experimental.categories.Category;
import org.junit.runner.RunWith;

@RunWith(MyJUnit4Runner.class)
public class MyJUnit4Test {

  @BeforeClass
  public static void beforeAll() {
    System.out.println(""beforeAll"");
  }

  @AfterClass
  public static void afterAll() {
    System.out.println(""AfterAll"");
  }

  @Before
  public void beforeEach() {
    System.out.println(""beforeEach"");
  }

  @After
  public void afterEach() {
    System.out.println(""afterEach"");
  }

  @Test
  public void test1() throws Exception {
    System.out.println(""test1"");
  }

  public interface SomeTests { /* category marker */ }

  @Test
  @Category(SomeTests.class)
  public void test2() throws Exception {
    System.out.println(""test2"");
  }

  @Test
  @Ignore(""Requires fix of #42"")
  public void ignored() throws Exception {
    System.out.println(""ignored"");
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
package org.foo;

import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;

@ExtendWith(MyJUnit5Extension.class)
class MyJUnit5Test {

  @BeforeAll
  static void beforeAll() {
    System.out.println(""beforeAll"");
  }

  @AfterAll
  static void afterAll() {
    System.out.println(""afterAll"");
  }

  @BeforeEach
  void beforeEach() {
    System.out.println(""beforeEach"");
  }

  @AfterEach
  void afterEach() {
    System.out.println(""afterEach"");
  }

  @Test
  void test1() {
    System.out.println(""test1"");
  }

  @Test
  @Tag(""SomeTests"")
  void test2() {
    System.out.println(""test2"");
  }

  @Test
  @Disabled(""Requires fix of #42"")
  void disabled() {
    System.out.println(""ignored"");
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://junit.org/junit5/docs/current/user-guide/#migrating-from-junit4"">JUnit 5: Migrating from JUnit4</a> </li>
</ul>","<p>As mentioned in JUnit5 documentation, it is possible to integrate JUnit4 with JUnit5:</p>
<blockquote>
  <p>JUnit provides a gentle migration path via a JUnit Vintage test engine which allows existing tests based on JUnit 3 and JUnit 4 to be executed
  using the JUnit Platform infrastructure. Since all classes and annotations specific to JUnit Jupiter reside under a new org.junit.jupiter base
  package, having both JUnit 4 and JUnit Jupiter in the classpath does not lead to any conflicts.</p>
</blockquote>
<p>However, maintaining both systems is a temporary solution. This rule flags all the annotations from JUnit4 which would need to be migrated to
JUnit5, hence helping migration of a project.</p>
<p>Here is the list of JUnit4 annotations tracked by the rule, with their corresponding annotations in JUnit5:</p>
<table>
  <colgroup>
    <col style=""width: 50%;"">
    <col style=""width: 50%;"">
  </colgroup>
  <thead>
    <tr>
      <th>JUnit4</th>
      <th>JUnit5</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><p><code>org.junit.Test</code></p></td>
      <td><p><code>org.junit.jupiter.api.Test</code></p></td>
    </tr>
    <tr>
      <td><p><code>org.junit.Before</code></p></td>
      <td><p><code>org.junit.jupiter.api.BeforeEach</code></p></td>
    </tr>
    <tr>
      <td><p><code>org.junit.After</code></p></td>
      <td><p><code>org.junit.jupiter.api.AfterEach</code></p></td>
    </tr>
    <tr>
      <td><p><code>org.junit.BeforeClass</code></p></td>
      <td><p><code>org.junit.jupiter.api.BeforeAll</code></p></td>
    </tr>
    <tr>
      <td><p><code>org.junit.AfterClass</code></p></td>
      <td><p><code>org.junit.jupiter.api.AfterAll</code></p></td>
    </tr>
    <tr>
      <td><p><code>org.junit.Ignore</code></p></td>
      <td><p><code>org.junit.jupiter.api.Disabled</code></p></td>
    </tr>
  </tbody>
</table>
<p>Note that the following annotations might requires some rework of the tests to have JUnit5 equivalent behavior. A simple replacement of the
annotation won’t work immediately:</p>
<table>
  <colgroup>
    <col style=""width: 50%;"">
    <col style=""width: 50%;"">
  </colgroup>
  <thead>
    <tr>
      <th>JUnit4</th>
      <th>JUnit5</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><p><code>org.junit.experimental.categories.Category</code></p></td>
      <td><p><code>org.junit.jupiter.api.Tag</code></p></td>
    </tr>
    <tr>
      <td><p><code>org.junit.Rule</code></p></td>
      <td><p><code>org.junit.jupiter.api.extension.ExtendWith</code></p></td>
    </tr>
    <tr>
      <td><p><code>org.junit.ClassRule</code></p></td>
      <td><p><code>org.junit.jupiter.api.extension.RegisterExtension</code></p></td>
    </tr>
    <tr>
      <td><p><code>org.junit.runner.RunWith</code></p></td>
      <td><p><code>org.junit.jupiter.api.extension.ExtendWith</code></p></td>
    </tr>
  </tbody>
</table>
<h2>Noncompliant Code Example</h2>
<pre>
package org.foo;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.experimental.categories.Category;
import org.junit.runner.RunWith;

@RunWith(MyJUnit4Runner.class)
public class MyJUnit4Test {

  @BeforeClass
  public static void beforeAll() {
    System.out.println(""beforeAll"");
  }

  @AfterClass
  public static void afterAll() {
    System.out.println(""AfterAll"");
  }

  @Before
  public void beforeEach() {
    System.out.println(""beforeEach"");
  }

  @After
  public void afterEach() {
    System.out.println(""afterEach"");
  }

  @Test
  public void test1() throws Exception {
    System.out.println(""test1"");
  }

  public interface SomeTests { /* category marker */ }

  @Test
  @Category(SomeTests.class)
  public void test2() throws Exception {
    System.out.println(""test2"");
  }

  @Test
  @Ignore(""Requires fix of #42"")
  public void ignored() throws Exception {
    System.out.println(""ignored"");
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
package org.foo;

import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;

@ExtendWith(MyJUnit5Extension.class)
class MyJUnit5Test {

  @BeforeAll
  static void beforeAll() {
    System.out.println(""beforeAll"");
  }

  @AfterAll
  static void afterAll() {
    System.out.println(""afterAll"");
  }

  @BeforeEach
  void beforeEach() {
    System.out.println(""beforeEach"");
  }

  @AfterEach
  void afterEach() {
    System.out.println(""afterEach"");
  }

  @Test
  void test1() {
    System.out.println(""test1"");
  }

  @Test
  @Tag(""SomeTests"")
  void test2() {
    System.out.println(""test2"");
  }

  @Test
  @Disabled(""Requires fix of #42"")
  void disabled() {
    System.out.println(""ignored"");
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://junit.org/junit5/docs/current/user-guide/#migrating-from-junit4"">JUnit 5: Migrating from JUnit4</a> </li>
</ul>",INFO,READY,False,[],"['junit', 'tests']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,TEST,False,"[{'key': 'default', 'content': '<p>As mentioned in JUnit5 documentation, it is possible to integrate JUnit4 with JUnit5:</p>\n<blockquote>\n  <p>JUnit provides a gentle migration path via a JUnit Vintage test engine which allows existing tests based on JUnit 3 and JUnit 4 to be executed\n  using the JUnit Platform infrastructure. Since all classes and annotations specific to JUnit Jupiter reside under a new org.junit.jupiter base\n  package, having both JUnit 4 and JUnit Jupiter in the classpath does not lead to any conflicts.</p>\n</blockquote>\n<p>However, maintaining both systems is a temporary solution. This rule flags all the annotations from JUnit4 which would need to be migrated to\nJUnit5, hence helping migration of a project.</p>\n<p>Here is the list of JUnit4 annotations tracked by the rule, with their corresponding annotations in JUnit5:</p>\n<table>\n  <colgroup>\n    <col style=""width: 50%;"">\n    <col style=""width: 50%;"">\n  </colgroup>\n  <thead>\n    <tr>\n      <th>JUnit4</th>\n      <th>JUnit5</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><p><code>org.junit.Test</code></p></td>\n      <td><p><code>org.junit.jupiter.api.Test</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>org.junit.Before</code></p></td>\n      <td><p><code>org.junit.jupiter.api.BeforeEach</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>org.junit.After</code></p></td>\n      <td><p><code>org.junit.jupiter.api.AfterEach</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>org.junit.BeforeClass</code></p></td>\n      <td><p><code>org.junit.jupiter.api.BeforeAll</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>org.junit.AfterClass</code></p></td>\n      <td><p><code>org.junit.jupiter.api.AfterAll</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>org.junit.Ignore</code></p></td>\n      <td><p><code>org.junit.jupiter.api.Disabled</code></p></td>\n    </tr>\n  </tbody>\n</table>\n<p>Note that the following annotations might requires some rework of the tests to have JUnit5 equivalent behavior. A simple replacement of the\nannotation won’t work immediately:</p>\n<table>\n  <colgroup>\n    <col style=""width: 50%;"">\n    <col style=""width: 50%;"">\n  </colgroup>\n  <thead>\n    <tr>\n      <th>JUnit4</th>\n      <th>JUnit5</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><p><code>org.junit.experimental.categories.Category</code></p></td>\n      <td><p><code>org.junit.jupiter.api.Tag</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>org.junit.Rule</code></p></td>\n      <td><p><code>org.junit.jupiter.api.extension.ExtendWith</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>org.junit.ClassRule</code></p></td>\n      <td><p><code>org.junit.jupiter.api.extension.RegisterExtension</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>org.junit.runner.RunWith</code></p></td>\n      <td><p><code>org.junit.jupiter.api.extension.ExtendWith</code></p></td>\n    </tr>\n  </tbody>\n</table>\n<h2>Noncompliant Code Example</h2>\n<pre>\npackage org.foo;\n\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.junit.Before;\nimport org.junit.BeforeClass;\nimport org.junit.Ignore;\nimport org.junit.Test;\nimport org.junit.experimental.categories.Category;\nimport org.junit.runner.RunWith;\n\n@RunWith(MyJUnit4Runner.class)\npublic class MyJUnit4Test {\n\n  @BeforeClass\n  public static void beforeAll() {\n    System.out.println(""beforeAll"");\n  }\n\n  @AfterClass\n  public static void afterAll() {\n    System.out.println(""AfterAll"");\n  }\n\n  @Before\n  public void beforeEach() {\n    System.out.println(""beforeEach"");\n  }\n\n  @After\n  public void afterEach() {\n    System.out.println(""afterEach"");\n  }\n\n  @Test\n  public void test1() throws Exception {\n    System.out.println(""test1"");\n  }\n\n  public interface SomeTests { /* category marker */ }\n\n  @Test\n  @Category(SomeTests.class)\n  public void test2() throws Exception {\n    System.out.println(""test2"");\n  }\n\n  @Test\n  @Ignore(""Requires fix of #42"")\n  public void ignored() throws Exception {\n    System.out.println(""ignored"");\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npackage org.foo;\n\nimport org.junit.jupiter.api.AfterAll;\nimport org.junit.jupiter.api.AfterEach;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Disabled;\nimport org.junit.jupiter.api.Tag;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\n\n@ExtendWith(MyJUnit5Extension.class)\nclass MyJUnit5Test {\n\n  @BeforeAll\n  static void beforeAll() {\n    System.out.println(""beforeAll"");\n  }\n\n  @AfterAll\n  static void afterAll() {\n    System.out.println(""afterAll"");\n  }\n\n  @BeforeEach\n  void beforeEach() {\n    System.out.println(""beforeEach"");\n  }\n\n  @AfterEach\n  void afterEach() {\n    System.out.println(""afterEach"");\n  }\n\n  @Test\n  void test1() {\n    System.out.println(""test1"");\n  }\n\n  @Test\n  @Tag(""SomeTests"")\n  void test2() {\n    System.out.println(""test2"");\n  }\n\n  @Test\n  @Disabled(""Requires fix of #42"")\n  void disabled() {\n    System.out.println(""ignored"");\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://junit.org/junit5/docs/current/user-guide/#migrating-from-junit4"">JUnit 5: Migrating from JUnit4</a> </li>\n</ul>'}]",[],['squid:S5793'],,,,
java:S1190,java,Future keywords should not be used as names,2023-06-14T03:41:52+0000,"<p>Through Java’s evolution keywords have been added. While code that uses those words as identifiers may be compilable under older versions of Java,
it will not be under modern versions.</p>
<p>Following keywords are marked as invalid identifiers</p>
<table>
  <colgroup>
    <col style=""width: 50%;"">
    <col style=""width: 50%;"">
  </colgroup>
  <thead>
    <tr>
      <th>Keyword</th>
      <th>Added</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><p><code>_</code></p></td>
      <td><p>9</p></td>
    </tr>
    <tr>
      <td><p><code>enum</code></p></td>
      <td><p>5.0</p></td>
    </tr>
  </tbody>
</table>
<p><code>assert</code> and <code>strictfp</code> are another example of valid identifiers which became keywords in later versions, but are not
supported by this rule.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void doSomething() {
  int enum = 42;            // Noncompliant
  String _ = """";   // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void doSomething() {
  int magic = 42;
}
</pre>","<p>Through Java’s evolution keywords have been added. While code that uses those words as identifiers may be compilable under older versions of Java,
it will not be under modern versions.</p>
<p>Following keywords are marked as invalid identifiers</p>
<table>
  <colgroup>
    <col style=""width: 50%;"">
    <col style=""width: 50%;"">
  </colgroup>
  <thead>
    <tr>
      <th>Keyword</th>
      <th>Added</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><p><code>_</code></p></td>
      <td><p>9</p></td>
    </tr>
    <tr>
      <td><p><code>enum</code></p></td>
      <td><p>5.0</p></td>
    </tr>
  </tbody>
</table>
<p><code>assert</code> and <code>strictfp</code> are another example of valid identifiers which became keywords in later versions, but are not
supported by this rule.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void doSomething() {
  int enum = 42;            // Noncompliant
  String _ = """";   // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void doSomething() {
  int magic = 42;
}
</pre>",BLOCKER,READY,False,[],"['obsolete', 'pitfall']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>Through Java’s evolution keywords have been added. While code that uses those words as identifiers may be compilable under older versions of Java,\nit will not be under modern versions.</p>\n<p>Following keywords are marked as invalid identifiers</p>\n<table>\n  <colgroup>\n    <col style=""width: 50%;"">\n    <col style=""width: 50%;"">\n  </colgroup>\n  <thead>\n    <tr>\n      <th>Keyword</th>\n      <th>Added</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><p><code>_</code></p></td>\n      <td><p>9</p></td>\n    </tr>\n    <tr>\n      <td><p><code>enum</code></p></td>\n      <td><p>5.0</p></td>\n    </tr>\n  </tbody>\n</table>\n<p><code>assert</code> and <code>strictfp</code> are another example of valid identifiers which became keywords in later versions, but are not\nsupported by this rule.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething() {\n  int enum = 42;            // Noncompliant\n  String _ = """";   // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething() {\n  int magic = 42;\n}\n</pre>'}]",[],['squid:S1190'],,,,
java:S1191,java,"Classes from ""sun.*"" packages should not be used",2023-06-14T03:41:52+0000,"<p>Classes in the <code>sun.*</code> packages are considered implementation details, and are not part of the Java API.</p>
<p>They can cause problems when moving to new versions of Java because there is no backwards compatibility guarantee. Similarly, they can cause
problems when moving to a different Java vendor, such as OpenJDK.</p>
<p>Such classes are almost always wrapped by Java API classes that should be used instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
import sun.misc.BASE64Encoder; // Noncompliant
</pre>","<p>Classes in the <code>sun.*</code> packages are considered implementation details, and are not part of the Java API.</p>
<p>They can cause problems when moving to new versions of Java because there is no backwards compatibility guarantee. Similarly, they can cause
problems when moving to a different Java vendor, such as OpenJDK.</p>
<p>Such classes are almost always wrapped by Java API classes that should be used instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
import sun.misc.BASE64Encoder; // Noncompliant
</pre>",MAJOR,READY,False,[],"['lock-in', 'pitfall']",java,Java,"[{'key': 'Exclude', 'htmlDesc': 'Comma separated list of Sun packages to be ignored by this rule. Example: sun.misc,sun.security.validator', 'type': 'STRING'}]",LINEAR,LINEAR,CODE_SMELL,LINEAR,,LINEAR,,False,ALL,False,"[{'key': 'default', 'content': '<p>Classes in the <code>sun.*</code> packages are considered implementation details, and are not part of the Java API.</p>\n<p>They can cause problems when moving to new versions of Java because there is no backwards compatibility guarantee. Similarly, they can cause\nproblems when moving to a different Java vendor, such as OpenJDK.</p>\n<p>Such classes are almost always wrapped by Java API classes that should be used instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport sun.misc.BASE64Encoder; // Noncompliant\n</pre>'}]",[],['squid:S1191'],20min,20min,"per ""sun"" import",
java:S1192,java,String literals should not be duplicated,2023-06-14T03:41:52+0000,"<p>Duplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.</p>
<p>On the other hand, constants can be referenced from many places, but only need to be updated in a single place.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold of 3:</p>
<pre>
public void run() {
  prepare(""action1"");                              // Noncompliant - ""action1"" is duplicated 3 times
  execute(""action1"");
  release(""action1"");
}

@SuppressWarning(""all"")                            // Compliant - annotations are excluded
private void method1() { /* ... */ }
@SuppressWarning(""all"")
private void method2() { /* ... */ }

public String method3(String a) {
  System.out.println(""'"" + a + ""'"");               // Compliant - literal ""'"" has less than 5 characters and is excluded
  return """";                                       // Compliant - literal """" has less than 5 characters and is excluded
}
</pre>
<h2>Compliant Solution</h2>
<pre>
private static final String ACTION_1 = ""action1"";  // Compliant

public void run() {
  prepare(ACTION_1);                               // Compliant
  execute(ACTION_1);
  release(ACTION_1);
}
</pre>
<h2>Exceptions</h2>
<p>To prevent generating some false-positives, literals having less than 5 characters are excluded.</p>","<p>Duplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.</p>
<p>On the other hand, constants can be referenced from many places, but only need to be updated in a single place.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold of 3:</p>
<pre>
public void run() {
  prepare(""action1"");                              // Noncompliant - ""action1"" is duplicated 3 times
  execute(""action1"");
  release(""action1"");
}

@SuppressWarning(""all"")                            // Compliant - annotations are excluded
private void method1() { /* ... */ }
@SuppressWarning(""all"")
private void method2() { /* ... */ }

public String method3(String a) {
  System.out.println(""'"" + a + ""'"");               // Compliant - literal ""'"" has less than 5 characters and is excluded
  return """";                                       // Compliant - literal """" has less than 5 characters and is excluded
}
</pre>
<h2>Compliant Solution</h2>
<pre>
private static final String ACTION_1 = ""action1"";  // Compliant

public void run() {
  prepare(ACTION_1);                               // Compliant
  execute(ACTION_1);
  release(ACTION_1);
}
</pre>
<h2>Exceptions</h2>
<p>To prevent generating some false-positives, literals having less than 5 characters are excluded.</p>",CRITICAL,READY,False,[],['design'],java,Java,"[{'key': 'threshold', 'htmlDesc': 'Number of times a literal must be duplicated to trigger an issue', 'defaultValue': '3', 'type': 'INTEGER'}]",LINEAR_OFFSET,LINEAR_OFFSET,CODE_SMELL,LINEAR_OFFSET,2min,LINEAR_OFFSET,2min,False,MAIN,False,"[{'key': 'default', 'content': '<p>Duplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.</p>\n<p>On the other hand, constants can be referenced from many places, but only need to be updated in a single place.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 3:</p>\n<pre>\npublic void run() {\n  prepare(""action1"");                              // Noncompliant - ""action1"" is duplicated 3 times\n  execute(""action1"");\n  release(""action1"");\n}\n\n@SuppressWarning(""all"")                            // Compliant - annotations are excluded\nprivate void method1() { /* ... */ }\n@SuppressWarning(""all"")\nprivate void method2() { /* ... */ }\n\npublic String method3(String a) {\n  System.out.println(""\'"" + a + ""\'"");               // Compliant - literal ""\'"" has less than 5 characters and is excluded\n  return """";                                       // Compliant - literal """" has less than 5 characters and is excluded\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate static final String ACTION_1 = ""action1"";  // Compliant\n\npublic void run() {\n  prepare(ACTION_1);                               // Compliant\n  execute(ACTION_1);\n  release(ACTION_1);\n}\n</pre>\n<h2>Exceptions</h2>\n<p>To prevent generating some false-positives, literals having less than 5 characters are excluded.</p>'}]",[],['squid:S1192'],2min,2min,per duplicate instance,
java:S1193,java,"Exception types should not be tested using ""instanceof"" in catch blocks",2023-06-14T03:41:52+0000,"<p>Multiple catch blocks of the appropriate type should be used instead of catching a general exception, and then testing on the type.</p>
<h2>Noncompliant Code Example</h2>
<pre>
try {
  /* ... */
} catch (Exception e) {
  if(e instanceof IOException) { /* ... */ }         // Noncompliant
  if(e instanceof NullPointerException{ /* ... */ }  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
try {
  /* ... */
} catch (IOException e) { /* ... */ }                // Compliant
} catch (NullPointerException e) { /* ... */ }       // Compliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/display/java/ERR51-J.+Prefer+user-defined+exceptions+over+more+general+exception+types"">CERT,
  ERR51-J.</a> - Prefer user-defined exceptions over more general exception types </li>
</ul>","<p>Multiple catch blocks of the appropriate type should be used instead of catching a general exception, and then testing on the type.</p>
<h2>Noncompliant Code Example</h2>
<pre>
try {
  /* ... */
} catch (Exception e) {
  if(e instanceof IOException) { /* ... */ }         // Noncompliant
  if(e instanceof NullPointerException{ /* ... */ }  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
try {
  /* ... */
} catch (IOException e) { /* ... */ }                // Compliant
} catch (NullPointerException e) { /* ... */ }       // Compliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/display/java/ERR51-J.+Prefer+user-defined+exceptions+over+more+general+exception+types"">CERT,
  ERR51-J.</a> - Prefer user-defined exceptions over more general exception types </li>
</ul>",MAJOR,READY,False,[],"['cert', 'clumsy', 'error-handling']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,10min,CONSTANT_ISSUE,10min,False,ALL,False,"[{'key': 'default', 'content': '<p>Multiple catch blocks of the appropriate type should be used instead of catching a general exception, and then testing on the type.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry {\n  /* ... */\n} catch (Exception e) {\n  if(e instanceof IOException) { /* ... */ }         // Noncompliant\n  if(e instanceof NullPointerException{ /* ... */ }  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry {\n  /* ... */\n} catch (IOException e) { /* ... */ }                // Compliant\n} catch (NullPointerException e) { /* ... */ }       // Compliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/display/java/ERR51-J.+Prefer+user-defined+exceptions+over+more+general+exception+types"">CERT,\n  ERR51-J.</a> - Prefer user-defined exceptions over more general exception types </li>\n</ul>'}]",[],['squid:S1193'],,,,
java:S2059,java,"""Serializable"" inner classes of ""Serializable"" classes should be static",2023-06-14T03:41:52+0000,"<p>Serializing a non-<code>static</code> inner class will result in an attempt at serializing the outer class as well. If the outer class is actually
serializable, then the serialization will succeed but possibly write out far more data than was intended.</p>
<p>Making the inner class <code>static</code> (i.e. ""nested"") avoids this problem, therefore inner classes should be <code>static</code> if possible.
However, you should be aware that there are semantic differences between an inner class and a nested one:</p>
<ul>
  <li> an inner class can only be instantiated within the context of an instance of the outer class. </li>
  <li> a nested (<code>static</code>) class can be instantiated independently of the outer class. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
public class Raspberry implements Serializable {
  // ...

  public class Drupelet implements Serializable {  // Noncompliant; output may be too large
    // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Raspberry implements Serializable {
  // ...

  public static class Drupelet implements Serializable {
    // ...
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/ZTdGBQ"">CERT, SER05-J.</a> - Do not serialize instances of inner classes </li>
</ul>","<p>Serializing a non-<code>static</code> inner class will result in an attempt at serializing the outer class as well. If the outer class is actually
serializable, then the serialization will succeed but possibly write out far more data than was intended.</p>
<p>Making the inner class <code>static</code> (i.e. ""nested"") avoids this problem, therefore inner classes should be <code>static</code> if possible.
However, you should be aware that there are semantic differences between an inner class and a nested one:</p>
<ul>
  <li> an inner class can only be instantiated within the context of an instance of the outer class. </li>
  <li> a nested (<code>static</code>) class can be instantiated independently of the outer class. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
public class Raspberry implements Serializable {
  // ...

  public class Drupelet implements Serializable {  // Noncompliant; output may be too large
    // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Raspberry implements Serializable {
  // ...

  public static class Drupelet implements Serializable {
    // ...
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/ZTdGBQ"">CERT, SER05-J.</a> - Do not serialize instances of inner classes </li>
</ul>",MINOR,READY,False,[],"['cert', 'pitfall', 'serialization']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,15min,CONSTANT_ISSUE,15min,False,MAIN,False,"[{'key': 'default', 'content': '<p>Serializing a non-<code>static</code> inner class will result in an attempt at serializing the outer class as well. If the outer class is actually\nserializable, then the serialization will succeed but possibly write out far more data than was intended.</p>\n<p>Making the inner class <code>static</code> (i.e. ""nested"") avoids this problem, therefore inner classes should be <code>static</code> if possible.\nHowever, you should be aware that there are semantic differences between an inner class and a nested one:</p>\n<ul>\n  <li> an inner class can only be instantiated within the context of an instance of the outer class. </li>\n  <li> a nested (<code>static</code>) class can be instantiated independently of the outer class. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Raspberry implements Serializable {\n  // ...\n\n  public class Drupelet implements Serializable {  // Noncompliant; output may be too large\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Raspberry implements Serializable {\n  // ...\n\n  public static class Drupelet implements Serializable {\n    // ...\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/ZTdGBQ"">CERT, SER05-J.</a> - Do not serialize instances of inner classes </li>\n</ul>'}]",[],['squid:S2059'],,,,
java:S2160,java,"Subclasses that add fields should override ""equals""",2023-06-14T03:41:52+0000,"<p>Extend a class that overrides <code>equals</code> and add fields without overriding <code>equals</code> in the subclass, and you run the risk of
non-equivalent instances of your subclass being seen as equal, because only the superclass fields will be considered in the equality test.</p>
<p>This rule looks for classes that do all of the following:</p>
<ul>
  <li> extend classes that override <code>equals</code>. </li>
  <li> do not themselves override <code>equals</code>. </li>
  <li> add fields. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
public class Fruit {
  private Season ripe;

  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (this.class != obj.class) {
      return false;
    }
    Fruit fobj = (Fruit) obj;
    if (ripe.equals(fobj.getRipe()) {
      return true;
    }
    return false;
  }
}

public class Raspberry extends Fruit {  // Noncompliant; instances will use Fruit's equals method
  private Color ripeColor;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Fruit {
  private Season ripe;

  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (this.class != obj.class) {
      return false;
    }
    Fruit fobj = (Fruit) obj;
    if (ripe.equals(fobj.getRipe()) {
      return true;
    }
    return false;
  }
}

public class Raspberry extends Fruit {
  private Color ripeColor;

  public boolean equals(Object obj) {
    if (! super.equals(obj)) {
      return false;
    }
    Raspberry fobj = (Raspberry) obj;
    if (ripeColor.equals(fobj.getRipeColor()) {  // added fields are tested
      return true;
    }
    return false;
  }
}
</pre>","<p>Extend a class that overrides <code>equals</code> and add fields without overriding <code>equals</code> in the subclass, and you run the risk of
non-equivalent instances of your subclass being seen as equal, because only the superclass fields will be considered in the equality test.</p>
<p>This rule looks for classes that do all of the following:</p>
<ul>
  <li> extend classes that override <code>equals</code>. </li>
  <li> do not themselves override <code>equals</code>. </li>
  <li> add fields. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
public class Fruit {
  private Season ripe;

  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (this.class != obj.class) {
      return false;
    }
    Fruit fobj = (Fruit) obj;
    if (ripe.equals(fobj.getRipe()) {
      return true;
    }
    return false;
  }
}

public class Raspberry extends Fruit {  // Noncompliant; instances will use Fruit's equals method
  private Color ripeColor;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Fruit {
  private Season ripe;

  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (this.class != obj.class) {
      return false;
    }
    Fruit fobj = (Fruit) obj;
    if (ripe.equals(fobj.getRipe()) {
      return true;
    }
    return false;
  }
}

public class Raspberry extends Fruit {
  private Color ripeColor;

  public boolean equals(Object obj) {
    if (! super.equals(obj)) {
      return false;
    }
    Raspberry fobj = (Raspberry) obj;
    if (ripeColor.equals(fobj.getRipeColor()) {  // added fields are tested
      return true;
    }
    return false;
  }
}
</pre>",MINOR,READY,False,[],['suspicious'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,30min,CONSTANT_ISSUE,30min,False,MAIN,False,"[{'key': 'default', 'content': ""<p>Extend a class that overrides <code>equals</code> and add fields without overriding <code>equals</code> in the subclass, and you run the risk of\nnon-equivalent instances of your subclass being seen as equal, because only the superclass fields will be considered in the equality test.</p>\n<p>This rule looks for classes that do all of the following:</p>\n<ul>\n  <li> extend classes that override <code>equals</code>. </li>\n  <li> do not themselves override <code>equals</code>. </li>\n  <li> add fields. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit {\n  private Season ripe;\n\n  public boolean equals(Object obj) {\n    if (obj == this) {\n      return true;\n    }\n    if (this.class != obj.class) {\n      return false;\n    }\n    Fruit fobj = (Fruit) obj;\n    if (ripe.equals(fobj.getRipe()) {\n      return true;\n    }\n    return false;\n  }\n}\n\npublic class Raspberry extends Fruit {  // Noncompliant; instances will use Fruit's equals method\n  private Color ripeColor;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Fruit {\n  private Season ripe;\n\n  public boolean equals(Object obj) {\n    if (obj == this) {\n      return true;\n    }\n    if (this.class != obj.class) {\n      return false;\n    }\n    Fruit fobj = (Fruit) obj;\n    if (ripe.equals(fobj.getRipe()) {\n      return true;\n    }\n    return false;\n  }\n}\n\npublic class Raspberry extends Fruit {\n  private Color ripeColor;\n\n  public boolean equals(Object obj) {\n    if (! super.equals(obj)) {\n      return false;\n    }\n    Raspberry fobj = (Raspberry) obj;\n    if (ripeColor.equals(fobj.getRipeColor()) {  // added fields are tested\n      return true;\n    }\n    return false;\n  }\n}\n</pre>""}]",[],['squid:S2160'],,,,
java:S2057,java,"""Serializable"" classes should have a ""serialVersionUID""",2023-06-14T03:41:52+0000,"<p>A <code>serialVersionUID</code> field is strongly recommended in all <code>Serializable</code> classes. If you do not provide one, one will be
calculated for you by the compiler. The danger in not explicitly choosing the value is that when the class changes, the compiler will generate an
entirely new id, and you will be suddenly unable to deserialize (read from file) objects that were serialized with the previous version of the
class.</p>
<p><code>serialVersionUID</code>'s should be declared with all of these modifiers: <code>static final long</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Raspberry extends Fruit  // Noncompliant; no serialVersionUID.
        implements Serializable {
  private String variety;

  public Raspberry(Season ripe, String variety) { ...}
  public void setVariety(String variety) {...}
  public String getVarity() {...}
}

public class Raspberry extends Fruit
        implements Serializable {
  private final int serialVersionUID = 1; // Noncompliant; not static &amp; int rather than long
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Raspberry extends Fruit
        implements Serializable {
  private static final long serialVersionUID = 1;
  private String variety;

  public Raspberry(Season ripe, String variety) { ...}
  public void setVariety(String variety) {...}
  public String getVarity() {...}
}
</pre>
<h2>Exceptions</h2>
<p>Records, Swing and AWT classes, <code>abstract</code> classes, <code>Throwable</code> and its subclasses (<code>Exception</code>s and
<code>Error</code>s), and classes marked with <code>@SuppressWarnings(""serial"")</code> are ignored.</p>
<h2>See</h2>
<ul>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/ajdGBQ"">CERT, SER00-J.</a> - Enable serialization compatibility during class evolution </li>
  <li> <a href=""https://docs.oracle.com/en/java/javase/16/docs/specs/serialization/serial-arch.html#serialization-of-records"">Record Serialization</a>
  - Serialization of Records </li>
</ul>","<p>A <code>serialVersionUID</code> field is strongly recommended in all <code>Serializable</code> classes. If you do not provide one, one will be
calculated for you by the compiler. The danger in not explicitly choosing the value is that when the class changes, the compiler will generate an
entirely new id, and you will be suddenly unable to deserialize (read from file) objects that were serialized with the previous version of the
class.</p>
<p><code>serialVersionUID</code>'s should be declared with all of these modifiers: <code>static final long</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Raspberry extends Fruit  // Noncompliant; no serialVersionUID.
        implements Serializable {
  private String variety;

  public Raspberry(Season ripe, String variety) { ...}
  public void setVariety(String variety) {...}
  public String getVarity() {...}
}

public class Raspberry extends Fruit
        implements Serializable {
  private final int serialVersionUID = 1; // Noncompliant; not static &amp; int rather than long
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Raspberry extends Fruit
        implements Serializable {
  private static final long serialVersionUID = 1;
  private String variety;

  public Raspberry(Season ripe, String variety) { ...}
  public void setVariety(String variety) {...}
  public String getVarity() {...}
}
</pre>
<h2>Exceptions</h2>
<p>Records, Swing and AWT classes, <code>abstract</code> classes, <code>Throwable</code> and its subclasses (<code>Exception</code>s and
<code>Error</code>s), and classes marked with <code>@SuppressWarnings(""serial"")</code> are ignored.</p>
<h2>See</h2>
<ul>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/ajdGBQ"">CERT, SER00-J.</a> - Enable serialization compatibility during class evolution </li>
  <li> <a href=""https://docs.oracle.com/en/java/javase/16/docs/specs/serialization/serial-arch.html#serialization-of-records"">Record Serialization</a>
  - Serialization of Records </li>
</ul>",CRITICAL,READY,False,[],"['cert', 'pitfall', 'serialization']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>A <code>serialVersionUID</code> field is strongly recommended in all <code>Serializable</code> classes. If you do not provide one, one will be\ncalculated for you by the compiler. The danger in not explicitly choosing the value is that when the class changes, the compiler will generate an\nentirely new id, and you will be suddenly unable to deserialize (read from file) objects that were serialized with the previous version of the\nclass.</p>\n<p><code>serialVersionUID</code>\'s should be declared with all of these modifiers: <code>static final long</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Raspberry extends Fruit  // Noncompliant; no serialVersionUID.\n        implements Serializable {\n  private String variety;\n\n  public Raspberry(Season ripe, String variety) { ...}\n  public void setVariety(String variety) {...}\n  public String getVarity() {...}\n}\n\npublic class Raspberry extends Fruit\n        implements Serializable {\n  private final int serialVersionUID = 1; // Noncompliant; not static &amp; int rather than long\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Raspberry extends Fruit\n        implements Serializable {\n  private static final long serialVersionUID = 1;\n  private String variety;\n\n  public Raspberry(Season ripe, String variety) { ...}\n  public void setVariety(String variety) {...}\n  public String getVarity() {...}\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Records, Swing and AWT classes, <code>abstract</code> classes, <code>Throwable</code> and its subclasses (<code>Exception</code>s and\n<code>Error</code>s), and classes marked with <code>@SuppressWarnings(""serial"")</code> are ignored.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/ajdGBQ"">CERT, SER00-J.</a> - Enable serialization compatibility during class evolution </li>\n  <li> <a href=""https://docs.oracle.com/en/java/javase/16/docs/specs/serialization/serial-arch.html#serialization-of-records"">Record Serialization</a>\n  - Serialization of Records </li>\n</ul>'}]",[],['squid:S2057'],,,,
java:S6411,java,Types used as keys in Maps should implement Comparable,2023-06-14T03:41:52+0000,"<p>Maps use hashes of the keys to select a bucket to store data in. Objects that hash to the same value will be added to the same bucket.</p>
<p>When the hashing function has a poor distribution, buckets can grow to very large sizes. This may negatively affect lookup performance, as, by
default, matching a key within a bucket has linear complexity.</p>
<p>In addition, as the default hashCode function can be selected at runtime, performance expectations cannot be maintained.</p>
<p>Implementing Comparable mitigates the performance issue for objects that hash to the same value.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class MyKeyType {
    // ...
}

class Program {
    Map&lt;MyKeyType, MyValueType&gt; data = new HashMap&lt;&gt;(); // Noncompliant

    Map&lt;MyKeyType, MyValueType&gt; buildMap() { // Noncompliant
        //...
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyKeyType implements Comparable&lt;MyKeyType&gt; {
    // ...
}

class MyChildKeyType extends MyKeyType {
    // ...
}

class Program {
    Map&lt;MyKeyType, MyValueType&gt; data = new HashMap&lt;&gt;();
    Map&lt;MyChildKeyType, MyValueType&gt; data = new HashMap&lt;&gt;();

    Map&lt;MyKeyType, MyValueType&gt; buildMap() {
        //...
    }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.kb.cert.org/vuls/id/903934"">https://www.kb.cert.org/vuls/id/903934</a> </li>
  <li> <a
  href=""https://dzone.com/articles/java-8-hashmaps-keys-and-the-comparable-interface"">https://dzone.com/articles/java-8-hashmaps-keys-and-the-comparable-interface</a> </li>
  <li> <a
  href=""https://github.com/openjdk/jdk/blob/4927ee426aedbeea0f4119bac0a342c6d3576762/src/hotspot/share/runtime/synchronizer.cpp#L760-L798"">https://github.com/openjdk/jdk/blob/4927ee426aedbeea0f4119bac0a342c6d3576762/src/hotspot/share/runtime/synchronizer.cpp#L760-L798</a> </li>
  <li> <a
  href=""https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/Comparable.html"">https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/Comparable.html</a> </li>
</ul>","<p>Maps use hashes of the keys to select a bucket to store data in. Objects that hash to the same value will be added to the same bucket.</p>
<p>When the hashing function has a poor distribution, buckets can grow to very large sizes. This may negatively affect lookup performance, as, by
default, matching a key within a bucket has linear complexity.</p>
<p>In addition, as the default hashCode function can be selected at runtime, performance expectations cannot be maintained.</p>
<p>Implementing Comparable mitigates the performance issue for objects that hash to the same value.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class MyKeyType {
    // ...
}

class Program {
    Map&lt;MyKeyType, MyValueType&gt; data = new HashMap&lt;&gt;(); // Noncompliant

    Map&lt;MyKeyType, MyValueType&gt; buildMap() { // Noncompliant
        //...
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyKeyType implements Comparable&lt;MyKeyType&gt; {
    // ...
}

class MyChildKeyType extends MyKeyType {
    // ...
}

class Program {
    Map&lt;MyKeyType, MyValueType&gt; data = new HashMap&lt;&gt;();
    Map&lt;MyChildKeyType, MyValueType&gt; data = new HashMap&lt;&gt;();

    Map&lt;MyKeyType, MyValueType&gt; buildMap() {
        //...
    }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://www.kb.cert.org/vuls/id/903934"">https://www.kb.cert.org/vuls/id/903934</a> </li>
  <li> <a
  href=""https://dzone.com/articles/java-8-hashmaps-keys-and-the-comparable-interface"">https://dzone.com/articles/java-8-hashmaps-keys-and-the-comparable-interface</a> </li>
  <li> <a
  href=""https://github.com/openjdk/jdk/blob/4927ee426aedbeea0f4119bac0a342c6d3576762/src/hotspot/share/runtime/synchronizer.cpp#L760-L798"">https://github.com/openjdk/jdk/blob/4927ee426aedbeea0f4119bac0a342c6d3576762/src/hotspot/share/runtime/synchronizer.cpp#L760-L798</a> </li>
  <li> <a
  href=""https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/Comparable.html"">https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/Comparable.html</a> </li>
</ul>",MAJOR,READY,False,[],[],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,30min,CONSTANT_ISSUE,30min,False,ALL,False,"[{'key': 'default', 'content': '<p>Maps use hashes of the keys to select a bucket to store data in. Objects that hash to the same value will be added to the same bucket.</p>\n<p>When the hashing function has a poor distribution, buckets can grow to very large sizes. This may negatively affect lookup performance, as, by\ndefault, matching a key within a bucket has linear complexity.</p>\n<p>In addition, as the default hashCode function can be selected at runtime, performance expectations cannot be maintained.</p>\n<p>Implementing Comparable mitigates the performance issue for objects that hash to the same value.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyKeyType {\n    // ...\n}\n\nclass Program {\n    Map&lt;MyKeyType, MyValueType&gt; data = new HashMap&lt;&gt;(); // Noncompliant\n\n    Map&lt;MyKeyType, MyValueType&gt; buildMap() { // Noncompliant\n        //...\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyKeyType implements Comparable&lt;MyKeyType&gt; {\n    // ...\n}\n\nclass MyChildKeyType extends MyKeyType {\n    // ...\n}\n\nclass Program {\n    Map&lt;MyKeyType, MyValueType&gt; data = new HashMap&lt;&gt;();\n    Map&lt;MyChildKeyType, MyValueType&gt; data = new HashMap&lt;&gt;();\n\n    Map&lt;MyKeyType, MyValueType&gt; buildMap() {\n        //...\n    }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://www.kb.cert.org/vuls/id/903934"">https://www.kb.cert.org/vuls/id/903934</a> </li>\n  <li> <a\n  href=""https://dzone.com/articles/java-8-hashmaps-keys-and-the-comparable-interface"">https://dzone.com/articles/java-8-hashmaps-keys-and-the-comparable-interface</a> </li>\n  <li> <a\n  href=""https://github.com/openjdk/jdk/blob/4927ee426aedbeea0f4119bac0a342c6d3576762/src/hotspot/share/runtime/synchronizer.cpp#L760-L798"">https://github.com/openjdk/jdk/blob/4927ee426aedbeea0f4119bac0a342c6d3576762/src/hotspot/share/runtime/synchronizer.cpp#L760-L798</a> </li>\n  <li> <a\n  href=""https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/Comparable.html"">https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/Comparable.html</a> </li>\n</ul>'}]",[],['squid:S6411'],,,,
java:S100,java,Method names should comply with a naming convention,2023-06-14T03:41:52+0000,"<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all method names match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With default provided regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>
<pre>
public int DoSomething(){...}
</pre>
<h2>Compliant Solution</h2>
<pre>
public int doSomething(){...}
</pre>
<h2>Exceptions</h2>
<p>Overriding methods are excluded.</p>
<pre>
@Override
public int Do_Something(){...}
</pre>","<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all method names match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With default provided regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>
<pre>
public int DoSomething(){...}
</pre>
<h2>Compliant Solution</h2>
<pre>
public int doSomething(){...}
</pre>
<h2>Exceptions</h2>
<p>Overriding methods are excluded.</p>
<pre>
@Override
public int Do_Something(){...}
</pre>",MINOR,READY,False,[],['convention'],java,Java,"[{'key': 'format', 'htmlDesc': 'Regular expression used to check the method names against.', 'defaultValue': '^[a-z][a-zA-Z0-9]*$', 'type': 'STRING'}]",CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all method names match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With default provided regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>\n<pre>\npublic int DoSomething(){...}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int doSomething(){...}\n</pre>\n<h2>Exceptions</h2>\n<p>Overriding methods are excluded.</p>\n<pre>\n@Override\npublic int Do_Something(){...}\n</pre>'}]",[],['squid:S00100'],,,,
java:S101,java,Class names should comply with a naming convention,2023-06-14T03:41:52+0000,"<p>Shared coding conventions allow teams to collaborate effectively. This rule allows to check that all class names match a provided regular
expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With default provided regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>
<pre>
class my_class {...}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass {...}
</pre>","<p>Shared coding conventions allow teams to collaborate effectively. This rule allows to check that all class names match a provided regular
expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With default provided regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>
<pre>
class my_class {...}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass {...}
</pre>",MINOR,READY,False,[],['convention'],java,Java,"[{'key': 'format', 'htmlDesc': 'Regular expression used to check the class names against.', 'defaultValue': '^[A-Z][a-zA-Z0-9]*$', 'type': 'STRING'}]",CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>Shared coding conventions allow teams to collaborate effectively. This rule allows to check that all class names match a provided regular\nexpression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With default provided regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>\n<pre>\nclass my_class {...}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {...}\n</pre>'}]",[],['squid:S00101'],,,,
java:S2176,java,Class names should not shadow interfaces or superclasses,2023-06-14T03:41:52+0000,"<p>While it’s perfectly legal to give a class the same simple name as a class in another package that it extends or interface it implements, it’s
confusing and could cause problems in the future.</p>
<h2>Noncompliant Code Example</h2>
<pre>
package my.mypackage;

public class Foo implements a.b.Foo { // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
package my.mypackage;

public class FooJr implements a.b.Foo {
</pre>","<p>While it’s perfectly legal to give a class the same simple name as a class in another package that it extends or interface it implements, it’s
confusing and could cause problems in the future.</p>
<h2>Noncompliant Code Example</h2>
<pre>
package my.mypackage;

public class Foo implements a.b.Foo { // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
package my.mypackage;

public class FooJr implements a.b.Foo {
</pre>",CRITICAL,READY,False,[],['pitfall'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>While it’s perfectly legal to give a class the same simple name as a class in another package that it extends or interface it implements, it’s\nconfusing and could cause problems in the future.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npackage my.mypackage;\n\npublic class Foo implements a.b.Foo { // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npackage my.mypackage;\n\npublic class FooJr implements a.b.Foo {\n</pre>'}]",[],['squid:S2176'],,,,
java:S2178,java,Short-circuit logic should be used in boolean contexts,2023-06-14T03:41:52+0000,"<p>The use of non-short-circuit logic in a boolean context is likely a mistake - one that could cause serious program errors as conditions are
evaluated under the wrong circumstances.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if(getTrue() | getFalse()) { ... } // Noncompliant; both sides evaluated
</pre>
<h2>Compliant Solution</h2>
<pre>
if(getTrue() || getFalse()) { ... } // true short-circuit logic
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/WNYxBQ"">CERT, EXP46-C.</a> - Do not use a bitwise operator with a Boolean-like operand </li>
</ul>","<p>The use of non-short-circuit logic in a boolean context is likely a mistake - one that could cause serious program errors as conditions are
evaluated under the wrong circumstances.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if(getTrue() | getFalse()) { ... } // Noncompliant; both sides evaluated
</pre>
<h2>Compliant Solution</h2>
<pre>
if(getTrue() || getFalse()) { ... } // true short-circuit logic
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/WNYxBQ"">CERT, EXP46-C.</a> - Do not use a bitwise operator with a Boolean-like operand </li>
</ul>",BLOCKER,READY,False,[],['cert'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,MAIN,False,"[{'key': 'default', 'content': '<p>The use of non-short-circuit logic in a boolean context is likely a mistake - one that could cause serious program errors as conditions are\nevaluated under the wrong circumstances.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(getTrue() | getFalse()) { ... } // Noncompliant; both sides evaluated\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif(getTrue() || getFalse()) { ... } // true short-circuit logic\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/WNYxBQ"">CERT, EXP46-C.</a> - Do not use a bitwise operator with a Boolean-like operand </li>\n</ul>'}]",[],['squid:S2178'],,,,
java:S2293,java,"The diamond operator (""<>"") should be used",2023-06-14T03:41:52+0000,"<p>Java 7 introduced the diamond operator (<code>&lt;&gt;</code>) to reduce the verbosity of generics code. For instance, instead of having to declare
a <code>List</code>'s type in both its declaration and its constructor, you can now simplify the constructor declaration with <code>&lt;&gt;</code>,
and the compiler will infer the type.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project’s <code>sonar.java.source</code> is lower than <code>7</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
List&lt;String&gt; strings = new ArrayList&lt;String&gt;();  // Noncompliant
Map&lt;String,List&lt;Integer&gt;&gt; map = new HashMap&lt;String,List&lt;Integer&gt;&gt;();  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
List&lt;String&gt; strings = new ArrayList&lt;&gt;();
Map&lt;String,List&lt;Integer&gt;&gt; map = new HashMap&lt;&gt;();
</pre>","<p>Java 7 introduced the diamond operator (<code>&lt;&gt;</code>) to reduce the verbosity of generics code. For instance, instead of having to declare
a <code>List</code>'s type in both its declaration and its constructor, you can now simplify the constructor declaration with <code>&lt;&gt;</code>,
and the compiler will infer the type.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project’s <code>sonar.java.source</code> is lower than <code>7</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
List&lt;String&gt; strings = new ArrayList&lt;String&gt;();  // Noncompliant
Map&lt;String,List&lt;Integer&gt;&gt; map = new HashMap&lt;String,List&lt;Integer&gt;&gt;();  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
List&lt;String&gt; strings = new ArrayList&lt;&gt;();
Map&lt;String,List&lt;Integer&gt;&gt; map = new HashMap&lt;&gt;();
</pre>",MINOR,READY,False,[],['clumsy'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,1min,CONSTANT_ISSUE,1min,False,ALL,False,"[{'key': 'default', 'content': ""<p>Java 7 introduced the diamond operator (<code>&lt;&gt;</code>) to reduce the verbosity of generics code. For instance, instead of having to declare\na <code>List</code>'s type in both its declaration and its constructor, you can now simplify the constructor declaration with <code>&lt;&gt;</code>,\nand the compiler will infer the type.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project’s <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;String&gt; strings = new ArrayList&lt;String&gt;();  // Noncompliant\nMap&lt;String,List&lt;Integer&gt;&gt; map = new HashMap&lt;String,List&lt;Integer&gt;&gt;();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nList&lt;String&gt; strings = new ArrayList&lt;&gt;();\nMap&lt;String,List&lt;Integer&gt;&gt; map = new HashMap&lt;&gt;();\n</pre>""}]",[],['squid:S2293'],,,,
java:S4288,java,Spring components should use constructor injection,2023-06-14T03:41:52+0000,"<p>Spring <code>@Controller</code>, <code>@Service</code>, and <code>@Repository</code> classes are singletons by default, meaning only one instance
of the class is ever instantiated in the application. Typically such a class might have a few <code>static</code> members, such as a logger, but all
non-static members should be managed by Spring and supplied via constructor injection rather than by field injection.</p>
<p>This rule raise an issue when any non-<code>static</code> member of a Spring component has an injection annotation.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@Controller
public class HelloWorld {

  @Autowired
  private String name = null; // Noncompliant

}
</pre>
<h2>Compliant Solution</h2>
<p>As of Spring 4.3</p>
<pre>
@Controller
public class HelloWorld {

  private String name = null;

  HelloWorld(String name) {
    this.name = name;
  }
}
</pre>
<p>Before Spring 4.3</p>
<pre>
@Controller
public class HelloWorld {

  private String name = null;

  @Autowired
  HelloWorld(String name) {
    this.name = name;
  }
}
</pre>","<p>Spring <code>@Controller</code>, <code>@Service</code>, and <code>@Repository</code> classes are singletons by default, meaning only one instance
of the class is ever instantiated in the application. Typically such a class might have a few <code>static</code> members, such as a logger, but all
non-static members should be managed by Spring and supplied via constructor injection rather than by field injection.</p>
<p>This rule raise an issue when any non-<code>static</code> member of a Spring component has an injection annotation.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@Controller
public class HelloWorld {

  @Autowired
  private String name = null; // Noncompliant

}
</pre>
<h2>Compliant Solution</h2>
<p>As of Spring 4.3</p>
<pre>
@Controller
public class HelloWorld {

  private String name = null;

  HelloWorld(String name) {
    this.name = name;
  }
}
</pre>
<p>Before Spring 4.3</p>
<pre>
@Controller
public class HelloWorld {

  private String name = null;

  @Autowired
  HelloWorld(String name) {
    this.name = name;
  }
}
</pre>",MAJOR,READY,False,[],"['design', 'spring']",java,Java,[],LINEAR,LINEAR,CODE_SMELL,LINEAR,,LINEAR,,False,MAIN,False,"[{'key': 'default', 'content': '<p>Spring <code>@Controller</code>, <code>@Service</code>, and <code>@Repository</code> classes are singletons by default, meaning only one instance\nof the class is ever instantiated in the application. Typically such a class might have a few <code>static</code> members, such as a logger, but all\nnon-static members should be managed by Spring and supplied via constructor injection rather than by field injection.</p>\n<p>This rule raise an issue when any non-<code>static</code> member of a Spring component has an injection annotation.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Controller\npublic class HelloWorld {\n\n  @Autowired\n  private String name = null; // Noncompliant\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<p>As of Spring 4.3</p>\n<pre>\n@Controller\npublic class HelloWorld {\n\n  private String name = null;\n\n  HelloWorld(String name) {\n    this.name = name;\n  }\n}\n</pre>\n<p>Before Spring 4.3</p>\n<pre>\n@Controller\npublic class HelloWorld {\n\n  private String name = null;\n\n  @Autowired\n  HelloWorld(String name) {\n    this.name = name;\n  }\n}\n</pre>'}]",[],['squid:S4288'],2min,2min,2min by injected field,
java:S5329,java,Collection constructors should not be used as java.util.function.Function,2023-06-14T03:41:52+0000,"<p>It is very common to pass a collection constructor reference as an argument, for example <code>Collectors.toCollection(ArrayList::new)</code> takes
the <code>ArrayList::new</code> constructor. When the method expects a <code>java.util.function.Supplier</code> it is perfectly fine. However when the
method argument type is <code>java.util.function.Function</code> it means that an argument will be passed to the constructor.</p>
<p>The first argument of Collections constructors is usually an integer representing its ""initial capacity"". This is generally not what the developer
expects, but the memory allocation is not visible at first glance.</p>
<p>This rule raises an issue when a collection constructor is passed by reference as a <code>java.util.function.Function</code> argument.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Arrays.asList(1, 2, 54000).stream().collect(Collectors.toMap(Function.identity(), ArrayList::new)); // Noncompliant, ""ArrayList::new"" unintentionally refers to ""ArrayList(int initialCapacity)"" instead of ""ArrayList()""
</pre>
<h2>Compliant Solution</h2>
<pre>
Arrays.asList(1, 2, 54000).stream().collect(Collectors.toMap(Function.identity(), id -&gt; new ArrayList&lt;&gt;())); // Compliant, explicitly show the usage of ""id -&gt; new ArrayList&lt;&gt;()"" or ""id -&gt; new ArrayList&lt;&gt;(id)""
</pre>","<p>It is very common to pass a collection constructor reference as an argument, for example <code>Collectors.toCollection(ArrayList::new)</code> takes
the <code>ArrayList::new</code> constructor. When the method expects a <code>java.util.function.Supplier</code> it is perfectly fine. However when the
method argument type is <code>java.util.function.Function</code> it means that an argument will be passed to the constructor.</p>
<p>The first argument of Collections constructors is usually an integer representing its ""initial capacity"". This is generally not what the developer
expects, but the memory allocation is not visible at first glance.</p>
<p>This rule raises an issue when a collection constructor is passed by reference as a <code>java.util.function.Function</code> argument.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Arrays.asList(1, 2, 54000).stream().collect(Collectors.toMap(Function.identity(), ArrayList::new)); // Noncompliant, ""ArrayList::new"" unintentionally refers to ""ArrayList(int initialCapacity)"" instead of ""ArrayList()""
</pre>
<h2>Compliant Solution</h2>
<pre>
Arrays.asList(1, 2, 54000).stream().collect(Collectors.toMap(Function.identity(), id -&gt; new ArrayList&lt;&gt;())); // Compliant, explicitly show the usage of ""id -&gt; new ArrayList&lt;&gt;()"" or ""id -&gt; new ArrayList&lt;&gt;(id)""
</pre>",MAJOR,READY,False,[],[],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>It is very common to pass a collection constructor reference as an argument, for example <code>Collectors.toCollection(ArrayList::new)</code> takes\nthe <code>ArrayList::new</code> constructor. When the method expects a <code>java.util.function.Supplier</code> it is perfectly fine. However when the\nmethod argument type is <code>java.util.function.Function</code> it means that an argument will be passed to the constructor.</p>\n<p>The first argument of Collections constructors is usually an integer representing its ""initial capacity"". This is generally not what the developer\nexpects, but the memory allocation is not visible at first glance.</p>\n<p>This rule raises an issue when a collection constructor is passed by reference as a <code>java.util.function.Function</code> argument.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nArrays.asList(1, 2, 54000).stream().collect(Collectors.toMap(Function.identity(), ArrayList::new)); // Noncompliant, ""ArrayList::new"" unintentionally refers to ""ArrayList(int initialCapacity)"" instead of ""ArrayList()""\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nArrays.asList(1, 2, 54000).stream().collect(Collectors.toMap(Function.identity(), id -&gt; new ArrayList&lt;&gt;())); // Compliant, explicitly show the usage of ""id -&gt; new ArrayList&lt;&gt;()"" or ""id -&gt; new ArrayList&lt;&gt;(id)""\n</pre>'}]",[],['squid:S5329'],,,,
java:S4042,java,"""java.nio.Files#delete"" should be preferred",2023-06-14T03:41:52+0000,"<p>When <code>java.io.File#delete</code> fails, this <code>boolean</code> method simply returns <code>false</code> with no indication of the cause. On
the other hand, when <code>java.nio.file.Files#delete</code> fails, this <code>void</code> method returns one of a series of exception types to better
indicate the cause of the failure. And since more information is generally better in a debugging situation, <code>java.nio.file.Files#delete</code> is
the preferred option.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void cleanUp(Path path) {
  File file = new File(path);
  if (!file.delete()) {  // Noncompliant
    //...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void cleanUp(Path path) throws NoSuchFileException, DirectoryNotEmptyException, IOException {
  Files.delete(path);
}
</pre>","<p>When <code>java.io.File#delete</code> fails, this <code>boolean</code> method simply returns <code>false</code> with no indication of the cause. On
the other hand, when <code>java.nio.file.Files#delete</code> fails, this <code>void</code> method returns one of a series of exception types to better
indicate the cause of the failure. And since more information is generally better in a debugging situation, <code>java.nio.file.Files#delete</code> is
the preferred option.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void cleanUp(Path path) {
  File file = new File(path);
  if (!file.delete()) {  // Noncompliant
    //...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void cleanUp(Path path) throws NoSuchFileException, DirectoryNotEmptyException, IOException {
  Files.delete(path);
}
</pre>",MAJOR,READY,False,[],"['api-design', 'error-handling']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,10min,CONSTANT_ISSUE,10min,False,ALL,False,"[{'key': 'default', 'content': '<p>When <code>java.io.File#delete</code> fails, this <code>boolean</code> method simply returns <code>false</code> with no indication of the cause. On\nthe other hand, when <code>java.nio.file.Files#delete</code> fails, this <code>void</code> method returns one of a series of exception types to better\nindicate the cause of the failure. And since more information is generally better in a debugging situation, <code>java.nio.file.Files#delete</code> is\nthe preferred option.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void cleanUp(Path path) {\n  File file = new File(path);\n  if (!file.delete()) {  // Noncompliant\n    //...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void cleanUp(Path path) throws NoSuchFileException, DirectoryNotEmptyException, IOException {\n  Files.delete(path);\n}\n</pre>'}]",[],['squid:S4042'],,,,
java:S4144,java,Methods should not have identical implementations,2023-06-14T03:41:52+0000,"<p>When two methods have the same implementation, either it was a mistake - something else was intended - or the duplication was intentional, but may
be confusing to maintainers. In the latter case, one implementation should invoke the other. Numerical and string literals are not taken into
account.</p>
<h2>Noncompliant Code Example</h2>
<pre>
private final static String CODE = ""bounteous"";

public String calculateCode() {
  doTheThing();
  return CODE;
}

public String getName() {  // Noncompliant
  doTheThing();
  return CODE;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
private final static String CODE = ""bounteous"";

public String getCode() {
  doTheThing();
  return CODE;
}

public String getName() {
  return getCode();
}
</pre>
<h2>Exceptions</h2>
<p>Methods that are not accessors (getters and setters), with fewer than 2 statements are ignored.</p>","<p>When two methods have the same implementation, either it was a mistake - something else was intended - or the duplication was intentional, but may
be confusing to maintainers. In the latter case, one implementation should invoke the other. Numerical and string literals are not taken into
account.</p>
<h2>Noncompliant Code Example</h2>
<pre>
private final static String CODE = ""bounteous"";

public String calculateCode() {
  doTheThing();
  return CODE;
}

public String getName() {  // Noncompliant
  doTheThing();
  return CODE;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
private final static String CODE = ""bounteous"";

public String getCode() {
  doTheThing();
  return CODE;
}

public String getName() {
  return getCode();
}
</pre>
<h2>Exceptions</h2>
<p>Methods that are not accessors (getters and setters), with fewer than 2 statements are ignored.</p>",MAJOR,READY,False,[],"['confusing', 'duplicate', 'suspicious']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,15min,CONSTANT_ISSUE,15min,False,ALL,False,"[{'key': 'default', 'content': '<p>When two methods have the same implementation, either it was a mistake - something else was intended - or the duplication was intentional, but may\nbe confusing to maintainers. In the latter case, one implementation should invoke the other. Numerical and string literals are not taken into\naccount.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate final static String CODE = ""bounteous"";\n\npublic String calculateCode() {\n  doTheThing();\n  return CODE;\n}\n\npublic String getName() {  // Noncompliant\n  doTheThing();\n  return CODE;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate final static String CODE = ""bounteous"";\n\npublic String getCode() {\n  doTheThing();\n  return CODE;\n}\n\npublic String getName() {\n  return getCode();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Methods that are not accessors (getters and setters), with fewer than 2 statements are ignored.</p>'}]",[],['squid:S4144'],,,,
java:S4165,java,Assignments should not be redundant,2023-06-14T03:41:52+0000,"<p>The transitive property says that if <code>a == b</code> and <code>b == c</code>, then <code>a == c</code>. In such cases, there’s no point in
assigning <code>a</code> to <code>c</code> or vice versa because they’re already equivalent.</p>
<p>This rule raises an issue when an assignment is useless because the assigned-to variable already holds the value on all execution paths.</p>
<h2>Noncompliant Code Example</h2>
<pre>
a = b;
c = a;
b = c; // Noncompliant: c and b are already the same
</pre>
<h2>Compliant Solution</h2>
<pre>
a = b;
c = a;
</pre>","<p>The transitive property says that if <code>a == b</code> and <code>b == c</code>, then <code>a == c</code>. In such cases, there’s no point in
assigning <code>a</code> to <code>c</code> or vice versa because they’re already equivalent.</p>
<p>This rule raises an issue when an assignment is useless because the assigned-to variable already holds the value on all execution paths.</p>
<h2>Noncompliant Code Example</h2>
<pre>
a = b;
c = a;
b = c; // Noncompliant: c and b are already the same
</pre>
<h2>Compliant Solution</h2>
<pre>
a = b;
c = a;
</pre>",MAJOR,READY,False,[],['redundant'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>The transitive property says that if <code>a == b</code> and <code>b == c</code>, then <code>a == c</code>. In such cases, there’s no point in\nassigning <code>a</code> to <code>c</code> or vice versa because they’re already equivalent.</p>\n<p>This rule raises an issue when an assignment is useless because the assigned-to variable already holds the value on all execution paths.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\na = b;\nc = a;\nb = c; // Noncompliant: c and b are already the same\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\na = b;\nc = a;\n</pre>'}]",[],['squid:S4165'],,,,
java:S4174,java,Local constants should follow naming conventions for constants,2023-06-14T03:41:52+0000,"<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all local, <code>final</code>, initialized, primitive
variables, have names that match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$</code>:</p>
<pre>
public void doSomething() {
  final int local = 42;
  ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void doSomething() {
  final int LOCAL = 42;
  ...
}
</pre>","<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all local, <code>final</code>, initialized, primitive
variables, have names that match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$</code>:</p>
<pre>
public void doSomething() {
  final int local = 42;
  ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void doSomething() {
  final int LOCAL = 42;
  ...
}
</pre>",MINOR,READY,False,[],['convention'],java,Java,"[{'key': 'format', 'htmlDesc': 'Regular expression used to check the constant names against.', 'defaultValue': '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$', 'type': 'STRING'}]",CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all local, <code>final</code>, initialized, primitive\nvariables, have names that match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$</code>:</p>\n<pre>\npublic void doSomething() {\n  final int local = 42;\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething() {\n  final int LOCAL = 42;\n  ...\n}\n</pre>'}]",[],['squid:S4174'],,,,
java:S4266,java,"""Stream.collect()"" calls should not be redundant",2023-06-14T03:41:52+0000,"<p>When using the <code>Stream</code> API, call chains should be simplified as much as possible to improve readability and maintainability.</p>
<p>This rule raises an issue when one of the following substitution can be made:</p>
<table>
  <colgroup>
    <col style=""width: 50%;"">
    <col style=""width: 50%;"">
  </colgroup>
  <thead>
    <tr>
      <th>Original</th>
      <th>Preferred</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><p><code>stream.collect(counting())</code></p></td>
      <td><p><code>stream.count()</code></p></td>
    </tr>
    <tr>
      <td><p><code>stream.collect(maxBy(comparator))</code></p></td>
      <td><p><code>stream.max(comparator)</code></p></td>
    </tr>
    <tr>
      <td><p><code>stream.collect(minBy(comparator))</code></p></td>
      <td><p><code>stream.min(comparator)</code></p></td>
    </tr>
    <tr>
      <td><p><code>stream.collect(mapping(mapper))</code></p></td>
      <td><p><code>stream.map(mapper).collect()</code></p></td>
    </tr>
    <tr>
      <td><p><code>stream.collect(reducing(...))</code></p></td>
      <td><p><code>stream.reduce(...)</code></p></td>
    </tr>
    <tr>
      <td><p><code>stream.collect(summingInt(mapper))</code></p></td>
      <td><p><code>stream.mapToInt(mapper).sum()</code></p></td>
    </tr>
    <tr>
      <td><p><code>stream.collect(summingLong(mapper))</code></p></td>
      <td><p><code>stream.mapToLong(mapper).sum()</code></p></td>
    </tr>
    <tr>
      <td><p><code>stream.collect(summingDouble(mapper))</code></p></td>
      <td><p><code>stream.mapToDouble(mapper).sum()</code></p></td>
    </tr>
  </tbody>
</table>
<h2>Noncompliant Code Example</h2>
<pre>
int count = stream.collect(counting());  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
int count = stream.count();
</pre>","<p>When using the <code>Stream</code> API, call chains should be simplified as much as possible to improve readability and maintainability.</p>
<p>This rule raises an issue when one of the following substitution can be made:</p>
<table>
  <colgroup>
    <col style=""width: 50%;"">
    <col style=""width: 50%;"">
  </colgroup>
  <thead>
    <tr>
      <th>Original</th>
      <th>Preferred</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><p><code>stream.collect(counting())</code></p></td>
      <td><p><code>stream.count()</code></p></td>
    </tr>
    <tr>
      <td><p><code>stream.collect(maxBy(comparator))</code></p></td>
      <td><p><code>stream.max(comparator)</code></p></td>
    </tr>
    <tr>
      <td><p><code>stream.collect(minBy(comparator))</code></p></td>
      <td><p><code>stream.min(comparator)</code></p></td>
    </tr>
    <tr>
      <td><p><code>stream.collect(mapping(mapper))</code></p></td>
      <td><p><code>stream.map(mapper).collect()</code></p></td>
    </tr>
    <tr>
      <td><p><code>stream.collect(reducing(...))</code></p></td>
      <td><p><code>stream.reduce(...)</code></p></td>
    </tr>
    <tr>
      <td><p><code>stream.collect(summingInt(mapper))</code></p></td>
      <td><p><code>stream.mapToInt(mapper).sum()</code></p></td>
    </tr>
    <tr>
      <td><p><code>stream.collect(summingLong(mapper))</code></p></td>
      <td><p><code>stream.mapToLong(mapper).sum()</code></p></td>
    </tr>
    <tr>
      <td><p><code>stream.collect(summingDouble(mapper))</code></p></td>
      <td><p><code>stream.mapToDouble(mapper).sum()</code></p></td>
    </tr>
  </tbody>
</table>
<h2>Noncompliant Code Example</h2>
<pre>
int count = stream.collect(counting());  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
int count = stream.count();
</pre>",MINOR,READY,False,[],['clumsy'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,2min,CONSTANT_ISSUE,2min,False,ALL,False,"[{'key': 'default', 'content': '<p>When using the <code>Stream</code> API, call chains should be simplified as much as possible to improve readability and maintainability.</p>\n<p>This rule raises an issue when one of the following substitution can be made:</p>\n<table>\n  <colgroup>\n    <col style=""width: 50%;"">\n    <col style=""width: 50%;"">\n  </colgroup>\n  <thead>\n    <tr>\n      <th>Original</th>\n      <th>Preferred</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><p><code>stream.collect(counting())</code></p></td>\n      <td><p><code>stream.count()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>stream.collect(maxBy(comparator))</code></p></td>\n      <td><p><code>stream.max(comparator)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>stream.collect(minBy(comparator))</code></p></td>\n      <td><p><code>stream.min(comparator)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>stream.collect(mapping(mapper))</code></p></td>\n      <td><p><code>stream.map(mapper).collect()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>stream.collect(reducing(...))</code></p></td>\n      <td><p><code>stream.reduce(...)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>stream.collect(summingInt(mapper))</code></p></td>\n      <td><p><code>stream.mapToInt(mapper).sum()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>stream.collect(summingLong(mapper))</code></p></td>\n      <td><p><code>stream.mapToLong(mapper).sum()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>stream.collect(summingDouble(mapper))</code></p></td>\n      <td><p><code>stream.mapToDouble(mapper).sum()</code></p></td>\n    </tr>\n  </tbody>\n</table>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint count = stream.collect(counting());  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint count = stream.count();\n</pre>'}]",[],['squid:S4266'],,,,
java:S5261,java,"""else"" statements should be clearly matched with an ""if""",2023-06-14T03:41:52+0000,"<p>The dangling <code>else</code> problem appears when nested <code>if</code>/<code>else</code>&nbsp;statements are written without curly braces. In
this case, <code>else</code> is associated with the nearest&nbsp;<code>if</code> but that is not always obvious and sometimes the indentation can also
be misleading.</p>
<p>This rules reports <code>else</code> statements that are difficult to understand, because they are inside nested <code>if</code> statements without
curly braces.</p>
<p>Adding curly braces can generally make the code clearer (see rule <a href='/coding_rules#rule_key=java%3AS121'>S121</a> ), and in this situation of dangling <code>else</code>, it
really clarifies the intention of the code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
 if (a)
   if (b)
     d++;
 else     // Noncompliant, is the ""else"" associated with ""if(a)"" or ""if (b)""? (the answer is ""if(b)"")
   e++;
</pre>
<h2>Compliant Solution</h2>
<pre>
 if (a) {
   if (b) {
     d++;
   }
 } else { // Compliant, there is no doubt the ""else"" is associated with ""if(a)""
   e++;
 }
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://en.wikipedia.org/wiki/Dangling_else"">https://en.wikipedia.org/wiki/Dangling_else</a> </li>
</ul>","<p>The dangling <code>else</code> problem appears when nested <code>if</code>/<code>else</code>&nbsp;statements are written without curly braces. In
this case, <code>else</code> is associated with the nearest&nbsp;<code>if</code> but that is not always obvious and sometimes the indentation can also
be misleading.</p>
<p>This rules reports <code>else</code> statements that are difficult to understand, because they are inside nested <code>if</code> statements without
curly braces.</p>
<p>Adding curly braces can generally make the code clearer (see rule <a href='/coding_rules#rule_key=java%3AS121'>S121</a> ), and in this situation of dangling <code>else</code>, it
really clarifies the intention of the code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
 if (a)
   if (b)
     d++;
 else     // Noncompliant, is the ""else"" associated with ""if(a)"" or ""if (b)""? (the answer is ""if(b)"")
   e++;
</pre>
<h2>Compliant Solution</h2>
<pre>
 if (a) {
   if (b) {
     d++;
   }
 } else { // Compliant, there is no doubt the ""else"" is associated with ""if(a)""
   e++;
 }
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://en.wikipedia.org/wiki/Dangling_else"">https://en.wikipedia.org/wiki/Dangling_else</a> </li>
</ul>",MAJOR,READY,False,[],['confusing'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,1min,CONSTANT_ISSUE,1min,False,MAIN,False,"[{'key': 'default', 'content': '<p>The dangling <code>else</code> problem appears when nested <code>if</code>/<code>else</code>&nbsp;statements are written without curly braces. In\nthis case, <code>else</code> is associated with the nearest&nbsp;<code>if</code> but that is not always obvious and sometimes the indentation can also\nbe misleading.</p>\n<p>This rules reports <code>else</code> statements that are difficult to understand, because they are inside nested <code>if</code> statements without\ncurly braces.</p>\n<p>Adding curly braces can generally make the code clearer (see rule <a href=\'/coding_rules#rule_key=java%3AS121\'>S121</a> ), and in this situation of dangling <code>else</code>, it\nreally clarifies the intention of the code.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n if (a)\n   if (b)\n     d++;\n else     // Noncompliant, is the ""else"" associated with ""if(a)"" or ""if (b)""? (the answer is ""if(b)"")\n   e++;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n if (a) {\n   if (b) {\n     d++;\n   }\n } else { // Compliant, there is no doubt the ""else"" is associated with ""if(a)""\n   e++;\n }\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://en.wikipedia.org/wiki/Dangling_else"">https://en.wikipedia.org/wiki/Dangling_else</a> </li>\n</ul>'}]",[],['squid:S5261'],,,,
java:S6202,java,"Operator ""instanceof"" should be used instead of ""A.class.isInstance()""",2023-06-14T03:41:52+0000,"<p>The <code>instanceof</code> construction is a preferred way to check whether a variable can be cast to some type statically because a compile-time
error will occur in case of incompatible types. The method <a
href=""https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#isInstance-java.lang.Object-"">isInstance()</a> from <code>java.lang.Class</code>
works differently and does type check at runtime only, incompatible types will therefore not be detected early in the development, potentially
resulting in dead code. The <code>isInstance()</code> method should only be used in dynamic cases when the <code>instanceof</code> operator can’t be
used.</p>
<p>This rule raises an issue when <code>isInstance()</code> is used and could be replaced with an <code>instanceof</code> check.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int f(Object o) {
&nbsp; if (String.class.isInstance(o)) {&nbsp; // Noncompliant
&nbsp; &nbsp; return 42;
&nbsp; }
&nbsp; return 0;
}

int f(Number n) {
&nbsp; if (String.class.isInstance(n)) {&nbsp; // Noncompliant
&nbsp; &nbsp; return 42;
&nbsp; }
&nbsp; return 0;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
int f(Object o) {
&nbsp; if (o instanceof String) {&nbsp; // Compliant
&nbsp; &nbsp; return 42;
&nbsp; }
&nbsp; return 0;
}

int f(Number n) {
&nbsp; if (n instanceof String) {&nbsp; // Compile-time error
&nbsp; &nbsp; return 42;
&nbsp; }
&nbsp; return 0;
}

boolean fun(Object o, String c) throws ClassNotFoundException
{
  return Class.forName(c).isInstance(o); // Compliant, can't use instanceof operator here
}
</pre>","<p>The <code>instanceof</code> construction is a preferred way to check whether a variable can be cast to some type statically because a compile-time
error will occur in case of incompatible types. The method <a
href=""https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#isInstance-java.lang.Object-"">isInstance()</a> from <code>java.lang.Class</code>
works differently and does type check at runtime only, incompatible types will therefore not be detected early in the development, potentially
resulting in dead code. The <code>isInstance()</code> method should only be used in dynamic cases when the <code>instanceof</code> operator can’t be
used.</p>
<p>This rule raises an issue when <code>isInstance()</code> is used and could be replaced with an <code>instanceof</code> check.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int f(Object o) {
&nbsp; if (String.class.isInstance(o)) {&nbsp; // Noncompliant
&nbsp; &nbsp; return 42;
&nbsp; }
&nbsp; return 0;
}

int f(Number n) {
&nbsp; if (String.class.isInstance(n)) {&nbsp; // Noncompliant
&nbsp; &nbsp; return 42;
&nbsp; }
&nbsp; return 0;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
int f(Object o) {
&nbsp; if (o instanceof String) {&nbsp; // Compliant
&nbsp; &nbsp; return 42;
&nbsp; }
&nbsp; return 0;
}

int f(Number n) {
&nbsp; if (n instanceof String) {&nbsp; // Compile-time error
&nbsp; &nbsp; return 42;
&nbsp; }
&nbsp; return 0;
}

boolean fun(Object o, String c) throws ClassNotFoundException
{
  return Class.forName(c).isInstance(o); // Compliant, can't use instanceof operator here
}
</pre>",MAJOR,READY,False,[],[],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,MAIN,False,"[{'key': 'default', 'content': '<p>The <code>instanceof</code> construction is a preferred way to check whether a variable can be cast to some type statically because a compile-time\nerror will occur in case of incompatible types. The method <a\nhref=""https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#isInstance-java.lang.Object-"">isInstance()</a> from <code>java.lang.Class</code>\nworks differently and does type check at runtime only, incompatible types will therefore not be detected early in the development, potentially\nresulting in dead code. The <code>isInstance()</code> method should only be used in dynamic cases when the <code>instanceof</code> operator can’t be\nused.</p>\n<p>This rule raises an issue when <code>isInstance()</code> is used and could be replaced with an <code>instanceof</code> check.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint f(Object o) {\n&nbsp; if (String.class.isInstance(o)) {&nbsp; // Noncompliant\n&nbsp; &nbsp; return 42;\n&nbsp; }\n&nbsp; return 0;\n}\n\nint f(Number n) {\n&nbsp; if (String.class.isInstance(n)) {&nbsp; // Noncompliant\n&nbsp; &nbsp; return 42;\n&nbsp; }\n&nbsp; return 0;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint f(Object o) {\n&nbsp; if (o instanceof String) {&nbsp; // Compliant\n&nbsp; &nbsp; return 42;\n&nbsp; }\n&nbsp; return 0;\n}\n\nint f(Number n) {\n&nbsp; if (n instanceof String) {&nbsp; // Compile-time error\n&nbsp; &nbsp; return 42;\n&nbsp; }\n&nbsp; return 0;\n}\n\nboolean fun(Object o, String c) throws ClassNotFoundException\n{\n  return Class.forName(c).isInstance(o); // Compliant, can\'t use instanceof operator here\n}\n</pre>'}]",[],['squid:S6202'],,,,
java:S6205,java,Switch arrow labels should not use redundant keywords,2023-06-14T03:41:52+0000,"<p>In Switch Expressions, an arrow label consisting of a block with a single <code>yield</code> can be simplified to directly return the value,
resulting in cleaner code.</p>
<p>Similarly, for Switch Statements and arrow labels, a <code>break</code> in a block is always redundant and should not be used. Furthermore, if the
resulting block contains only one statement, the curly braces of that block can also be omitted.</p>
<p>This rule reports an issue when a case of a Switch Expression contains a block with a single <code>yield</code> or when a Switch Statement contains
a block with a <code>break</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int i = switch (mode) {
  case ""a"" -&gt; {        // Noncompliant: Remove the redundant block and yield.
    yield 1;
  }
  default -&gt; {         // Noncompliant: Remove the redundant block and yield.
    yield 2;
  }
};

switch (mode) {
  case ""a"" -&gt; {        // Noncompliant: Remove the redundant block and break.
    result = 1;
    break;
  }
  default -&gt; {         // Noncompliant: Remove the redundant break.
    doSomethingElse();
    result = 2;
    break;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
int i = switch (mode) {
  case ""a"" -&gt; 1;
  default -&gt; 2;
};

switch (mode) {
  case ""a"" -&gt; result = 1;
  default -&gt; {
   doSomethingElse();
   result = 2;
 }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://openjdk.java.net/jeps/361"">JEP 361: Switch Expressions</a> </li>
</ul>","<p>In Switch Expressions, an arrow label consisting of a block with a single <code>yield</code> can be simplified to directly return the value,
resulting in cleaner code.</p>
<p>Similarly, for Switch Statements and arrow labels, a <code>break</code> in a block is always redundant and should not be used. Furthermore, if the
resulting block contains only one statement, the curly braces of that block can also be omitted.</p>
<p>This rule reports an issue when a case of a Switch Expression contains a block with a single <code>yield</code> or when a Switch Statement contains
a block with a <code>break</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int i = switch (mode) {
  case ""a"" -&gt; {        // Noncompliant: Remove the redundant block and yield.
    yield 1;
  }
  default -&gt; {         // Noncompliant: Remove the redundant block and yield.
    yield 2;
  }
};

switch (mode) {
  case ""a"" -&gt; {        // Noncompliant: Remove the redundant block and break.
    result = 1;
    break;
  }
  default -&gt; {         // Noncompliant: Remove the redundant break.
    doSomethingElse();
    result = 2;
    break;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
int i = switch (mode) {
  case ""a"" -&gt; 1;
  default -&gt; 2;
};

switch (mode) {
  case ""a"" -&gt; result = 1;
  default -&gt; {
   doSomethingElse();
   result = 2;
 }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://openjdk.java.net/jeps/361"">JEP 361: Switch Expressions</a> </li>
</ul>",MINOR,READY,False,[],['java14'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,MAIN,False,"[{'key': 'default', 'content': '<p>In Switch Expressions, an arrow label consisting of a block with a single <code>yield</code> can be simplified to directly return the value,\nresulting in cleaner code.</p>\n<p>Similarly, for Switch Statements and arrow labels, a <code>break</code> in a block is always redundant and should not be used. Furthermore, if the\nresulting block contains only one statement, the curly braces of that block can also be omitted.</p>\n<p>This rule reports an issue when a case of a Switch Expression contains a block with a single <code>yield</code> or when a Switch Statement contains\na block with a <code>break</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint i = switch (mode) {\n  case ""a"" -&gt; {        // Noncompliant: Remove the redundant block and yield.\n    yield 1;\n  }\n  default -&gt; {         // Noncompliant: Remove the redundant block and yield.\n    yield 2;\n  }\n};\n\nswitch (mode) {\n  case ""a"" -&gt; {        // Noncompliant: Remove the redundant block and break.\n    result = 1;\n    break;\n  }\n  default -&gt; {         // Noncompliant: Remove the redundant break.\n    doSomethingElse();\n    result = 2;\n    break;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint i = switch (mode) {\n  case ""a"" -&gt; 1;\n  default -&gt; 2;\n};\n\nswitch (mode) {\n  case ""a"" -&gt; result = 1;\n  default -&gt; {\n   doSomethingElse();\n   result = 2;\n }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://openjdk.java.net/jeps/361"">JEP 361: Switch Expressions</a> </li>\n</ul>'}]",[],['squid:S6205'],,,,
java:S6206,java,Records should be used instead of ordinary classes when representing immutable data structure,2023-06-14T03:41:52+0000,"<p>In Java 16 <code>records</code> are finalized and can be safely used in production code. <code>Records</code> represent immutable read-only data
structure and should be used instead of creating immutable classes. Immutability of records is guaranteed by the Java language itself, while
implementing immutable classes on your own might lead to some bugs.</p>
<p>One of the important aspects of <code>records</code> is that final fields can’t be overwritten using reflection.</p>
<p>This rule reports an issue on classes for which all these statements are true:</p>
<ul>
  <li> all instance fields are private and final </li>
  <li> has only one constructor with a parameter for all fields </li>
  <li> has getters for all fields </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
final class Person { // Noncompliant
  private final String name;
  private final int age;

  public Person(String name, int age) {
    this.name = name;
    this.age = age;
  }

  public String getName() {...}

  public int getAge() {...}

  @Override
  public boolean equals(Object o) {...}

  @Override
  public int hashCode() {...}

  @Override
  public String toString() {...}
}
</pre>
<h2>Compliant Solution</h2>
<pre>
record Person(String name, int age) { }
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://docs.oracle.com/javase/specs/jls/se16/html/jls-8.html#jls-8.10"">Records specification</a> </li>
</ul>","<p>In Java 16 <code>records</code> are finalized and can be safely used in production code. <code>Records</code> represent immutable read-only data
structure and should be used instead of creating immutable classes. Immutability of records is guaranteed by the Java language itself, while
implementing immutable classes on your own might lead to some bugs.</p>
<p>One of the important aspects of <code>records</code> is that final fields can’t be overwritten using reflection.</p>
<p>This rule reports an issue on classes for which all these statements are true:</p>
<ul>
  <li> all instance fields are private and final </li>
  <li> has only one constructor with a parameter for all fields </li>
  <li> has getters for all fields </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
final class Person { // Noncompliant
  private final String name;
  private final int age;

  public Person(String name, int age) {
    this.name = name;
    this.age = age;
  }

  public String getName() {...}

  public int getAge() {...}

  @Override
  public boolean equals(Object o) {...}

  @Override
  public int hashCode() {...}

  @Override
  public String toString() {...}
}
</pre>
<h2>Compliant Solution</h2>
<pre>
record Person(String name, int age) { }
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://docs.oracle.com/javase/specs/jls/se16/html/jls-8.html#jls-8.10"">Records specification</a> </li>
</ul>",MAJOR,READY,False,[],['java16'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,20min,CONSTANT_ISSUE,20min,False,MAIN,False,"[{'key': 'default', 'content': '<p>In Java 16 <code>records</code> are finalized and can be safely used in production code. <code>Records</code> represent immutable read-only data\nstructure and should be used instead of creating immutable classes. Immutability of records is guaranteed by the Java language itself, while\nimplementing immutable classes on your own might lead to some bugs.</p>\n<p>One of the important aspects of <code>records</code> is that final fields can’t be overwritten using reflection.</p>\n<p>This rule reports an issue on classes for which all these statements are true:</p>\n<ul>\n  <li> all instance fields are private and final </li>\n  <li> has only one constructor with a parameter for all fields </li>\n  <li> has getters for all fields </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfinal class Person { // Noncompliant\n  private final String name;\n  private final int age;\n\n  public Person(String name, int age) {\n    this.name = name;\n    this.age = age;\n  }\n\n  public String getName() {...}\n\n  public int getAge() {...}\n\n  @Override\n  public boolean equals(Object o) {...}\n\n  @Override\n  public int hashCode() {...}\n\n  @Override\n  public String toString() {...}\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nrecord Person(String name, int age) { }\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://docs.oracle.com/javase/specs/jls/se16/html/jls-8.html#jls-8.10"">Records specification</a> </li>\n</ul>'}]",[],['squid:S6206'],,,,
java:S6207,java,Redundant constructors/methods should be avoided in records,2023-06-14T03:41:52+0000,"<p>In Java 16 records represent a brief notation for immutable data structures. Records have autogenerated implementations for constructors with all
parameters, <code>getters</code>, <code>equals</code>, <code>hashcode</code> and <code>toString</code>. Although these methods can still be overridden
inside records, there is no use to do so if no special logic is required.</p>
<p>This rule reports an issue on empty compact constructors, trivial canonical constructors and simple getter methods with no additional logic.</p>
<h2>Noncompliant Code Example</h2>
<pre>
record Person(String name, int age) {
  Person(String name, int age) { // Noncompliant, already autogenerated
    this.name = name;
    this.age = age;
  }
}

record Person(String name, int age) {
  Person { // Noncompliant, no need for empty compact constructor
  }
  public String name() { // Noncompliant, already autogenerated
    return name;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
record Person(String name, int age) { } // Compliant

record Person(String name, int age) {
  Person(String name, int age) { // Compliant
    this.name = name.toLowerCase(Locale.ROOT);
    this.age = age;
  }
}

record Person(String name, int age) {
  Person { // Compliant
    if (age &lt; 0) {
      throw new IllegalArgumentException(""Negative age"");
    }
  }
  public String name() { // Compliant
    return name.toUpperCase(Locale.ROOT);
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://docs.oracle.com/javase/specs/jls/se16/html/jls-8.html#jls-8.10"">Records specification</a> </li>
</ul>","<p>In Java 16 records represent a brief notation for immutable data structures. Records have autogenerated implementations for constructors with all
parameters, <code>getters</code>, <code>equals</code>, <code>hashcode</code> and <code>toString</code>. Although these methods can still be overridden
inside records, there is no use to do so if no special logic is required.</p>
<p>This rule reports an issue on empty compact constructors, trivial canonical constructors and simple getter methods with no additional logic.</p>
<h2>Noncompliant Code Example</h2>
<pre>
record Person(String name, int age) {
  Person(String name, int age) { // Noncompliant, already autogenerated
    this.name = name;
    this.age = age;
  }
}

record Person(String name, int age) {
  Person { // Noncompliant, no need for empty compact constructor
  }
  public String name() { // Noncompliant, already autogenerated
    return name;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
record Person(String name, int age) { } // Compliant

record Person(String name, int age) {
  Person(String name, int age) { // Compliant
    this.name = name.toLowerCase(Locale.ROOT);
    this.age = age;
  }
}

record Person(String name, int age) {
  Person { // Compliant
    if (age &lt; 0) {
      throw new IllegalArgumentException(""Negative age"");
    }
  }
  public String name() { // Compliant
    return name.toUpperCase(Locale.ROOT);
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://docs.oracle.com/javase/specs/jls/se16/html/jls-8.html#jls-8.10"">Records specification</a> </li>
</ul>",MAJOR,READY,False,[],['java16'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,MAIN,False,"[{'key': 'default', 'content': '<p>In Java 16 records represent a brief notation for immutable data structures. Records have autogenerated implementations for constructors with all\nparameters, <code>getters</code>, <code>equals</code>, <code>hashcode</code> and <code>toString</code>. Although these methods can still be overridden\ninside records, there is no use to do so if no special logic is required.</p>\n<p>This rule reports an issue on empty compact constructors, trivial canonical constructors and simple getter methods with no additional logic.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nrecord Person(String name, int age) {\n  Person(String name, int age) { // Noncompliant, already autogenerated\n    this.name = name;\n    this.age = age;\n  }\n}\n\nrecord Person(String name, int age) {\n  Person { // Noncompliant, no need for empty compact constructor\n  }\n  public String name() { // Noncompliant, already autogenerated\n    return name;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nrecord Person(String name, int age) { } // Compliant\n\nrecord Person(String name, int age) {\n  Person(String name, int age) { // Compliant\n    this.name = name.toLowerCase(Locale.ROOT);\n    this.age = age;\n  }\n}\n\nrecord Person(String name, int age) {\n  Person { // Compliant\n    if (age &lt; 0) {\n      throw new IllegalArgumentException(""Negative age"");\n    }\n  }\n  public String name() { // Compliant\n    return name.toUpperCase(Locale.ROOT);\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://docs.oracle.com/javase/specs/jls/se16/html/jls-8.html#jls-8.10"">Records specification</a> </li>\n</ul>'}]",[],['squid:S6207'],,,,
java:S6208,java,Comma-separated labels should be used in Switch with colon case,2023-06-14T03:41:52+0000,"<p>In Java 14 there is a new way to write cases in Switch Statement and Expression when the same action should be performed for different cases.
Instead of declaring multiples branches with the same action, you can combine all of them in a single case group, separated with commas. It will
result in a more concise code and improved readability.</p>
<p>This rule reports an issue when multiple cases in a Switch can be grouped into a single comma-separated case.</p>
<h2>Noncompliant Code Example</h2>
<pre>
// Switch Expression
int i = switch (mode) {
  case ""a"":
  case ""b"":
    yield 1;
  default:
    yield 3;
};

// Switch Statement
switch (mode) {
  case ""a"":
  case ""b"":
    doSomething();
    break;
  default:
    doSomethingElse();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
// Switch Expression
int i = switch (mode) {
  case ""a"", ""b"":
    yield 1;
  default:
    yield 3;
};

// Switch Statement
switch (mode) {
  case ""a"", ""b"":
    doSomething();
    break;
  default:
    doSomethingElse();
}

// Or even better:
switch (mode) {
  case ""a"", ""b"" -&gt; doSomething();
  default -&gt; doSomethingElse();
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://openjdk.java.net/jeps/361"">JEP 361: Switch Expressions</a> </li>
</ul>","<p>In Java 14 there is a new way to write cases in Switch Statement and Expression when the same action should be performed for different cases.
Instead of declaring multiples branches with the same action, you can combine all of them in a single case group, separated with commas. It will
result in a more concise code and improved readability.</p>
<p>This rule reports an issue when multiple cases in a Switch can be grouped into a single comma-separated case.</p>
<h2>Noncompliant Code Example</h2>
<pre>
// Switch Expression
int i = switch (mode) {
  case ""a"":
  case ""b"":
    yield 1;
  default:
    yield 3;
};

// Switch Statement
switch (mode) {
  case ""a"":
  case ""b"":
    doSomething();
    break;
  default:
    doSomethingElse();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
// Switch Expression
int i = switch (mode) {
  case ""a"", ""b"":
    yield 1;
  default:
    yield 3;
};

// Switch Statement
switch (mode) {
  case ""a"", ""b"":
    doSomething();
    break;
  default:
    doSomethingElse();
}

// Or even better:
switch (mode) {
  case ""a"", ""b"" -&gt; doSomething();
  default -&gt; doSomethingElse();
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://openjdk.java.net/jeps/361"">JEP 361: Switch Expressions</a> </li>
</ul>",INFO,READY,False,[],['java14'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,MAIN,False,"[{'key': 'default', 'content': '<p>In Java 14 there is a new way to write cases in Switch Statement and Expression when the same action should be performed for different cases.\nInstead of declaring multiples branches with the same action, you can combine all of them in a single case group, separated with commas. It will\nresult in a more concise code and improved readability.</p>\n<p>This rule reports an issue when multiple cases in a Switch can be grouped into a single comma-separated case.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n// Switch Expression\nint i = switch (mode) {\n  case ""a"":\n  case ""b"":\n    yield 1;\n  default:\n    yield 3;\n};\n\n// Switch Statement\nswitch (mode) {\n  case ""a"":\n  case ""b"":\n    doSomething();\n    break;\n  default:\n    doSomethingElse();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n// Switch Expression\nint i = switch (mode) {\n  case ""a"", ""b"":\n    yield 1;\n  default:\n    yield 3;\n};\n\n// Switch Statement\nswitch (mode) {\n  case ""a"", ""b"":\n    doSomething();\n    break;\n  default:\n    doSomethingElse();\n}\n\n// Or even better:\nswitch (mode) {\n  case ""a"", ""b"" -&gt; doSomething();\n  default -&gt; doSomethingElse();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://openjdk.java.net/jeps/361"">JEP 361: Switch Expressions</a> </li>\n</ul>'}]",[],['squid:S6208'],,,,
java:S6326,java,Regular expressions should not contain multiple spaces,2023-06-14T03:41:52+0000,"<p>Multiple spaces in a regular expression can make it hard to tell how many spaces should be matched. It’s more readable to use only one space and
then indicate with a quantifier how many spaces are expected.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Pattern.compile(""hello   world"");
</pre>
<h2>Compliant Solution</h2>
<pre>
Pattern.compile(""hello {3}world"");
</pre>
<h2>Exceptions</h2>
<p>In <a href=""https://www.regular-expressions.info/freespacing.html"">free-spacing mode</a> (<code>Pattern.COMMENTS</code> flag, or with embedded flag
expression <code>(?x)</code>), whitespaces are ignored. In this case no issue should be triggered, because the whitespaces may be intended to improve
readability.</p>","<p>Multiple spaces in a regular expression can make it hard to tell how many spaces should be matched. It’s more readable to use only one space and
then indicate with a quantifier how many spaces are expected.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Pattern.compile(""hello   world"");
</pre>
<h2>Compliant Solution</h2>
<pre>
Pattern.compile(""hello {3}world"");
</pre>
<h2>Exceptions</h2>
<p>In <a href=""https://www.regular-expressions.info/freespacing.html"">free-spacing mode</a> (<code>Pattern.COMMENTS</code> flag, or with embedded flag
expression <code>(?x)</code>), whitespaces are ignored. In this case no issue should be triggered, because the whitespaces may be intended to improve
readability.</p>",MAJOR,READY,False,[],['regex'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,MAIN,False,"[{'key': 'default', 'content': '<p>Multiple spaces in a regular expression can make it hard to tell how many spaces should be matched. It’s more readable to use only one space and\nthen indicate with a quantifier how many spaces are expected.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nPattern.compile(""hello   world"");\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nPattern.compile(""hello {3}world"");\n</pre>\n<h2>Exceptions</h2>\n<p>In <a href=""https://www.regular-expressions.info/freespacing.html"">free-spacing mode</a> (<code>Pattern.COMMENTS</code> flag, or with embedded flag\nexpression <code>(?x)</code>), whitespaces are ignored. In this case no issue should be triggered, because the whitespaces may be intended to improve\nreadability.</p>'}]",[],['squid:S6326'],,,,
java:S6353,java,Regular expression quantifiers and character classes should be used concisely,2023-06-14T03:41:52+0000,"<p>With regular expressions syntax, it’s possible to express the same thing in many ways. For example, to match a two-digit number, one could write
<code>[0-9]{2,2}</code> or <code>\d{2}</code>. Latter is not only shorter in terms of expression length, but also easier to read and thus to maintain.
This rule recommends to replace some bulky quantifiers and character classes with more concise equivalents:</p>
<ul>
  <li> <code>\d</code> for <code>[0-9]</code> and <code>\D</code> for <code>[^0-9]</code> </li>
  <li> <code>\w</code> for <code>[A-Za-z0-9_]</code> and <code>\W</code> for <code>[^A-Za-z0-9_]</code> </li>
  <li> <code>.</code> for character classes matching everything (e.g. <code>[\w\W]</code>, <code>[\d\D]</code>, or <code>[\s\S]</code> with
  <code>s</code> flag) </li>
  <li> <code>x?</code> for <code>x{0,1}</code>, <code>x*</code> for <code>x{0,}</code>, <code>x+</code> for <code>x{1,}</code>, <code>x{N}</code> for
  <code>x{N,N}</code> </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
""[0-9]"" // Noncompliant - same as ""\\d""
""[^0-9]"" // Noncompliant - same as ""\\D""
""[A-Za-z0-9_]"" // Noncompliant - same as ""\\w""
""[\\w\\W]"" // Noncompliant - same as "".""
""a{0,}"" // Noncompliant - same as ""a*""
</pre>
<h2>Compliant Solution</h2>
<pre>
""\\d""
""\\D""
""\\w""
"".""
""a*""
</pre>","<p>With regular expressions syntax, it’s possible to express the same thing in many ways. For example, to match a two-digit number, one could write
<code>[0-9]{2,2}</code> or <code>\d{2}</code>. Latter is not only shorter in terms of expression length, but also easier to read and thus to maintain.
This rule recommends to replace some bulky quantifiers and character classes with more concise equivalents:</p>
<ul>
  <li> <code>\d</code> for <code>[0-9]</code> and <code>\D</code> for <code>[^0-9]</code> </li>
  <li> <code>\w</code> for <code>[A-Za-z0-9_]</code> and <code>\W</code> for <code>[^A-Za-z0-9_]</code> </li>
  <li> <code>.</code> for character classes matching everything (e.g. <code>[\w\W]</code>, <code>[\d\D]</code>, or <code>[\s\S]</code> with
  <code>s</code> flag) </li>
  <li> <code>x?</code> for <code>x{0,1}</code>, <code>x*</code> for <code>x{0,}</code>, <code>x+</code> for <code>x{1,}</code>, <code>x{N}</code> for
  <code>x{N,N}</code> </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
""[0-9]"" // Noncompliant - same as ""\\d""
""[^0-9]"" // Noncompliant - same as ""\\D""
""[A-Za-z0-9_]"" // Noncompliant - same as ""\\w""
""[\\w\\W]"" // Noncompliant - same as "".""
""a{0,}"" // Noncompliant - same as ""a*""
</pre>
<h2>Compliant Solution</h2>
<pre>
""\\d""
""\\D""
""\\w""
"".""
""a*""
</pre>",MINOR,READY,False,[],['regex'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,MAIN,False,"[{'key': 'default', 'content': '<p>With regular expressions syntax, it’s possible to express the same thing in many ways. For example, to match a two-digit number, one could write\n<code>[0-9]{2,2}</code> or <code>\\d{2}</code>. Latter is not only shorter in terms of expression length, but also easier to read and thus to maintain.\nThis rule recommends to replace some bulky quantifiers and character classes with more concise equivalents:</p>\n<ul>\n  <li> <code>\\d</code> for <code>[0-9]</code> and <code>\\D</code> for <code>[^0-9]</code> </li>\n  <li> <code>\\w</code> for <code>[A-Za-z0-9_]</code> and <code>\\W</code> for <code>[^A-Za-z0-9_]</code> </li>\n  <li> <code>.</code> for character classes matching everything (e.g. <code>[\\w\\W]</code>, <code>[\\d\\D]</code>, or <code>[\\s\\S]</code> with\n  <code>s</code> flag) </li>\n  <li> <code>x?</code> for <code>x{0,1}</code>, <code>x*</code> for <code>x{0,}</code>, <code>x+</code> for <code>x{1,}</code>, <code>x{N}</code> for\n  <code>x{N,N}</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\n""[0-9]"" // Noncompliant - same as ""\\\\d""\n""[^0-9]"" // Noncompliant - same as ""\\\\D""\n""[A-Za-z0-9_]"" // Noncompliant - same as ""\\\\w""\n""[\\\\w\\\\W]"" // Noncompliant - same as "".""\n""a{0,}"" // Noncompliant - same as ""a*""\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n""\\\\d""\n""\\\\D""\n""\\\\w""\n"".""\n""a*""\n</pre>'}]",[],['squid:S6353'],,,,
java:S6355,java,Deprecated annotations should include explanations,2023-06-14T03:41:52+0000,"<p>Since Java 9, <code>@Deprecated</code> has two additional arguments to the annotation:</p>
<ul>
  <li> <code>since</code> allows you to describe when the deprecation took place </li>
  <li> <code>forRemoval</code>, indicates whether the deprecated element will be removed at some future date </li>
</ul>
<p>In order to ease the maintainers work, it is recommended to always add one or both of these arguments.</p>
<p>This rule reports an issue when <code>@Deprecated</code> is used without any argument.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@Deprecated
</pre>
<h2>Compliant Solution</h2>
<pre>
@Deprecated(since=""4.2"", forRemoval=true)
</pre>
<h2>Exceptions</h2>
<p>The members and methods of a deprecated class or interface are ignored by this rule. The classes and interfaces themselves are still subject to
it.</p>
<h3>See Also</h3>
<ul>
  <li> <a href='/coding_rules#rule_key=java%3AS1123'>S1123</a> </li>
</ul>","<p>Since Java 9, <code>@Deprecated</code> has two additional arguments to the annotation:</p>
<ul>
  <li> <code>since</code> allows you to describe when the deprecation took place </li>
  <li> <code>forRemoval</code>, indicates whether the deprecated element will be removed at some future date </li>
</ul>
<p>In order to ease the maintainers work, it is recommended to always add one or both of these arguments.</p>
<p>This rule reports an issue when <code>@Deprecated</code> is used without any argument.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@Deprecated
</pre>
<h2>Compliant Solution</h2>
<pre>
@Deprecated(since=""4.2"", forRemoval=true)
</pre>
<h2>Exceptions</h2>
<p>The members and methods of a deprecated class or interface are ignored by this rule. The classes and interfaces themselves are still subject to
it.</p>
<h3>See Also</h3>
<ul>
  <li> <a href='/coding_rules#rule_key=java%3AS1123'>S1123</a> </li>
</ul>",MAJOR,READY,False,[],['java9'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>Since Java 9, <code>@Deprecated</code> has two additional arguments to the annotation:</p>\n<ul>\n  <li> <code>since</code> allows you to describe when the deprecation took place </li>\n  <li> <code>forRemoval</code>, indicates whether the deprecated element will be removed at some future date </li>\n</ul>\n<p>In order to ease the maintainers work, it is recommended to always add one or both of these arguments.</p>\n<p>This rule reports an issue when <code>@Deprecated</code> is used without any argument.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Deprecated\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Deprecated(since=""4.2"", forRemoval=true)\n</pre>\n<h2>Exceptions</h2>\n<p>The members and methods of a deprecated class or interface are ignored by this rule. The classes and interfaces themselves are still subject to\nit.</p>\n<h3>See Also</h3>\n<ul>\n  <li> <a href=\'/coding_rules#rule_key=java%3AS1123\'>S1123</a> </li>\n</ul>'}]",[],['squid:S6355'],,,,
java:S3052,java,Fields should not be initialized to default values,2023-06-14T03:41:52+0000,"<p>The compiler automatically initializes class fields to their default values before setting them with any initialization values, so there is no need
to explicitly set a field to its default value. Further, under the logic that cleaner code is better code, it’s considered poor style to do so.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass {

  int count = 0;  // Noncompliant
  // ...

}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass {

  int count;
  // ...

}
</pre>
<h2>Exceptions</h2>
<p><code>final</code> fields are ignored.</p>","<p>The compiler automatically initializes class fields to their default values before setting them with any initialization values, so there is no need
to explicitly set a field to its default value. Further, under the logic that cleaner code is better code, it’s considered poor style to do so.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass {

  int count = 0;  // Noncompliant
  // ...

}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass {

  int count;
  // ...

}
</pre>
<h2>Exceptions</h2>
<p><code>final</code> fields are ignored.</p>",MINOR,READY,False,[],"['convention', 'finding']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,2min,CONSTANT_ISSUE,2min,False,ALL,False,"[{'key': 'default', 'content': '<p>The compiler automatically initializes class fields to their default values before setting them with any initialization values, so there is no need\nto explicitly set a field to its default value. Further, under the logic that cleaner code is better code, it’s considered poor style to do so.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  int count = 0;  // Noncompliant\n  // ...\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n\n  int count;\n  // ...\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p><code>final</code> fields are ignored.</p>'}]",[],['squid:S3052'],,,,
java:S5128,java,"""Bean Validation"" (JSR 380) should be properly configured",2023-06-14T03:41:52+0000,"<p><code>Bean Validation</code> as per defined by JSR 380 can be triggered programmatically or also executed by the <code>Bean Validation</code>
providers. However something should tell the <code>Bean Validation</code> provider that a variable must be validated otherwise no validation will
happen. This can be achieved by annotating a variable with <code>javax.validation.Valid</code> and unfortunally it’s easy to forget to add this
annotation on complex Beans.</p>
<p>Not annotating a variable with <code>@Valid</code> means <code>Bean Validation</code> will not be triggered for this variable, but readers may
overlook this omission and assume the variable will be validated.</p>
<p>This rule will run by default on all <code>Class</code>'es and therefore can generate a lot of noise. This rule should be restricted to run only on
certain layers. For this reason, the ""Restrict Scope of Coding Rules"" feature should be used to check for missing <code>@Valid</code> annotations only
on some packages of the application.</p>
<h2>Noncompliant Code Example</h2>
<pre>
import javax.validation.Valid;
import javax.validation.constraints.NotNull;

public class User {
  @NotNull
  private String name;
}

public class Group {
  @NotNull
  private List&lt;User&gt; users; // Noncompliant; User instances are not validated
}

public class MyService {
  public void login(User user) { // Noncompliant; parameter ""user"" is not validated
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
import javax.validation.Valid;
import javax.validation.constraints.NotNull;

public class User {
  @NotNull
  private String name;
}

public class Group {
  @Valid
  @NotNull
  private List&lt;User&gt; users; // Compliant; User instances are validated

  @NotNull
  // preferred style as of Bean Validation 2.0
  private List&lt;@Valid User&gt; users2; // Compliant; User instances are validated
}

public class MyService {
  public void login(@Valid User user) { // Compliant
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://beanvalidation.org/2.0/spec/"">Bean Validation 2.0 (JSR 380)</a> </li>
</ul>","<p><code>Bean Validation</code> as per defined by JSR 380 can be triggered programmatically or also executed by the <code>Bean Validation</code>
providers. However something should tell the <code>Bean Validation</code> provider that a variable must be validated otherwise no validation will
happen. This can be achieved by annotating a variable with <code>javax.validation.Valid</code> and unfortunally it’s easy to forget to add this
annotation on complex Beans.</p>
<p>Not annotating a variable with <code>@Valid</code> means <code>Bean Validation</code> will not be triggered for this variable, but readers may
overlook this omission and assume the variable will be validated.</p>
<p>This rule will run by default on all <code>Class</code>'es and therefore can generate a lot of noise. This rule should be restricted to run only on
certain layers. For this reason, the ""Restrict Scope of Coding Rules"" feature should be used to check for missing <code>@Valid</code> annotations only
on some packages of the application.</p>
<h2>Noncompliant Code Example</h2>
<pre>
import javax.validation.Valid;
import javax.validation.constraints.NotNull;

public class User {
  @NotNull
  private String name;
}

public class Group {
  @NotNull
  private List&lt;User&gt; users; // Noncompliant; User instances are not validated
}

public class MyService {
  public void login(User user) { // Noncompliant; parameter ""user"" is not validated
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
import javax.validation.Valid;
import javax.validation.constraints.NotNull;

public class User {
  @NotNull
  private String name;
}

public class Group {
  @Valid
  @NotNull
  private List&lt;User&gt; users; // Compliant; User instances are validated

  @NotNull
  // preferred style as of Bean Validation 2.0
  private List&lt;@Valid User&gt; users2; // Compliant; User instances are validated
}

public class MyService {
  public void login(@Valid User user) { // Compliant
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://beanvalidation.org/2.0/spec/"">Bean Validation 2.0 (JSR 380)</a> </li>
</ul>",CRITICAL,READY,False,[],[],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,MAIN,False,"[{'key': 'default', 'content': '<p><code>Bean Validation</code> as per defined by JSR 380 can be triggered programmatically or also executed by the <code>Bean Validation</code>\nproviders. However something should tell the <code>Bean Validation</code> provider that a variable must be validated otherwise no validation will\nhappen. This can be achieved by annotating a variable with <code>javax.validation.Valid</code> and unfortunally it’s easy to forget to add this\nannotation on complex Beans.</p>\n<p>Not annotating a variable with <code>@Valid</code> means <code>Bean Validation</code> will not be triggered for this variable, but readers may\noverlook this omission and assume the variable will be validated.</p>\n<p>This rule will run by default on all <code>Class</code>\'es and therefore can generate a lot of noise. This rule should be restricted to run only on\ncertain layers. For this reason, the ""Restrict Scope of Coding Rules"" feature should be used to check for missing <code>@Valid</code> annotations only\non some packages of the application.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport javax.validation.Valid;\nimport javax.validation.constraints.NotNull;\n\npublic class User {\n  @NotNull\n  private String name;\n}\n\npublic class Group {\n  @NotNull\n  private List&lt;User&gt; users; // Noncompliant; User instances are not validated\n}\n\npublic class MyService {\n  public void login(User user) { // Noncompliant; parameter ""user"" is not validated\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport javax.validation.Valid;\nimport javax.validation.constraints.NotNull;\n\npublic class User {\n  @NotNull\n  private String name;\n}\n\npublic class Group {\n  @Valid\n  @NotNull\n  private List&lt;User&gt; users; // Compliant; User instances are validated\n\n  @NotNull\n  // preferred style as of Bean Validation 2.0\n  private List&lt;@Valid User&gt; users2; // Compliant; User instances are validated\n}\n\npublic class MyService {\n  public void login(@Valid User user) { // Compliant\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://beanvalidation.org/2.0/spec/"">Bean Validation 2.0 (JSR 380)</a> </li>\n</ul>'}]",[],['squid:S5128'],,,,
java:S6201,java,"Pattern Matching for ""instanceof"" operator should be used instead of simple ""instanceof"" + cast",2023-06-14T03:41:52+0000,"<p>In Java 16, the feature ""Pattern matching for instanceof"" is finalized and can&nbsp;be used in production. Previously developers needed to do 3
operations in order to do this: check the variable type, cast it and assign the casted value to the new variable. This approach is quite verbose and
can be replaced with pattern matching for&nbsp;<code>instanceof</code>, doing these 3 actions (check, cast and assign) in one expression.</p>
<p>This rule raises an issue when an <code>instanceof</code> check followed by a cast and an assignment could be replaced by pattern matching.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int f(Object o) {
  if (o instanceof String) {&nbsp; // Noncompliant
    String string = (String) o;
    return string.length();
  }
  return 0;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
int f(Object o) {
&nbsp; if (o instanceof String string) {&nbsp; // Compliant
&nbsp; &nbsp; return string.length();
&nbsp; }
&nbsp; return 0;
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://openjdk.java.net/jeps/394"">JEP 394: Pattern Matching for instanceof</a> &nbsp; </li>
</ul>","<p>In Java 16, the feature ""Pattern matching for instanceof"" is finalized and can&nbsp;be used in production. Previously developers needed to do 3
operations in order to do this: check the variable type, cast it and assign the casted value to the new variable. This approach is quite verbose and
can be replaced with pattern matching for&nbsp;<code>instanceof</code>, doing these 3 actions (check, cast and assign) in one expression.</p>
<p>This rule raises an issue when an <code>instanceof</code> check followed by a cast and an assignment could be replaced by pattern matching.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int f(Object o) {
  if (o instanceof String) {&nbsp; // Noncompliant
    String string = (String) o;
    return string.length();
  }
  return 0;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
int f(Object o) {
&nbsp; if (o instanceof String string) {&nbsp; // Compliant
&nbsp; &nbsp; return string.length();
&nbsp; }
&nbsp; return 0;
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://openjdk.java.net/jeps/394"">JEP 394: Pattern Matching for instanceof</a> &nbsp; </li>
</ul>",MINOR,READY,False,[],['java16'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,MAIN,False,"[{'key': 'default', 'content': '<p>In Java 16, the feature ""Pattern matching for instanceof"" is finalized and can&nbsp;be used in production. Previously developers needed to do 3\noperations in order to do this: check the variable type, cast it and assign the casted value to the new variable. This approach is quite verbose and\ncan be replaced with pattern matching for&nbsp;<code>instanceof</code>, doing these 3 actions (check, cast and assign) in one expression.</p>\n<p>This rule raises an issue when an <code>instanceof</code> check followed by a cast and an assignment could be replaced by pattern matching.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint f(Object o) {\n  if (o instanceof String) {&nbsp; // Noncompliant\n    String string = (String) o;\n    return string.length();\n  }\n  return 0;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint f(Object o) {\n&nbsp; if (o instanceof String string) {&nbsp; // Compliant\n&nbsp; &nbsp; return string.length();\n&nbsp; }\n&nbsp; return 0;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://openjdk.java.net/jeps/394"">JEP 394: Pattern Matching for instanceof</a> &nbsp; </li>\n</ul>'}]",[],['squid:S6201'],,,,
java:S6203,java,Text blocks should not be used in complex expressions,2023-06-14T03:41:52+0000,"<p>In Java 15 Text Blocks are official and can be used just like an ordinary String. However, when they are used to represent a big chunk of text,
they should not be used directly in complex expressions, as it decreases the readability. In this case, it is better to extract the text block into a
variable or a field.</p>
<p>This rule reports an issue when a text block longer than a number of lines given as a parameter is directly used within a lambda expression.</p>
<h2>Noncompliant Code Example</h2>
<pre>
listOfString.stream()
  .map(str -&gt; !""""""
    &lt;project&gt;
      &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
      &lt;parent&gt;
        &lt;groupId&gt;com.mycompany.app&lt;/groupId&gt;
        &lt;artifactId&gt;my-app&lt;/artifactId&gt;
        &lt;version&gt;1&lt;/version&gt;
      &lt;/parent&gt;

      &lt;groupId&gt;com.mycompany.app&lt;/groupId&gt;
      &lt;artifactId&gt;my-module&lt;/artifactId&gt;
      &lt;version&gt;1&lt;/version&gt;
    &lt;/project&gt;
    """""".equals(str));
</pre>
<h2>Compliant Solution</h2>
<pre>
String myTextBlock = """"""
    &lt;project&gt;
      &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
      &lt;parent&gt;
        &lt;groupId&gt;com.mycompany.app&lt;/groupId&gt;
        &lt;artifactId&gt;my-app&lt;/artifactId&gt;
        &lt;version&gt;1&lt;/version&gt;
      &lt;/parent&gt;

      &lt;groupId&gt;com.mycompany.app&lt;/groupId&gt;
      &lt;artifactId&gt;my-module&lt;/artifactId&gt;
      &lt;version&gt;1&lt;/version&gt;
    &lt;/project&gt;
    """""";

listOfString.stream()
  .map(str -&gt; !myTextBlock.equals(str));
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://openjdk.java.net/jeps/378"">JEP 378: Text Blocks</a> </li>
  <li> <a href=""https://cr.openjdk.java.net/~jlaskey/Strings/TextBlocksGuide_v9.html"">Programmer’s Guide To Text Blocks</a>, by Jim Laskey and Stuart
  Marks </li>
</ul>","<p>In Java 15 Text Blocks are official and can be used just like an ordinary String. However, when they are used to represent a big chunk of text,
they should not be used directly in complex expressions, as it decreases the readability. In this case, it is better to extract the text block into a
variable or a field.</p>
<p>This rule reports an issue when a text block longer than a number of lines given as a parameter is directly used within a lambda expression.</p>
<h2>Noncompliant Code Example</h2>
<pre>
listOfString.stream()
  .map(str -&gt; !""""""
    &lt;project&gt;
      &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
      &lt;parent&gt;
        &lt;groupId&gt;com.mycompany.app&lt;/groupId&gt;
        &lt;artifactId&gt;my-app&lt;/artifactId&gt;
        &lt;version&gt;1&lt;/version&gt;
      &lt;/parent&gt;

      &lt;groupId&gt;com.mycompany.app&lt;/groupId&gt;
      &lt;artifactId&gt;my-module&lt;/artifactId&gt;
      &lt;version&gt;1&lt;/version&gt;
    &lt;/project&gt;
    """""".equals(str));
</pre>
<h2>Compliant Solution</h2>
<pre>
String myTextBlock = """"""
    &lt;project&gt;
      &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
      &lt;parent&gt;
        &lt;groupId&gt;com.mycompany.app&lt;/groupId&gt;
        &lt;artifactId&gt;my-app&lt;/artifactId&gt;
        &lt;version&gt;1&lt;/version&gt;
      &lt;/parent&gt;

      &lt;groupId&gt;com.mycompany.app&lt;/groupId&gt;
      &lt;artifactId&gt;my-module&lt;/artifactId&gt;
      &lt;version&gt;1&lt;/version&gt;
    &lt;/project&gt;
    """""";

listOfString.stream()
  .map(str -&gt; !myTextBlock.equals(str));
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://openjdk.java.net/jeps/378"">JEP 378: Text Blocks</a> </li>
  <li> <a href=""https://cr.openjdk.java.net/~jlaskey/Strings/TextBlocksGuide_v9.html"">Programmer’s Guide To Text Blocks</a>, by Jim Laskey and Stuart
  Marks </li>
</ul>",MINOR,READY,False,[],[],java,Java,"[{'key': 'MaximumNumberOfLines', 'htmlDesc': 'The maximum number of lines in a text block that can be nested into a complex expression.', 'defaultValue': '5', 'type': 'INTEGER'}]",CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,MAIN,False,"[{'key': 'default', 'content': '<p>In Java 15 Text Blocks are official and can be used just like an ordinary String. However, when they are used to represent a big chunk of text,\nthey should not be used directly in complex expressions, as it decreases the readability. In this case, it is better to extract the text block into a\nvariable or a field.</p>\n<p>This rule reports an issue when a text block longer than a number of lines given as a parameter is directly used within a lambda expression.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlistOfString.stream()\n  .map(str -&gt; !""""""\n    &lt;project&gt;\n      &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n      &lt;parent&gt;\n        &lt;groupId&gt;com.mycompany.app&lt;/groupId&gt;\n        &lt;artifactId&gt;my-app&lt;/artifactId&gt;\n        &lt;version&gt;1&lt;/version&gt;\n      &lt;/parent&gt;\n\n      &lt;groupId&gt;com.mycompany.app&lt;/groupId&gt;\n      &lt;artifactId&gt;my-module&lt;/artifactId&gt;\n      &lt;version&gt;1&lt;/version&gt;\n    &lt;/project&gt;\n    """""".equals(str));\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString myTextBlock = """"""\n    &lt;project&gt;\n      &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n      &lt;parent&gt;\n        &lt;groupId&gt;com.mycompany.app&lt;/groupId&gt;\n        &lt;artifactId&gt;my-app&lt;/artifactId&gt;\n        &lt;version&gt;1&lt;/version&gt;\n      &lt;/parent&gt;\n\n      &lt;groupId&gt;com.mycompany.app&lt;/groupId&gt;\n      &lt;artifactId&gt;my-module&lt;/artifactId&gt;\n      &lt;version&gt;1&lt;/version&gt;\n    &lt;/project&gt;\n    """""";\n\nlistOfString.stream()\n  .map(str -&gt; !myTextBlock.equals(str));\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://openjdk.java.net/jeps/378"">JEP 378: Text Blocks</a> </li>\n  <li> <a href=""https://cr.openjdk.java.net/~jlaskey/Strings/TextBlocksGuide_v9.html"">Programmer’s Guide To Text Blocks</a>, by Jim Laskey and Stuart\n  Marks </li>\n</ul>'}]",[],['squid:S6203'],,,,
java:S6204,java,"""Stream.toList()"" method should be used instead of ""collectors"" when unmodifiable list needed",2023-06-14T03:41:52+0000,"<p>In Java 8 <code>Streams</code> were introduced to support chaining of operations over collections in a functional style. The most common way to
save a result of such chains is to save them to some collection (usually <code>List</code>). To do so there is a terminal method <code>collect</code>
that can be used with a library of <code>Collectors</code>. The key problem is that <code>.collect(Collectors.toList())</code> actually returns a
mutable kind of <code>List</code> while in the majority of cases unmodifiable lists are preferred. In Java 10 a new collector appeared to return an
unmodifiable list: <code>toUnmodifiableList()</code>. This does the trick but results in verbose code. Since Java 16 there is now a better variant to
produce an unmodifiable list directly from a stream: <code>Stream.toList()</code>.</p>
<p>This rule raises an issue when ""collect"" is used to create a list from a stream.</p>
<h2>Noncompliant Code Example</h2>
<pre>
List&lt;String&gt; list1 = Stream.of(""A"", ""B"", ""C"")
                           .collect(Collectors.toList()); // Noncompliant

List&lt;String&gt; list2 = Stream.of(""A"", ""B"", ""C"")
                           .collect(Collectors.toUnmodifiableList()); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
List&lt;String&gt; list1 = Stream.of(""A"", ""B"", ""C"").toList(); // Compliant

List&lt;String&gt; list2 = Stream.of(""A"", ""B"", ""C"")
                           .collect(Collectors.toList()); // Compliant, the list2 needs to be mutable

list2.add(""X"");
</pre>","<p>In Java 8 <code>Streams</code> were introduced to support chaining of operations over collections in a functional style. The most common way to
save a result of such chains is to save them to some collection (usually <code>List</code>). To do so there is a terminal method <code>collect</code>
that can be used with a library of <code>Collectors</code>. The key problem is that <code>.collect(Collectors.toList())</code> actually returns a
mutable kind of <code>List</code> while in the majority of cases unmodifiable lists are preferred. In Java 10 a new collector appeared to return an
unmodifiable list: <code>toUnmodifiableList()</code>. This does the trick but results in verbose code. Since Java 16 there is now a better variant to
produce an unmodifiable list directly from a stream: <code>Stream.toList()</code>.</p>
<p>This rule raises an issue when ""collect"" is used to create a list from a stream.</p>
<h2>Noncompliant Code Example</h2>
<pre>
List&lt;String&gt; list1 = Stream.of(""A"", ""B"", ""C"")
                           .collect(Collectors.toList()); // Noncompliant

List&lt;String&gt; list2 = Stream.of(""A"", ""B"", ""C"")
                           .collect(Collectors.toUnmodifiableList()); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
List&lt;String&gt; list1 = Stream.of(""A"", ""B"", ""C"").toList(); // Compliant

List&lt;String&gt; list2 = Stream.of(""A"", ""B"", ""C"")
                           .collect(Collectors.toList()); // Compliant, the list2 needs to be mutable

list2.add(""X"");
</pre>",MAJOR,READY,False,[],['java16'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,MAIN,False,"[{'key': 'default', 'content': '<p>In Java 8 <code>Streams</code> were introduced to support chaining of operations over collections in a functional style. The most common way to\nsave a result of such chains is to save them to some collection (usually <code>List</code>). To do so there is a terminal method <code>collect</code>\nthat can be used with a library of <code>Collectors</code>. The key problem is that <code>.collect(Collectors.toList())</code> actually returns a\nmutable kind of <code>List</code> while in the majority of cases unmodifiable lists are preferred. In Java 10 a new collector appeared to return an\nunmodifiable list: <code>toUnmodifiableList()</code>. This does the trick but results in verbose code. Since Java 16 there is now a better variant to\nproduce an unmodifiable list directly from a stream: <code>Stream.toList()</code>.</p>\n<p>This rule raises an issue when ""collect"" is used to create a list from a stream.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;String&gt; list1 = Stream.of(""A"", ""B"", ""C"")\n                           .collect(Collectors.toList()); // Noncompliant\n\nList&lt;String&gt; list2 = Stream.of(""A"", ""B"", ""C"")\n                           .collect(Collectors.toUnmodifiableList()); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nList&lt;String&gt; list1 = Stream.of(""A"", ""B"", ""C"").toList(); // Compliant\n\nList&lt;String&gt; list2 = Stream.of(""A"", ""B"", ""C"")\n                           .collect(Collectors.toList()); // Compliant, the list2 needs to be mutable\n\nlist2.add(""X"");\n</pre>'}]",[],['squid:S6204'],,,,
java:S6213,java,Restricted Identifiers should not be used as Identifiers,2023-06-14T03:41:52+0000,"<p>Even if it is technically possible, <a href=""https://docs.oracle.com/javase/specs/jls/se16/html/jls-3.html#jls-3.8"">Restricted Identifiers</a>
should not be used as identifiers. This is only possible for compatibility reasons, using it in Java code is confusing and should be avoided.</p>
<p>Note that this applies to any version of Java, including the one where these identifiers are not yet restricted, to avoid future confusion.</p>
<p>This rule reports an issue when restricted identifiers:</p>
<ul>
  <li> var </li>
  <li> yield </li>
  <li> record </li>
</ul>
<p>are used as identifiers.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var var = ""var""; // Noncompliant: compiles but this code is confusing
var = ""what is this?"";

int yield(int i) { // Noncompliant
  return switch (i) {
    case 1: yield(0); // This is a yield from switch expression, not a recursive call.
    default: yield(i-1);
  };
}

String record = ""record""; // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
var myVariable = ""var"";

int minusOne(int i) {
  return switch (i) {
    case 1: yield(0);
    default: yield(i-1);
  };
}

String myRecord = ""record"";
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://docs.oracle.com/javase/specs/jls/se16/html/jls-3.html#jls-3.8"">JLS16, 3.8: Identifiers</a> </li>
</ul>","<p>Even if it is technically possible, <a href=""https://docs.oracle.com/javase/specs/jls/se16/html/jls-3.html#jls-3.8"">Restricted Identifiers</a>
should not be used as identifiers. This is only possible for compatibility reasons, using it in Java code is confusing and should be avoided.</p>
<p>Note that this applies to any version of Java, including the one where these identifiers are not yet restricted, to avoid future confusion.</p>
<p>This rule reports an issue when restricted identifiers:</p>
<ul>
  <li> var </li>
  <li> yield </li>
  <li> record </li>
</ul>
<p>are used as identifiers.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var var = ""var""; // Noncompliant: compiles but this code is confusing
var = ""what is this?"";

int yield(int i) { // Noncompliant
  return switch (i) {
    case 1: yield(0); // This is a yield from switch expression, not a recursive call.
    default: yield(i-1);
  };
}

String record = ""record""; // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
var myVariable = ""var"";

int minusOne(int i) {
  return switch (i) {
    case 1: yield(0);
    default: yield(i-1);
  };
}

String myRecord = ""record"";
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://docs.oracle.com/javase/specs/jls/se16/html/jls-3.html#jls-3.8"">JLS16, 3.8: Identifiers</a> </li>
</ul>",MAJOR,READY,False,[],[],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,MAIN,False,"[{'key': 'default', 'content': '<p>Even if it is technically possible, <a href=""https://docs.oracle.com/javase/specs/jls/se16/html/jls-3.html#jls-3.8"">Restricted Identifiers</a>\nshould not be used as identifiers. This is only possible for compatibility reasons, using it in Java code is confusing and should be avoided.</p>\n<p>Note that this applies to any version of Java, including the one where these identifiers are not yet restricted, to avoid future confusion.</p>\n<p>This rule reports an issue when restricted identifiers:</p>\n<ul>\n  <li> var </li>\n  <li> yield </li>\n  <li> record </li>\n</ul>\n<p>are used as identifiers.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar var = ""var""; // Noncompliant: compiles but this code is confusing\nvar = ""what is this?"";\n\nint yield(int i) { // Noncompliant\n  return switch (i) {\n    case 1: yield(0); // This is a yield from switch expression, not a recursive call.\n    default: yield(i-1);\n  };\n}\n\nString record = ""record""; // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar myVariable = ""var"";\n\nint minusOne(int i) {\n  return switch (i) {\n    case 1: yield(0);\n    default: yield(i-1);\n  };\n}\n\nString myRecord = ""record"";\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://docs.oracle.com/javase/specs/jls/se16/html/jls-3.html#jls-3.8"">JLS16, 3.8: Identifiers</a> </li>\n</ul>'}]",[],['squid:S6213'],,,,
java:S6217,java,Permitted types of a sealed class should be omitted if they are declared in the same file,2023-06-14T03:41:52+0000,"<p><code>sealed</code> classes were introduced in Java 17. This feature is very useful if there is a need to define a strict hierarchy and restrict
the possibility of extending classes. In order to mention all the allowed subclasses, there is a keyword <code>permits</code>, which should be
followed by subclasses' names.</p>
<p>This notation is quite useful if subclasses of a given <code>sealed</code> class can be found in different files, packages, or even modules. In
case when all subclasses are declared in the same file there is no need to mention the explicitly and <code>permits</code> part of a declaration can
be omitted.</p>
<p>This rule reports an issue if all subclasses of a <code>sealed</code> class are declared in the same file as their superclass.</p>
<h2>Noncompliant Code Example</h2>
<pre>
sealed class A permits B, C, D, E {} // Noncompliant
final class B extends A {}
final class C extends A {}
final class D extends A {}
final class E extends A {}
</pre>
<h2>Compliant Solution</h2>
<pre>
sealed class A {} // Compliant
final class B extends A {}
final class C extends A {}
final class D extends A {}
final class E extends A {}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://docs.oracle.com/javase/specs/jls/se17/html/jls-8.html#jls-8.1.1.2"">Sealed Classes specification</a> </li>
</ul>","<p><code>sealed</code> classes were introduced in Java 17. This feature is very useful if there is a need to define a strict hierarchy and restrict
the possibility of extending classes. In order to mention all the allowed subclasses, there is a keyword <code>permits</code>, which should be
followed by subclasses' names.</p>
<p>This notation is quite useful if subclasses of a given <code>sealed</code> class can be found in different files, packages, or even modules. In
case when all subclasses are declared in the same file there is no need to mention the explicitly and <code>permits</code> part of a declaration can
be omitted.</p>
<p>This rule reports an issue if all subclasses of a <code>sealed</code> class are declared in the same file as their superclass.</p>
<h2>Noncompliant Code Example</h2>
<pre>
sealed class A permits B, C, D, E {} // Noncompliant
final class B extends A {}
final class C extends A {}
final class D extends A {}
final class E extends A {}
</pre>
<h2>Compliant Solution</h2>
<pre>
sealed class A {} // Compliant
final class B extends A {}
final class C extends A {}
final class D extends A {}
final class E extends A {}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://docs.oracle.com/javase/specs/jls/se17/html/jls-8.html#jls-8.1.1.2"">Sealed Classes specification</a> </li>
</ul>",MINOR,READY,False,[],['java17'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,MAIN,False,"[{'key': 'default', 'content': '<p><code>sealed</code> classes were introduced in Java 17. This feature is very useful if there is a need to define a strict hierarchy and restrict\nthe possibility of extending classes. In order to mention all the allowed subclasses, there is a keyword <code>permits</code>, which should be\nfollowed by subclasses\' names.</p>\n<p>This notation is quite useful if subclasses of a given <code>sealed</code> class can be found in different files, packages, or even modules. In\ncase when all subclasses are declared in the same file there is no need to mention the explicitly and <code>permits</code> part of a declaration can\nbe omitted.</p>\n<p>This rule reports an issue if all subclasses of a <code>sealed</code> class are declared in the same file as their superclass.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nsealed class A permits B, C, D, E {} // Noncompliant\nfinal class B extends A {}\nfinal class C extends A {}\nfinal class D extends A {}\nfinal class E extends A {}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nsealed class A {} // Compliant\nfinal class B extends A {}\nfinal class C extends A {}\nfinal class D extends A {}\nfinal class E extends A {}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://docs.oracle.com/javase/specs/jls/se17/html/jls-8.html#jls-8.1.1.2"">Sealed Classes specification</a> </li>\n</ul>'}]",[],['squid:S6217'],,,,
java:S6219,java,'serialVersionUID' field should not be set to '0L' in records,2023-06-14T03:41:52+0000,"<p>In Records serialization is not done the same way as for ordinary serializable or externalizable classes. Records serialization does not rely on
the <code>serialVersionUID</code> field, because the requirement to have this field equal is waived for record classes. By default, all records will
have this field equal to <code>0L</code> and there is no need to specify this field with <code>0L</code> value and it is possible to specify it with
some custom value to support serialization/deserialization involving ordinary classes.</p>
<p>This rule raises an issue when there is a <code>private static final long serialVersionUID</code> field which is set to <code>0L</code> in a Record
class.</p>
<h2>Noncompliant Code Example</h2>
<pre>
record Person(String name, int age) implements Serializable {
@Serial
  private static final long serialVersionUID = 0L; // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
record Person(String name, int age) implements Serializable {} // Compliant

record Person(String name, int age) implements Serializable {
@Serial
  private static final long serialVersionUID = 42L; // Compliant
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://docs.oracle.com/javase/specs/jls/se16/html/jls-8.html#jls-8.10"">Records specification</a> </li>
  <li> <a href=""https://docs.oracle.com/en/java/javase/16/docs/specs/serialization/serial-arch.html#serialization-of-records"">Serialization of
  records</a> </li>
</ul>","<p>In Records serialization is not done the same way as for ordinary serializable or externalizable classes. Records serialization does not rely on
the <code>serialVersionUID</code> field, because the requirement to have this field equal is waived for record classes. By default, all records will
have this field equal to <code>0L</code> and there is no need to specify this field with <code>0L</code> value and it is possible to specify it with
some custom value to support serialization/deserialization involving ordinary classes.</p>
<p>This rule raises an issue when there is a <code>private static final long serialVersionUID</code> field which is set to <code>0L</code> in a Record
class.</p>
<h2>Noncompliant Code Example</h2>
<pre>
record Person(String name, int age) implements Serializable {
@Serial
  private static final long serialVersionUID = 0L; // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
record Person(String name, int age) implements Serializable {} // Compliant

record Person(String name, int age) implements Serializable {
@Serial
  private static final long serialVersionUID = 42L; // Compliant
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://docs.oracle.com/javase/specs/jls/se16/html/jls-8.html#jls-8.10"">Records specification</a> </li>
  <li> <a href=""https://docs.oracle.com/en/java/javase/16/docs/specs/serialization/serial-arch.html#serialization-of-records"">Serialization of
  records</a> </li>
</ul>",MINOR,READY,False,[],['java16'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,MAIN,False,"[{'key': 'default', 'content': '<p>In Records serialization is not done the same way as for ordinary serializable or externalizable classes. Records serialization does not rely on\nthe <code>serialVersionUID</code> field, because the requirement to have this field equal is waived for record classes. By default, all records will\nhave this field equal to <code>0L</code> and there is no need to specify this field with <code>0L</code> value and it is possible to specify it with\nsome custom value to support serialization/deserialization involving ordinary classes.</p>\n<p>This rule raises an issue when there is a <code>private static final long serialVersionUID</code> field which is set to <code>0L</code> in a Record\nclass.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nrecord Person(String name, int age) implements Serializable {\n@Serial\n  private static final long serialVersionUID = 0L; // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nrecord Person(String name, int age) implements Serializable {} // Compliant\n\nrecord Person(String name, int age) implements Serializable {\n@Serial\n  private static final long serialVersionUID = 42L; // Compliant\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://docs.oracle.com/javase/specs/jls/se16/html/jls-8.html#jls-8.10"">Records specification</a> </li>\n  <li> <a href=""https://docs.oracle.com/en/java/javase/16/docs/specs/serialization/serial-arch.html#serialization-of-records"">Serialization of\n  records</a> </li>\n</ul>'}]",[],['squid:S6219'],,,,
java:S888,java,"Equality operators should not be used in ""for"" loop termination conditions",2023-06-14T03:41:52+0000,"<p>Testing <code>for</code> loop termination using an equality operator (<code>==</code> and <code>!=</code>) is dangerous, because it could set up an
infinite loop. Using a broader relational operator instead casts a wider net, and makes it harder (but not impossible) to accidentally write an
infinite loop.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (int i = 1; i != 10; i += 2)  // Noncompliant. Infinite; i goes from 9 straight to 11.
{
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for (int i = 1; i &lt;= 10; i += 2)  // Compliant
{
  //...
}
</pre>
<h2>Exceptions</h2>
<p>Equality operators are ignored if the loop counter is not modified within the body of the loop and either:</p>
<ul>
  <li> starts below the ending value and is incremented by 1 on each iteration. </li>
  <li> starts above the ending value and is decremented by 1 on each iteration. </li>
</ul>
<p>Equality operators are also ignored when the test is against <code>null</code>.</p>
<pre>
for (int i = 0; arr[i] != null; i++) {
  // ...
}

for (int i = 0; (item = arr[i]) != null; i++) {
  // ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/835"">MITRE, CWE-835</a> - Loop with Unreachable Exit Condition ('Infinite Loop') </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/x9YxBQ"">CERT, MSC21-C.</a> - Use robust loop termination conditions </li>
</ul>","<p>Testing <code>for</code> loop termination using an equality operator (<code>==</code> and <code>!=</code>) is dangerous, because it could set up an
infinite loop. Using a broader relational operator instead casts a wider net, and makes it harder (but not impossible) to accidentally write an
infinite loop.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (int i = 1; i != 10; i += 2)  // Noncompliant. Infinite; i goes from 9 straight to 11.
{
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for (int i = 1; i &lt;= 10; i += 2)  // Compliant
{
  //...
}
</pre>
<h2>Exceptions</h2>
<p>Equality operators are ignored if the loop counter is not modified within the body of the loop and either:</p>
<ul>
  <li> starts below the ending value and is incremented by 1 on each iteration. </li>
  <li> starts above the ending value and is decremented by 1 on each iteration. </li>
</ul>
<p>Equality operators are also ignored when the test is against <code>null</code>.</p>
<pre>
for (int i = 0; arr[i] != null; i++) {
  // ...
}

for (int i = 0; (item = arr[i]) != null; i++) {
  // ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://cwe.mitre.org/data/definitions/835"">MITRE, CWE-835</a> - Loop with Unreachable Exit Condition ('Infinite Loop') </li>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/x9YxBQ"">CERT, MSC21-C.</a> - Use robust loop termination conditions </li>
</ul>",CRITICAL,READY,False,[],"['cert', 'cwe', 'suspicious']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,2min,CONSTANT_ISSUE,2min,False,ALL,False,"[{'key': 'default', 'content': '<p>Testing <code>for</code> loop termination using an equality operator (<code>==</code> and <code>!=</code>) is dangerous, because it could set up an\ninfinite loop. Using a broader relational operator instead casts a wider net, and makes it harder (but not impossible) to accidentally write an\ninfinite loop.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 1; i != 10; i += 2)  // Noncompliant. Infinite; i goes from 9 straight to 11.\n{\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor (int i = 1; i &lt;= 10; i += 2)  // Compliant\n{\n  //...\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Equality operators are ignored if the loop counter is not modified within the body of the loop and either:</p>\n<ul>\n  <li> starts below the ending value and is incremented by 1 on each iteration. </li>\n  <li> starts above the ending value and is decremented by 1 on each iteration. </li>\n</ul>\n<p>Equality operators are also ignored when the test is against <code>null</code>.</p>\n<pre>\nfor (int i = 0; arr[i] != null; i++) {\n  // ...\n}\n\nfor (int i = 0; (item = arr[i]) != null; i++) {\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/835"">MITRE, CWE-835</a> - Loop with Unreachable Exit Condition (\'Infinite Loop\') </li>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/x9YxBQ"">CERT, MSC21-C.</a> - Use robust loop termination conditions </li>\n</ul>'}]",[],['squid:S888'],,,,
java:S3066,java,"""enum"" fields should not be publicly mutable",2023-06-14T03:41:52+0000,"<p><code>enum</code>s are generally thought of as constant, but an <code>enum</code> with a <code>public</code> field or <code>public</code> setter is
non-constant. Ideally fields in an <code>enum</code> are <code>private</code> and set in the constructor, but if that’s not possible, their visibility
should be reduced as much as possible.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public enum Continent {

  NORTH_AMERICA (23, 24709000),
  // ...
  EUROPE (50, 39310000);

  public int countryCount;  // Noncompliant
  private int landMass;

  Continent(int countryCount, int landMass) {
    // ...
  }

  public void setLandMass(int landMass) {  // Noncompliant
    this.landMass = landMass;
  }
</pre>
<h2>Compliant Solution</h2>
<pre>
public enum Continent {

  NORTH_AMERICA (23, 24709000),
  // ...
  EUROPE (50, 39310000);

  private int countryCount;
  private int landMass;

  Continent(int countryCount, int landMass) {
    // ...
  }
</pre>","<p><code>enum</code>s are generally thought of as constant, but an <code>enum</code> with a <code>public</code> field or <code>public</code> setter is
non-constant. Ideally fields in an <code>enum</code> are <code>private</code> and set in the constructor, but if that’s not possible, their visibility
should be reduced as much as possible.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public enum Continent {

  NORTH_AMERICA (23, 24709000),
  // ...
  EUROPE (50, 39310000);

  public int countryCount;  // Noncompliant
  private int landMass;

  Continent(int countryCount, int landMass) {
    // ...
  }

  public void setLandMass(int landMass) {  // Noncompliant
    this.landMass = landMass;
  }
</pre>
<h2>Compliant Solution</h2>
<pre>
public enum Continent {

  NORTH_AMERICA (23, 24709000),
  // ...
  EUROPE (50, 39310000);

  private int countryCount;
  private int landMass;

  Continent(int countryCount, int landMass) {
    // ...
  }
</pre>",MINOR,READY,False,[],['bad-practice'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,20min,CONSTANT_ISSUE,20min,False,MAIN,False,"[{'key': 'default', 'content': '<p><code>enum</code>s are generally thought of as constant, but an <code>enum</code> with a <code>public</code> field or <code>public</code> setter is\nnon-constant. Ideally fields in an <code>enum</code> are <code>private</code> and set in the constructor, but if that’s not possible, their visibility\nshould be reduced as much as possible.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic enum Continent {\n\n  NORTH_AMERICA (23, 24709000),\n  // ...\n  EUROPE (50, 39310000);\n\n  public int countryCount;  // Noncompliant\n  private int landMass;\n\n  Continent(int countryCount, int landMass) {\n    // ...\n  }\n\n  public void setLandMass(int landMass) {  // Noncompliant\n    this.landMass = landMass;\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic enum Continent {\n\n  NORTH_AMERICA (23, 24709000),\n  // ...\n  EUROPE (50, 39310000);\n\n  private int countryCount;\n  private int landMass;\n\n  Continent(int countryCount, int landMass) {\n    // ...\n  }\n</pre>'}]",[],['squid:S3066'],,,,
java:S4032,java,"Packages containing only ""package-info.java"" should be removed",2023-06-14T03:41:52+0000,"<p>There is no reason to have a package that is empty except for ""package-info.java"". Such packages merely clutter a project, taking up space but
adding no value.</p>","<p>There is no reason to have a package that is empty except for ""package-info.java"". Such packages merely clutter a project, taking up space but
adding no value.</p>",MINOR,READY,False,[],['unused'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,2min,CONSTANT_ISSUE,2min,False,ALL,False,"[{'key': 'default', 'content': '<p>There is no reason to have a package that is empty except for ""package-info.java"". Such packages merely clutter a project, taking up space but\nadding no value.</p>'}]",[],['squid:S4032'],,,,
java:S4034,java,"""Stream"" call chains should be simplified when possible",2023-06-14T03:41:52+0000,"<p>When using the <code>Stream</code> API, call chains should be simplified as much as possible. Not only does it make the code easier to read, it
also avoid creating unnecessary temporary objects.</p>
<p>This rule raises an issue when one of the following substitution is possible:</p>
<table>
  <colgroup>
    <col style=""width: 50%;"">
    <col style=""width: 50%;"">
  </colgroup>
  <thead>
    <tr>
      <th>Original</th>
      <th>Preferred</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><p><code>stream.filter(predicate).findFirst().isPresent()</code></p></td>
      <td><p><code>stream.anyMatch(predicate)</code></p></td>
    </tr>
    <tr>
      <td><p><code>stream.filter(predicate).findAny().isPresent()</code></p></td>
      <td><p><code>stream.anyMatch(predicate)</code></p></td>
    </tr>
    <tr>
      <td><p><code>!stream.anyMatch(predicate)</code></p></td>
      <td><p><code>stream.noneMatch(predicate)</code></p></td>
    </tr>
    <tr>
      <td><p><code>!stream.anyMatch(x -&gt; !(...))</code></p></td>
      <td><p><code>stream.allMatch(...)</code></p></td>
    </tr>
    <tr>
      <td><p><code>stream.map(mapper).anyMatch(Boolean::booleanValue)</code></p></td>
      <td><p><code>stream.anyMatch(predicate)</code></p></td>
    </tr>
  </tbody>
</table>
<h2>Noncompliant Code Example</h2>
<pre>
boolean hasRed = widgets.stream().filter(w -&gt; w.getColor() == RED).findFirst().isPresent(); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
boolean hasRed = widgets.stream().anyMatch(w -&gt; w.getColor() == RED);
</pre>","<p>When using the <code>Stream</code> API, call chains should be simplified as much as possible. Not only does it make the code easier to read, it
also avoid creating unnecessary temporary objects.</p>
<p>This rule raises an issue when one of the following substitution is possible:</p>
<table>
  <colgroup>
    <col style=""width: 50%;"">
    <col style=""width: 50%;"">
  </colgroup>
  <thead>
    <tr>
      <th>Original</th>
      <th>Preferred</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><p><code>stream.filter(predicate).findFirst().isPresent()</code></p></td>
      <td><p><code>stream.anyMatch(predicate)</code></p></td>
    </tr>
    <tr>
      <td><p><code>stream.filter(predicate).findAny().isPresent()</code></p></td>
      <td><p><code>stream.anyMatch(predicate)</code></p></td>
    </tr>
    <tr>
      <td><p><code>!stream.anyMatch(predicate)</code></p></td>
      <td><p><code>stream.noneMatch(predicate)</code></p></td>
    </tr>
    <tr>
      <td><p><code>!stream.anyMatch(x -&gt; !(...))</code></p></td>
      <td><p><code>stream.allMatch(...)</code></p></td>
    </tr>
    <tr>
      <td><p><code>stream.map(mapper).anyMatch(Boolean::booleanValue)</code></p></td>
      <td><p><code>stream.anyMatch(predicate)</code></p></td>
    </tr>
  </tbody>
</table>
<h2>Noncompliant Code Example</h2>
<pre>
boolean hasRed = widgets.stream().filter(w -&gt; w.getColor() == RED).findFirst().isPresent(); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
boolean hasRed = widgets.stream().anyMatch(w -&gt; w.getColor() == RED);
</pre>",MINOR,READY,False,[],['clumsy'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,2min,CONSTANT_ISSUE,2min,False,ALL,False,"[{'key': 'default', 'content': '<p>When using the <code>Stream</code> API, call chains should be simplified as much as possible. Not only does it make the code easier to read, it\nalso avoid creating unnecessary temporary objects.</p>\n<p>This rule raises an issue when one of the following substitution is possible:</p>\n<table>\n  <colgroup>\n    <col style=""width: 50%;"">\n    <col style=""width: 50%;"">\n  </colgroup>\n  <thead>\n    <tr>\n      <th>Original</th>\n      <th>Preferred</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><p><code>stream.filter(predicate).findFirst().isPresent()</code></p></td>\n      <td><p><code>stream.anyMatch(predicate)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>stream.filter(predicate).findAny().isPresent()</code></p></td>\n      <td><p><code>stream.anyMatch(predicate)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>!stream.anyMatch(predicate)</code></p></td>\n      <td><p><code>stream.noneMatch(predicate)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>!stream.anyMatch(x -&gt; !(...))</code></p></td>\n      <td><p><code>stream.allMatch(...)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>stream.map(mapper).anyMatch(Boolean::booleanValue)</code></p></td>\n      <td><p><code>stream.anyMatch(predicate)</code></p></td>\n    </tr>\n  </tbody>\n</table>\n<h2>Noncompliant Code Example</h2>\n<pre>\nboolean hasRed = widgets.stream().filter(w -&gt; w.getColor() == RED).findFirst().isPresent(); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nboolean hasRed = widgets.stream().anyMatch(w -&gt; w.getColor() == RED);\n</pre>'}]",[],['squid:S4034'],,,,
java:S4276,java,Functional Interfaces should be as specialised as possible,2023-06-14T03:41:52+0000,"<p>The <code>java.util.function</code> package provides a large array of functional interface definitions for use in lambda expressions and method
references. In general it is recommended to use the more specialised form to avoid auto-boxing. For instance <code>IntFunction&lt;Foo&gt;</code>
should be preferred over <code>Function&lt;Integer, Foo&gt;</code>.</p>
<p>This rule raises an issue when any of the following substitution is possible:</p>
<table>
  <colgroup>
    <col style=""width: 50%;"">
    <col style=""width: 50%;"">
  </colgroup>
  <thead>
    <tr>
      <th>Current Interface</th>
      <th>Preferred Interface</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><p><code>Function&lt;Integer, R&gt;</code></p></td>
      <td><p><code>IntFunction&lt;R&gt;</code></p></td>
    </tr>
    <tr>
      <td><p><code>Function&lt;Long, R&gt;</code></p></td>
      <td><p><code>LongFunction&lt;R&gt;</code></p></td>
    </tr>
    <tr>
      <td><p><code>Function&lt;Double, R&gt;</code></p></td>
      <td><p><code>DoubleFunction&lt;R&gt;</code></p></td>
    </tr>
    <tr>
      <td><p><code>Function&lt;Double,Integer&gt;</code></p></td>
      <td><p><code>DoubleToIntFunction</code></p></td>
    </tr>
    <tr>
      <td><p><code>Function&lt;Double,Long&gt;</code></p></td>
      <td><p><code>DoubleToLongFunction</code></p></td>
    </tr>
    <tr>
      <td><p><code>Function&lt;Long,Double&gt;</code></p></td>
      <td><p><code>LongToDoubleFunction</code></p></td>
    </tr>
    <tr>
      <td><p><code>Function&lt;Long,Integer&gt;</code></p></td>
      <td><p><code>LongToIntFunction</code></p></td>
    </tr>
    <tr>
      <td><p><code>Function&lt;R,Integer&gt;</code></p></td>
      <td><p><code>ToIntFunction&lt;R&gt;</code></p></td>
    </tr>
    <tr>
      <td><p><code>Function&lt;R,Long&gt;</code></p></td>
      <td><p><code>ToLongFunction&lt;R&gt;</code></p></td>
    </tr>
    <tr>
      <td><p><code>Function&lt;R,Double&gt;</code></p></td>
      <td><p><code>ToDoubleFunction&lt;R&gt;</code></p></td>
    </tr>
    <tr>
      <td><p><code>Function&lt;T,T&gt;</code></p></td>
      <td><p><code>UnaryOperator&lt;T&gt;</code></p></td>
    </tr>
    <tr>
      <td><p><code>BiFunction&lt;T,T,T&gt;</code></p></td>
      <td><p><code>BinaryOperator&lt;T&gt;</code></p></td>
    </tr>
    <tr>
      <td><p><code>Consumer&lt;Integer&gt;</code></p></td>
      <td><p><code>IntConsumer</code></p></td>
    </tr>
    <tr>
      <td><p><code>Consumer&lt;Double&gt;</code></p></td>
      <td><p><code>DoubleConsumer</code></p></td>
    </tr>
    <tr>
      <td><p><code>Consumer&lt;Long&gt;</code></p></td>
      <td><p><code>LongConsumer</code></p></td>
    </tr>
    <tr>
      <td><p><code>BiConsumer&lt;T,Integer&gt;</code></p></td>
      <td><p><code>ObjIntConsumer&lt;T&gt;</code></p></td>
    </tr>
    <tr>
      <td><p><code>BiConsumer&lt;T,Long&gt;</code></p></td>
      <td><p><code>ObjLongConsumer&lt;T&gt;</code></p></td>
    </tr>
    <tr>
      <td><p><code>BiConsumer&lt;T,Double&gt;</code></p></td>
      <td><p><code>ObjDoubleConsumer&lt;T&gt;</code></p></td>
    </tr>
    <tr>
      <td><p><code>Predicate&lt;Integer&gt;</code></p></td>
      <td><p><code>IntPredicate</code></p></td>
    </tr>
    <tr>
      <td><p><code>Predicate&lt;Double&gt;</code></p></td>
      <td><p><code>DoublePredicate</code></p></td>
    </tr>
    <tr>
      <td><p><code>Predicate&lt;Long&gt;</code></p></td>
      <td><p><code>LongPredicate</code></p></td>
    </tr>
    <tr>
      <td><p><code>Supplier&lt;Integer&gt;</code></p></td>
      <td><p><code>IntSupplier</code></p></td>
    </tr>
    <tr>
      <td><p><code>Supplier&lt;Double&gt;</code></p></td>
      <td><p><code>DoubleSupplier</code></p></td>
    </tr>
    <tr>
      <td><p><code>Supplier&lt;Long&gt;</code></p></td>
      <td><p><code>LongSupplier</code></p></td>
    </tr>
    <tr>
      <td><p><code>Supplier&lt;Boolean&gt;</code></p></td>
      <td><p><code>BooleanSupplier</code></p></td>
    </tr>
    <tr>
      <td><p><code>UnaryOperator&lt;Integer&gt;</code></p></td>
      <td><p><code>IntUnaryOperator</code></p></td>
    </tr>
    <tr>
      <td><p><code>UnaryOperator&lt;Double&gt;</code></p></td>
      <td><p><code>DoubleUnaryOperator</code></p></td>
    </tr>
    <tr>
      <td><p><code>UnaryOperator&lt;Long&gt;</code></p></td>
      <td><p><code>LongUnaryOperator</code></p></td>
    </tr>
    <tr>
      <td><p><code>BinaryOperator&lt;Integer&gt;</code></p></td>
      <td><p><code>IntBinaryOperator</code></p></td>
    </tr>
    <tr>
      <td><p><code>BinaryOperator&lt;Long&gt;</code></p></td>
      <td><p><code>LongBinaryOperator</code></p></td>
    </tr>
    <tr>
      <td><p><code>BinaryOperator&lt;Double&gt;</code></p></td>
      <td><p><code>DoubleBinaryOperator</code></p></td>
    </tr>
    <tr>
      <td><p><code>Function&lt;T, Boolean&gt;</code></p></td>
      <td><p><code>Predicate&lt;T&gt;</code></p></td>
    </tr>
    <tr>
      <td><p><code>BiFunction&lt;T,U,Boolean&gt;</code></p></td>
      <td><p><code>BiPredicate&lt;T,U&gt;</code></p></td>
    </tr>
  </tbody>
</table>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo implements Supplier&lt;Integer&gt; {  // Noncompliant
    @Override
    public Integer get() {
      // ...
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Foo implements IntSupplier {

  @Override
  public int getAsInt() {
    // ...
  }
}
</pre>","<p>The <code>java.util.function</code> package provides a large array of functional interface definitions for use in lambda expressions and method
references. In general it is recommended to use the more specialised form to avoid auto-boxing. For instance <code>IntFunction&lt;Foo&gt;</code>
should be preferred over <code>Function&lt;Integer, Foo&gt;</code>.</p>
<p>This rule raises an issue when any of the following substitution is possible:</p>
<table>
  <colgroup>
    <col style=""width: 50%;"">
    <col style=""width: 50%;"">
  </colgroup>
  <thead>
    <tr>
      <th>Current Interface</th>
      <th>Preferred Interface</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><p><code>Function&lt;Integer, R&gt;</code></p></td>
      <td><p><code>IntFunction&lt;R&gt;</code></p></td>
    </tr>
    <tr>
      <td><p><code>Function&lt;Long, R&gt;</code></p></td>
      <td><p><code>LongFunction&lt;R&gt;</code></p></td>
    </tr>
    <tr>
      <td><p><code>Function&lt;Double, R&gt;</code></p></td>
      <td><p><code>DoubleFunction&lt;R&gt;</code></p></td>
    </tr>
    <tr>
      <td><p><code>Function&lt;Double,Integer&gt;</code></p></td>
      <td><p><code>DoubleToIntFunction</code></p></td>
    </tr>
    <tr>
      <td><p><code>Function&lt;Double,Long&gt;</code></p></td>
      <td><p><code>DoubleToLongFunction</code></p></td>
    </tr>
    <tr>
      <td><p><code>Function&lt;Long,Double&gt;</code></p></td>
      <td><p><code>LongToDoubleFunction</code></p></td>
    </tr>
    <tr>
      <td><p><code>Function&lt;Long,Integer&gt;</code></p></td>
      <td><p><code>LongToIntFunction</code></p></td>
    </tr>
    <tr>
      <td><p><code>Function&lt;R,Integer&gt;</code></p></td>
      <td><p><code>ToIntFunction&lt;R&gt;</code></p></td>
    </tr>
    <tr>
      <td><p><code>Function&lt;R,Long&gt;</code></p></td>
      <td><p><code>ToLongFunction&lt;R&gt;</code></p></td>
    </tr>
    <tr>
      <td><p><code>Function&lt;R,Double&gt;</code></p></td>
      <td><p><code>ToDoubleFunction&lt;R&gt;</code></p></td>
    </tr>
    <tr>
      <td><p><code>Function&lt;T,T&gt;</code></p></td>
      <td><p><code>UnaryOperator&lt;T&gt;</code></p></td>
    </tr>
    <tr>
      <td><p><code>BiFunction&lt;T,T,T&gt;</code></p></td>
      <td><p><code>BinaryOperator&lt;T&gt;</code></p></td>
    </tr>
    <tr>
      <td><p><code>Consumer&lt;Integer&gt;</code></p></td>
      <td><p><code>IntConsumer</code></p></td>
    </tr>
    <tr>
      <td><p><code>Consumer&lt;Double&gt;</code></p></td>
      <td><p><code>DoubleConsumer</code></p></td>
    </tr>
    <tr>
      <td><p><code>Consumer&lt;Long&gt;</code></p></td>
      <td><p><code>LongConsumer</code></p></td>
    </tr>
    <tr>
      <td><p><code>BiConsumer&lt;T,Integer&gt;</code></p></td>
      <td><p><code>ObjIntConsumer&lt;T&gt;</code></p></td>
    </tr>
    <tr>
      <td><p><code>BiConsumer&lt;T,Long&gt;</code></p></td>
      <td><p><code>ObjLongConsumer&lt;T&gt;</code></p></td>
    </tr>
    <tr>
      <td><p><code>BiConsumer&lt;T,Double&gt;</code></p></td>
      <td><p><code>ObjDoubleConsumer&lt;T&gt;</code></p></td>
    </tr>
    <tr>
      <td><p><code>Predicate&lt;Integer&gt;</code></p></td>
      <td><p><code>IntPredicate</code></p></td>
    </tr>
    <tr>
      <td><p><code>Predicate&lt;Double&gt;</code></p></td>
      <td><p><code>DoublePredicate</code></p></td>
    </tr>
    <tr>
      <td><p><code>Predicate&lt;Long&gt;</code></p></td>
      <td><p><code>LongPredicate</code></p></td>
    </tr>
    <tr>
      <td><p><code>Supplier&lt;Integer&gt;</code></p></td>
      <td><p><code>IntSupplier</code></p></td>
    </tr>
    <tr>
      <td><p><code>Supplier&lt;Double&gt;</code></p></td>
      <td><p><code>DoubleSupplier</code></p></td>
    </tr>
    <tr>
      <td><p><code>Supplier&lt;Long&gt;</code></p></td>
      <td><p><code>LongSupplier</code></p></td>
    </tr>
    <tr>
      <td><p><code>Supplier&lt;Boolean&gt;</code></p></td>
      <td><p><code>BooleanSupplier</code></p></td>
    </tr>
    <tr>
      <td><p><code>UnaryOperator&lt;Integer&gt;</code></p></td>
      <td><p><code>IntUnaryOperator</code></p></td>
    </tr>
    <tr>
      <td><p><code>UnaryOperator&lt;Double&gt;</code></p></td>
      <td><p><code>DoubleUnaryOperator</code></p></td>
    </tr>
    <tr>
      <td><p><code>UnaryOperator&lt;Long&gt;</code></p></td>
      <td><p><code>LongUnaryOperator</code></p></td>
    </tr>
    <tr>
      <td><p><code>BinaryOperator&lt;Integer&gt;</code></p></td>
      <td><p><code>IntBinaryOperator</code></p></td>
    </tr>
    <tr>
      <td><p><code>BinaryOperator&lt;Long&gt;</code></p></td>
      <td><p><code>LongBinaryOperator</code></p></td>
    </tr>
    <tr>
      <td><p><code>BinaryOperator&lt;Double&gt;</code></p></td>
      <td><p><code>DoubleBinaryOperator</code></p></td>
    </tr>
    <tr>
      <td><p><code>Function&lt;T, Boolean&gt;</code></p></td>
      <td><p><code>Predicate&lt;T&gt;</code></p></td>
    </tr>
    <tr>
      <td><p><code>BiFunction&lt;T,U,Boolean&gt;</code></p></td>
      <td><p><code>BiPredicate&lt;T,U&gt;</code></p></td>
    </tr>
  </tbody>
</table>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo implements Supplier&lt;Integer&gt; {  // Noncompliant
    @Override
    public Integer get() {
      // ...
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Foo implements IntSupplier {

  @Override
  public int getAsInt() {
    // ...
  }
}
</pre>",MINOR,READY,False,[],['performance'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>The <code>java.util.function</code> package provides a large array of functional interface definitions for use in lambda expressions and method\nreferences. In general it is recommended to use the more specialised form to avoid auto-boxing. For instance <code>IntFunction&lt;Foo&gt;</code>\nshould be preferred over <code>Function&lt;Integer, Foo&gt;</code>.</p>\n<p>This rule raises an issue when any of the following substitution is possible:</p>\n<table>\n  <colgroup>\n    <col style=""width: 50%;"">\n    <col style=""width: 50%;"">\n  </colgroup>\n  <thead>\n    <tr>\n      <th>Current Interface</th>\n      <th>Preferred Interface</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><p><code>Function&lt;Integer, R&gt;</code></p></td>\n      <td><p><code>IntFunction&lt;R&gt;</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>Function&lt;Long, R&gt;</code></p></td>\n      <td><p><code>LongFunction&lt;R&gt;</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>Function&lt;Double, R&gt;</code></p></td>\n      <td><p><code>DoubleFunction&lt;R&gt;</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>Function&lt;Double,Integer&gt;</code></p></td>\n      <td><p><code>DoubleToIntFunction</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>Function&lt;Double,Long&gt;</code></p></td>\n      <td><p><code>DoubleToLongFunction</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>Function&lt;Long,Double&gt;</code></p></td>\n      <td><p><code>LongToDoubleFunction</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>Function&lt;Long,Integer&gt;</code></p></td>\n      <td><p><code>LongToIntFunction</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>Function&lt;R,Integer&gt;</code></p></td>\n      <td><p><code>ToIntFunction&lt;R&gt;</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>Function&lt;R,Long&gt;</code></p></td>\n      <td><p><code>ToLongFunction&lt;R&gt;</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>Function&lt;R,Double&gt;</code></p></td>\n      <td><p><code>ToDoubleFunction&lt;R&gt;</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>Function&lt;T,T&gt;</code></p></td>\n      <td><p><code>UnaryOperator&lt;T&gt;</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>BiFunction&lt;T,T,T&gt;</code></p></td>\n      <td><p><code>BinaryOperator&lt;T&gt;</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>Consumer&lt;Integer&gt;</code></p></td>\n      <td><p><code>IntConsumer</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>Consumer&lt;Double&gt;</code></p></td>\n      <td><p><code>DoubleConsumer</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>Consumer&lt;Long&gt;</code></p></td>\n      <td><p><code>LongConsumer</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>BiConsumer&lt;T,Integer&gt;</code></p></td>\n      <td><p><code>ObjIntConsumer&lt;T&gt;</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>BiConsumer&lt;T,Long&gt;</code></p></td>\n      <td><p><code>ObjLongConsumer&lt;T&gt;</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>BiConsumer&lt;T,Double&gt;</code></p></td>\n      <td><p><code>ObjDoubleConsumer&lt;T&gt;</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>Predicate&lt;Integer&gt;</code></p></td>\n      <td><p><code>IntPredicate</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>Predicate&lt;Double&gt;</code></p></td>\n      <td><p><code>DoublePredicate</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>Predicate&lt;Long&gt;</code></p></td>\n      <td><p><code>LongPredicate</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>Supplier&lt;Integer&gt;</code></p></td>\n      <td><p><code>IntSupplier</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>Supplier&lt;Double&gt;</code></p></td>\n      <td><p><code>DoubleSupplier</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>Supplier&lt;Long&gt;</code></p></td>\n      <td><p><code>LongSupplier</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>Supplier&lt;Boolean&gt;</code></p></td>\n      <td><p><code>BooleanSupplier</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>UnaryOperator&lt;Integer&gt;</code></p></td>\n      <td><p><code>IntUnaryOperator</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>UnaryOperator&lt;Double&gt;</code></p></td>\n      <td><p><code>DoubleUnaryOperator</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>UnaryOperator&lt;Long&gt;</code></p></td>\n      <td><p><code>LongUnaryOperator</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>BinaryOperator&lt;Integer&gt;</code></p></td>\n      <td><p><code>IntBinaryOperator</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>BinaryOperator&lt;Long&gt;</code></p></td>\n      <td><p><code>LongBinaryOperator</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>BinaryOperator&lt;Double&gt;</code></p></td>\n      <td><p><code>DoubleBinaryOperator</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>Function&lt;T, Boolean&gt;</code></p></td>\n      <td><p><code>Predicate&lt;T&gt;</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>BiFunction&lt;T,U,Boolean&gt;</code></p></td>\n      <td><p><code>BiPredicate&lt;T,U&gt;</code></p></td>\n    </tr>\n  </tbody>\n</table>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo implements Supplier&lt;Integer&gt; {  // Noncompliant\n    @Override\n    public Integer get() {\n      // ...\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo implements IntSupplier {\n\n  @Override\n  public int getAsInt() {\n    // ...\n  }\n}\n</pre>'}]",[],['squid:S4276'],,,,
java:S6212,java,Local-Variable Type Inference should be used,2023-06-14T03:41:52+0000,"<p>In Java 10 <a href=""https://openjdk.java.net/jeps/286"">Local-Variable Type Inference</a> was introduced. It allows you to omit the expected type of
a variable by declaring it with the <code>var</code> keyword.</p>
<p>While it is not always possible or cleaner to use this new way of declaring a variable, when the type on the left is the same as the one on the
right in an assignment, using the <code>var</code> will result in a more concise code.</p>
<p>This rule reports an issue when the expected type of the variable is the same as the returned type of assigned expression and the type can be
easily inferred by the reader, either when the type is already mentioned in the name or the initializer, or when the expression is
self-explanatory.</p>
<h2>Noncompliant Code Example</h2>
<pre>
MyClass myClass = new MyClass();

int i = 10; // Type is self-explanatory

MyClass something = MyClass.getMyClass(); // Type is already mentioned in the initializer

MyClass myClass = get(); // Type is already mentioned in the name
</pre>
<h2>Compliant Solution</h2>
<pre>
var myClass = new MyClass();

var i = 10;

var something = MyClass.getMyClass();

var myClass = get();
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://openjdk.java.net/jeps/286"">JEP 286: Local-Variable Type Inference</a> </li>
</ul>","<p>In Java 10 <a href=""https://openjdk.java.net/jeps/286"">Local-Variable Type Inference</a> was introduced. It allows you to omit the expected type of
a variable by declaring it with the <code>var</code> keyword.</p>
<p>While it is not always possible or cleaner to use this new way of declaring a variable, when the type on the left is the same as the one on the
right in an assignment, using the <code>var</code> will result in a more concise code.</p>
<p>This rule reports an issue when the expected type of the variable is the same as the returned type of assigned expression and the type can be
easily inferred by the reader, either when the type is already mentioned in the name or the initializer, or when the expression is
self-explanatory.</p>
<h2>Noncompliant Code Example</h2>
<pre>
MyClass myClass = new MyClass();

int i = 10; // Type is self-explanatory

MyClass something = MyClass.getMyClass(); // Type is already mentioned in the initializer

MyClass myClass = get(); // Type is already mentioned in the name
</pre>
<h2>Compliant Solution</h2>
<pre>
var myClass = new MyClass();

var i = 10;

var something = MyClass.getMyClass();

var myClass = get();
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://openjdk.java.net/jeps/286"">JEP 286: Local-Variable Type Inference</a> </li>
</ul>",INFO,READY,False,[],['java10'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,0min,CONSTANT_ISSUE,0min,False,MAIN,False,"[{'key': 'default', 'content': '<p>In Java 10 <a href=""https://openjdk.java.net/jeps/286"">Local-Variable Type Inference</a> was introduced. It allows you to omit the expected type of\na variable by declaring it with the <code>var</code> keyword.</p>\n<p>While it is not always possible or cleaner to use this new way of declaring a variable, when the type on the left is the same as the one on the\nright in an assignment, using the <code>var</code> will result in a more concise code.</p>\n<p>This rule reports an issue when the expected type of the variable is the same as the returned type of assigned expression and the type can be\neasily inferred by the reader, either when the type is already mentioned in the name or the initializer, or when the expression is\nself-explanatory.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nMyClass myClass = new MyClass();\n\nint i = 10; // Type is self-explanatory\n\nMyClass something = MyClass.getMyClass(); // Type is already mentioned in the initializer\n\nMyClass myClass = get(); // Type is already mentioned in the name\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar myClass = new MyClass();\n\nvar i = 10;\n\nvar something = MyClass.getMyClass();\n\nvar myClass = get();\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://openjdk.java.net/jeps/286"">JEP 286: Local-Variable Type Inference</a> </li>\n</ul>'}]",[],['squid:S6212'],,,,
java:S2094,java,Classes should not be empty,2023-06-14T03:41:52+0000,"<p>There is no good excuse for an empty class. If it’s being used simply as a common extension point, it should be replaced with an
<code>interface</code>. If it was stubbed in as a placeholder for future development it should be fleshed-out. In any other case, it should be
eliminated.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Nothing {  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public interface Nothing {
}
</pre>
<h2>Exceptions</h2>
<p>Empty classes can be used as marker types (for Spring for instance), therefore empty classes that are annotated will be ignored.</p>
<pre>
@Configuration
@EnableWebMvc
public final class ApplicationConfiguration {

}
</pre>","<p>There is no good excuse for an empty class. If it’s being used simply as a common extension point, it should be replaced with an
<code>interface</code>. If it was stubbed in as a placeholder for future development it should be fleshed-out. In any other case, it should be
eliminated.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Nothing {  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public interface Nothing {
}
</pre>
<h2>Exceptions</h2>
<p>Empty classes can be used as marker types (for Spring for instance), therefore empty classes that are annotated will be ignored.</p>
<pre>
@Configuration
@EnableWebMvc
public final class ApplicationConfiguration {

}
</pre>",MINOR,READY,False,[],['clumsy'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,ALL,False,"[{'key': 'default', 'content': '<p>There is no good excuse for an empty class. If it’s being used simply as a common extension point, it should be replaced with an\n<code>interface</code>. If it was stubbed in as a placeholder for future development it should be fleshed-out. In any other case, it should be\neliminated.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Nothing {  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic interface Nothing {\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Empty classes can be used as marker types (for Spring for instance), therefore empty classes that are annotated will be ignored.</p>\n<pre>\n@Configuration\n@EnableWebMvc\npublic final class ApplicationConfiguration {\n\n}\n</pre>'}]",[],['squid:S2094'],,,,
java:S2096,java,"""main"" should not ""throw"" anything",2023-06-14T03:41:52+0000,"<p>There’s no reason for a <code>main</code> method to <code>throw</code> anything. After all, what’s going to catch it?</p>
<p>Instead, the method should itself gracefully handle any exceptions that may bubble up to it, attach as much contextual information as possible, and
perform whatever logging or user communication is necessary, and <code>exit</code> with a non-zero (i.e. non-success) exit code if necessary.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public static void main(String args[]) throws Exception { // Noncompliant
  doSomething();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public static void main(String args[]) {
 try {
    doSomething();
  } catch (Throwable t) {
    log.error(t);
    System.exit(1);  // Default exit code, 0, indicates success. Non-zero value means failure.
  }
}
</pre>","<p>There’s no reason for a <code>main</code> method to <code>throw</code> anything. After all, what’s going to catch it?</p>
<p>Instead, the method should itself gracefully handle any exceptions that may bubble up to it, attach as much contextual information as possible, and
perform whatever logging or user communication is necessary, and <code>exit</code> with a non-zero (i.e. non-success) exit code if necessary.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public static void main(String args[]) throws Exception { // Noncompliant
  doSomething();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public static void main(String args[]) {
 try {
    doSomething();
  } catch (Throwable t) {
    log.error(t);
    System.exit(1);  // Default exit code, 0, indicates success. Non-zero value means failure.
  }
}
</pre>",BLOCKER,READY,False,[],['error-handling'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,15min,CONSTANT_ISSUE,15min,False,MAIN,False,"[{'key': 'default', 'content': '<p>There’s no reason for a <code>main</code> method to <code>throw</code> anything. After all, what’s going to catch it?</p>\n<p>Instead, the method should itself gracefully handle any exceptions that may bubble up to it, attach as much contextual information as possible, and\nperform whatever logging or user communication is necessary, and <code>exit</code> with a non-zero (i.e. non-success) exit code if necessary.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic static void main(String args[]) throws Exception { // Noncompliant\n  doSomething();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static void main(String args[]) {\n try {\n    doSomething();\n  } catch (Throwable t) {\n    log.error(t);\n    System.exit(1);  // Default exit code, 0, indicates success. Non-zero value means failure.\n  }\n}\n</pre>'}]",[],['squid:S2096'],,,,
java:S5361,java,"""String#replace"" should be preferred to ""String#replaceAll""",2023-06-14T03:41:52+0000,"<p>The underlying implementation of <code>String::replaceAll</code> calls the <code>java.util.regex.Pattern.compile()</code> method each time it is
called even if the first argument is not a regular expression. This has a significant performance cost and therefore should be used with care.</p>
<p>When <code>String::replaceAll</code> is used, the first argument should be a real regular expression. If it’s not the case,
<code>String::replace</code> does exactly the same thing as <code>String::replaceAll</code> without the performance drawback of the regex.</p>
<p>This rule raises an issue for each <code>String::replaceAll</code> used with a <code>String</code> as first parameter which doesn’t contains
special regex character or pattern.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String init = ""Bob is a Bird... Bob is a Plane... Bob is Superman!"";
String changed = init.replaceAll(""Bob is"", ""It's""); // Noncompliant
changed = changed.replaceAll(""\\.\\.\\."", "";""); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
String init = ""Bob is a Bird... Bob is a Plane... Bob is Superman!"";
String changed = init.replace(""Bob is"", ""It's"");
changed = changed.replace(""..."", "";"");
</pre>
<p>Or, with a regex:</p>
<pre>
String init = ""Bob is a Bird... Bob is a Plane... Bob is Superman!"";
String changed = init.replaceAll(""\\w*\\sis"", ""It's"");
changed = changed.replaceAll(""\\.{3}"", "";"");
</pre>
<h2>See</h2>
<ul>
  <li> <a href='/coding_rules#rule_key=java%3AS4248'>S4248</a> - Regex patterns should not be created needlessly </li>
</ul>","<p>The underlying implementation of <code>String::replaceAll</code> calls the <code>java.util.regex.Pattern.compile()</code> method each time it is
called even if the first argument is not a regular expression. This has a significant performance cost and therefore should be used with care.</p>
<p>When <code>String::replaceAll</code> is used, the first argument should be a real regular expression. If it’s not the case,
<code>String::replace</code> does exactly the same thing as <code>String::replaceAll</code> without the performance drawback of the regex.</p>
<p>This rule raises an issue for each <code>String::replaceAll</code> used with a <code>String</code> as first parameter which doesn’t contains
special regex character or pattern.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String init = ""Bob is a Bird... Bob is a Plane... Bob is Superman!"";
String changed = init.replaceAll(""Bob is"", ""It's""); // Noncompliant
changed = changed.replaceAll(""\\.\\.\\."", "";""); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
String init = ""Bob is a Bird... Bob is a Plane... Bob is Superman!"";
String changed = init.replace(""Bob is"", ""It's"");
changed = changed.replace(""..."", "";"");
</pre>
<p>Or, with a regex:</p>
<pre>
String init = ""Bob is a Bird... Bob is a Plane... Bob is Superman!"";
String changed = init.replaceAll(""\\w*\\sis"", ""It's"");
changed = changed.replaceAll(""\\.{3}"", "";"");
</pre>
<h2>See</h2>
<ul>
  <li> <a href='/coding_rules#rule_key=java%3AS4248'>S4248</a> - Regex patterns should not be created needlessly </li>
</ul>",CRITICAL,READY,False,[],"['performance', 'regex']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,2min,CONSTANT_ISSUE,2min,False,ALL,False,"[{'key': 'default', 'content': '<p>The underlying implementation of <code>String::replaceAll</code> calls the <code>java.util.regex.Pattern.compile()</code> method each time it is\ncalled even if the first argument is not a regular expression. This has a significant performance cost and therefore should be used with care.</p>\n<p>When <code>String::replaceAll</code> is used, the first argument should be a real regular expression. If it’s not the case,\n<code>String::replace</code> does exactly the same thing as <code>String::replaceAll</code> without the performance drawback of the regex.</p>\n<p>This rule raises an issue for each <code>String::replaceAll</code> used with a <code>String</code> as first parameter which doesn’t contains\nspecial regex character or pattern.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString init = ""Bob is a Bird... Bob is a Plane... Bob is Superman!"";\nString changed = init.replaceAll(""Bob is"", ""It\'s""); // Noncompliant\nchanged = changed.replaceAll(""\\\\.\\\\.\\\\."", "";""); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString init = ""Bob is a Bird... Bob is a Plane... Bob is Superman!"";\nString changed = init.replace(""Bob is"", ""It\'s"");\nchanged = changed.replace(""..."", "";"");\n</pre>\n<p>Or, with a regex:</p>\n<pre>\nString init = ""Bob is a Bird... Bob is a Plane... Bob is Superman!"";\nString changed = init.replaceAll(""\\\\w*\\\\sis"", ""It\'s"");\nchanged = changed.replaceAll(""\\\\.{3}"", "";"");\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\'/coding_rules#rule_key=java%3AS4248\'>S4248</a> - Regex patterns should not be created needlessly </li>\n</ul>'}]",[],['squid:S5361'],,,,
java:S6211,java,Custom getter method should not be used to override record's getter behavior,2023-06-14T03:41:52+0000,"<p>Before records appeared in Java 16, there was a common way to represent getters for private fields of a class:&nbsp; a method named ""get"" with a
capitalized field name. For example, for a&nbsp;<code>String</code> field named ""myField"" the signature of the getter method will be: <code>public
String getMyField()</code></p>
<p>In records, getters are named differently. Getters created by default do not contain the ""get"" prefix. So for a record’s <code>String</code> field
""myField"" the getter method will be: <code>public String myField()</code></p>
<p>This means that if you want to override the default getter behavior it is better to use the method provided by records instead of creating a new
one. Otherwise, this will bring confusion to the users of the record as two getters will be available and even leads to bugs if the behavior is
different from the default one.</p>
<p>This rule raises an issue when a record contains a getter named ""get"" with a capitalized field name that is not behaving the same as the default
one.</p>
<h2>Noncompliant Code Example</h2>
<pre>
record Person(String name, int age) {
    public String getName() { // Noncompliant
        return name.toUpperCase(Locale.ROOT);
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
record Person(String name, int age) {
    @Override
    public String name() { // Compliant
        return name.toUpperCase(Locale.ROOT);
    }
}

record Person(String name, int age) {
    public String getNameUpperCase() { // Compliant
        return name.toUpperCase(Locale.ROOT);
    }
}
record Person(String name, int age) {
    public String getName() { // Compliant, is equivalent to 'name()'
        return name;
    }
}
record Person(String name, int age) {
    @Override
    public String name() { // Compliant
        return name.toUpperCase(Locale.ROOT);
    }
    public String getName() { // Compliant, equal to 'name()'
        return name.toUpperCase(Locale.ROOT);
    }
}
</pre>
<h2>Exceptions</h2>
<p>If the implementations of <code>getMyField()</code> and <code>myField()</code> methods are equivalent, the issue should not be raised as this was
probably done to support compatibility with the previous convention.</p>
<h2>See</h2>
<ul>
  <li> <a href=""https://docs.oracle.com/javase/specs/jls/se16/html/jls-8.html#jls-8.10"">Records specification</a> </li>
</ul>","<p>Before records appeared in Java 16, there was a common way to represent getters for private fields of a class:&nbsp; a method named ""get"" with a
capitalized field name. For example, for a&nbsp;<code>String</code> field named ""myField"" the signature of the getter method will be: <code>public
String getMyField()</code></p>
<p>In records, getters are named differently. Getters created by default do not contain the ""get"" prefix. So for a record’s <code>String</code> field
""myField"" the getter method will be: <code>public String myField()</code></p>
<p>This means that if you want to override the default getter behavior it is better to use the method provided by records instead of creating a new
one. Otherwise, this will bring confusion to the users of the record as two getters will be available and even leads to bugs if the behavior is
different from the default one.</p>
<p>This rule raises an issue when a record contains a getter named ""get"" with a capitalized field name that is not behaving the same as the default
one.</p>
<h2>Noncompliant Code Example</h2>
<pre>
record Person(String name, int age) {
    public String getName() { // Noncompliant
        return name.toUpperCase(Locale.ROOT);
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
record Person(String name, int age) {
    @Override
    public String name() { // Compliant
        return name.toUpperCase(Locale.ROOT);
    }
}

record Person(String name, int age) {
    public String getNameUpperCase() { // Compliant
        return name.toUpperCase(Locale.ROOT);
    }
}
record Person(String name, int age) {
    public String getName() { // Compliant, is equivalent to 'name()'
        return name;
    }
}
record Person(String name, int age) {
    @Override
    public String name() { // Compliant
        return name.toUpperCase(Locale.ROOT);
    }
    public String getName() { // Compliant, equal to 'name()'
        return name.toUpperCase(Locale.ROOT);
    }
}
</pre>
<h2>Exceptions</h2>
<p>If the implementations of <code>getMyField()</code> and <code>myField()</code> methods are equivalent, the issue should not be raised as this was
probably done to support compatibility with the previous convention.</p>
<h2>See</h2>
<ul>
  <li> <a href=""https://docs.oracle.com/javase/specs/jls/se16/html/jls-8.html#jls-8.10"">Records specification</a> </li>
</ul>",MAJOR,READY,False,[],['java16'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,MAIN,False,"[{'key': 'default', 'content': '<p>Before records appeared in Java 16, there was a common way to represent getters for private fields of a class:&nbsp; a method named ""get"" with a\ncapitalized field name. For example, for a&nbsp;<code>String</code> field named ""myField"" the signature of the getter method will be: <code>public\nString getMyField()</code></p>\n<p>In records, getters are named differently. Getters created by default do not contain the ""get"" prefix. So for a record’s <code>String</code> field\n""myField"" the getter method will be: <code>public String myField()</code></p>\n<p>This means that if you want to override the default getter behavior it is better to use the method provided by records instead of creating a new\none. Otherwise, this will bring confusion to the users of the record as two getters will be available and even leads to bugs if the behavior is\ndifferent from the default one.</p>\n<p>This rule raises an issue when a record contains a getter named ""get"" with a capitalized field name that is not behaving the same as the default\none.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nrecord Person(String name, int age) {\n    public String getName() { // Noncompliant\n        return name.toUpperCase(Locale.ROOT);\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nrecord Person(String name, int age) {\n    @Override\n    public String name() { // Compliant\n        return name.toUpperCase(Locale.ROOT);\n    }\n}\n\nrecord Person(String name, int age) {\n    public String getNameUpperCase() { // Compliant\n        return name.toUpperCase(Locale.ROOT);\n    }\n}\nrecord Person(String name, int age) {\n    public String getName() { // Compliant, is equivalent to \'name()\'\n        return name;\n    }\n}\nrecord Person(String name, int age) {\n    @Override\n    public String name() { // Compliant\n        return name.toUpperCase(Locale.ROOT);\n    }\n    public String getName() { // Compliant, equal to \'name()\'\n        return name.toUpperCase(Locale.ROOT);\n    }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>If the implementations of <code>getMyField()</code> and <code>myField()</code> methods are equivalent, the issue should not be raised as this was\nprobably done to support compatibility with the previous convention.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://docs.oracle.com/javase/specs/jls/se16/html/jls-8.html#jls-8.10"">Records specification</a> </li>\n</ul>'}]",[],['squid:S6211'],,,,
java:S4274,java,Asserts should not be used to check the parameters of a public method,2023-06-14T03:41:52+0000,"<p>An <code>assert</code> is inappropriate for parameter validation because assertions can be disabled at runtime in the JVM, meaning that a bad
operational setting would completely eliminate the intended checks. Further, <code>assert</code>s that fail throw <code>AssertionError</code>s, rather
than throwing some type of <code>Exception</code>. Throwing <code>Error</code>s is completely outside of the normal realm of expected
<code>catch</code>/<code>throw</code> behavior in normal programs.</p>
<p>This rule raises an issue when a <code>public</code> method uses one or more of its parameters with <code>assert</code>s.</p>
<h2>Noncompliant Code Example</h2>
<pre>
 public void setPrice(int price) {
  assert price &gt;= 0 &amp;&amp; price &lt;= MAX_PRICE;
  // Set the price
 }
</pre>
<h2>Compliant Solution</h2>
<pre>
 public void setPrice(int price) {
  if (price &lt; 0 || price &gt; MAX_PRICE) {
    throw new IllegalArgumentException(""Invalid price: "" + price);
  }
  // Set the price
 }
</pre>
<h2>See</h2>
<p><a href=""https://docs.oracle.com/javase/7/docs/technotes/guides/language/assert.html"">Programming With Assertions</a></p>","<p>An <code>assert</code> is inappropriate for parameter validation because assertions can be disabled at runtime in the JVM, meaning that a bad
operational setting would completely eliminate the intended checks. Further, <code>assert</code>s that fail throw <code>AssertionError</code>s, rather
than throwing some type of <code>Exception</code>. Throwing <code>Error</code>s is completely outside of the normal realm of expected
<code>catch</code>/<code>throw</code> behavior in normal programs.</p>
<p>This rule raises an issue when a <code>public</code> method uses one or more of its parameters with <code>assert</code>s.</p>
<h2>Noncompliant Code Example</h2>
<pre>
 public void setPrice(int price) {
  assert price &gt;= 0 &amp;&amp; price &lt;= MAX_PRICE;
  // Set the price
 }
</pre>
<h2>Compliant Solution</h2>
<pre>
 public void setPrice(int price) {
  if (price &lt; 0 || price &gt; MAX_PRICE) {
    throw new IllegalArgumentException(""Invalid price: "" + price);
  }
  // Set the price
 }
</pre>
<h2>See</h2>
<p><a href=""https://docs.oracle.com/javase/7/docs/technotes/guides/language/assert.html"">Programming With Assertions</a></p>",MAJOR,READY,False,[],['pitfall'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,MAIN,False,"[{'key': 'default', 'content': '<p>An <code>assert</code> is inappropriate for parameter validation because assertions can be disabled at runtime in the JVM, meaning that a bad\noperational setting would completely eliminate the intended checks. Further, <code>assert</code>s that fail throw <code>AssertionError</code>s, rather\nthan throwing some type of <code>Exception</code>. Throwing <code>Error</code>s is completely outside of the normal realm of expected\n<code>catch</code>/<code>throw</code> behavior in normal programs.</p>\n<p>This rule raises an issue when a <code>public</code> method uses one or more of its parameters with <code>assert</code>s.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n public void setPrice(int price) {\n  assert price &gt;= 0 &amp;&amp; price &lt;= MAX_PRICE;\n  // Set the price\n }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n public void setPrice(int price) {\n  if (price &lt; 0 || price &gt; MAX_PRICE) {\n    throw new IllegalArgumentException(""Invalid price: "" + price);\n  }\n  // Set the price\n }\n</pre>\n<h2>See</h2>\n<p><a href=""https://docs.oracle.com/javase/7/docs/technotes/guides/language/assert.html"">Programming With Assertions</a></p>'}]",[],['squid:S4274'],,,,
java:S6331,java,Regular expressions should not contain empty groups,2023-06-14T03:41:52+0000,"<p>There are several reasons to use a group in a regular expression:</p>
<ul>
  <li> to change the precedence (e.g. <code>do(g|or)</code> will match 'dog' and 'door') </li>
  <li> to remember parenthesised part of the match in the case of capturing group </li>
  <li> to improve readability </li>
</ul>
<p>In any case, having an empty group is most probably a mistake. Either it is a leftover after refactoring and should be removed, or the actual
parentheses were intended and were not escaped.</p>
<h2>Noncompliant Code Example</h2>
<pre>
""foo()""  // Noncompliant, will match only 'foo'
</pre>
<h2>Compliant Solution</h2>
<pre>
""foo\\(\\)""  // Matches 'foo()'
</pre>","<p>There are several reasons to use a group in a regular expression:</p>
<ul>
  <li> to change the precedence (e.g. <code>do(g|or)</code> will match 'dog' and 'door') </li>
  <li> to remember parenthesised part of the match in the case of capturing group </li>
  <li> to improve readability </li>
</ul>
<p>In any case, having an empty group is most probably a mistake. Either it is a leftover after refactoring and should be removed, or the actual
parentheses were intended and were not escaped.</p>
<h2>Noncompliant Code Example</h2>
<pre>
""foo()""  // Noncompliant, will match only 'foo'
</pre>
<h2>Compliant Solution</h2>
<pre>
""foo\\(\\)""  // Matches 'foo()'
</pre>",MAJOR,READY,False,[],['regex'],java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,5min,CONSTANT_ISSUE,5min,False,MAIN,False,"[{'key': 'default', 'content': '<p>There are several reasons to use a group in a regular expression:</p>\n<ul>\n  <li> to change the precedence (e.g. <code>do(g|or)</code> will match \'dog\' and \'door\') </li>\n  <li> to remember parenthesised part of the match in the case of capturing group </li>\n  <li> to improve readability </li>\n</ul>\n<p>In any case, having an empty group is most probably a mistake. Either it is a leftover after refactoring and should be removed, or the actual\nparentheses were intended and were not escaped.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n""foo()""  // Noncompliant, will match only \'foo\'\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n""foo\\\\(\\\\)""  // Matches \'foo()\'\n</pre>'}]",[],['squid:S6331'],,,,
java:S2093,java,Try-with-resources should be used,2023-06-14T03:41:52+0000,"<p>Java 7 introduced the try-with-resources statement, which guarantees that the resource in question will be closed. Since the new syntax is closer
to bullet-proof, it should be preferred over the older <code>try</code>/<code>catch</code>/<code>finally</code> version.</p>
<p>This rule checks that <code>close</code>-able resources are opened in a try-with-resources statement.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project’s <code>sonar.java.source</code> is lower than <code>7</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
FileReader fr = null;
BufferedReader br = null;
try {
  fr = new FileReader(fileName);
  br = new BufferedReader(fr);
  return br.readLine();
} catch (...) {
} finally {
  if (br != null) {
    try {
      br.close();
    } catch(IOException e){...}
  }
  if (fr != null ) {
    try {
      br.close();
    } catch(IOException e){...}
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
try (
    FileReader fr = new FileReader(fileName);
    BufferedReader br = new BufferedReader(fr)
  ) {
  return br.readLine();
}
catch (...) {}
</pre>
<p>or</p>
<pre>
try (BufferedReader br =
        new BufferedReader(new FileReader(fileName))) { // no need to name intermediate resources if you don't want to
  return br.readLine();
}
catch (...) {}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/6DZGBQ"">CERT, ERR54-J.</a> - Use a try-with-resources statement to safely handle closeable
  resources </li>
</ul>","<p>Java 7 introduced the try-with-resources statement, which guarantees that the resource in question will be closed. Since the new syntax is closer
to bullet-proof, it should be preferred over the older <code>try</code>/<code>catch</code>/<code>finally</code> version.</p>
<p>This rule checks that <code>close</code>-able resources are opened in a try-with-resources statement.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project’s <code>sonar.java.source</code> is lower than <code>7</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
FileReader fr = null;
BufferedReader br = null;
try {
  fr = new FileReader(fileName);
  br = new BufferedReader(fr);
  return br.readLine();
} catch (...) {
} finally {
  if (br != null) {
    try {
      br.close();
    } catch(IOException e){...}
  }
  if (fr != null ) {
    try {
      br.close();
    } catch(IOException e){...}
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
try (
    FileReader fr = new FileReader(fileName);
    BufferedReader br = new BufferedReader(fr)
  ) {
  return br.readLine();
}
catch (...) {}
</pre>
<p>or</p>
<pre>
try (BufferedReader br =
        new BufferedReader(new FileReader(fileName))) { // no need to name intermediate resources if you don't want to
  return br.readLine();
}
catch (...) {}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/6DZGBQ"">CERT, ERR54-J.</a> - Use a try-with-resources statement to safely handle closeable
  resources </li>
</ul>",CRITICAL,READY,False,[],"['cert', 'java8', 'pitfall']",java,Java,[],CONSTANT_ISSUE,CONSTANT_ISSUE,CODE_SMELL,CONSTANT_ISSUE,15min,CONSTANT_ISSUE,15min,False,ALL,False,"[{'key': 'default', 'content': '<p>Java 7 introduced the try-with-resources statement, which guarantees that the resource in question will be closed. Since the new syntax is closer\nto bullet-proof, it should be preferred over the older <code>try</code>/<code>catch</code>/<code>finally</code> version.</p>\n<p>This rule checks that <code>close</code>-able resources are opened in a try-with-resources statement.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project’s <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nFileReader fr = null;\nBufferedReader br = null;\ntry {\n  fr = new FileReader(fileName);\n  br = new BufferedReader(fr);\n  return br.readLine();\n} catch (...) {\n} finally {\n  if (br != null) {\n    try {\n      br.close();\n    } catch(IOException e){...}\n  }\n  if (fr != null ) {\n    try {\n      br.close();\n    } catch(IOException e){...}\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry (\n    FileReader fr = new FileReader(fileName);\n    BufferedReader br = new BufferedReader(fr)\n  ) {\n  return br.readLine();\n}\ncatch (...) {}\n</pre>\n<p>or</p>\n<pre>\ntry (BufferedReader br =\n        new BufferedReader(new FileReader(fileName))) { // no need to name intermediate resources if you don\'t want to\n  return br.readLine();\n}\ncatch (...) {}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/6DZGBQ"">CERT, ERR54-J.</a> - Use a try-with-resources statement to safely handle closeable\n  resources </li>\n</ul>'}]",[],['squid:S2093'],,,,
